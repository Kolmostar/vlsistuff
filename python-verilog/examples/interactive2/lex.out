module module 1 6
dbguart token 1 14
( ( 1 16
input input 2 10
clk token 2 14
, , 3 5
input input 3 10
resetn token 3 17
, , 4 5
input input 4 10
rxd token 4 14
, , 5 5
output output 5 11
txd token 5 15
, , 7 5
output output 7 11
[ [ 7 13
13 number 7 15
: : 7 16
0 number 7 17
] ] 7 18
ram_addr token 7 27
, , 8 5
input input 8 10
[ [ 8 12
47 number 8 14
: : 8 15
0 number 8 16
] ] 8 17
ram_rdata token 8 28
, , 9 5
output output 9 11
[ [ 9 13
47 number 9 15
: : 9 16
0 number 9 17
] ] 9 18
ram_wdata token 9 29
, , 10 5
output output 10 11
ram_read token 10 20
, , 11 5
output output 11 11
ram_write token 11 21
) ) 13 1
; ; 13 2
parameter parameter 16 9
DOTS_CHAR token 16 19
= = 16 21
58 number 16 24
; ; 16 25
parameter parameter 17 9
CRLF token 17 14
= = 17 16
10 number 17 19
; ; 17 20
parameter parameter 18 9
DOT_CHAR token 18 18
= = 18 20
8'h2e uhex 18 22
; ; 18 27
parameter parameter 19 9
EQ_CHAR token 19 17
= = 19 19
8'h3d uhex 19 21
; ; 19 26
parameter parameter 20 9
GT_CHAR token 20 17
= = 20 19
8'h3e uhex 20 21
; ; 20 26
parameter parameter 21 9
PLUS_CHAR token 21 19
= = 21 21
8'h2b uhex 21 23
; ; 21 28
parameter parameter 22 9
QUESTION_CHAR token 22 23
= = 22 25
8'h3f uhex 22 27
; ; 22 32
parameter parameter 24 9
D_CHAR token 24 16
= = 24 18
8'h44 uhex 24 20
; ; 24 25
parameter parameter 25 9
B_CHAR token 25 16
= = 25 18
8'h42 uhex 25 20
; ; 25 25
parameter parameter 26 9
G_CHAR token 26 16
= = 26 18
8'h47 uhex 26 20
; ; 26 25
parameter parameter 27 9
ZERO_CHAR token 27 19
= = 27 21
8'h30 uhex 27 23
; ; 27 28
reg reg 30 3
write_tx token 30 12
; ; 30 13
wire wire 31 4
rx_valid token 31 13
; ; 31 14
wire wire 32 4
tx_empty token 32 13
; ; 32 14
wire wire 35 4
[ [ 35 6
7 number 35 7
: : 35 8
0 number 35 9
] ] 35 10
txdata token 35 17
, , 35 18
rxdata token 35 24
, , 35 25
status token 35 31
, , 35 32
control token 35 39
; ; 35 40
wire wire 36 4
[ [ 36 6
15 number 36 8
: : 36 9
0 number 36 10
] ] 36 11
baudrate token 36 20
; ; 36 21
uartx2 token 38 6
uartx2 token 38 13
( ( 38 15
. . 39 4
clk token 39 7
( ( 39 8
clk token 39 11
) ) 39 12
, , 40 3
. . 40 4
nreset token 40 10
( ( 40 11
resetn token 40 17
) ) 40 18
, , 41 3
. . 41 4
txd token 41 7
( ( 41 8
txd token 41 11
) ) 41 12
, , 42 3
. . 42 4
rxd token 42 7
( ( 42 8
rxd token 42 11
) ) 42 12
, , 44 3
. . 44 4
control token 44 11
( ( 44 12
control token 44 19
[ [ 44 20
7 number 44 21
: : 44 22
0 number 44 23
] ] 44 24
) ) 44 25
, , 45 3
. . 45 4
write_tx token 45 12
( ( 45 13
write_tx token 45 21
) ) 45 22
, , 46 3
. . 46 4
read_rx token 46 11
( ( 46 12
rx_valid token 46 20
) ) 46 21
, , 47 3
. . 47 4
rxdata token 47 10
( ( 47 11
rxdata token 47 17
[ [ 47 18
7 number 47 19
: : 47 20
0 number 47 21
] ] 47 22
) ) 47 23
, , 48 3
. . 48 4
txdata token 48 10
( ( 48 11
txdata token 48 17
[ [ 48 18
7 number 48 19
: : 48 20
0 number 48 21
] ] 48 22
) ) 48 23
, , 49 3
. . 49 4
tx_empty token 49 12
( ( 49 13
tx_empty token 49 21
) ) 49 22
, , 50 3
. . 50 4
status token 50 10
( ( 50 11
status token 50 17
[ [ 50 18
7 number 50 19
: : 50 20
0 number 50 21
] ] 50 22
) ) 50 23
, , 51 3
. . 51 4
baudrate token 51 12
( ( 51 13
baudrate token 51 21
[ [ 51 22
15 number 51 24
: : 51 25
0 number 51 26
] ] 51 27
) ) 51 28
, , 52 3
. . 52 4
rx_valid token 52 12
( ( 52 13
rx_valid token 52 21
) ) 52 22
) ) 53 1
; ; 53 2
reg reg 56 3
[ [ 56 5
7 number 56 6
: : 56 7
0 number 56 8
] ] 56 9
rxfifo token 56 16
[ [ 56 18
0 number 56 19
: : 56 20
17 number 56 22
] ] 56 23
; ; 56 24
wire wire 57 4
[ [ 57 6
7 number 57 7
: : 57 8
0 number 57 9
] ] 57 10
rxfifo0 token 57 18
= = 57 20
rxfifo token 57 27
[ [ 57 28
0 number 57 29
] ] 57 30
; ; 57 31
wire wire 58 4
[ [ 58 6
7 number 58 7
: : 58 8
0 number 58 9
] ] 58 10
rxfifo1 token 58 18
= = 58 20
rxfifo token 58 27
[ [ 58 28
1 number 58 29
] ] 58 30
; ; 58 31
wire wire 59 4
[ [ 59 6
7 number 59 7
: : 59 8
0 number 59 9
] ] 59 10
rxfifo2 token 59 18
= = 59 20
rxfifo token 59 27
[ [ 59 28
2 number 59 29
] ] 59 30
; ; 59 31
wire wire 60 4
[ [ 60 6
7 number 60 7
: : 60 8
0 number 60 9
] ] 60 10
rxfifo3 token 60 18
= = 60 20
rxfifo token 60 27
[ [ 60 28
3 number 60 29
] ] 60 30
; ; 60 31
reg reg 61 3
command_pulse token 61 17
; ; 61 18
always always 62 6
@ @ 62 8
( ( 62 9
posedge posedge 62 16
clk token 62 20
) ) 62 21
begin begin 62 27
command_pulse token 63 17
<= sm_eq 63 20
rx_valid token 63 29
; ; 63 30
if if 64 6
( ( 64 8
rx_valid token 64 16
) ) 64 17
begin begin 64 23
rxfifo token 65 14
[ [ 65 15
0 number 65 16
] ] 65 17
<= sm_eq 65 19
rxdata token 65 25
; ; 65 26
rxfifo token 66 14
[ [ 66 15
1 number 66 16
] ] 66 17
<= sm_eq 66 19
rxfifo token 66 25
[ [ 66 26
0 number 66 27
] ] 66 28
; ; 66 29
rxfifo token 67 14
[ [ 67 15
2 number 67 16
] ] 67 17
<= sm_eq 67 19
rxfifo token 67 25
[ [ 67 26
1 number 67 27
] ] 67 28
; ; 67 29
rxfifo token 68 14
[ [ 68 15
3 number 68 16
] ] 68 17
<= sm_eq 68 19
rxfifo token 68 25
[ [ 68 26
2 number 68 27
] ] 68 28
; ; 68 29
rxfifo token 69 14
[ [ 69 15
4 number 69 16
] ] 69 17
<= sm_eq 69 19
rxfifo token 69 25
[ [ 69 26
3 number 69 27
] ] 69 28
; ; 69 29
rxfifo token 70 14
[ [ 70 15
5 number 70 16
] ] 70 17
<= sm_eq 70 19
rxfifo token 70 25
[ [ 70 26
4 number 70 27
] ] 70 28
; ; 70 29
rxfifo token 71 14
[ [ 71 15
6 number 71 16
] ] 71 17
<= sm_eq 71 19
rxfifo token 71 25
[ [ 71 26
5 number 71 27
] ] 71 28
; ; 71 29
rxfifo token 72 14
[ [ 72 15
7 number 72 16
] ] 72 17
<= sm_eq 72 19
rxfifo token 72 25
[ [ 72 26
6 number 72 27
] ] 72 28
; ; 72 29
rxfifo token 73 14
[ [ 73 15
8 number 73 16
] ] 73 17
<= sm_eq 73 19
rxfifo token 73 25
[ [ 73 26
7 number 73 27
] ] 73 28
; ; 73 29
rxfifo token 74 14
[ [ 74 15
9 number 74 16
] ] 74 17
<= sm_eq 74 19
rxfifo token 74 25
[ [ 74 26
8 number 74 27
] ] 74 28
; ; 74 29
rxfifo token 75 14
[ [ 75 15
10 number 75 17
] ] 75 18
<= sm_eq 75 20
rxfifo token 75 26
[ [ 75 27
9 number 75 28
] ] 75 29
; ; 75 30
rxfifo token 76 14
[ [ 76 15
11 number 76 17
] ] 76 18
<= sm_eq 76 20
rxfifo token 76 26
[ [ 76 27
10 number 76 29
] ] 76 30
; ; 76 31
rxfifo token 77 14
[ [ 77 15
12 number 77 17
] ] 77 18
<= sm_eq 77 20
rxfifo token 77 26
[ [ 77 27
11 number 77 29
] ] 77 30
; ; 77 31
rxfifo token 78 14
[ [ 78 15
13 number 78 17
] ] 78 18
<= sm_eq 78 20
rxfifo token 78 26
[ [ 78 27
12 number 78 29
] ] 78 30
; ; 78 31
rxfifo token 79 14
[ [ 79 15
14 number 79 17
] ] 79 18
<= sm_eq 79 20
rxfifo token 79 26
[ [ 79 27
13 number 79 29
] ] 79 30
; ; 79 31
rxfifo token 80 14
[ [ 80 15
15 number 80 17
] ] 80 18
<= sm_eq 80 20
rxfifo token 80 26
[ [ 80 27
14 number 80 29
] ] 80 30
; ; 80 31
rxfifo token 81 14
[ [ 81 15
16 number 81 17
] ] 81 18
<= sm_eq 81 20
rxfifo token 81 26
[ [ 81 27
15 number 81 29
] ] 81 30
; ; 81 31
rxfifo token 82 14
[ [ 82 15
17 number 82 17
] ] 82 18
<= sm_eq 82 20
rxfifo token 82 26
[ [ 82 27
16 number 82 29
] ] 82 30
; ; 82 31
end end 83 7
end end 84 3
wire wire 87 4
question_valid token 87 19
= = 87 21
( ( 87 23
rxfifo token 87 29
[ [ 87 30
1 number 87 31
] ] 87 32
== eq_eq 87 34
QUESTION_CHAR token 87 47
) ) 87 48
&& and_and 87 50
( ( 87 51
rxfifo token 87 57
[ [ 87 58
0 number 87 59
] ] 87 60
== eq_eq 87 62
DOT_CHAR token 87 70
) ) 87 71
&& and_and 87 74
command_pulse token 87 88
; ; 87 89
wire wire 88 4
read_command_valid token 88 23
= = 88 25
( ( 88 27
rxfifo token 88 33
[ [ 88 34
5 number 88 35
] ] 88 36
== eq_eq 88 38
DOTS_CHAR token 88 47
) ) 88 48
&& and_and 88 50
( ( 88 51
rxfifo token 88 57
[ [ 88 58
0 number 88 59
] ] 88 60
== eq_eq 88 62
DOT_CHAR token 88 70
) ) 88 71
&& and_and 88 74
command_pulse token 88 88
&& and_and 89 6
hexchar token 89 13
( ( 89 14
rxfifo token 89 20
[ [ 89 21
1 number 89 22
] ] 89 23
) ) 89 24
&& and_and 90 6
hexchar token 90 13
( ( 90 14
rxfifo token 90 20
[ [ 90 21
2 number 90 22
] ] 90 23
) ) 90 24
&& and_and 91 6
hexchar token 91 13
( ( 91 14
rxfifo token 91 20
[ [ 91 21
3 number 91 22
] ] 91 23
) ) 91 24
&& and_and 92 6
hexchar token 92 13
( ( 92 14
rxfifo token 92 20
[ [ 92 21
4 number 92 22
] ] 92 23
) ) 92 24
; ; 93 5
wire wire 95 4
long_read_command_valid token 95 28
= = 95 30
( ( 95 32
rxfifo token 95 38
[ [ 95 39
7 number 95 40
] ] 95 41
== eq_eq 95 43
DOTS_CHAR token 95 52
) ) 95 53
&& and_and 95 55
( ( 95 56
rxfifo token 95 62
[ [ 95 63
0 number 95 64
] ] 95 65
== eq_eq 95 67
DOT_CHAR token 95 75
) ) 95 76
&& and_and 95 79
command_pulse token 95 93
&& and_and 96 6
hexchar token 96 13
( ( 96 14
rxfifo token 96 20
[ [ 96 21
1 number 96 22
] ] 96 23
) ) 96 24
&& and_and 97 6
hexchar token 97 13
( ( 97 14
rxfifo token 97 20
[ [ 97 21
2 number 97 22
] ] 97 23
) ) 97 24
&& and_and 98 6
hexchar token 98 13
( ( 98 14
rxfifo token 98 20
[ [ 98 21
3 number 98 22
] ] 98 23
) ) 98 24
&& and_and 99 6
hexchar token 99 13
( ( 99 14
rxfifo token 99 20
[ [ 99 21
4 number 99 22
] ] 99 23
) ) 99 24
&& and_and 100 6
hexchar token 100 13
( ( 100 14
rxfifo token 100 20
[ [ 100 21
5 number 100 22
] ] 100 23
) ) 100 24
&& and_and 101 6
hexchar token 101 13
( ( 101 14
rxfifo token 101 20
[ [ 101 21
6 number 101 22
] ] 101 23
) ) 101 24
; ; 102 5
wire wire 106 4
write_regs_command_valid token 106 29
= = 106 31
( ( 106 33
rxfifo token 106 39
[ [ 106 40
13 number 106 42
] ] 106 43
== eq_eq 106 45
EQ_CHAR token 106 52
) ) 106 53
&& and_and 106 55
( ( 106 56
rxfifo token 106 62
[ [ 106 63
0 number 106 64
] ] 106 65
== eq_eq 106 67
DOT_CHAR token 106 75
) ) 106 76
&& and_and 106 79
command_pulse token 106 93
&& and_and 107 6
hexchar token 107 13
( ( 107 14
rxfifo token 107 20
[ [ 107 21
1 number 107 22
] ] 107 23
) ) 107 24
&& and_and 108 6
hexchar token 108 13
( ( 108 14
rxfifo token 108 20
[ [ 108 21
2 number 108 22
] ] 108 23
) ) 108 24
&& and_and 109 6
hexchar token 109 13
( ( 109 14
rxfifo token 109 20
[ [ 109 21
3 number 109 22
] ] 109 23
) ) 109 24
&& and_and 110 6
hexchar token 110 13
( ( 110 14
rxfifo token 110 20
[ [ 110 21
4 number 110 22
] ] 110 23
) ) 110 24
&& and_and 111 6
hexchar token 111 13
( ( 111 14
rxfifo token 111 20
[ [ 111 21
5 number 111 22
] ] 111 23
) ) 111 24
&& and_and 112 6
hexchar token 112 13
( ( 112 14
rxfifo token 112 20
[ [ 112 21
6 number 112 22
] ] 112 23
) ) 112 24
&& and_and 113 6
hexchar token 113 13
( ( 113 14
rxfifo token 113 20
[ [ 113 21
7 number 113 22
] ] 113 23
) ) 113 24
&& and_and 114 6
hexchar token 114 13
( ( 114 14
rxfifo token 114 20
[ [ 114 21
8 number 114 22
] ] 114 23
) ) 114 24
&& and_and 115 6
hexchar token 115 13
( ( 115 14
rxfifo token 115 20
[ [ 115 21
9 number 115 22
] ] 115 23
) ) 115 24
&& and_and 116 6
hexchar token 116 13
( ( 116 14
rxfifo token 116 20
[ [ 116 21
10 number 116 23
] ] 116 24
) ) 116 25
&& and_and 117 6
hexchar token 117 13
( ( 117 14
rxfifo token 117 20
[ [ 117 21
11 number 117 23
] ] 117 24
) ) 117 25
&& and_and 118 6
hexchar token 118 13
( ( 118 14
rxfifo token 118 20
[ [ 118 21
12 number 118 23
] ] 118 24
) ) 118 25
; ; 119 5
wire wire 122 4
write_mem_command_valid token 122 28
= = 122 30
( ( 122 32
rxfifo token 122 38
[ [ 122 39
17 number 122 41
] ] 122 42
== eq_eq 122 44
GT_CHAR token 122 51
) ) 122 52
&& and_and 122 54
( ( 122 55
rxfifo token 122 61
[ [ 122 62
0 number 122 63
] ] 122 64
== eq_eq 122 66
DOT_CHAR token 122 74
) ) 122 75
&& and_and 122 78
command_pulse token 122 92
&& and_and 123 6
hexchar token 123 13
( ( 123 14
rxfifo token 123 20
[ [ 123 21
1 number 123 22
] ] 123 23
) ) 123 24
&& and_and 124 6
hexchar token 124 13
( ( 124 14
rxfifo token 124 20
[ [ 124 21
2 number 124 22
] ] 124 23
) ) 124 24
&& and_and 125 6
hexchar token 125 13
( ( 125 14
rxfifo token 125 20
[ [ 125 21
3 number 125 22
] ] 125 23
) ) 125 24
&& and_and 126 6
hexchar token 126 13
( ( 126 14
rxfifo token 126 20
[ [ 126 21
4 number 126 22
] ] 126 23
) ) 126 24
&& and_and 127 6
hexchar token 127 13
( ( 127 14
rxfifo token 127 20
[ [ 127 21
5 number 127 22
] ] 127 23
) ) 127 24
&& and_and 128 6
hexchar token 128 13
( ( 128 14
rxfifo token 128 20
[ [ 128 21
6 number 128 22
] ] 128 23
) ) 128 24
&& and_and 129 6
hexchar token 129 13
( ( 129 14
rxfifo token 129 20
[ [ 129 21
7 number 129 22
] ] 129 23
) ) 129 24
&& and_and 130 6
hexchar token 130 13
( ( 130 14
rxfifo token 130 20
[ [ 130 21
8 number 130 22
] ] 130 23
) ) 130 24
&& and_and 131 6
hexchar token 131 13
( ( 131 14
rxfifo token 131 20
[ [ 131 21
9 number 131 22
] ] 131 23
) ) 131 24
&& and_and 132 6
hexchar token 132 13
( ( 132 14
rxfifo token 132 20
[ [ 132 21
10 number 132 23
] ] 132 24
) ) 132 25
&& and_and 133 6
hexchar token 133 13
( ( 133 14
rxfifo token 133 20
[ [ 133 21
11 number 133 23
] ] 133 24
) ) 133 25
&& and_and 134 6
hexchar token 134 13
( ( 134 14
rxfifo token 134 20
[ [ 134 21
12 number 134 23
] ] 134 24
) ) 134 25
&& and_and 135 6
hexchar token 135 13
( ( 135 14
rxfifo token 135 20
[ [ 135 21
13 number 135 23
] ] 135 24
) ) 135 25
&& and_and 136 6
hexchar token 136 13
( ( 136 14
rxfifo token 136 20
[ [ 136 21
14 number 136 23
] ] 136 24
) ) 136 25
&& and_and 137 6
hexchar token 137 13
( ( 137 14
rxfifo token 137 20
[ [ 137 21
15 number 137 23
] ] 137 24
) ) 137 25
&& and_and 138 6
hexchar token 138 13
( ( 138 14
rxfifo token 138 20
[ [ 138 21
16 number 138 23
] ] 138 24
) ) 138 25
; ; 139 5
wire wire 145 4
[ [ 145 6
15 number 145 8
: : 145 9
0 number 145 10
] ] 145 11
helper0 token 145 19
= = 145 21
{ { 145 22
hexval token 145 29
( ( 145 30
rxfifo token 145 36
[ [ 145 37
7 number 145 38
] ] 145 39
) ) 145 40
, , 145 41
hexval token 145 47
( ( 145 48
rxfifo token 145 54
[ [ 145 55
6 number 145 56
] ] 145 57
) ) 145 58
, , 145 59
hexval token 145 65
( ( 145 66
rxfifo token 145 72
[ [ 145 73
5 number 145 74
] ] 145 75
) ) 145 76
, , 145 77
hexval token 145 83
( ( 145 84
rxfifo token 145 90
[ [ 145 91
4 number 145 92
] ] 145 93
) ) 145 94
} } 145 95
; ; 145 96
wire wire 146 4
[ [ 146 6
15 number 146 8
: : 146 9
0 number 146 10
] ] 146 11
read_addr token 146 21
= = 146 23
{ { 146 24
hexval token 146 31
( ( 146 32
rxfifo token 146 38
[ [ 146 39
4 number 146 40
] ] 146 41
) ) 146 42
, , 146 43
hexval token 146 49
( ( 146 50
rxfifo token 146 56
[ [ 146 57
3 number 146 58
] ] 146 59
) ) 146 60
, , 146 61
hexval token 146 67
( ( 146 68
rxfifo token 146 74
[ [ 146 75
2 number 146 76
] ] 146 77
) ) 146 78
, , 146 79
hexval token 146 85
( ( 146 86
rxfifo token 146 92
[ [ 146 93
1 number 146 94
] ] 146 95
) ) 146 96
} } 146 97
; ; 146 98
wire wire 147 4
[ [ 147 6
15 number 147 8
: : 147 9
0 number 147 10
] ] 147 11
long_read_addr token 147 26
= = 147 28
{ { 147 29
hexval token 147 36
( ( 147 37
rxfifo token 147 43
[ [ 147 44
6 number 147 45
] ] 147 46
) ) 147 47
, , 147 48
hexval token 147 54
( ( 147 55
rxfifo token 147 61
[ [ 147 62
5 number 147 63
] ] 147 64
) ) 147 65
, , 147 66
hexval token 147 72
( ( 147 73
rxfifo token 147 79
[ [ 147 80
4 number 147 81
] ] 147 82
) ) 147 83
, , 147 84
hexval token 147 90
( ( 147 91
rxfifo token 147 97
[ [ 147 98
3 number 147 99
] ] 147 100
) ) 147 101
} } 147 102
; ; 147 103
wire wire 148 4
[ [ 148 6
7 number 148 7
: : 148 8
0 number 148 9
] ] 148 10
long_count_read token 148 26
= = 148 28
{ { 148 31
hexval token 148 38
( ( 148 39
rxfifo token 148 45
[ [ 148 46
2 number 148 47
] ] 148 48
) ) 148 49
, , 148 50
hexval token 148 56
( ( 148 57
rxfifo token 148 63
[ [ 148 64
1 number 148 65
] ] 148 66
) ) 148 67
} } 148 68
; ; 148 69
wire wire 149 4
[ [ 149 6
15 number 149 8
: : 149 9
0 number 149 10
] ] 149 11
regs_wr_addr token 149 24
= = 149 26
{ { 149 28
hexval token 149 35
( ( 149 36
rxfifo token 149 42
[ [ 149 43
12 number 149 45
] ] 149 46
) ) 149 47
, , 149 48
hexval token 149 54
( ( 149 55
rxfifo token 149 61
[ [ 149 62
11 number 149 64
] ] 149 65
) ) 149 66
, , 149 67
hexval token 149 73
( ( 149 74
rxfifo token 149 80
[ [ 149 81
10 number 149 83
] ] 149 84
) ) 149 85
, , 149 86
hexval token 149 92
( ( 149 93
rxfifo token 149 99
[ [ 149 100
9 number 149 101
] ] 149 102
) ) 149 103
} } 149 104
; ; 149 105
wire wire 150 4
[ [ 150 6
15 number 150 8
: : 150 9
0 number 150 10
] ] 150 11
mem_wr_addr token 150 23
= = 150 25
{ { 150 27
hexval token 150 34
( ( 150 35
rxfifo token 150 41
[ [ 150 42
16 number 150 44
] ] 150 45
) ) 150 46
, , 150 47
hexval token 150 53
( ( 150 54
rxfifo token 150 60
[ [ 150 61
15 number 150 63
] ] 150 64
) ) 150 65
, , 150 66
hexval token 150 72
( ( 150 73
rxfifo token 150 79
[ [ 150 80
14 number 150 82
] ] 150 83
) ) 150 84
, , 150 85
hexval token 150 91
( ( 150 92
rxfifo token 150 98
[ [ 150 99
13 number 150 101
] ] 150 102
) ) 150 103
} } 150 104
; ; 150 105
wire wire 151 4
[ [ 151 6
31 number 151 8
: : 151 9
0 number 151 10
] ] 151 11
pwdata token 151 18
= = 151 20
{ { 152 10
hexval token 153 17
( ( 153 18
rxfifo token 153 24
[ [ 153 25
8 number 153 26
] ] 153 27
) ) 153 28
, , 153 29
hexval token 153 35
( ( 153 36
rxfifo token 153 42
[ [ 153 43
7 number 153 44
] ] 153 45
) ) 153 46
, , 153 47
hexval token 153 53
( ( 153 54
rxfifo token 153 60
[ [ 153 61
6 number 153 62
] ] 153 63
) ) 153 64
, , 153 65
hexval token 153 71
( ( 153 72
rxfifo token 153 78
[ [ 153 79
5 number 153 80
] ] 153 81
) ) 153 82
, , 154 12
hexval token 154 18
( ( 154 19
rxfifo token 154 25
[ [ 154 26
4 number 154 27
] ] 154 28
) ) 154 29
, , 154 30
hexval token 154 36
( ( 154 37
rxfifo token 154 43
[ [ 154 44
3 number 154 45
] ] 154 46
) ) 154 47
, , 154 48
hexval token 154 54
( ( 154 55
rxfifo token 154 61
[ [ 154 62
2 number 154 63
] ] 154 64
) ) 154 65
, , 154 66
hexval token 154 72
( ( 154 73
rxfifo token 154 79
[ [ 154 80
1 number 154 81
] ] 154 82
) ) 154 83
} } 155 10
; ; 155 11
assign assign 156 6
ram_wdata token 156 16
= = 156 18
{ { 157 10
hexval token 158 17
( ( 158 18
rxfifo token 158 24
[ [ 158 25
12 number 158 27
] ] 158 28
) ) 158 29
, , 158 30
hexval token 158 36
( ( 158 37
rxfifo token 158 43
[ [ 158 44
11 number 158 46
] ] 158 47
) ) 158 48
, , 158 49
hexval token 158 55
( ( 158 56
rxfifo token 158 62
[ [ 158 63
10 number 158 65
] ] 158 66
) ) 158 67
, , 158 68
hexval token 158 74
( ( 158 75
rxfifo token 158 81
[ [ 158 82
9 number 158 83
] ] 158 84
) ) 158 85
, , 159 12
hexval token 159 18
( ( 159 19
rxfifo token 159 25
[ [ 159 26
8 number 159 27
] ] 159 28
) ) 159 29
, , 159 30
hexval token 159 36
( ( 159 37
rxfifo token 159 43
[ [ 159 44
7 number 159 45
] ] 159 46
) ) 159 47
, , 159 48
hexval token 159 54
( ( 159 55
rxfifo token 159 61
[ [ 159 62
6 number 159 63
] ] 159 64
) ) 159 65
, , 159 66
hexval token 159 72
( ( 159 73
rxfifo token 159 79
[ [ 159 80
5 number 159 81
] ] 159 82
) ) 159 83
, , 160 12
hexval token 160 18
( ( 160 19
rxfifo token 160 25
[ [ 160 26
4 number 160 27
] ] 160 28
) ) 160 29
, , 160 30
hexval token 160 36
( ( 160 37
rxfifo token 160 43
[ [ 160 44
3 number 160 45
] ] 160 46
) ) 160 47
, , 160 48
hexval token 160 54
( ( 160 55
rxfifo token 160 61
[ [ 160 62
2 number 160 63
] ] 160 64
) ) 160 65
, , 160 66
hexval token 160 72
( ( 160 73
rxfifo token 160 79
[ [ 160 80
1 number 160 81
] ] 160 82
) ) 160 83
} } 161 10
; ; 161 11
wire wire 163 4
[ [ 163 6
15 number 163 8
: : 163 9
0 number 163 10
] ] 163 11
enables token 163 19
; ; 163 20
reg reg 164 3
[ [ 164 5
11 number 164 7
: : 164 8
0 number 164 9
] ] 164 10
keep_alive_count token 164 27
; ; 164 28
always always 165 6
@ @ 165 8
( ( 165 9
posedge posedge 165 16
clk token 165 20
or or 165 23
negedge negedge 165 31
resetn token 165 38
) ) 165 39
begin begin 165 45
if if 166 6
( ( 166 8
! ! 166 9
resetn token 166 15
) ) 166 16
begin begin 166 22
keep_alive_count token 167 24
<= sm_eq 167 26
1 number 167 27
; ; 167 28
end end 168 7
else else 168 12
if if 168 15
( ( 168 17
! ! 168 18
enables token 168 25
[ [ 168 26
0 number 168 27
] ] 168 28
) ) 168 29
begin begin 168 35
keep_alive_count token 169 24
<= sm_eq 169 26
keep_alive_count token 169 42
+ + 169 43
1 number 169 44
; ; 169 45
end end 170 7
else else 170 12
begin begin 170 18
keep_alive_count token 171 24
<= sm_eq 171 26
1 number 171 27
; ; 171 28
end end 172 7
end end 173 3
wire wire 174 4
keep_alive token 174 15
= = 174 17
keep_alive_count token 174 34
== eq_eq 174 36
0 number 174 37
; ; 174 38
reg reg 178 3
[ [ 178 5
7 number 178 6
: : 178 7
0 number 178 8
] ] 178 9
txfifo token 178 16
[ [ 178 18
0 number 178 19
: : 178 20
17 number 178 22
] ] 178 23
; ; 178 24
reg reg 179 3
[ [ 179 5
4 number 179 6
: : 179 7
0 number 179 8
] ] 179 9
txptr token 179 15
; ; 179 16
reg reg 180 3
txactive token 180 12
; ; 180 13
reg reg 181 3
add_crlf token 181 12
; ; 181 13
assign assign 182 6
txdata token 182 13
= = 182 15
( ( 182 17
! ! 182 18
txactive token 182 26
&& and_and 182 29
write_tx token 182 38
) ) 182 39
? ? 182 41
rxfifo token 182 48
[ [ 182 49
0 number 182 50
] ] 182 51
: : 182 53
add_crlf token 182 62
? ? 182 64
CRLF token 182 69
: : 182 71
txfifo token 182 78
[ [ 182 79
txptr token 182 84
] ] 182 85
; ; 182 86
wire wire 183 4
txstart_pread token 183 18
; ; 183 19
reg reg 185 3
txactive0 token 185 13
; ; 185 14
always always 186 6
@ @ 186 8
( ( 186 9
posedge posedge 186 16
clk token 186 20
or or 186 23
negedge negedge 186 31
resetn token 186 38
) ) 186 39
begin begin 186 45
if if 187 6
( ( 187 8
! ! 187 9
resetn token 187 15
) ) 187 16
begin begin 187 22
txptr token 188 13
<= sm_eq 188 15
0 number 188 16
; ; 188 17
txactive token 189 16
<= sm_eq 189 18
0 number 189 19
; ; 189 20
txactive0 token 190 17
<= sm_eq 190 19
0 number 190 20
; ; 190 21
write_tx token 191 16
<= sm_eq 191 18
0 number 191 19
; ; 191 20
add_crlf token 192 14
<= sm_eq 192 16
0 number 192 17
; ; 192 18
end end 193 7
else else 193 12
begin begin 193 18
txactive token 194 16
<= sm_eq 194 19
txactive0 token 194 29
; ; 194 30
if if 195 10
( ( 195 12
! ! 195 13
txactive token 195 21
) ) 195 22
begin begin 195 28
write_tx token 196 20
<= sm_eq 196 22
command_pulse token 196 35
; ; 196 36
if if 197 14
( ( 197 16
txstart_pread token 197 29
) ) 197 30
begin begin 197 36
txptr token 198 21
<= sm_eq 198 23
0 number 198 24
; ; 198 25
txactive0 token 199 25
<= sm_eq 199 27
1 number 199 28
; ; 199 29
end end 200 15
end end 201 11
else else 201 16
begin begin 201 22
if if 202 14
( ( 202 16
write_tx token 202 24
) ) 202 25
begin begin 202 31
write_tx token 203 24
<= sm_eq 203 26
0 number 203 27
; ; 203 28
txptr token 204 21
<= sm_eq 204 23
txptr token 204 28
+ + 204 29
1 number 204 30
; ; 204 31
if if 205 18
( ( 205 20
add_crlf token 205 28
) ) 205 29
begin begin 205 35
add_crlf token 206 28
<= sm_eq 206 30
0 number 206 31
; ; 206 32
txactive0 token 207 29
<= sm_eq 207 31
0 number 207 32
; ; 207 33
end end 208 19
end end 209 15
else else 209 20
if if 209 23
( ( 209 25
( ( 209 26
txptr token 209 31
== eq_eq 209 33
18 number 209 35
) ) 209 36
|| or_or 209 38
( ( 209 39
txfifo token 209 45
[ [ 209 46
txptr token 209 51
] ] 209 52
== eq_eq 209 54
0 number 209 55
) ) 209 56
) ) 209 57
begin begin 209 63
add_crlf token 210 24
<= sm_eq 210 26
1 number 210 27
; ; 210 28
txptr token 211 21
<= sm_eq 211 23
0 number 211 24
; ; 211 25
end end 212 15
else else 212 20
if if 212 23
( ( 212 25
tx_empty token 212 33
) ) 212 34
begin begin 212 40
write_tx token 213 24
<= sm_eq 213 26
1 number 213 27
; ; 213 28
end end 214 15
end end 215 11
end end 216 7
end end 217 3
wire wire 219 4
[ [ 219 6
31 number 219 8
: : 219 9
0 number 219 10
] ] 219 11
prdata token 219 18
; ; 219 19
wire wire 220 4
penable token 220 12
= = 220 13
1 number 220 14
; ; 220 15
wire wire 221 4
psel token 221 9
, , 221 10
pwrite token 221 16
; ; 221 17
reg reg 222 3
[ [ 222 5
15 number 222 7
: : 222 8
0 number 222 9
] ] 222 10
paddr token 222 16
; ; 222 17
reg reg 224 3
[ [ 224 5
3 number 224 6
: : 224 7
0 number 224 8
] ] 224 9
reading_sm token 224 20
; ; 224 21
reg reg 225 3
[ [ 225 5
3 number 225 6
: : 225 7
0 number 225 8
] ] 225 9
long_reading_sm token 225 25
; ; 225 26
reg reg 226 3
[ [ 226 5
3 number 226 6
: : 226 7
0 number 226 8
] ] 226 9
writing_sm token 226 20
; ; 226 21
reg reg 227 3
[ [ 227 5
7 number 227 6
: : 227 7
0 number 227 8
] ] 227 9
long_count token 227 20
; ; 227 21
assign assign 228 6
pwrite token 228 13
= = 228 15
( ( 228 17
writing_sm token 228 27
== eq_eq 228 29
1 number 228 30
) ) 228 31
; ; 228 32
assign assign 229 6
ram_write token 229 16
= = 229 18
( ( 229 20
writing_sm token 229 30
== eq_eq 229 32
3 number 229 33
) ) 229 34
; ; 229 35
always always 230 6
@ @ 230 8
( ( 230 9
posedge posedge 230 16
clk token 230 20
or or 230 23
negedge negedge 230 31
resetn token 230 38
) ) 230 39
begin begin 230 45
if if 231 6
( ( 231 8
! ! 231 9
resetn token 231 15
) ) 231 16
begin begin 231 22
reading_sm token 232 18
<= sm_eq 232 20
0 number 232 21
; ; 232 22
writing_sm token 233 18
<= sm_eq 233 20
0 number 233 21
; ; 233 22
paddr token 234 13
<= sm_eq 234 15
0 number 234 16
; ; 234 17
end end 235 7
else else 235 12
begin begin 235 18
if if 236 10
( ( 236 12
write_regs_command_valid token 236 36
) ) 236 37
begin begin 236 43
paddr token 237 17
<= sm_eq 237 20
regs_wr_addr token 237 33
; ; 237 34
writing_sm token 238 22
<= sm_eq 238 25
1 number 238 27
; ; 238 28
end end 239 11
else else 239 16
if if 239 19
( ( 239 21
writing_sm token 239 31
== eq_eq 239 33
1 number 239 34
) ) 239 35
begin begin 239 41
writing_sm token 240 22
<= sm_eq 240 25
0 number 240 27
; ; 240 28
end end 241 11
if if 242 10
( ( 242 12
write_mem_command_valid token 242 35
) ) 242 36
begin begin 242 42
paddr token 243 17
<= sm_eq 243 20
mem_wr_addr token 243 32
; ; 243 33
writing_sm token 244 22
<= sm_eq 244 25
3 number 244 27
; ; 244 28
end end 245 12
else else 245 17
if if 245 20
( ( 245 22
writing_sm token 245 32
== eq_eq 245 34
3 number 245 35
) ) 245 36
begin begin 245 42
writing_sm token 246 22
<= sm_eq 246 25
0 number 246 27
; ; 246 28
end end 247 12
if if 249 10
( ( 249 12
long_read_command_valid token 249 35
) ) 249 36
begin begin 249 42
paddr token 250 17
<= sm_eq 250 20
long_read_addr token 250 35
; ; 250 36
long_count token 251 22
<= sm_eq 251 25
long_count_read token 251 41
; ; 251 42
long_reading_sm token 252 27
<= sm_eq 252 30
1 number 252 31
; ; 252 32
end end 253 11
else else 253 16
if if 253 19
( ( 253 21
long_reading_sm token 253 36
== eq_eq 253 38
1 number 253 39
) ) 253 40
begin begin 253 46
if if 254 14
( ( 254 16
long_count token 254 26
== eq_eq 254 28
0 number 254 29
) ) 254 30
begin begin 254 36
long_reading_sm token 255 31
<= sm_eq 255 33
0 number 255 34
; ; 255 35
end end 256 15
else else 256 20
if if 256 23
( ( 256 25
reading_sm token 256 35
== eq_eq 256 37
0 number 256 38
) ) 256 39
begin begin 256 45
reading_sm token 257 26
<= sm_eq 257 29
1 number 257 30
; ; 257 31
long_reading_sm token 258 31
<= sm_eq 258 34
2 number 258 35
; ; 258 36
long_count token 259 26
<= sm_eq 259 28
long_count token 259 39
- - 259 40
1 number 259 41
; ; 259 42
end end 260 15
end end 261 11
else else 261 16
if if 261 19
( ( 261 21
long_reading_sm token 261 36
== eq_eq 261 38
2 number 261 39
) ) 261 40
begin begin 261 46
if if 262 14
( ( 262 16
reading_sm token 262 26
== eq_eq 262 28
0 number 262 29
) ) 262 30
begin begin 262 36
long_reading_sm token 263 31
<= sm_eq 263 34
1 number 263 35
; ; 263 36
if if 264 18
( ( 264 20
paddr token 264 25
[ [ 264 26
15 number 264 28
] ] 264 29
) ) 264 30
paddr token 265 25
<= sm_eq 265 28
paddr token 265 34
+ + 265 35
8 number 265 36
; ; 265 37
else else 266 20
paddr token 267 25
<= sm_eq 267 28
paddr token 267 34
+ + 267 35
4 number 267 36
; ; 267 37
end end 268 15
end end 269 11
if if 271 10
( ( 271 12
read_command_valid token 271 30
) ) 271 31
begin begin 271 37
paddr token 272 17
<= sm_eq 272 20
read_addr token 272 30
; ; 272 31
reading_sm token 273 22
<= sm_eq 273 25
1 number 273 26
; ; 273 27
end end 274 11
else else 274 16
if if 274 19
( ( 274 21
reading_sm token 274 31
== eq_eq 274 33
1 number 274 34
) ) 274 35
begin begin 274 41
if if 275 14
( ( 275 16
paddr token 275 21
[ [ 275 22
15 number 275 24
] ] 275 25
== eq_eq 275 27
0 number 275 28
) ) 275 29
reading_sm token 276 26
<= sm_eq 276 28
2 number 276 29
; ; 276 30
else else 277 16
reading_sm token 278 26
<= sm_eq 278 28
4 number 278 29
; ; 278 30
end end 279 11
else else 279 16
if if 279 19
( ( 279 21
reading_sm token 279 31
== eq_eq 279 33
2 number 279 34
) ) 279 35
begin begin 279 41
reading_sm token 280 22
<= sm_eq 280 24
3 number 280 25
; ; 280 26
end end 281 11
else else 281 16
if if 281 19
( ( 281 21
reading_sm token 281 31
== eq_eq 281 33
3 number 281 34
) ) 281 35
begin begin 281 41
if if 282 14
( ( 282 16
! ! 282 17
txactive token 282 25
) ) 282 26
begin begin 282 32
reading_sm token 283 26
<= sm_eq 283 28
0 number 283 29
; ; 283 30
end end 284 15
end end 285 11
else else 285 16
if if 285 19
( ( 285 21
reading_sm token 285 31
== eq_eq 285 33
4 number 285 34
) ) 285 35
begin begin 285 41
reading_sm token 286 22
<= sm_eq 286 24
5 number 286 25
; ; 286 26
end end 287 11
else else 287 16
if if 287 19
( ( 287 21
reading_sm token 287 31
== eq_eq 287 33
5 number 287 34
) ) 287 35
begin begin 287 41
if if 288 14
( ( 288 16
! ! 288 17
txactive token 288 25
) ) 288 26
begin begin 288 32
reading_sm token 289 26
<= sm_eq 289 28
0 number 289 29
; ; 289 30
end end 290 15
end end 291 11
end end 292 7
end end 293 3
assign assign 295 6
psel token 295 11
= = 295 13
( ( 295 15
( ( 295 16
reading_sm token 295 26
== eq_eq 295 28
1 number 295 29
) ) 295 30
&& and_and 295 33
( ( 295 35
paddr token 295 40
[ [ 295 41
15 number 295 43
] ] 295 44
== eq_eq 295 46
0 number 295 47
) ) 295 48
) ) 295 49
|| or_or 295 51
( ( 295 52
writing_sm token 295 62
== eq_eq 295 64
1 number 295 65
) ) 295 66
; ; 295 67
assign assign 296 6
txstart_pread token 296 20
= = 296 22
( ( 296 24
! ! 296 25
txactive token 296 33
) ) 296 34
&& and_and 296 37
( ( 297 5
( ( 297 6
reading_sm token 297 16
== eq_eq 297 18
2 number 297 19
) ) 297 20
|| or_or 297 22
( ( 297 23
reading_sm token 297 33
== eq_eq 297 35
4 number 297 36
) ) 297 37
|| or_or 297 39
keep_alive token 297 49
|| or_or 297 51
question_valid token 297 65
) ) 297 66
; ; 297 67
assign assign 298 6
ram_read token 298 15
= = 298 17
( ( 298 19
reading_sm token 298 29
== eq_eq 298 31
1 number 298 32
) ) 298 33
&& and_and 298 35
( ( 298 36
paddr token 298 41
[ [ 298 42
15 number 298 44
] ] 298 45
== eq_eq 298 47
1 number 298 48
) ) 298 49
; ; 298 50
assign assign 299 6
ram_addr token 299 15
= = 299 17
paddr token 299 23
[ [ 299 24
13 number 299 26
: : 299 27
0 number 299 28
] ] 299 29
; ; 299 30
always always 304 6
@ @ 304 8
( ( 304 9
posedge posedge 304 16
clk token 304 20
) ) 304 21
if if 304 24
( ( 304 26
! ! 304 27
txactive token 304 35
) ) 304 36
begin begin 304 42
if if 305 6
( ( 305 8
reading_sm token 305 18
== eq_eq 305 20
2 number 305 21
) ) 305 22
begin begin 305 28
txfifo token 306 14
[ [ 306 15
0 number 306 16
] ] 306 17
<= sm_eq 306 19
DOTS_CHAR token 306 28
; ; 306 29
txfifo token 307 14
[ [ 307 15
1 number 307 16
] ] 307 17
<= sm_eq 307 19
xnibble token 307 26
( ( 307 27
paddr token 307 32
[ [ 307 33
15 number 307 35
: : 307 36
12 number 307 38
] ] 307 39
) ) 307 40
; ; 307 41
txfifo token 308 14
[ [ 308 15
2 number 308 16
] ] 308 17
<= sm_eq 308 19
xnibble token 308 26
( ( 308 27
paddr token 308 32
[ [ 308 33
11 number 308 35
: : 308 36
8 number 308 37
] ] 308 38
) ) 308 39
; ; 308 40
txfifo token 309 14
[ [ 309 15
3 number 309 16
] ] 309 17
<= sm_eq 309 19
xnibble token 309 26
( ( 309 27
paddr token 309 32
[ [ 309 33
7 number 309 34
: : 309 35
4 number 309 36
] ] 309 37
) ) 309 38
; ; 309 39
txfifo token 310 14
[ [ 310 15
4 number 310 16
] ] 310 17
<= sm_eq 310 19
xnibble token 310 26
( ( 310 27
paddr token 310 32
[ [ 310 33
3 number 310 34
: : 310 35
0 number 310 36
] ] 310 37
) ) 310 38
; ; 310 39
txfifo token 311 14
[ [ 311 15
5 number 311 16
] ] 311 17
<= sm_eq 311 19
xnibble token 311 26
( ( 311 27
prdata token 311 33
[ [ 311 34
31 number 311 36
: : 311 37
28 number 311 39
] ] 311 40
) ) 311 41
; ; 311 42
txfifo token 312 14
[ [ 312 15
6 number 312 16
] ] 312 17
<= sm_eq 312 19
xnibble token 312 26
( ( 312 27
prdata token 312 33
[ [ 312 34
27 number 312 36
: : 312 37
24 number 312 39
] ] 312 40
) ) 312 41
; ; 312 42
txfifo token 313 14
[ [ 313 15
7 number 313 16
] ] 313 17
<= sm_eq 313 19
xnibble token 313 26
( ( 313 27
prdata token 313 33
[ [ 313 34
23 number 313 36
: : 313 37
20 number 313 39
] ] 313 40
) ) 313 41
; ; 313 42
txfifo token 314 14
[ [ 314 15
8 number 314 16
] ] 314 17
<= sm_eq 314 19
xnibble token 314 26
( ( 314 27
prdata token 314 33
[ [ 314 34
19 number 314 36
: : 314 37
16 number 314 39
] ] 314 40
) ) 314 41
; ; 314 42
txfifo token 315 14
[ [ 315 15
9 number 315 16
] ] 315 17
<= sm_eq 315 19
xnibble token 315 26
( ( 315 27
prdata token 315 33
[ [ 315 34
15 number 315 36
: : 315 37
12 number 315 39
] ] 315 40
) ) 315 41
; ; 315 42
txfifo token 316 14
[ [ 316 15
10 number 316 17
] ] 316 18
<= sm_eq 316 20
xnibble token 316 27
( ( 316 28
prdata token 316 34
[ [ 316 35
11 number 316 37
: : 316 38
8 number 316 39
] ] 316 40
) ) 316 41
; ; 316 42
txfifo token 317 14
[ [ 317 15
11 number 317 17
] ] 317 18
<= sm_eq 317 20
xnibble token 317 27
( ( 317 28
prdata token 317 34
[ [ 317 35
7 number 317 36
: : 317 37
4 number 317 38
] ] 317 39
) ) 317 40
; ; 317 41
txfifo token 318 14
[ [ 318 15
12 number 318 17
] ] 318 18
<= sm_eq 318 20
xnibble token 318 27
( ( 318 28
prdata token 318 34
[ [ 318 35
3 number 318 36
: : 318 37
0 number 318 38
] ] 318 39
) ) 318 40
; ; 318 41
txfifo token 319 14
[ [ 319 15
13 number 319 17
] ] 319 18
<= sm_eq 319 20
DOT_CHAR token 319 28
; ; 319 29
txfifo token 320 14
[ [ 320 15
14 number 320 17
] ] 320 18
<= sm_eq 320 20
0 number 320 21
; ; 320 22
end end 321 7
else else 321 12
if if 321 15
( ( 321 17
( ( 321 18
reading_sm token 321 28
== eq_eq 321 30
1 number 321 31
) ) 321 32
&& and_and 321 34
paddr token 321 39
[ [ 321 40
15 number 321 42
] ] 321 43
) ) 321 44
begin begin 321 50
txfifo token 322 14
[ [ 322 15
0 number 322 16
] ] 322 17
<= sm_eq 322 19
PLUS_CHAR token 322 28
; ; 322 29
txfifo token 323 14
[ [ 323 15
1 number 323 16
] ] 323 17
<= sm_eq 323 19
xnibble token 323 26
( ( 323 27
paddr token 323 32
[ [ 323 33
15 number 323 35
: : 323 36
12 number 323 38
] ] 323 39
) ) 323 40
; ; 323 41
txfifo token 324 14
[ [ 324 15
2 number 324 16
] ] 324 17
<= sm_eq 324 19
xnibble token 324 26
( ( 324 27
paddr token 324 32
[ [ 324 33
11 number 324 35
: : 324 36
8 number 324 37
] ] 324 38
) ) 324 39
; ; 324 40
txfifo token 325 14
[ [ 325 15
3 number 325 16
] ] 325 17
<= sm_eq 325 19
xnibble token 325 26
( ( 325 27
paddr token 325 32
[ [ 325 33
7 number 325 34
: : 325 35
4 number 325 36
] ] 325 37
) ) 325 38
; ; 325 39
txfifo token 326 14
[ [ 326 15
4 number 326 16
] ] 326 17
<= sm_eq 326 19
xnibble token 326 26
( ( 326 27
paddr token 326 32
[ [ 326 33
3 number 326 34
: : 326 35
0 number 326 36
] ] 326 37
) ) 326 38
; ; 326 39
txfifo token 327 14
[ [ 327 15
5 number 327 16
] ] 327 17
<= sm_eq 327 19
xnibble token 327 26
( ( 327 27
ram_rdata token 327 36
[ [ 327 37
47 number 327 39
: : 327 40
44 number 327 42
] ] 327 43
) ) 327 44
; ; 327 45
txfifo token 328 14
[ [ 328 15
6 number 328 16
] ] 328 17
<= sm_eq 328 19
xnibble token 328 26
( ( 328 27
ram_rdata token 328 36
[ [ 328 37
43 number 328 39
: : 328 40
40 number 328 42
] ] 328 43
) ) 328 44
; ; 328 45
txfifo token 329 14
[ [ 329 15
7 number 329 16
] ] 329 17
<= sm_eq 329 19
xnibble token 329 26
( ( 329 27
ram_rdata token 329 36
[ [ 329 37
39 number 329 39
: : 329 40
36 number 329 42
] ] 329 43
) ) 329 44
; ; 329 45
txfifo token 330 14
[ [ 330 15
8 number 330 16
] ] 330 17
<= sm_eq 330 19
xnibble token 330 26
( ( 330 27
ram_rdata token 330 36
[ [ 330 37
35 number 330 39
: : 330 40
32 number 330 42
] ] 330 43
) ) 330 44
; ; 330 45
txfifo token 331 14
[ [ 331 15
9 number 331 16
] ] 331 17
<= sm_eq 331 19
xnibble token 331 26
( ( 331 27
ram_rdata token 331 36
[ [ 331 37
31 number 331 39
: : 331 40
28 number 331 42
] ] 331 43
) ) 331 44
; ; 331 45
txfifo token 332 14
[ [ 332 15
10 number 332 17
] ] 332 18
<= sm_eq 332 20
xnibble token 332 27
( ( 332 28
ram_rdata token 332 37
[ [ 332 38
27 number 332 40
: : 332 41
24 number 332 43
] ] 332 44
) ) 332 45
; ; 332 46
txfifo token 333 14
[ [ 333 15
11 number 333 17
] ] 333 18
<= sm_eq 333 20
xnibble token 333 27
( ( 333 28
ram_rdata token 333 37
[ [ 333 38
23 number 333 40
: : 333 41
20 number 333 43
] ] 333 44
) ) 333 45
; ; 333 46
txfifo token 334 14
[ [ 334 15
12 number 334 17
] ] 334 18
<= sm_eq 334 20
xnibble token 334 27
( ( 334 28
ram_rdata token 334 37
[ [ 334 38
19 number 334 40
: : 334 41
16 number 334 43
] ] 334 44
) ) 334 45
; ; 334 46
txfifo token 335 14
[ [ 335 15
13 number 335 17
] ] 335 18
<= sm_eq 335 20
xnibble token 335 27
( ( 335 28
ram_rdata token 335 37
[ [ 335 38
15 number 335 40
: : 335 41
12 number 335 43
] ] 335 44
) ) 335 45
; ; 335 46
txfifo token 336 14
[ [ 336 15
14 number 336 17
] ] 336 18
<= sm_eq 336 20
xnibble token 336 27
( ( 336 28
ram_rdata token 336 37
[ [ 336 38
11 number 336 40
: : 336 41
8 number 336 42
] ] 336 43
) ) 336 44
; ; 336 45
txfifo token 337 14
[ [ 337 15
15 number 337 17
] ] 337 18
<= sm_eq 337 20
xnibble token 337 27
( ( 337 28
ram_rdata token 337 37
[ [ 337 38
7 number 337 39
: : 337 40
4 number 337 41
] ] 337 42
) ) 337 43
; ; 337 44
txfifo token 338 14
[ [ 338 15
16 number 338 17
] ] 338 18
<= sm_eq 338 20
xnibble token 338 27
( ( 338 28
ram_rdata token 338 37
[ [ 338 38
3 number 338 39
: : 338 40
0 number 338 41
] ] 338 42
) ) 338 43
; ; 338 44
txfifo token 339 14
[ [ 339 15
17 number 339 17
] ] 339 18
<= sm_eq 339 20
DOT_CHAR token 339 28
; ; 339 29
end end 340 7
else else 340 12
if if 340 15
( ( 340 17
keep_alive token 340 27
|| or_or 340 29
question_valid token 340 43
) ) 340 44
begin begin 340 50
txfifo token 341 14
[ [ 341 15
0 number 341 16
] ] 341 17
<= sm_eq 341 19
D_CHAR token 341 25
; ; 341 26
txfifo token 342 14
[ [ 342 15
1 number 342 16
] ] 342 17
<= sm_eq 342 19
B_CHAR token 342 25
; ; 342 26
txfifo token 343 14
[ [ 343 15
2 number 343 16
] ] 343 17
<= sm_eq 343 19
G_CHAR token 343 25
; ; 343 26
txfifo token 344 14
[ [ 344 15
3 number 344 16
] ] 344 17
<= sm_eq 344 19
ZERO_CHAR token 344 28
; ; 344 29
txfifo token 345 14
[ [ 345 15
4 number 345 16
] ] 345 17
<= sm_eq 345 19
xnibble token 345 26
( ( 345 27
helper0 token 345 34
[ [ 345 35
15 number 345 37
: : 345 38
12 number 345 40
] ] 345 41
) ) 345 42
; ; 345 43
txfifo token 346 14
[ [ 346 15
5 number 346 16
] ] 346 17
<= sm_eq 346 19
xnibble token 346 26
( ( 346 27
helper0 token 346 34
[ [ 346 35
11 number 346 37
: : 346 38
8 number 346 39
] ] 346 40
) ) 346 41
; ; 346 42
txfifo token 347 14
[ [ 347 15
6 number 347 16
] ] 347 17
<= sm_eq 347 19
xnibble token 347 26
( ( 347 27
helper0 token 347 34
[ [ 347 35
7 number 347 36
: : 347 37
4 number 347 38
] ] 347 39
) ) 347 40
; ; 347 41
txfifo token 348 14
[ [ 348 15
7 number 348 16
] ] 348 17
<= sm_eq 348 19
xnibble token 348 26
( ( 348 27
helper0 token 348 34
[ [ 348 35
3 number 348 36
: : 348 37
0 number 348 38
] ] 348 39
) ) 348 40
; ; 348 41
txfifo token 349 14
[ [ 349 15
8 number 349 16
] ] 349 17
<= sm_eq 349 19
0 number 349 20
; ; 349 21
end end 350 7
end end 351 3
function function 353 8
[ [ 353 10
7 number 353 11
: : 353 12
0 number 353 13
] ] 353 14
xnibble token 353 22
( ( 353 24
input input 353 29
[ [ 353 31
3 number 353 32
: : 353 33
0 number 353 34
] ] 353 35
nib token 353 39
) ) 353 40
; ; 353 41
begin begin 354 5
if if 355 6
( ( 355 8
nib token 355 11
< < 355 12
10 number 355 14
) ) 355 15
xnibble token 355 23
= = 355 25
nib token 355 29
+ + 355 31
8'h30 uhex 355 33
; ; 355 38
else else 356 8
xnibble token 356 16
= = 356 18
nib token 356 22
- - 356 24
10 number 356 27
+ + 356 29
8'h41 uhex 356 31
; ; 356 36
end end 357 3
endfunction endfunction 358 11
function function 360 8
[ [ 360 10
3 number 360 11
: : 360 12
0 number 360 13
] ] 360 14
hexval token 360 21
( ( 360 23
input input 360 28
[ [ 360 30
7 number 360 31
: : 360 32
0 number 360 33
] ] 360 34
nib token 360 38
) ) 360 39
; ; 360 40
begin begin 361 5
if if 362 6
( ( 362 8
( ( 362 9
nib token 362 12
>= gr_eq 362 14
8'h30 uhex 362 15
) ) 362 20
&& and_and 362 22
( ( 362 23
nib token 362 26
<= sm_eq 362 28
8'h39 uhex 362 29
) ) 362 34
) ) 362 35
hexval token 363 14
= = 363 16
nib token 363 20
- - 363 21
8'h30 uhex 363 22
; ; 363 27
else else 364 8
if if 364 11
( ( 364 13
( ( 364 14
nib token 364 17
>= gr_eq 364 19
8'h41 uhex 364 20
) ) 364 25
&& and_and 364 27
( ( 364 28
nib token 364 31
<= sm_eq 364 33
8'h46 uhex 364 34
) ) 364 39
) ) 364 40
hexval token 365 14
= = 365 16
nib token 365 20
- - 365 21
8'h41 uhex 365 22
+ + 365 27
10 number 365 29
; ; 365 30
else else 366 8
if if 366 11
( ( 366 13
( ( 366 14
nib token 366 17
>= gr_eq 366 19
8'h61 uhex 366 20
) ) 366 25
&& and_and 366 27
( ( 366 28
nib token 366 31
<= sm_eq 366 33
8'h66 uhex 366 34
) ) 366 39
) ) 366 40
hexval token 367 14
= = 367 16
nib token 367 20
- - 367 21
8'h61 uhex 367 22
+ + 367 27
10 number 367 29
; ; 367 30
else else 368 8
hexval token 369 14
= = 369 15
0 number 369 16
; ; 369 17
end end 370 3
endfunction endfunction 371 11
function function 373 8
hexchar token 373 16
( ( 373 17
input input 373 22
[ [ 373 24
7 number 373 25
: : 373 26
0 number 373 27
] ] 373 28
nib token 373 32
) ) 373 33
; ; 373 34
begin begin 374 5
if if 375 6
( ( 375 8
( ( 375 9
nib token 375 12
>= gr_eq 375 14
8'h30 uhex 375 15
) ) 375 20
&& and_and 375 22
( ( 375 23
nib token 375 26
<= sm_eq 375 28
8'h39 uhex 375 29
) ) 375 34
) ) 375 35
hexchar token 376 15
= = 376 17
1'b1 ubin 376 19
; ; 376 23
else else 377 8
if if 377 11
( ( 377 13
( ( 377 14
nib token 377 17
>= gr_eq 377 19
8'h41 uhex 377 20
) ) 377 25
&& and_and 377 27
( ( 377 28
nib token 377 31
<= sm_eq 377 33
8'h46 uhex 377 34
) ) 377 39
) ) 377 40
hexchar token 378 15
= = 378 17
1'b1 ubin 378 19
; ; 378 23
else else 379 8
if if 379 11
( ( 379 13
( ( 379 14
nib token 379 17
>= gr_eq 379 19
8'h61 uhex 379 20
) ) 379 25
&& and_and 379 27
( ( 379 28
nib token 379 31
<= sm_eq 379 33
8'h66 uhex 379 34
) ) 379 39
) ) 379 40
hexchar token 380 15
= = 380 17
1'b1 ubin 380 19
; ; 380 23
else else 381 8
hexchar token 382 15
= = 382 16
1'b0 ubin 382 17
; ; 382 21
end end 384 3
endfunction endfunction 385 11
wire wire 387 4
presetn token 387 12
= = 387 14
resetn token 387 21
; ; 387 22
wire wire 388 4
pclk token 388 9
= = 388 11
clk token 388 15
; ; 388 16
regfile token 390 7
regfile token 390 15
( ( 390 17
. . 391 6
clk token 391 9
( ( 391 10
clk token 391 13
) ) 391 14
, , 391 16
. . 391 17
rst_n token 391 22
( ( 391 23
rst_n token 391 28
) ) 391 29
, , 392 5
. . 392 6
paddr token 392 11
( ( 392 12
paddr token 392 17
[ [ 392 18
5 number 392 19
: : 392 20
0 number 392 21
] ] 392 22
) ) 392 23
, , 393 5
. . 393 6
prdata token 393 12
( ( 393 13
prdata token 393 19
[ [ 393 20
31 number 393 22
: : 393 23
0 number 393 24
] ] 393 25
) ) 393 26
, , 394 5
. . 394 6
psel token 394 10
( ( 394 11
psel token 394 15
) ) 394 16
, , 395 5
. . 395 6
psize token 395 11
( ( 395 12
2'b11 ubin 395 13
) ) 395 18
, , 396 5
. . 396 6
pwdata token 396 12
( ( 396 13
pwdata token 396 19
[ [ 396 20
31 number 396 22
: : 396 23
0 number 396 24
] ] 396 25
) ) 396 26
, , 397 5
. . 397 6
pwrite token 397 12
( ( 397 13
pwrite token 397 19
) ) 397 20
, , 399 5
. . 399 6
enables token 399 13
( ( 399 14
enables token 399 21
[ [ 399 22
15 number 399 24
: : 399 25
0 number 399 26
] ] 399 27
) ) 399 28
, , 400 5
. . 400 6
gain0 token 400 11
( ( 400 12
) ) 400 13
, , 400 15
. . 400 16
gain1 token 400 21
( ( 400 22
) ) 400 23
, , 400 25
. . 400 26
gain2 token 400 31
( ( 400 32
) ) 400 33
, , 401 5
. . 401 6
jump0 token 401 11
( ( 401 12
) ) 401 13
, , 401 15
. . 401 16
jump1 token 401 21
( ( 401 22
) ) 401 23
, , 401 25
. . 401 26
jump2 token 401 31
( ( 401 32
) ) 401 33
, , 402 5
. . 402 6
start0 token 402 12
( ( 402 13
) ) 402 14
, , 402 16
. . 402 17
start1 token 402 23
( ( 402 24
) ) 402 25
, , 402 27
. . 402 28
start2 token 402 34
( ( 402 35
) ) 402 36
) ) 403 1
; ; 403 2
endmodule endmodule 410 9
