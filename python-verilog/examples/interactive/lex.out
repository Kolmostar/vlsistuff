module module 5 6
generator token 5 16
( ( 5 18
input input 6 9
clk token 6 13
, , 6 14
input input 6 19
rst_n token 6 25
, , 7 5
input input 7 10
[ [ 7 12
5 number 7 13
: : 7 14
0 number 7 15
] ] 7 16
paddr token 7 22
, , 8 5
input input 8 10
[ [ 8 12
1 number 8 13
: : 8 14
0 number 8 15
] ] 8 16
psize token 8 22
, , 9 5
input input 9 10
psel token 9 15
, , 10 5
input input 10 10
pwrite token 10 17
, , 11 5
input input 11 10
[ [ 11 12
31 number 11 14
: : 11 15
0 number 11 16
] ] 11 17
pwdata token 11 24
, , 12 5
output output 12 11
[ [ 12 13
31 number 12 15
: : 12 16
0 number 12 17
] ] 12 18
prdata token 12 25
, , 13 5
output output 13 11
[ [ 13 13
15 number 13 15
: : 13 16
0 number 13 17
] ] 13 18
outmix token 13 25
) ) 14 1
; ; 14 2
wire wire 16 4
[ [ 16 6
15 number 16 8
: : 16 9
0 number 16 10
] ] 16 11
enables token 16 19
; ; 16 20
wire wire 17 4
work token 17 9
= = 17 11
enables token 17 19
[ [ 17 20
0 number 17 21
] ] 17 22
; ; 17 23
wire wire 18 4
[ [ 18 6
10 number 18 8
: : 18 9
0 number 18 10
] ] 18 11
start0 token 18 18
, , 18 19
start1 token 18 25
, , 18 26
start2 token 18 32
; ; 18 33
wire wire 19 4
[ [ 19 6
10 number 19 8
: : 19 9
0 number 19 10
] ] 19 11
jump0 token 19 17
, , 19 18
jump1 token 19 23
, , 19 24
jump2 token 19 29
; ; 19 30
wire wire 21 4
[ [ 21 6
15 number 21 8
: : 21 9
0 number 21 10
] ] 21 11
sin0 token 21 16
, , 21 17
sin1 token 21 21
, , 21 22
sin2 token 21 26
; ; 21 27
reg reg 22 3
[ [ 22 5
10 number 22 7
: : 22 8
0 number 22 9
] ] 22 10
addr0 token 22 16
, , 22 17
addr1 token 22 22
, , 22 23
addr2 token 22 28
; ; 22 29
wire wire 24 4
start token 24 10
= = 24 12
work token 24 17
&& and_and 24 20
! ! 24 22
running token 24 29
; ; 24 30
always always 26 6
@ @ 26 8
( ( 26 9
posedge posedge 26 16
clk token 26 20
or or 26 23
negedge negedge 26 31
rst_n token 26 37
) ) 26 38
begin begin 26 44
if if 27 6
( ( 27 8
! ! 27 9
rst_n token 27 14
) ) 27 15
begin begin 27 21
addr0 token 28 13
<= sm_eq 28 15
0 number 28 16
; ; 28 17
addr1 token 29 13
<= sm_eq 29 15
0 number 29 16
; ; 29 17
addr2 token 30 13
<= sm_eq 30 15
0 number 30 16
; ; 30 17
running token 31 15
<= sm_eq 31 18
0 number 31 20
; ; 31 21
end end 32 7
else else 32 12
begin begin 32 18
running token 33 15
<= sm_eq 33 18
work token 33 23
; ; 33 24
if if 34 10
( ( 34 12
start token 34 17
) ) 34 18
begin begin 34 24
addr0 token 35 17
<= sm_eq 35 20
start0 token 35 27
; ; 35 28
addr1 token 36 17
<= sm_eq 36 20
start1 token 36 27
; ; 36 28
addr2 token 37 17
<= sm_eq 37 20
start2 token 37 27
; ; 37 28
end end 38 11
else else 38 16
if if 38 19
( ( 38 21
running token 38 28
) ) 38 29
begin begin 38 35
addr0 token 39 17
<= sm_eq 39 20
addr0 token 39 26
+ + 39 28
jump0 token 39 34
; ; 39 35
addr1 token 40 17
<= sm_eq 40 20
addr1 token 40 26
+ + 40 28
jump1 token 40 34
; ; 40 35
addr2 token 41 17
<= sm_eq 41 20
addr2 token 41 26
+ + 41 28
jump2 token 41 34
; ; 41 35
end end 42 11
else else 42 16
begin begin 42 22
addr0 token 43 17
<= sm_eq 43 19
0 number 43 20
; ; 43 21
addr1 token 44 17
<= sm_eq 44 19
0 number 44 20
; ; 44 21
addr2 token 45 17
<= sm_eq 45 19
0 number 45 20
; ; 45 21
end end 46 11
end end 47 7
end end 48 3
sintab token 50 6
sin0 token 50 12
( ( 50 13
. . 50 14
addr token 50 18
( ( 50 19
addr0 token 50 24
) ) 50 25
, , 50 26
. . 50 27
out token 50 30
( ( 50 31
sin0 token 50 35
) ) 50 36
) ) 50 37
; ; 50 38
sintab token 51 6
sin1 token 51 12
( ( 51 13
. . 51 14
addr token 51 18
( ( 51 19
addr1 token 51 24
) ) 51 25
, , 51 26
. . 51 27
out token 51 30
( ( 51 31
sin1 token 51 35
) ) 51 36
) ) 51 37
; ; 51 38
sintab token 52 6
sin2 token 52 12
( ( 52 13
. . 52 14
addr token 52 18
( ( 52 19
addr2 token 52 24
) ) 52 25
, , 52 26
. . 52 27
out token 52 30
( ( 52 31
sin2 token 52 35
) ) 52 36
) ) 52 37
; ; 52 38
wire wire 54 4
[ [ 54 6
31 number 54 8
: : 54 9
0 number 54 10
] ] 54 11
total token 54 17
= = 54 19
{ { 54 22
{ { 54 23
16 number 54 25
{ { 54 26
sin0 token 54 30
[ [ 54 31
15 number 54 33
] ] 54 34
} } 54 35
} } 54 36
, , 54 37
sin0 token 54 41
} } 54 42
* * 54 43
{ { 54 44
{ { 54 45
16 number 54 47
{ { 54 48
gain0 token 54 53
[ [ 54 54
15 number 54 56
] ] 54 57
} } 54 58
} } 54 59
, , 54 60
gain0 token 54 65
} } 54 66
+ + 55 21
{ { 55 22
{ { 55 23
16 number 55 25
{ { 55 26
sin1 token 55 30
[ [ 55 31
15 number 55 33
] ] 55 34
} } 55 35
} } 55 36
, , 55 37
sin1 token 55 41
} } 55 42
* * 55 43
{ { 55 44
{ { 55 45
16 number 55 47
{ { 55 48
gain1 token 55 53
[ [ 55 54
15 number 55 56
] ] 55 57
} } 55 58
} } 55 59
, , 55 60
gain1 token 55 65
} } 55 66
+ + 56 21
{ { 56 22
{ { 56 23
16 number 56 25
{ { 56 26
sin2 token 56 30
[ [ 56 31
15 number 56 33
] ] 56 34
} } 56 35
} } 56 36
, , 56 37
sin2 token 56 41
} } 56 42
* * 56 43
{ { 56 44
{ { 56 45
16 number 56 47
{ { 56 48
gain2 token 56 53
[ [ 56 54
15 number 56 56
] ] 56 57
} } 56 58
} } 56 59
, , 56 60
gain2 token 56 65
} } 56 66
; ; 57 21
wire wire 58 4
[ [ 58 6
15 number 58 8
: : 58 9
0 number 58 10
] ] 58 11
outmix_wire token 58 23
= = 58 25
total token 58 31
[ [ 58 32
31 number 58 34
: : 58 35
16 number 58 37
] ] 58 38
; ; 58 39
always always 59 6
@ @ 59 8
( ( 59 9
posedge posedge 59 16
clk token 59 20
) ) 59 21
outmix token 59 28
<= sm_eq 59 31
outmix_wire token 59 43
; ; 59 44
regfile token 62 7
regfile token 62 15
( ( 62 17
. . 63 6
clk token 63 9
( ( 63 10
clk token 63 13
) ) 63 14
, , 63 16
. . 63 17
rst_n token 63 22
( ( 63 23
rst_n token 63 28
) ) 63 29
, , 64 5
. . 64 6
paddr token 64 11
( ( 64 12
paddr token 64 17
[ [ 64 18
5 number 64 19
: : 64 20
0 number 64 21
] ] 64 22
) ) 64 23
, , 65 5
. . 65 6
prdata token 65 12
( ( 65 13
prdata token 65 19
[ [ 65 20
31 number 65 22
: : 65 23
0 number 65 24
] ] 65 25
) ) 65 26
, , 66 5
. . 66 6
psel token 66 10
( ( 66 11
psel token 66 15
) ) 66 16
, , 67 5
. . 67 6
psize token 67 11
( ( 67 12
psize token 67 17
[ [ 67 18
1 number 67 19
: : 67 20
0 number 67 21
] ] 67 22
) ) 67 23
, , 68 5
. . 68 6
pwdata token 68 12
( ( 68 13
pwdata token 68 19
[ [ 68 20
31 number 68 22
: : 68 23
0 number 68 24
] ] 68 25
) ) 68 26
, , 69 5
. . 69 6
pwrite token 69 12
( ( 69 13
pwrite token 69 19
) ) 69 20
, , 71 5
. . 71 6
enables token 71 13
( ( 71 14
enables token 71 21
[ [ 71 22
15 number 71 24
: : 71 25
0 number 71 26
] ] 71 27
) ) 71 28
, , 72 5
. . 72 6
gain0 token 72 11
( ( 72 12
gain0 token 72 17
[ [ 72 18
15 number 72 20
: : 72 21
0 number 72 22
] ] 72 23
) ) 72 24
, , 73 5
. . 73 6
gain1 token 73 11
( ( 73 12
gain1 token 73 17
[ [ 73 18
15 number 73 20
: : 73 21
0 number 73 22
] ] 73 23
) ) 73 24
, , 74 5
. . 74 6
jump0 token 74 11
( ( 74 12
jump0 token 74 17
[ [ 74 18
10 number 74 20
: : 74 21
0 number 74 22
] ] 74 23
) ) 74 24
, , 75 5
. . 75 6
jump1 token 75 11
( ( 75 12
jump1 token 75 17
[ [ 75 18
10 number 75 20
: : 75 21
0 number 75 22
] ] 75 23
) ) 75 24
, , 76 5
. . 76 6
jump2 token 76 11
( ( 76 12
jump2 token 76 17
[ [ 76 18
10 number 76 20
: : 76 21
0 number 76 22
] ] 76 23
) ) 76 24
, , 77 5
. . 77 6
start0 token 77 12
( ( 77 13
start0 token 77 19
[ [ 77 20
10 number 77 22
: : 77 23
0 number 77 24
] ] 77 25
) ) 77 26
, , 78 5
. . 78 6
start1 token 78 12
( ( 78 13
start1 token 78 19
[ [ 78 20
10 number 78 22
: : 78 23
0 number 78 24
] ] 78 25
) ) 78 26
, , 79 5
. . 79 6
start2 token 79 12
( ( 79 13
start2 token 79 19
[ [ 79 20
10 number 79 22
: : 79 23
0 number 79 24
] ] 79 25
) ) 79 26
) ) 80 1
; ; 80 2
endmodule endmodule 85 9
