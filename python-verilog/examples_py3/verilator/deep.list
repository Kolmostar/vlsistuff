module: tb tb
net:   tb.txd [1] = 1     // txd
reg:   Index [32] = 00000000000000000000000000000000 // Index
reg:   clk [1] = 1 // clk
reg:   corrects [32] = 00000000000000000000000000000000 // corrects
reg:   cycles [32] = 00000000000000000000000000011110 // cycles
reg:   errors [32] = 00000000000000000000000000000000 // errors
reg:   marker [32] = 00000000000000000000000000000000 // marker
reg:   panics [32] = 00000000000000000000000000000000 // panics
reg:   rst_n [1] = 1 // rst_n
reg:   rxd [1] = 1 // rxd
reg:   testnametestname
reg:   wrongs [32] = 00000000000000000000000000000000 // wrongs
son:   tb.dut
module: fltserver tb.dut
net:   tb.dut.clk [1] = 1     // clk
net:   tb.dut.control [8] = 01010000     // control
net:   tb.dut.let0 [8] = 00110000     // let0
net:   tb.dut.let1 [8] = 00110001     // let1
net:   tb.dut.let2 [8] = 00110010     // let2
net:   tb.dut.let3 [8] = 00110011     // let3
net:   tb.dut.let4 [8] = 00110100     // let4
net:   tb.dut.let5 [8] = 00110101     // let5
net:   tb.dut.let6 [8] = 00110110     // let6
net:   tb.dut.let7 [8] = 00110111     // let7
net:   tb.dut.let8 [8] = 00111000     // let8
net:   tb.dut.let9 [8] = 00111001     // let9
net:   tb.dut.letA [8] = 01100001     // letA
net:   tb.dut.letB [8] = 01100010     // letB
net:   tb.dut.letC [8] = 01100011     // letC
net:   tb.dut.letCR [8] = 00001010     // letCR
net:   tb.dut.letD [8] = 01100100     // letD
net:   tb.dut.letE [8] = 01100101     // letE
net:   tb.dut.letF [8] = 01100110     // letF
net:   tb.dut.letG [8] = 01100111     // letG
net:   tb.dut.letH [8] = 01101000     // letH
net:   tb.dut.letI [8] = 01101001     // letI
net:   tb.dut.letJ [8] = 01101010     // letJ
net:   tb.dut.letK [8] = 01101011     // letK
net:   tb.dut.letL [8] = 01101100     // letL
net:   tb.dut.letM [8] = 01101101     // letM
net:   tb.dut.letN [8] = 01101110     // letN
net:   tb.dut.letO [8] = 01101111     // letO
net:   tb.dut.letP [8] = 01110000     // letP
net:   tb.dut.letQ [8] = 01110001     // letQ
net:   tb.dut.letR [8] = 01110010     // letR
net:   tb.dut.letS [8] = 01110011     // letS
net:   tb.dut.letT [8] = 01110100     // letT
net:   tb.dut.letU [8] = 01110101     // letU
net:   tb.dut.letV [8] = 01110110     // letV
net:   tb.dut.letW [8] = 01110111     // letW
net:   tb.dut.letX [8] = 01111000     // letX
net:   tb.dut.letY [8] = 01111001     // letY
net:   tb.dut.letZ [8] = 01111010     // letZ
net:   tb.dut.rd_reg [1] = 0     // rd_reg
net:   tb.dut.rst_n [1] = 1     // rst_n
net:   tb.dut.rxd [1] = 1     // rxd
net:   tb.dut.softreset [1] = 0     // softreset
net:   tb.dut.work [1] = 0     // work
net:   tb.dut.wr_baudrate [1] = 0     // wr_baudrate
net:   tb.dut.wr_fractional [1] = 0     // wr_fractional
net:   tb.dut.wr_reg [1] = 0     // wr_reg
net:   tb.dut.write_tx [1] = 0     // write_tx
net:   tb.dut.vldout [1] = 0     // vldout
net:   tb.dut.txwrites [4] = 0000     // txwrites
net:   tb.dut.txtaken [1] = 1     // txtaken
net:   tb.dut.txfrees [16] = 0000000000100000     // txfrees
net:   tb.dut.txdata [8] = 00000000     // txdata
net:   tb.dut.txd [1] = 1     // txd
net:   tb.dut.txcount [16] = 0000000000000000     // txcount
net:   tb.dut.tx_empty [1] = 1     // tx_empty
net:   tb.dut.taken [1] = 1     // taken
net:   tb.dut.status [8] = 00000010     // status
net:   tb.dut.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.selected_reg [32] = 00000000000000000000000000000000     // selected_reg
net:   tb.dut.selected_hex [64] = 0011000000110000001100000011000000110000001100000011000000110000     // selected_hex
net:   tb.dut.sel1 [8] = 00000000     // sel1
net:   tb.dut.sel0 [8] = 00000000     // sel0
net:   tb.dut.rxdata [8] = 00000000     // rxdata
net:   tb.dut.rx_valid [1] = 0     // rx_valid
net:   tb.dut.resultout [64] = 0000000000000000000000000000000000000000000000000000000001110010     // resultout
net:   tb.dut.result [32] = 00000000000000000000000000000000     // result
net:   tb.dut.reads [4] = 0000     // reads
net:   tb.dut.pop [1] = 0     // pop
net:   tb.dut.oper [4] = 0000     // oper
net:   tb.dut.fvalue [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // fvalue
net:   tb.dut.frees [16] = 0000000000100000     // frees
net:   tb.dut.dst_wire [8] = 00000000     // dst_wire
net:   tb.dut.dout [80] = 00000000000000000000000000000000000000000000000000000000000000000000000000000000     // dout
net:   tb.dut.count [16] = 0000000000000000     // count
net:   tb.dut.CC [8] = 00000000     // CC
net:   tb.dut.BB [8] = 00000000     // BB
net:   tb.dut.AA [8] = 00000000     // AA
reg:   baudrate [16] = 0000000001100100 // baudrate
reg:   dst [8] = xxxxxxxx // dst
reg:   fractional [8] = 00000000 // fractional
reg:   reg0 [32] = 00000000000000000000000000000000 // reg0
reg:   reg1 [32] = 00000000000000000000000000000000 // reg1
reg:   reg2 [32] = 00000000000000000000000000000000 // reg2
reg:   reg3 [32] = 00000000000000000000000000000000 // reg3
reg:   reg4 [32] = 00000000000000000000000000000000 // reg4
reg:   reg5 [32] = 00000000000000000000000000000000 // reg5
reg:   reg6 [32] = 00000000000000000000000000000000 // reg6
reg:   reg7 [32] = 00000000000000000000000000000000 // reg7
son:   tb.dut.float_unit
son:   tb.dut.rxfifo
son:   tb.dut.txfifo
son:   tb.dut.uart
module: float_unit tb.dut.float_unit
net:   tb.dut.float_unit.clk [1] = 1     // clk
net:   tb.dut.float_unit.non_code [1] = 0     // non_code
net:   tb.dut.float_unit.oper [4] = 0000     // oper
net:   tb.dut.float_unit.panic [1] = 0     // panic
net:   tb.dut.float_unit.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.vldin [1] = 0     // vldin
net:   tb.dut.float_unit.src1_mod [32] = 00000000000000000000000000000000     // src1_mod
net:   tb.dut.float_unit.sincos_vldout [1] = 0     // sincos_vldout
net:   tb.dut.float_unit.sincos_out [32] = 00000000000000000000000000000000     // sincos_out
net:   tb.dut.float_unit.fsub_code [1] = 0     // fsub_code
net:   tb.dut.float_unit.fsqrt_out_vld [1] = 0     // fsqrt_out_vld
net:   tb.dut.float_unit.fsqrt_out [32] = 00000000000000000000000000000000     // fsqrt_out
net:   tb.dut.float_unit.fsqrt_code [1] = 0     // fsqrt_code
net:   tb.dut.float_unit.fsin_code [1] = 0     // fsin_code
net:   tb.dut.float_unit.fneg_code [1] = 0     // fneg_code
net:   tb.dut.float_unit.fmul_out [32] = 00000000000000000000000000000000     // fmul_out
net:   tb.dut.float_unit.fmul_code [1] = 0     // fmul_code
net:   tb.dut.float_unit.fmin_code [1] = 0     // fmin_code
net:   tb.dut.float_unit.fmax_code [1] = 0     // fmax_code
net:   tb.dut.float_unit.fgt_out [1] = 0     // fgt_out
net:   tb.dut.float_unit.fdiv_out_vld [1] = 0     // fdiv_out_vld
net:   tb.dut.float_unit.fdiv_out [32] = 00000000000000000000000000000000     // fdiv_out
net:   tb.dut.float_unit.fdiv_code [1] = 0     // fdiv_code
net:   tb.dut.float_unit.fcos_code [1] = 0     // fcos_code
net:   tb.dut.float_unit.fadd_out [32] = 00000000000000000000000000000000     // fadd_out
net:   tb.dut.float_unit.fadd_code [1] = 0     // fadd_code
net:   tb.dut.float_unit.fabs_code [1] = 0     // fabs_code
reg:   result [32] = 00000000000000000000000000000000 // result
reg:   vldout [1] = 0 // vldout
son:   tb.dut.float_unit.faddr
son:   tb.dut.float_unit.fdiv
son:   tb.dut.float_unit.fmul
son:   tb.dut.float_unit.fp_gt
son:   tb.dut.float_unit.fsqrt
son:   tb.dut.float_unit.sincos
module: fp_adder tb.dut.float_unit.faddr
net:   tb.dut.float_unit.faddr.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.faddr.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.faddr.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.faddr.z_exp [8] = 00000000     // z_exp
net:   tb.dut.float_unit.faddr.zero [1] = 0     // zero
net:   tb.dut.float_unit.faddr.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.faddr.z_exp_sh [8] = 00000001     // z_exp_sh
net:   tb.dut.float_unit.faddr.sum_sh [28] = 0000100000000000000000000000     // sum_sh
net:   tb.dut.float_unit.faddr.sum [28] = 0001000000000000000000000000     // sum
net:   tb.dut.float_unit.faddr.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.faddr.max_exp [8] = 00000000     // max_exp
net:   tb.dut.float_unit.faddr.lead [5] = 11000     // lead
net:   tb.dut.float_unit.faddr.diff1 [8] = 00000000     // diff1
net:   tb.dut.float_unit.faddr.diff0 [8] = 00000000     // diff0
net:   tb.dut.float_unit.faddr.b_val_sh [27] = 000100000000000000000000000     // b_val_sh
net:   tb.dut.float_unit.faddr.b_val [27] = 000100000000000000000000000     // b_val
net:   tb.dut.float_unit.faddr.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.faddr.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.faddr.a_val_sh [27] = 000100000000000000000000000     // a_val_sh
net:   tb.dut.float_unit.faddr.a_val [27] = 000100000000000000000000000     // a_val
net:   tb.dut.float_unit.faddr.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.faddr.a_exp [8] = 00000000     // a_exp
son:   tb.dut.float_unit.faddr.onea
module: findLeadingOne32 tb.dut.float_unit.faddr.onea
net:   tb.dut.float_unit.faddr.onea.src0 [32] = 00000001000000000000000000000000     // src0
net:   tb.dut.float_unit.faddr.onea.out [5] = 11000     // out
net:   tb.dut.float_unit.faddr.onea.bytex [8] = 00000001     // bytex
net:   tb.dut.float_unit.faddr.onea.act3 [1] = 1     // act3
net:   tb.dut.float_unit.faddr.onea.act2 [1] = 0     // act2
net:   tb.dut.float_unit.faddr.onea.act1 [1] = 0     // act1
module: fp_divider tb.dut.float_unit.fdiv
net:   tb.dut.float_unit.fdiv.clk [1] = 1     // clk
net:   tb.dut.float_unit.fdiv.en [1] = 1     // en
net:   tb.dut.float_unit.fdiv.m_sign [1] = 0     // m_sign
net:   tb.dut.float_unit.fdiv.m_zero [1] = 1     // m_zero
net:   tb.dut.float_unit.fdiv.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.fdiv.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fdiv.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.fdiv.take_mod [1] = 0     // take_mod
net:   tb.dut.float_unit.fdiv.vldin [1] = 0     // vldin
net:   tb.dut.float_unit.fdiv.z_zero [1] = 1     // z_zero
net:   tb.dut.float_unit.fdiv.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.fdiv.z_mod [1] = 0     // z_mod
net:   tb.dut.float_unit.fdiv.z_mat [23] = 00000000000000000000000     // z_mat
net:   tb.dut.float_unit.fdiv.z_exp [9] = 001111111     // z_exp
net:   tb.dut.float_unit.fdiv.vldout [1] = 0     // vldout
net:   tb.dut.float_unit.fdiv.remsrc0der [23] = 00000000000000000000000     // remsrc0der
net:   tb.dut.float_unit.fdiv.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.fdiv.mm_exp [9] = 000000000     // mm_exp
net:   tb.dut.float_unit.fdiv.midx [48] = 000000000000000000000001000000000000000000000000     // midx
net:   tb.dut.float_unit.fdiv.mid_exp [9] = 000000000     // mid_exp
net:   tb.dut.float_unit.fdiv.mid2 [48] = 100000000000000000000000000000000000000000000000     // mid2
net:   tb.dut.float_unit.fdiv.mid [48] = 000000000000000000000001000000000000000000000000     // mid
net:   tb.dut.float_unit.fdiv.m_exp [9] = 000000000     // m_exp
net:   tb.dut.float_unit.fdiv.lead [6] = 011000     // lead
net:   tb.dut.float_unit.fdiv.b_val [24] = 100000000000000000000000     // b_val
net:   tb.dut.float_unit.fdiv.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.fdiv.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.fdiv.a_val [24] = 100000000000000000000000     // a_val
net:   tb.dut.float_unit.fdiv.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.fdiv.a_exp [8] = 00000000     // a_exp
reg:   sh_exps [72] = 000000000000000000000000000000000000000000000000000000000000000000000000 // sh_exps
reg:   sh_mod [9] = 000000000 // sh_mod
reg:   sh_sign [9] = 000000000 // sh_sign
reg:   sh_zero [9] = 111111111 // sh_zero
son:   tb.dut.float_unit.fdiv.divi
son:   tb.dut.float_unit.fdiv.fone
module: divi_u48_u24_8 tb.dut.float_unit.fdiv.divi
net:   tb.dut.float_unit.fdiv.divi.clk [1] = 1     // clk
net:   tb.dut.float_unit.fdiv.divi.en [1] = 1     // en
net:   tb.dut.float_unit.fdiv.divi.res2 [1] = 0     // res2
net:   tb.dut.float_unit.fdiv.divi.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.fdiv.divi.src0 [48] = 100000000000000000000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fdiv.divi.src049 [24] = 000000000000000000000000     // src049
net:   tb.dut.float_unit.fdiv.divi.src1 [24] = 100000000000000000000000     // src1
net:   tb.dut.float_unit.fdiv.divi.src110 [25] = 0100000000000000000000000     // src110
net:   tb.dut.float_unit.fdiv.divi.src111 [25] = 0100000000000000000000000     // src111
net:   tb.dut.float_unit.fdiv.divi.src112 [25] = 0100000000000000000000000     // src112
net:   tb.dut.float_unit.fdiv.divi.src113 [25] = 0100000000000000000000000     // src113
net:   tb.dut.float_unit.fdiv.divi.src115 [25] = 0100000000000000000000000     // src115
net:   tb.dut.float_unit.fdiv.divi.src116 [25] = 0100000000000000000000000     // src116
net:   tb.dut.float_unit.fdiv.divi.src117 [25] = 0100000000000000000000000     // src117
net:   tb.dut.float_unit.fdiv.divi.src118 [25] = 0100000000000000000000000     // src118
net:   tb.dut.float_unit.fdiv.divi.src119 [25] = 0100000000000000000000000     // src119
net:   tb.dut.float_unit.fdiv.divi.src12 [25] = 0100000000000000000000000     // src12
net:   tb.dut.float_unit.fdiv.divi.src120 [25] = 0100000000000000000000000     // src120
net:   tb.dut.float_unit.fdiv.divi.src122 [25] = 0100000000000000000000000     // src122
net:   tb.dut.float_unit.fdiv.divi.src123 [25] = 0100000000000000000000000     // src123
net:   tb.dut.float_unit.fdiv.divi.src124 [25] = 0100000000000000000000000     // src124
net:   tb.dut.float_unit.fdiv.divi.src125 [25] = 0100000000000000000000000     // src125
net:   tb.dut.float_unit.fdiv.divi.src126 [25] = 0100000000000000000000000     // src126
net:   tb.dut.float_unit.fdiv.divi.src127 [25] = 0100000000000000000000000     // src127
net:   tb.dut.float_unit.fdiv.divi.src129 [25] = 0100000000000000000000000     // src129
net:   tb.dut.float_unit.fdiv.divi.src13 [25] = 0100000000000000000000000     // src13
net:   tb.dut.float_unit.fdiv.divi.src130 [25] = 0100000000000000000000000     // src130
net:   tb.dut.float_unit.fdiv.divi.src131 [25] = 0100000000000000000000000     // src131
net:   tb.dut.float_unit.fdiv.divi.src132 [25] = 0100000000000000000000000     // src132
net:   tb.dut.float_unit.fdiv.divi.src133 [25] = 0100000000000000000000000     // src133
net:   tb.dut.float_unit.fdiv.divi.src134 [25] = 0100000000000000000000000     // src134
net:   tb.dut.float_unit.fdiv.divi.src136 [25] = 0100000000000000000000000     // src136
net:   tb.dut.float_unit.fdiv.divi.src137 [25] = 0100000000000000000000000     // src137
net:   tb.dut.float_unit.fdiv.divi.src138 [25] = 0100000000000000000000000     // src138
net:   tb.dut.float_unit.fdiv.divi.src139 [25] = 0100000000000000000000000     // src139
net:   tb.dut.float_unit.fdiv.divi.src14 [25] = 0100000000000000000000000     // src14
net:   tb.dut.float_unit.fdiv.divi.src140 [25] = 0100000000000000000000000     // src140
net:   tb.dut.float_unit.fdiv.divi.src141 [25] = 0100000000000000000000000     // src141
net:   tb.dut.float_unit.fdiv.divi.src143 [25] = 0100000000000000000000000     // src143
net:   tb.dut.float_unit.fdiv.divi.src144 [25] = 0100000000000000000000000     // src144
net:   tb.dut.float_unit.fdiv.divi.src145 [25] = 0100000000000000000000000     // src145
net:   tb.dut.float_unit.fdiv.divi.src146 [25] = 0100000000000000000000000     // src146
net:   tb.dut.float_unit.fdiv.divi.src147 [25] = 0100000000000000000000000     // src147
net:   tb.dut.float_unit.fdiv.divi.src148 [25] = 0100000000000000000000000     // src148
net:   tb.dut.float_unit.fdiv.divi.src149 [25] = 0100000000000000000000000     // src149
net:   tb.dut.float_unit.fdiv.divi.src15 [25] = 0100000000000000000000000     // src15
net:   tb.dut.float_unit.fdiv.divi.src16 [25] = 0100000000000000000000000     // src16
net:   tb.dut.float_unit.fdiv.divi.src18 [25] = 0100000000000000000000000     // src18
net:   tb.dut.float_unit.fdiv.divi.src19 [25] = 0100000000000000000000000     // src19
net:   tb.dut.float_unit.fdiv.divi.vld10 [1] = 0     // vld10
net:   tb.dut.float_unit.fdiv.divi.vld11 [1] = 0     // vld11
net:   tb.dut.float_unit.fdiv.divi.vld12 [1] = 0     // vld12
net:   tb.dut.float_unit.fdiv.divi.vld13 [1] = 0     // vld13
net:   tb.dut.float_unit.fdiv.divi.vld15 [1] = 0     // vld15
net:   tb.dut.float_unit.fdiv.divi.vld16 [1] = 0     // vld16
net:   tb.dut.float_unit.fdiv.divi.vld17 [1] = 0     // vld17
net:   tb.dut.float_unit.fdiv.divi.vld18 [1] = 0     // vld18
net:   tb.dut.float_unit.fdiv.divi.vld19 [1] = 0     // vld19
net:   tb.dut.float_unit.fdiv.divi.vld2 [1] = 0     // vld2
net:   tb.dut.float_unit.fdiv.divi.vld20 [1] = 0     // vld20
net:   tb.dut.float_unit.fdiv.divi.vld22 [1] = 0     // vld22
net:   tb.dut.float_unit.fdiv.divi.vld23 [1] = 0     // vld23
net:   tb.dut.float_unit.fdiv.divi.vld24 [1] = 0     // vld24
net:   tb.dut.float_unit.fdiv.divi.vld25 [1] = 0     // vld25
net:   tb.dut.float_unit.fdiv.divi.vld26 [1] = 0     // vld26
net:   tb.dut.float_unit.fdiv.divi.vld27 [1] = 0     // vld27
net:   tb.dut.float_unit.fdiv.divi.vld29 [1] = 0     // vld29
net:   tb.dut.float_unit.fdiv.divi.vld3 [1] = 0     // vld3
net:   tb.dut.float_unit.fdiv.divi.vld30 [1] = 0     // vld30
net:   tb.dut.float_unit.fdiv.divi.vld31 [1] = 0     // vld31
net:   tb.dut.float_unit.fdiv.divi.vld32 [1] = 0     // vld32
net:   tb.dut.float_unit.fdiv.divi.vld33 [1] = 0     // vld33
net:   tb.dut.float_unit.fdiv.divi.vld34 [1] = 0     // vld34
net:   tb.dut.float_unit.fdiv.divi.vld36 [1] = 0     // vld36
net:   tb.dut.float_unit.fdiv.divi.vld37 [1] = 0     // vld37
net:   tb.dut.float_unit.fdiv.divi.vld38 [1] = 0     // vld38
net:   tb.dut.float_unit.fdiv.divi.vld39 [1] = 0     // vld39
net:   tb.dut.float_unit.fdiv.divi.vld4 [1] = 0     // vld4
net:   tb.dut.float_unit.fdiv.divi.vld40 [1] = 0     // vld40
net:   tb.dut.float_unit.fdiv.divi.vld41 [1] = 0     // vld41
net:   tb.dut.float_unit.fdiv.divi.vld43 [1] = 0     // vld43
net:   tb.dut.float_unit.fdiv.divi.vld44 [1] = 0     // vld44
net:   tb.dut.float_unit.fdiv.divi.vld45 [1] = 0     // vld45
net:   tb.dut.float_unit.fdiv.divi.vld46 [1] = 0     // vld46
net:   tb.dut.float_unit.fdiv.divi.vld47 [1] = 0     // vld47
net:   tb.dut.float_unit.fdiv.divi.vld48 [1] = 0     // vld48
net:   tb.dut.float_unit.fdiv.divi.vld49 [1] = 0     // vld49
net:   tb.dut.float_unit.fdiv.divi.vld5 [1] = 0     // vld5
net:   tb.dut.float_unit.fdiv.divi.vld6 [1] = 0     // vld6
net:   tb.dut.float_unit.fdiv.divi.vld8 [1] = 0     // vld8
net:   tb.dut.float_unit.fdiv.divi.vld9 [1] = 0     // vld9
net:   tb.dut.float_unit.fdiv.divi.vldin [1] = 0     // vldin
net:   tb.dut.float_unit.fdiv.divi.xhigh9 [25] = 1100000000000000100000000     // xhigh9
net:   tb.dut.float_unit.fdiv.divi.xhigh8 [25] = 1100000000000000010000000     // xhigh8
net:   tb.dut.float_unit.fdiv.divi.xhigh7 [25] = 1100000000000000001000000     // xhigh7
net:   tb.dut.float_unit.fdiv.divi.xhigh6 [25] = 1100000000000000000100000     // xhigh6
net:   tb.dut.float_unit.fdiv.divi.xhigh5 [25] = 1100000000000000000010000     // xhigh5
net:   tb.dut.float_unit.fdiv.divi.xhigh48 [25] = 1100000000000000000000000     // xhigh48
net:   tb.dut.float_unit.fdiv.divi.xhigh47 [25] = 1100000000000000000000000     // xhigh47
net:   tb.dut.float_unit.fdiv.divi.xhigh46 [25] = 1100000000000000000000000     // xhigh46
net:   tb.dut.float_unit.fdiv.divi.xhigh45 [25] = 1100000000000000000000000     // xhigh45
net:   tb.dut.float_unit.fdiv.divi.xhigh44 [25] = 1100000000000000000000000     // xhigh44
net:   tb.dut.float_unit.fdiv.divi.xhigh43 [25] = 1100000000000000000000000     // xhigh43
net:   tb.dut.float_unit.fdiv.divi.xhigh42 [25] = 1100000000000000000000000     // xhigh42
net:   tb.dut.float_unit.fdiv.divi.xhigh41 [25] = 1100000000000000000000000     // xhigh41
net:   tb.dut.float_unit.fdiv.divi.xhigh40 [25] = 1100000000000000000000000     // xhigh40
net:   tb.dut.float_unit.fdiv.divi.xhigh4 [25] = 1100000000000000000001000     // xhigh4
net:   tb.dut.float_unit.fdiv.divi.xhigh39 [25] = 1100000000000000000000000     // xhigh39
net:   tb.dut.float_unit.fdiv.divi.xhigh38 [25] = 1100000000000000000000000     // xhigh38
net:   tb.dut.float_unit.fdiv.divi.xhigh37 [25] = 1100000000000000000000000     // xhigh37
net:   tb.dut.float_unit.fdiv.divi.xhigh36 [25] = 1100000000000000000000000     // xhigh36
net:   tb.dut.float_unit.fdiv.divi.xhigh35 [25] = 1100000000000000000000000     // xhigh35
net:   tb.dut.float_unit.fdiv.divi.xhigh34 [25] = 1100000000000000000000000     // xhigh34
net:   tb.dut.float_unit.fdiv.divi.xhigh33 [25] = 1100000000000000000000000     // xhigh33
net:   tb.dut.float_unit.fdiv.divi.xhigh32 [25] = 1100000000000000000000000     // xhigh32
net:   tb.dut.float_unit.fdiv.divi.xhigh31 [25] = 1100000000000000000000000     // xhigh31
net:   tb.dut.float_unit.fdiv.divi.xhigh30 [25] = 1100000000000000000000000     // xhigh30
net:   tb.dut.float_unit.fdiv.divi.xhigh3 [25] = 1100000000000000000000100     // xhigh3
net:   tb.dut.float_unit.fdiv.divi.xhigh29 [25] = 1100000000000000000000000     // xhigh29
net:   tb.dut.float_unit.fdiv.divi.xhigh28 [25] = 1100000000000000000000000     // xhigh28
net:   tb.dut.float_unit.fdiv.divi.xhigh27 [25] = 1100000000000000000000000     // xhigh27
net:   tb.dut.float_unit.fdiv.divi.xhigh26 [25] = 1100000000000000000000000     // xhigh26
net:   tb.dut.float_unit.fdiv.divi.xhigh25 [25] = 1100000000000000000000000     // xhigh25
net:   tb.dut.float_unit.fdiv.divi.xhigh24 [25] = 0000000000000000000000000     // xhigh24
net:   tb.dut.float_unit.fdiv.divi.xhigh23 [25] = 1110000000000000000000000     // xhigh23
net:   tb.dut.float_unit.fdiv.divi.xhigh22 [25] = 1101000000000000000000000     // xhigh22
net:   tb.dut.float_unit.fdiv.divi.xhigh21 [25] = 1100100000000000000000000     // xhigh21
net:   tb.dut.float_unit.fdiv.divi.xhigh20 [25] = 1100010000000000000000000     // xhigh20
net:   tb.dut.float_unit.fdiv.divi.xhigh2 [25] = 1100000000000000000000010     // xhigh2
net:   tb.dut.float_unit.fdiv.divi.xhigh19 [25] = 1100001000000000000000000     // xhigh19
net:   tb.dut.float_unit.fdiv.divi.xhigh18 [25] = 1100000100000000000000000     // xhigh18
net:   tb.dut.float_unit.fdiv.divi.xhigh17 [25] = 1100000010000000000000000     // xhigh17
net:   tb.dut.float_unit.fdiv.divi.xhigh16 [25] = 1100000001000000000000000     // xhigh16
net:   tb.dut.float_unit.fdiv.divi.xhigh15 [25] = 1100000000100000000000000     // xhigh15
net:   tb.dut.float_unit.fdiv.divi.xhigh14 [25] = 1100000000010000000000000     // xhigh14
net:   tb.dut.float_unit.fdiv.divi.xhigh13 [25] = 1100000000001000000000000     // xhigh13
net:   tb.dut.float_unit.fdiv.divi.xhigh12 [25] = 1100000000000100000000000     // xhigh12
net:   tb.dut.float_unit.fdiv.divi.xhigh11 [25] = 1100000000000010000000000     // xhigh11
net:   tb.dut.float_unit.fdiv.divi.xhigh10 [25] = 1100000000000001000000000     // xhigh10
net:   tb.dut.float_unit.fdiv.divi.xhigh1 [25] = 1100000000000000000000001     // xhigh1
net:   tb.dut.float_unit.fdiv.divi.src09 [64] = 0000000000000000100000000000000000000000000000000000000000000000     // src09
net:   tb.dut.float_unit.fdiv.divi.src08 [65] = 00000000000000000100000000000000000000000000000000000000000000000     // src08
net:   tb.dut.float_unit.fdiv.divi.src06 [67] = 0000000000000000000100000000000000000000000000000000000000000000000     // src06
net:   tb.dut.float_unit.fdiv.divi.src05 [68] = 00000000000000000000100000000000000000000000000000000000000000000000     // src05
net:   tb.dut.float_unit.fdiv.divi.src048 [25] = 0000000000000000000000000     // src048
net:   tb.dut.float_unit.fdiv.divi.src047 [26] = 00000000000000000000000000     // src047
net:   tb.dut.float_unit.fdiv.divi.src046 [27] = 000000000000000000000000000     // src046
net:   tb.dut.float_unit.fdiv.divi.src045 [28] = 0000000000000000000000000000     // src045
net:   tb.dut.float_unit.fdiv.divi.src044 [29] = 00000000000000000000000000000     // src044
net:   tb.dut.float_unit.fdiv.divi.src043 [30] = 000000000000000000000000000000     // src043
net:   tb.dut.float_unit.fdiv.divi.src041 [32] = 00000000000000000000000000000000     // src041
net:   tb.dut.float_unit.fdiv.divi.src040 [33] = 000000000000000000000000000000000     // src040
net:   tb.dut.float_unit.fdiv.divi.src04 [69] = 000000000000000000000100000000000000000000000000000000000000000000000     // src04
net:   tb.dut.float_unit.fdiv.divi.src039 [34] = 0000000000000000000000000000000000     // src039
net:   tb.dut.float_unit.fdiv.divi.src038 [35] = 00000000000000000000000000000000000     // src038
net:   tb.dut.float_unit.fdiv.divi.src037 [36] = 000000000000000000000000000000000000     // src037
net:   tb.dut.float_unit.fdiv.divi.src036 [37] = 0000000000000000000000000000000000000     // src036
net:   tb.dut.float_unit.fdiv.divi.src034 [39] = 000000000000000000000000000000000000000     // src034
net:   tb.dut.float_unit.fdiv.divi.src033 [40] = 0000000000000000000000000000000000000000     // src033
net:   tb.dut.float_unit.fdiv.divi.src032 [41] = 00000000000000000000000000000000000000000     // src032
net:   tb.dut.float_unit.fdiv.divi.src031 [42] = 000000000000000000000000000000000000000000     // src031
net:   tb.dut.float_unit.fdiv.divi.src030 [43] = 0000000000000000000000000000000000000000000     // src030
net:   tb.dut.float_unit.fdiv.divi.src03 [70] = 0000000000000000000000100000000000000000000000000000000000000000000000     // src03
net:   tb.dut.float_unit.fdiv.divi.src029 [44] = 00000000000000000000000000000000000000000000     // src029
net:   tb.dut.float_unit.fdiv.divi.src027 [46] = 0000000000000000000000000000000000000000000000     // src027
net:   tb.dut.float_unit.fdiv.divi.src026 [47] = 00000000000000000000000000000000000000000000000     // src026
net:   tb.dut.float_unit.fdiv.divi.src025 [48] = 000000000000000000000000000000000000000000000000     // src025
net:   tb.dut.float_unit.fdiv.divi.src024 [49] = 0100000000000000000000000000000000000000000000000     // src024
net:   tb.dut.float_unit.fdiv.divi.src023 [50] = 00100000000000000000000000000000000000000000000000     // src023
net:   tb.dut.float_unit.fdiv.divi.src022 [51] = 000100000000000000000000000000000000000000000000000     // src022
net:   tb.dut.float_unit.fdiv.divi.src020 [53] = 00000100000000000000000000000000000000000000000000000     // src020
net:   tb.dut.float_unit.fdiv.divi.src02 [71] = 00000000000000000000000100000000000000000000000000000000000000000000000     // src02
net:   tb.dut.float_unit.fdiv.divi.src019 [54] = 000000100000000000000000000000000000000000000000000000     // src019
net:   tb.dut.float_unit.fdiv.divi.src018 [55] = 0000000100000000000000000000000000000000000000000000000     // src018
net:   tb.dut.float_unit.fdiv.divi.src017 [56] = 00000000100000000000000000000000000000000000000000000000     // src017
net:   tb.dut.float_unit.fdiv.divi.src016 [57] = 000000000100000000000000000000000000000000000000000000000     // src016
net:   tb.dut.float_unit.fdiv.divi.src015 [58] = 0000000000100000000000000000000000000000000000000000000000     // src015
net:   tb.dut.float_unit.fdiv.divi.src013 [60] = 000000000000100000000000000000000000000000000000000000000000     // src013
net:   tb.dut.float_unit.fdiv.divi.src012 [61] = 0000000000000100000000000000000000000000000000000000000000000     // src012
net:   tb.dut.float_unit.fdiv.divi.src011 [62] = 00000000000000100000000000000000000000000000000000000000000000     // src011
net:   tb.dut.float_unit.fdiv.divi.src010 [63] = 000000000000000100000000000000000000000000000000000000000000000     // src010
net:   tb.dut.float_unit.fdiv.divi.res9 [8] = 00000000     // res9
net:   tb.dut.float_unit.fdiv.divi.res8 [7] = 0000000     // res8
net:   tb.dut.float_unit.fdiv.divi.res6 [5] = 00000     // res6
net:   tb.dut.float_unit.fdiv.divi.res5 [4] = 0000     // res5
net:   tb.dut.float_unit.fdiv.divi.res49 [48] = 000000000000000000000001000000000000000000000000     // res49
net:   tb.dut.float_unit.fdiv.divi.res48 [47] = 00000000000000000000000100000000000000000000000     // res48
net:   tb.dut.float_unit.fdiv.divi.res47 [46] = 0000000000000000000000010000000000000000000000     // res47
net:   tb.dut.float_unit.fdiv.divi.res46 [45] = 000000000000000000000001000000000000000000000     // res46
net:   tb.dut.float_unit.fdiv.divi.res45 [44] = 00000000000000000000000100000000000000000000     // res45
net:   tb.dut.float_unit.fdiv.divi.res44 [43] = 0000000000000000000000010000000000000000000     // res44
net:   tb.dut.float_unit.fdiv.divi.res43 [42] = 000000000000000000000001000000000000000000     // res43
net:   tb.dut.float_unit.fdiv.divi.res41 [40] = 0000000000000000000000010000000000000000     // res41
net:   tb.dut.float_unit.fdiv.divi.res40 [39] = 000000000000000000000001000000000000000     // res40
net:   tb.dut.float_unit.fdiv.divi.res4 [3] = 000     // res4
net:   tb.dut.float_unit.fdiv.divi.res39 [38] = 00000000000000000000000100000000000000     // res39
net:   tb.dut.float_unit.fdiv.divi.res38 [37] = 0000000000000000000000010000000000000     // res38
net:   tb.dut.float_unit.fdiv.divi.res37 [36] = 000000000000000000000001000000000000     // res37
net:   tb.dut.float_unit.fdiv.divi.res36 [35] = 00000000000000000000000100000000000     // res36
net:   tb.dut.float_unit.fdiv.divi.res34 [33] = 000000000000000000000001000000000     // res34
net:   tb.dut.float_unit.fdiv.divi.res33 [32] = 00000000000000000000000100000000     // res33
net:   tb.dut.float_unit.fdiv.divi.res32 [31] = 0000000000000000000000010000000     // res32
net:   tb.dut.float_unit.fdiv.divi.res31 [30] = 000000000000000000000001000000     // res31
net:   tb.dut.float_unit.fdiv.divi.res30 [29] = 00000000000000000000000100000     // res30
net:   tb.dut.float_unit.fdiv.divi.res3 [2] = 00     // res3
net:   tb.dut.float_unit.fdiv.divi.res29 [28] = 0000000000000000000000010000     // res29
net:   tb.dut.float_unit.fdiv.divi.res27 [26] = 00000000000000000000000100     // res27
net:   tb.dut.float_unit.fdiv.divi.res26 [25] = 0000000000000000000000010     // res26
net:   tb.dut.float_unit.fdiv.divi.res25 [24] = 000000000000000000000001     // res25
net:   tb.dut.float_unit.fdiv.divi.res24 [23] = 00000000000000000000000     // res24
net:   tb.dut.float_unit.fdiv.divi.res23 [22] = 0000000000000000000000     // res23
net:   tb.dut.float_unit.fdiv.divi.res22 [21] = 000000000000000000000     // res22
net:   tb.dut.float_unit.fdiv.divi.res20 [19] = 0000000000000000000     // res20
net:   tb.dut.float_unit.fdiv.divi.res19 [18] = 000000000000000000     // res19
net:   tb.dut.float_unit.fdiv.divi.res18 [17] = 00000000000000000     // res18
net:   tb.dut.float_unit.fdiv.divi.res17 [16] = 0000000000000000     // res17
net:   tb.dut.float_unit.fdiv.divi.res16 [15] = 000000000000000     // res16
net:   tb.dut.float_unit.fdiv.divi.res15 [14] = 00000000000000     // res15
net:   tb.dut.float_unit.fdiv.divi.res13 [12] = 000000000000     // res13
net:   tb.dut.float_unit.fdiv.divi.res12 [11] = 00000000000     // res12
net:   tb.dut.float_unit.fdiv.divi.res11 [10] = 0000000000     // res11
net:   tb.dut.float_unit.fdiv.divi.res10 [9] = 000000000     // res10
net:   tb.dut.float_unit.fdiv.divi.res000 [48] = 000000000000000000000001000000000000000000000000     // res000
net:   tb.dut.float_unit.fdiv.divi.pre_src07 [66] = 000000000000000000100000000000000000000000000000000000000000000000     // pre_src07
net:   tb.dut.float_unit.fdiv.divi.pre_src042 [31] = 0000000000000000000000000000000     // pre_src042
net:   tb.dut.float_unit.fdiv.divi.pre_src035 [38] = 00000000000000000000000000000000000000     // pre_src035
net:   tb.dut.float_unit.fdiv.divi.pre_src028 [45] = 000000000000000000000000000000000000000000000     // pre_src028
net:   tb.dut.float_unit.fdiv.divi.pre_src021 [52] = 0000100000000000000000000000000000000000000000000000     // pre_src021
net:   tb.dut.float_unit.fdiv.divi.pre_src014 [59] = 00000000000100000000000000000000000000000000000000000000000     // pre_src014
net:   tb.dut.float_unit.fdiv.divi.pre_res7 [6] = 000000     // pre_res7
net:   tb.dut.float_unit.fdiv.divi.pre_res42 [41] = 00000000000000000000000100000000000000000     // pre_res42
net:   tb.dut.float_unit.fdiv.divi.pre_res35 [34] = 0000000000000000000000010000000000     // pre_res35
net:   tb.dut.float_unit.fdiv.divi.pre_res28 [27] = 000000000000000000000001000     // pre_res28
net:   tb.dut.float_unit.fdiv.divi.pre_res21 [20] = 00000000000000000000     // pre_res21
net:   tb.dut.float_unit.fdiv.divi.pre_res14 [13] = 0000000000000     // pre_res14
net:   tb.dut.float_unit.fdiv.divi.high9 [24] = 000000000000000100000000     // high9
net:   tb.dut.float_unit.fdiv.divi.high8 [24] = 000000000000000010000000     // high8
net:   tb.dut.float_unit.fdiv.divi.high7 [24] = 000000000000000001000000     // high7
net:   tb.dut.float_unit.fdiv.divi.high6 [24] = 000000000000000000100000     // high6
net:   tb.dut.float_unit.fdiv.divi.high5 [24] = 000000000000000000010000     // high5
net:   tb.dut.float_unit.fdiv.divi.high48 [24] = 000000000000000000000000     // high48
net:   tb.dut.float_unit.fdiv.divi.high47 [24] = 000000000000000000000000     // high47
net:   tb.dut.float_unit.fdiv.divi.high46 [24] = 000000000000000000000000     // high46
net:   tb.dut.float_unit.fdiv.divi.high45 [24] = 000000000000000000000000     // high45
net:   tb.dut.float_unit.fdiv.divi.high44 [24] = 000000000000000000000000     // high44
net:   tb.dut.float_unit.fdiv.divi.high43 [24] = 000000000000000000000000     // high43
net:   tb.dut.float_unit.fdiv.divi.high42 [24] = 000000000000000000000000     // high42
net:   tb.dut.float_unit.fdiv.divi.high41 [24] = 000000000000000000000000     // high41
net:   tb.dut.float_unit.fdiv.divi.high40 [24] = 000000000000000000000000     // high40
net:   tb.dut.float_unit.fdiv.divi.high4 [24] = 000000000000000000001000     // high4
net:   tb.dut.float_unit.fdiv.divi.high39 [24] = 000000000000000000000000     // high39
net:   tb.dut.float_unit.fdiv.divi.high38 [24] = 000000000000000000000000     // high38
net:   tb.dut.float_unit.fdiv.divi.high37 [24] = 000000000000000000000000     // high37
net:   tb.dut.float_unit.fdiv.divi.high36 [24] = 000000000000000000000000     // high36
net:   tb.dut.float_unit.fdiv.divi.high35 [24] = 000000000000000000000000     // high35
net:   tb.dut.float_unit.fdiv.divi.high34 [24] = 000000000000000000000000     // high34
net:   tb.dut.float_unit.fdiv.divi.high33 [24] = 000000000000000000000000     // high33
net:   tb.dut.float_unit.fdiv.divi.high32 [24] = 000000000000000000000000     // high32
net:   tb.dut.float_unit.fdiv.divi.high31 [24] = 000000000000000000000000     // high31
net:   tb.dut.float_unit.fdiv.divi.high30 [24] = 000000000000000000000000     // high30
net:   tb.dut.float_unit.fdiv.divi.high3 [24] = 000000000000000000000100     // high3
net:   tb.dut.float_unit.fdiv.divi.high29 [24] = 000000000000000000000000     // high29
net:   tb.dut.float_unit.fdiv.divi.high28 [24] = 000000000000000000000000     // high28
net:   tb.dut.float_unit.fdiv.divi.high27 [24] = 000000000000000000000000     // high27
net:   tb.dut.float_unit.fdiv.divi.high26 [24] = 000000000000000000000000     // high26
net:   tb.dut.float_unit.fdiv.divi.high25 [24] = 000000000000000000000000     // high25
net:   tb.dut.float_unit.fdiv.divi.high24 [24] = 000000000000000000000000     // high24
net:   tb.dut.float_unit.fdiv.divi.high23 [24] = 010000000000000000000000     // high23
net:   tb.dut.float_unit.fdiv.divi.high22 [24] = 001000000000000000000000     // high22
net:   tb.dut.float_unit.fdiv.divi.high21 [24] = 000100000000000000000000     // high21
net:   tb.dut.float_unit.fdiv.divi.high20 [24] = 000010000000000000000000     // high20
net:   tb.dut.float_unit.fdiv.divi.high2 [24] = 000000000000000000000010     // high2
net:   tb.dut.float_unit.fdiv.divi.high19 [24] = 000001000000000000000000     // high19
net:   tb.dut.float_unit.fdiv.divi.high18 [24] = 000000100000000000000000     // high18
net:   tb.dut.float_unit.fdiv.divi.high17 [24] = 000000010000000000000000     // high17
net:   tb.dut.float_unit.fdiv.divi.high16 [24] = 000000001000000000000000     // high16
net:   tb.dut.float_unit.fdiv.divi.high15 [24] = 000000000100000000000000     // high15
net:   tb.dut.float_unit.fdiv.divi.high14 [24] = 000000000010000000000000     // high14
net:   tb.dut.float_unit.fdiv.divi.high13 [24] = 000000000001000000000000     // high13
net:   tb.dut.float_unit.fdiv.divi.high12 [24] = 000000000000100000000000     // high12
net:   tb.dut.float_unit.fdiv.divi.high11 [24] = 000000000000010000000000     // high11
net:   tb.dut.float_unit.fdiv.divi.high10 [24] = 000000000000001000000000     // high10
net:   tb.dut.float_unit.fdiv.divi.high1 [24] = 000000000000000000000001     // high1
net:   tb.dut.float_unit.fdiv.divi.bit9 [1] = 0     // bit9
net:   tb.dut.float_unit.fdiv.divi.bit8 [1] = 0     // bit8
net:   tb.dut.float_unit.fdiv.divi.bit7 [1] = 0     // bit7
net:   tb.dut.float_unit.fdiv.divi.bit6 [1] = 0     // bit6
net:   tb.dut.float_unit.fdiv.divi.bit5 [1] = 0     // bit5
net:   tb.dut.float_unit.fdiv.divi.bit48 [1] = 0     // bit48
net:   tb.dut.float_unit.fdiv.divi.bit47 [1] = 0     // bit47
net:   tb.dut.float_unit.fdiv.divi.bit46 [1] = 0     // bit46
net:   tb.dut.float_unit.fdiv.divi.bit45 [1] = 0     // bit45
net:   tb.dut.float_unit.fdiv.divi.bit44 [1] = 0     // bit44
net:   tb.dut.float_unit.fdiv.divi.bit43 [1] = 0     // bit43
net:   tb.dut.float_unit.fdiv.divi.bit42 [1] = 0     // bit42
net:   tb.dut.float_unit.fdiv.divi.bit41 [1] = 0     // bit41
net:   tb.dut.float_unit.fdiv.divi.bit40 [1] = 0     // bit40
net:   tb.dut.float_unit.fdiv.divi.bit4 [1] = 0     // bit4
net:   tb.dut.float_unit.fdiv.divi.bit39 [1] = 0     // bit39
net:   tb.dut.float_unit.fdiv.divi.bit38 [1] = 0     // bit38
net:   tb.dut.float_unit.fdiv.divi.bit37 [1] = 0     // bit37
net:   tb.dut.float_unit.fdiv.divi.bit36 [1] = 0     // bit36
net:   tb.dut.float_unit.fdiv.divi.bit35 [1] = 0     // bit35
net:   tb.dut.float_unit.fdiv.divi.bit34 [1] = 0     // bit34
net:   tb.dut.float_unit.fdiv.divi.bit33 [1] = 0     // bit33
net:   tb.dut.float_unit.fdiv.divi.bit32 [1] = 0     // bit32
net:   tb.dut.float_unit.fdiv.divi.bit31 [1] = 0     // bit31
net:   tb.dut.float_unit.fdiv.divi.bit30 [1] = 0     // bit30
net:   tb.dut.float_unit.fdiv.divi.bit3 [1] = 0     // bit3
net:   tb.dut.float_unit.fdiv.divi.bit29 [1] = 0     // bit29
net:   tb.dut.float_unit.fdiv.divi.bit28 [1] = 0     // bit28
net:   tb.dut.float_unit.fdiv.divi.bit27 [1] = 0     // bit27
net:   tb.dut.float_unit.fdiv.divi.bit26 [1] = 0     // bit26
net:   tb.dut.float_unit.fdiv.divi.bit25 [1] = 0     // bit25
net:   tb.dut.float_unit.fdiv.divi.bit24 [1] = 1     // bit24
net:   tb.dut.float_unit.fdiv.divi.bit23 [1] = 0     // bit23
net:   tb.dut.float_unit.fdiv.divi.bit22 [1] = 0     // bit22
net:   tb.dut.float_unit.fdiv.divi.bit21 [1] = 0     // bit21
net:   tb.dut.float_unit.fdiv.divi.bit20 [1] = 0     // bit20
net:   tb.dut.float_unit.fdiv.divi.bit2 [1] = 0     // bit2
net:   tb.dut.float_unit.fdiv.divi.bit19 [1] = 0     // bit19
net:   tb.dut.float_unit.fdiv.divi.bit18 [1] = 0     // bit18
net:   tb.dut.float_unit.fdiv.divi.bit17 [1] = 0     // bit17
net:   tb.dut.float_unit.fdiv.divi.bit16 [1] = 0     // bit16
net:   tb.dut.float_unit.fdiv.divi.bit15 [1] = 0     // bit15
net:   tb.dut.float_unit.fdiv.divi.bit14 [1] = 0     // bit14
net:   tb.dut.float_unit.fdiv.divi.bit13 [1] = 0     // bit13
net:   tb.dut.float_unit.fdiv.divi.bit12 [1] = 0     // bit12
net:   tb.dut.float_unit.fdiv.divi.bit11 [1] = 0     // bit11
net:   tb.dut.float_unit.fdiv.divi.bit10 [1] = 0     // bit10
net:   tb.dut.float_unit.fdiv.divi.bit1 [1] = 0     // bit1
reg:   out [48] = 000000000000000000000001000000000000000000000000 // out
reg:   remsrc0der [23] = 00000000000000000000000 // remsrc0der
reg:   res14 [13] = 0000000000000 // res14
reg:   res21 [20] = 00000000000000000000 // res21
reg:   res28 [27] = 000000000000000000000001000 // res28
reg:   res35 [34] = 0000000000000000000000010000000000 // res35
reg:   res42 [41] = 00000000000000000000000100000000000000000 // res42
reg:   res7 [6] = 000000 // res7
reg:   src01 [72] = 000000000000000000000000100000000000000000000000000000000000000000000000 // src01
reg:   src014 [59] = 00000000000100000000000000000000000000000000000000000000000 // src014
reg:   src021 [52] = 0000100000000000000000000000000000000000000000000000 // src021
reg:   src028 [45] = 000000000000000000000000000000000000000000000 // src028
reg:   src035 [38] = 00000000000000000000000000000000000000 // src035
reg:   src042 [31] = 0000000000000000000000000000000 // src042
reg:   src07 [66] = 000000000000000000100000000000000000000000000000000000000000000000 // src07
reg:   src11 [25] = 0100000000000000000000000 // src11
reg:   src114 [25] = 0100000000000000000000000 // src114
reg:   src121 [25] = 0100000000000000000000000 // src121
reg:   src128 [25] = 0100000000000000000000000 // src128
reg:   src135 [25] = 0100000000000000000000000 // src135
reg:   src142 [25] = 0100000000000000000000000 // src142
reg:   src17 [25] = 0100000000000000000000000 // src17
reg:   vld1 [1] = 0 // vld1
reg:   vld14 [1] = 0 // vld14
reg:   vld21 [1] = 0 // vld21
reg:   vld28 [1] = 0 // vld28
reg:   vld35 [1] = 0 // vld35
reg:   vld42 [1] = 0 // vld42
reg:   vld7 [1] = 0 // vld7
reg:   vldout [1] = 0 // vldout
module: findLeadingOne48 tb.dut.float_unit.fdiv.fone
net:   tb.dut.float_unit.fdiv.fone.src0 [48] = 000000000000000000000001000000000000000000000000     // src0
net:   tb.dut.float_unit.fdiv.fone.out [6] = 011000     // out
net:   tb.dut.float_unit.fdiv.fone.bytex [8] = 00000001     // bytex
net:   tb.dut.float_unit.fdiv.fone.act5 [1] = 0     // act5
net:   tb.dut.float_unit.fdiv.fone.act4 [1] = 0     // act4
net:   tb.dut.float_unit.fdiv.fone.act3 [1] = 1     // act3
net:   tb.dut.float_unit.fdiv.fone.act2 [1] = 0     // act2
net:   tb.dut.float_unit.fdiv.fone.act1 [1] = 0     // act1
module: fp_multiplier tb.dut.float_unit.fmul
net:   tb.dut.float_unit.fmul.NEGZERO [32] = 10000000000000000000000000000000     // NEGZERO
net:   tb.dut.float_unit.fmul.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.fmul.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fmul.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.fmul.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.fmul.zeroes [1] = 1     // zeroes
net:   tb.dut.float_unit.fmul.z_mat [23] = 00000000000000000000000     // z_mat
net:   tb.dut.float_unit.fmul.z_exp [8] = 11111111     // z_exp
net:   tb.dut.float_unit.fmul.product [51] = 000010000000000000000000000000000000000000000000000     // product
net:   tb.dut.float_unit.fmul.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.fmul.is48 [1] = 0     // is48
net:   tb.dut.float_unit.fmul.exp0 [9] = 110000001     // exp0
net:   tb.dut.float_unit.fmul.b_val [24] = 100000000000000000000000     // b_val
net:   tb.dut.float_unit.fmul.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.fmul.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.fmul.a_val [24] = 100000000000000000000000     // a_val
net:   tb.dut.float_unit.fmul.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.fmul.a_exp [8] = 00000000     // a_exp
module: fp_gt tb.dut.float_unit.fp_gt
net:   tb.dut.float_unit.fp_gt.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fp_gt.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.fp_gt.out [1] = 0     // out
net:   tb.dut.float_unit.fp_gt.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.fp_gt.b_mat [27] = 000100000000000000000000000     // b_mat
net:   tb.dut.float_unit.fp_gt.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.fp_gt.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.fp_gt.a_mat [27] = 000100000000000000000000000     // a_mat
net:   tb.dut.float_unit.fp_gt.a_exp [8] = 00000000     // a_exp
module: fp_sqrt tb.dut.float_unit.fsqrt
net:   tb.dut.float_unit.fsqrt.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.fsqrt.clk [1] = 1     // clk
net:   tb.dut.float_unit.fsqrt.en [1] = 1     // en
net:   tb.dut.float_unit.fsqrt.m_sign [1] = 0     // m_sign
net:   tb.dut.float_unit.fsqrt.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.fsqrt.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fsqrt.vldin [1] = 0     // vldin
net:   tb.dut.float_unit.fsqrt.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.fsqrt.z_mat [23] = 00000000000000000000000     // z_mat
net:   tb.dut.float_unit.fsqrt.z_exp [8] = 00000000     // z_exp
net:   tb.dut.float_unit.fsqrt.vldout [1] = 0     // vldout
net:   tb.dut.float_unit.fsqrt.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.fsqrt.mid [24] = 101101010000010011110011     // mid
net:   tb.dut.float_unit.fsqrt.m_zero [1] = 1     // m_zero
net:   tb.dut.float_unit.fsqrt.m_exp [8] = 11000000     // m_exp
net:   tb.dut.float_unit.fsqrt.last_exp [8] = 11000000     // last_exp
net:   tb.dut.float_unit.fsqrt.amat_odd [48] = 100000000000000000000000000000000000000000000000     // amat_odd
net:   tb.dut.float_unit.fsqrt.amat_even [48] = 010000000000000000000000000000000000000000000000     // amat_even
net:   tb.dut.float_unit.fsqrt.amat [48] = 100000000000000000000000000000000000000000000000     // amat
net:   tb.dut.float_unit.fsqrt.a_val [24] = 100000000000000000000000     // a_val
net:   tb.dut.float_unit.fsqrt.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.fsqrt.a_exp [8] = 10000001     // a_exp
reg:   sh_exps [64] = 1100000011000000110000001100000011000000110000001100000011000000 // sh_exps
reg:   sh_sign [9] = 000000000 // sh_sign
reg:   sh_zero [9] = 111111111 // sh_zero
son:   tb.dut.float_unit.fsqrt.sqrt
module: sqrt_u48_10 tb.dut.float_unit.fsqrt.sqrt
net:   tb.dut.float_unit.fsqrt.sqrt.What0 [48] = 010000000000000000000000000000000000000000000000     // What0
net:   tb.dut.float_unit.fsqrt.sqrt.What1 [48] = 000100000000000000000000000000000000000000000000     // What1
net:   tb.dut.float_unit.fsqrt.sqrt.What10 [48] = 000000000000000000000100000000000000000000000000     // What10
net:   tb.dut.float_unit.fsqrt.sqrt.What11 [48] = 000000000000000000000001000000000000000000000000     // What11
net:   tb.dut.float_unit.fsqrt.sqrt.What12 [48] = 000000000000000000000000010000000000000000000000     // What12
net:   tb.dut.float_unit.fsqrt.sqrt.What13 [48] = 000000000000000000000000000100000000000000000000     // What13
net:   tb.dut.float_unit.fsqrt.sqrt.What14 [48] = 000000000000000000000000000001000000000000000000     // What14
net:   tb.dut.float_unit.fsqrt.sqrt.What15 [48] = 000000000000000000000000000000010000000000000000     // What15
net:   tb.dut.float_unit.fsqrt.sqrt.What16 [48] = 000000000000000000000000000000000100000000000000     // What16
net:   tb.dut.float_unit.fsqrt.sqrt.What17 [48] = 000000000000000000000000000000000001000000000000     // What17
net:   tb.dut.float_unit.fsqrt.sqrt.What18 [48] = 000000000000000000000000000000000000010000000000     // What18
net:   tb.dut.float_unit.fsqrt.sqrt.What19 [48] = 000000000000000000000000000000000000000100000000     // What19
net:   tb.dut.float_unit.fsqrt.sqrt.What2 [48] = 000001000000000000000000000000000000000000000000     // What2
net:   tb.dut.float_unit.fsqrt.sqrt.What20 [48] = 000000000000000000000000000000000000000001000000     // What20
net:   tb.dut.float_unit.fsqrt.sqrt.What21 [48] = 000000000000000000000000000000000000000000010000     // What21
net:   tb.dut.float_unit.fsqrt.sqrt.What22 [48] = 000000000000000000000000000000000000000000000100     // What22
net:   tb.dut.float_unit.fsqrt.sqrt.What23 [48] = 000000000000000000000000000000000000000000000001     // What23
net:   tb.dut.float_unit.fsqrt.sqrt.What3 [48] = 000000010000000000000000000000000000000000000000     // What3
net:   tb.dut.float_unit.fsqrt.sqrt.What4 [48] = 000000000100000000000000000000000000000000000000     // What4
net:   tb.dut.float_unit.fsqrt.sqrt.What5 [48] = 000000000001000000000000000000000000000000000000     // What5
net:   tb.dut.float_unit.fsqrt.sqrt.What6 [48] = 000000000000010000000000000000000000000000000000     // What6
net:   tb.dut.float_unit.fsqrt.sqrt.What7 [48] = 000000000000000100000000000000000000000000000000     // What7
net:   tb.dut.float_unit.fsqrt.sqrt.What8 [48] = 000000000000000001000000000000000000000000000000     // What8
net:   tb.dut.float_unit.fsqrt.sqrt.What9 [48] = 000000000000000000010000000000000000000000000000     // What9
net:   tb.dut.float_unit.fsqrt.sqrt.clk [1] = 1     // clk
net:   tb.dut.float_unit.fsqrt.sqrt.en [1] = 1     // en
net:   tb.dut.float_unit.fsqrt.sqrt.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.fsqrt.sqrt.src0 [48] = 100000000000000000000000000000000000000000000000     // src0
net:   tb.dut.float_unit.fsqrt.sqrt.vldin [1] = 0     // vldin
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New9 [48] = 100000000101001110010000000000000000000000000000     // wire_New9
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New7 [48] = 011111111111100100000000000000000000000000000000     // wire_New7
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New5 [48] = 011111101001000000000000000000000000000000000000     // wire_New5
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New3 [48] = 011110010000000000000000000000000000000000000000     // wire_New3
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New21 [48] = 100000000000000000000001001000001000100010010000     // wire_New21
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New19 [48] = 011111111111111111111011011110000110000100000000     // wire_New19
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New17 [48] = 011111111111111110110111100101101001000000000000     // wire_New17
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New15 [48] = 100000000000000000010010000110010000000000000000     // wire_New15
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New13 [48] = 011111111111111010101000000100000000000000000000     // wire_New13
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New11 [48] = 100000000000111110100001000000000000000000000000     // wire_New11
net:   tb.dut.float_unit.fsqrt.sqrt.wire_New1 [48] = 100100000000000000000000000000000000000000000000     // wire_New1
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA9 [48] = 011111111111100100000000000000000000000000000000     // wire_AxA9
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA7 [48] = 011111111111100100000000000000000000000000000000     // wire_AxA7
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA5 [48] = 011111101001000000000000000000000000000000000000     // wire_AxA5
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA3 [48] = 011110010000000000000000000000000000000000000000     // wire_AxA3
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA21 [48] = 011111111111111111111011011110000110000100000000     // wire_AxA21
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA19 [48] = 011111111111111111111011011110000110000100000000     // wire_AxA19
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA17 [48] = 011111111111111110110111100101101001000000000000     // wire_AxA17
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA15 [48] = 011111111111111010101000000100000000000000000000     // wire_AxA15
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA13 [48] = 011111111111111010101000000100000000000000000000     // wire_AxA13
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA11 [48] = 011111111111100100000000000000000000000000000000     // wire_AxA11
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AxA1 [48] = 010000000000000000000000000000000000000000000000     // wire_AxA1
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA9 [24] = 101101010000000000000000     // wire_AA9
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA7 [24] = 101101010000000000000000     // wire_AA7
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA5 [24] = 101101000000000000000000     // wire_AA5
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA3 [24] = 101100000000000000000000     // wire_AA3
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA21 [24] = 101101010000010011110000     // wire_AA21
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA19 [24] = 101101010000010011110000     // wire_AA19
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA17 [24] = 101101010000010011000000     // wire_AA17
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA15 [24] = 101101010000010000000000     // wire_AA15
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA13 [24] = 101101010000010000000000     // wire_AA13
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA11 [24] = 101101010000000000000000     // wire_AA11
net:   tb.dut.float_unit.fsqrt.sqrt.wire_AA1 [24] = 100000000000000000000000     // wire_AA1
net:   tb.dut.float_unit.fsqrt.sqrt.New8 [48] = 100000001010111001000000000000000000000000000000     // New8
net:   tb.dut.float_unit.fsqrt.sqrt.New6 [48] = 100000010110010000000000000000000000000000000000     // New6
net:   tb.dut.float_unit.fsqrt.sqrt.New4 [48] = 100001000100000000000000000000000000000000000000     // New4
net:   tb.dut.float_unit.fsqrt.sqrt.New23 [48] = 011111111111111111111111101101100111111010101001     // New23
net:   tb.dut.float_unit.fsqrt.sqrt.New22 [48] = 011111111111111111111110010011000111010011000100     // New22
net:   tb.dut.float_unit.fsqrt.sqrt.New20 [48] = 100000000000000000000110110010001011000001000000     // New20
net:   tb.dut.float_unit.fsqrt.sqrt.New2 [48] = 011001000000000000000000000000000000000000000000     // New2
net:   tb.dut.float_unit.fsqrt.sqrt.New18 [48] = 011111111111111111100100110101111100010000000000     // New18
net:   tb.dut.float_unit.fsqrt.sqrt.New16 [48] = 011111111111111101011101000101000100000000000000     // New16
net:   tb.dut.float_unit.fsqrt.sqrt.New14 [48] = 100000000000000101111100001001000000000000000000     // New14
net:   tb.dut.float_unit.fsqrt.sqrt.New12 [48] = 100000000000010001010000010000000000000000000000     // New12
net:   tb.dut.float_unit.fsqrt.sqrt.New10 [48] = 100000000010011001000100000000000000000000000000     // New10
net:   tb.dut.float_unit.fsqrt.sqrt.AxA8 [48] = 011111111111100100000000000000000000000000000000     // AxA8
net:   tb.dut.float_unit.fsqrt.sqrt.AxA6 [48] = 011111101001000000000000000000000000000000000000     // AxA6
net:   tb.dut.float_unit.fsqrt.sqrt.AxA4 [48] = 011110010000000000000000000000000000000000000000     // AxA4
net:   tb.dut.float_unit.fsqrt.sqrt.AxA23 [48] = 011111111111111111111111101101100111111010101001     // AxA23
net:   tb.dut.float_unit.fsqrt.sqrt.AxA22 [48] = 011111111111111111111110010011000111010011000100     // AxA22
net:   tb.dut.float_unit.fsqrt.sqrt.AxA20 [48] = 011111111111111111111011011110000110000100000000     // AxA20
net:   tb.dut.float_unit.fsqrt.sqrt.AxA2 [48] = 011001000000000000000000000000000000000000000000     // AxA2
net:   tb.dut.float_unit.fsqrt.sqrt.AxA18 [48] = 011111111111111111100100110101111100010000000000     // AxA18
net:   tb.dut.float_unit.fsqrt.sqrt.AxA16 [48] = 011111111111111101011101000101000100000000000000     // AxA16
net:   tb.dut.float_unit.fsqrt.sqrt.AxA14 [48] = 011111111111111010101000000100000000000000000000     // AxA14
net:   tb.dut.float_unit.fsqrt.sqrt.AxA12 [48] = 011111111111100100000000000000000000000000000000     // AxA12
net:   tb.dut.float_unit.fsqrt.sqrt.AxA10 [48] = 011111111111100100000000000000000000000000000000     // AxA10
net:   tb.dut.float_unit.fsqrt.sqrt.AxA0 [48] = 010000000000000000000000000000000000000000000000     // AxA0
net:   tb.dut.float_unit.fsqrt.sqrt.AA8 [24] = 101101010000000000000000     // AA8
net:   tb.dut.float_unit.fsqrt.sqrt.AA6 [24] = 101101000000000000000000     // AA6
net:   tb.dut.float_unit.fsqrt.sqrt.AA4 [24] = 101100000000000000000000     // AA4
net:   tb.dut.float_unit.fsqrt.sqrt.AA23 [24] = 101101010000010011110011     // AA23
net:   tb.dut.float_unit.fsqrt.sqrt.AA22 [24] = 101101010000010011110010     // AA22
net:   tb.dut.float_unit.fsqrt.sqrt.AA20 [24] = 101101010000010011110000     // AA20
net:   tb.dut.float_unit.fsqrt.sqrt.AA2 [24] = 101000000000000000000000     // AA2
net:   tb.dut.float_unit.fsqrt.sqrt.AA18 [24] = 101101010000010011100000     // AA18
net:   tb.dut.float_unit.fsqrt.sqrt.AA16 [24] = 101101010000010010000000     // AA16
net:   tb.dut.float_unit.fsqrt.sqrt.AA14 [24] = 101101010000010000000000     // AA14
net:   tb.dut.float_unit.fsqrt.sqrt.AA12 [24] = 101101010000000000000000     // AA12
net:   tb.dut.float_unit.fsqrt.sqrt.AA10 [24] = 101101010000000000000000     // AA10
net:   tb.dut.float_unit.fsqrt.sqrt.AA0 [24] = 100000000000000000000000     // AA0
reg:   AA1 [48] = 000000000000000000000000100000000000000000000000 // AA1
reg:   AA11 [48] = 000000000000000000000000101101010000000000000000 // AA11
reg:   AA13 [48] = 000000000000000000000000101101010000010000000000 // AA13
reg:   AA15 [48] = 000000000000000000000000101101010000010000000000 // AA15
reg:   AA17 [48] = 000000000000000000000000101101010000010011000000 // AA17
reg:   AA19 [48] = 000000000000000000000000101101010000010011110000 // AA19
reg:   AA21 [48] = 000000000000000000000000101101010000010011110000 // AA21
reg:   AA3 [48] = 000000000000000000000000101100000000000000000000 // AA3
reg:   AA5 [48] = 000000000000000000000000101101000000000000000000 // AA5
reg:   AA7 [48] = 000000000000000000000000101101010000000000000000 // AA7
reg:   AA9 [48] = 000000000000000000000000101101010000000000000000 // AA9
reg:   AxA1 [48] = 010000000000000000000000000000000000000000000000 // AxA1
reg:   AxA11 [48] = 011111111111100100000000000000000000000000000000 // AxA11
reg:   AxA13 [48] = 011111111111111010101000000100000000000000000000 // AxA13
reg:   AxA15 [48] = 011111111111111010101000000100000000000000000000 // AxA15
reg:   AxA17 [48] = 011111111111111110110111100101101001000000000000 // AxA17
reg:   AxA19 [48] = 011111111111111111111011011110000110000100000000 // AxA19
reg:   AxA21 [48] = 011111111111111111111011011110000110000100000000 // AxA21
reg:   AxA3 [48] = 011110010000000000000000000000000000000000000000 // AxA3
reg:   AxA5 [48] = 011111101001000000000000000000000000000000000000 // AxA5
reg:   AxA7 [48] = 011111111111100100000000000000000000000000000000 // AxA7
reg:   AxA9 [48] = 011111111111100100000000000000000000000000000000 // AxA9
reg:   out [24] = 101101010000010011110011 // out
reg:   src01 [48] = 100000000000000000000000000000000000000000000000 // src01
reg:   src011 [48] = 100000000000000000000000000000000000000000000000 // src011
reg:   src013 [48] = 100000000000000000000000000000000000000000000000 // src013
reg:   src015 [48] = 100000000000000000000000000000000000000000000000 // src015
reg:   src017 [48] = 100000000000000000000000000000000000000000000000 // src017
reg:   src019 [48] = 100000000000000000000000000000000000000000000000 // src019
reg:   src021 [48] = 100000000000000000000000000000000000000000000000 // src021
reg:   src03 [48] = 100000000000000000000000000000000000000000000000 // src03
reg:   src05 [48] = 100000000000000000000000000000000000000000000000 // src05
reg:   src07 [48] = 100000000000000000000000000000000000000000000000 // src07
reg:   src09 [48] = 100000000000000000000000000000000000000000000000 // src09
reg:   vld1 [1] = 0 // vld1
reg:   vld11 [1] = 0 // vld11
reg:   vld13 [1] = 0 // vld13
reg:   vld15 [1] = 0 // vld15
reg:   vld17 [1] = 0 // vld17
reg:   vld19 [1] = 0 // vld19
reg:   vld21 [1] = 0 // vld21
reg:   vld3 [1] = 0 // vld3
reg:   vld5 [1] = 0 // vld5
reg:   vld7 [1] = 0 // vld7
reg:   vld9 [1] = 0 // vld9
reg:   vldout [1] = 0 // vldout
module: fp_sincos tb.dut.float_unit.sincos
net:   tb.dut.float_unit.sincos.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.exception [1] = 0     // exception
net:   tb.dut.float_unit.sincos.half_pi [32] = 00111111110010010000111111011010     // half_pi
net:   tb.dut.float_unit.sincos.neg_half_pi [32] = 10111111110010010000111111011010     // neg_half_pi
net:   tb.dut.float_unit.sincos.neg_one_pi [32] = 11000000010010010000111111011010     // neg_one_pi
net:   tb.dut.float_unit.sincos.neg_two_thirds_pi [32] = 11000000100101101100101111100011     // neg_two_thirds_pi
net:   tb.dut.float_unit.sincos.one [32] = 00111111100000000000000000000000     // one
net:   tb.dut.float_unit.sincos.one_pi [32] = 01000000010010010000111111011010     // one_pi
net:   tb.dut.float_unit.sincos.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.sincos.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.two_pi [32] = 01000000110010010000111111011010     // two_pi
net:   tb.dut.float_unit.sincos.two_thirds_pi [32] = 01000000100101101100101111100011     // two_thirds_pi
net:   tb.dut.float_unit.sincos.what [6] = 000000     // what
net:   tb.dut.float_unit.sincos.was_ngt2 [1] = 1     // was_ngt2
net:   tb.dut.float_unit.sincos.was_ngt1 [1] = 1     // was_ngt1
net:   tb.dut.float_unit.sincos.was_ngt0 [1] = 1     // was_ngt0
net:   tb.dut.float_unit.sincos.was_neg [1] = 0     // was_neg
net:   tb.dut.float_unit.sincos.was_gt2 [1] = 1     // was_gt2
net:   tb.dut.float_unit.sincos.was_gt1 [1] = 1     // was_gt1
net:   tb.dut.float_unit.sincos.was_gt0 [1] = 1     // was_gt0
net:   tb.dut.float_unit.sincos.was_cos [1] = 0     // was_cos
net:   tb.dut.float_unit.sincos.was_atan [1] = 0     // was_atan
net:   tb.dut.float_unit.sincos.vldout [1] = 0     // vldout
net:   tb.dut.float_unit.sincos.src090 [32] = 01000000010010010000111111011010     // src090
net:   tb.dut.float_unit.sincos.src0270 [32] = 01000000110010010000111111011010     // src0270
net:   tb.dut.float_unit.sincos.src0180 [32] = 11000000010010010000111111011010     // src0180
net:   tb.dut.float_unit.sincos.nsrc090 [32] = 01000000010010010000111111011010     // nsrc090
net:   tb.dut.float_unit.sincos.nsrc0270 [32] = 01000000110010010000111111011010     // nsrc0270
net:   tb.dut.float_unit.sincos.nsrc0180 [32] = 01000000010010010000111111011010     // nsrc0180
net:   tb.dut.float_unit.sincos.ngt2 [1] = 1     // ngt2
net:   tb.dut.float_unit.sincos.ngt1 [1] = 1     // ngt1
net:   tb.dut.float_unit.sincos.ngt0 [1] = 1     // ngt0
net:   tb.dut.float_unit.sincos.negsrc0 [32] = 10000000000000000000000000000000     // negsrc0
net:   tb.dut.float_unit.sincos.gt2 [1] = 1     // gt2
net:   tb.dut.float_unit.sincos.gt1 [1] = 1     // gt1
net:   tb.dut.float_unit.sincos.gt0 [1] = 1     // gt0
net:   tb.dut.float_unit.sincos.genericresult [32] = 00000000000000000000000000000000     // genericresult
net:   tb.dut.float_unit.sincos.cordicresult [32] = 00000000000000000000000000000000     // cordicresult
net:   tb.dut.float_unit.sincos.cordicin_wire [32] = 00000000000000000000000000000000     // cordicin_wire
net:   tb.dut.float_unit.sincos.cordic_vld [1] = 0     // cordic_vld
reg:   cordicin [32] = 00000000000000000000000000000000 // cordicin
reg:   d1_what [6] = 000000 // d1_what
reg:   d2_what [6] = 000000 // d2_what
reg:   d3_what [6] = 000000 // d3_what
reg:   d4_what [6] = 000000 // d4_what
son:   tb.dut.float_unit.sincos.add1
son:   tb.dut.float_unit.sincos.add2
son:   tb.dut.float_unit.sincos.add3
son:   tb.dut.float_unit.sincos.cordic
son:   tb.dut.float_unit.sincos.dlygt0
son:   tb.dut.float_unit.sincos.dlygt1
son:   tb.dut.float_unit.sincos.dlygt2
son:   tb.dut.float_unit.sincos.dlygt3
son:   tb.dut.float_unit.sincos.dlygt4
son:   tb.dut.float_unit.sincos.dlygt5
son:   tb.dut.float_unit.sincos.dlygt6
son:   tb.dut.float_unit.sincos.i_gt0
son:   tb.dut.float_unit.sincos.i_gt0_n
son:   tb.dut.float_unit.sincos.i_gt1
son:   tb.dut.float_unit.sincos.i_gt1_n
son:   tb.dut.float_unit.sincos.i_gt2
son:   tb.dut.float_unit.sincos.i_gt2_n
son:   tb.dut.float_unit.sincos.nadd1
son:   tb.dut.float_unit.sincos.nadd2
son:   tb.dut.float_unit.sincos.nadd3
module: fp_adder tb.dut.float_unit.sincos.add1
net:   tb.dut.float_unit.sincos.add1.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.add1.src0 [32] = 01000000010010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.add1.src1 [32] = 10000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.add1.z_exp [8] = 10000000     // z_exp
net:   tb.dut.float_unit.sincos.add1.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.add1.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.sincos.add1.z_exp_sh [8] = 10000000     // z_exp_sh
net:   tb.dut.float_unit.sincos.add1.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.add1.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.add1.out [32] = 01000000010010010000111111011010     // out
net:   tb.dut.float_unit.sincos.add1.max_exp [8] = 10000000     // max_exp
net:   tb.dut.float_unit.sincos.add1.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.add1.diff1 [8] = 10000000     // diff1
net:   tb.dut.float_unit.sincos.add1.diff0 [8] = 00000000     // diff0
net:   tb.dut.float_unit.sincos.add1.b_val_sh [27] = 000000000000000000000000000     // b_val_sh
net:   tb.dut.float_unit.sincos.add1.b_val [27] = 000100000000000000000000000     // b_val
net:   tb.dut.float_unit.sincos.add1.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.add1.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.add1.a_val_sh [27] = 000110010010000111111011010     // a_val_sh
net:   tb.dut.float_unit.sincos.add1.a_val [27] = 000110010010000111111011010     // a_val
net:   tb.dut.float_unit.sincos.add1.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.add1.a_exp [8] = 10000000     // a_exp
son:   tb.dut.float_unit.sincos.add1.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.add1.onea
net:   tb.dut.float_unit.sincos.add1.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.add1.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.add1.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.add1.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.add1.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.add1.onea.act1 [1] = 1     // act1
module: fp_adder tb.dut.float_unit.sincos.add2
net:   tb.dut.float_unit.sincos.add2.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.add2.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.add2.src1 [32] = 11000000010010010000111111011010     // src1
net:   tb.dut.float_unit.sincos.add2.z_exp [8] = 10000000     // z_exp
net:   tb.dut.float_unit.sincos.add2.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.add2.z_sign [1] = 1     // z_sign
net:   tb.dut.float_unit.sincos.add2.z_exp_sh [8] = 10000000     // z_exp_sh
net:   tb.dut.float_unit.sincos.add2.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.add2.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.add2.out [32] = 11000000010010010000111111011010     // out
net:   tb.dut.float_unit.sincos.add2.max_exp [8] = 10000000     // max_exp
net:   tb.dut.float_unit.sincos.add2.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.add2.diff1 [8] = 00000000     // diff1
net:   tb.dut.float_unit.sincos.add2.diff0 [8] = 10000000     // diff0
net:   tb.dut.float_unit.sincos.add2.b_val_sh [27] = 000110010010000111111011010     // b_val_sh
net:   tb.dut.float_unit.sincos.add2.b_val [27] = 000110010010000111111011010     // b_val
net:   tb.dut.float_unit.sincos.add2.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.add2.b_exp [8] = 10000000     // b_exp
net:   tb.dut.float_unit.sincos.add2.a_val_sh [27] = 000000000000000000000000000     // a_val_sh
net:   tb.dut.float_unit.sincos.add2.a_val [27] = 000100000000000000000000000     // a_val
net:   tb.dut.float_unit.sincos.add2.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.add2.a_exp [8] = 00000000     // a_exp
son:   tb.dut.float_unit.sincos.add2.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.add2.onea
net:   tb.dut.float_unit.sincos.add2.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.add2.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.add2.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.add2.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.add2.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.add2.onea.act1 [1] = 1     // act1
module: fp_adder tb.dut.float_unit.sincos.add3
net:   tb.dut.float_unit.sincos.add3.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.add3.src0 [32] = 01000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.add3.src1 [32] = 10000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.add3.z_exp [8] = 10000001     // z_exp
net:   tb.dut.float_unit.sincos.add3.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.add3.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.sincos.add3.z_exp_sh [8] = 10000001     // z_exp_sh
net:   tb.dut.float_unit.sincos.add3.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.add3.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.add3.out [32] = 01000000110010010000111111011010     // out
net:   tb.dut.float_unit.sincos.add3.max_exp [8] = 10000001     // max_exp
net:   tb.dut.float_unit.sincos.add3.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.add3.diff1 [8] = 10000001     // diff1
net:   tb.dut.float_unit.sincos.add3.diff0 [8] = 00000000     // diff0
net:   tb.dut.float_unit.sincos.add3.b_val_sh [27] = 000000000000000000000000000     // b_val_sh
net:   tb.dut.float_unit.sincos.add3.b_val [27] = 000100000000000000000000000     // b_val
net:   tb.dut.float_unit.sincos.add3.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.add3.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.add3.a_val_sh [27] = 000110010010000111111011010     // a_val_sh
net:   tb.dut.float_unit.sincos.add3.a_val [27] = 000110010010000111111011010     // a_val
net:   tb.dut.float_unit.sincos.add3.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.add3.a_exp [8] = 10000001     // a_exp
son:   tb.dut.float_unit.sincos.add3.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.add3.onea
net:   tb.dut.float_unit.sincos.add3.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.add3.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.add3.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.add3.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.add3.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.add3.onea.act1 [1] = 1     // act1
module: reducedCordic tb.dut.float_unit.sincos.cordic
net:   tb.dut.float_unit.sincos.cordic.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.atanShift [6] = 010100     // atanShift
net:   tb.dut.float_unit.sincos.cordic.atanlimit [32] = 00000000000000000000010011011001     // atanlimit
net:   tb.dut.float_unit.sincos.cordic.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.cordic.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.flt1241 [32] = 01000100100110110010000000000000     // flt1241
net:   tb.dut.float_unit.sincos.cordic.recipK_sc [32] = 00000000000010011011011101001111     // recipK_sc
net:   tb.dut.float_unit.sincos.cordic.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.cordic.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.y9 [32] = 00000000000000000000000000000000     // y9
net:   tb.dut.float_unit.sincos.cordic.y8 [32] = 00000000000000000000000000000000     // y8
net:   tb.dut.float_unit.sincos.cordic.y7 [32] = 00000000000000000000000000000000     // y7
net:   tb.dut.float_unit.sincos.cordic.y6 [32] = 00000000000000000000000000000000     // y6
net:   tb.dut.float_unit.sincos.cordic.y5 [32] = 00000000000000000000000000000000     // y5
net:   tb.dut.float_unit.sincos.cordic.y4 [32] = 00000000000000000000000000000000     // y4
net:   tb.dut.float_unit.sincos.cordic.y3 [32] = 00000000000000000000000000000000     // y3
net:   tb.dut.float_unit.sincos.cordic.y24 [32] = 00000000000000000000000000000000     // y24
net:   tb.dut.float_unit.sincos.cordic.y23 [32] = 00000000000000000000000000000000     // y23
net:   tb.dut.float_unit.sincos.cordic.y22 [32] = 00000000000000000000000000000000     // y22
net:   tb.dut.float_unit.sincos.cordic.y21 [32] = 00000000000000000000000000000000     // y21
net:   tb.dut.float_unit.sincos.cordic.y20 [32] = 00000000000000000000000000000000     // y20
net:   tb.dut.float_unit.sincos.cordic.y2 [32] = 00000000000000000000000000000000     // y2
net:   tb.dut.float_unit.sincos.cordic.y19 [32] = 00000000000000000000000000000000     // y19
net:   tb.dut.float_unit.sincos.cordic.y18 [32] = 00000000000000000000000000000000     // y18
net:   tb.dut.float_unit.sincos.cordic.y17 [32] = 00000000000000000000000000000000     // y17
net:   tb.dut.float_unit.sincos.cordic.y16 [32] = 00000000000000000000000000000000     // y16
net:   tb.dut.float_unit.sincos.cordic.y15 [32] = 00000000000000000000000000000000     // y15
net:   tb.dut.float_unit.sincos.cordic.y14 [32] = 00000000000000000000000000000000     // y14
net:   tb.dut.float_unit.sincos.cordic.y13 [32] = 00000000000000000000000000000000     // y13
net:   tb.dut.float_unit.sincos.cordic.y12 [32] = 00000000000000000000000000000000     // y12
net:   tb.dut.float_unit.sincos.cordic.y11 [32] = 00000000000000000000000000000000     // y11
net:   tb.dut.float_unit.sincos.cordic.y10 [32] = 00000000000000000000000000000000     // y10
net:   tb.dut.float_unit.sincos.cordic.y1 [32] = 00000000000000000000000000000000     // y1
net:   tb.dut.float_unit.sincos.cordic.x9 [32] = 00000000000000000000000000000000     // x9
net:   tb.dut.float_unit.sincos.cordic.x8 [32] = 00000000000000000000000000000000     // x8
net:   tb.dut.float_unit.sincos.cordic.x7 [32] = 00000000000000000000000000000000     // x7
net:   tb.dut.float_unit.sincos.cordic.x6 [32] = 00000000000000000000000000000000     // x6
net:   tb.dut.float_unit.sincos.cordic.x5 [32] = 00000000000000000000000000000000     // x5
net:   tb.dut.float_unit.sincos.cordic.x4 [32] = 00000000000000000000000000000000     // x4
net:   tb.dut.float_unit.sincos.cordic.x3 [32] = 00000000000000000000000000000000     // x3
net:   tb.dut.float_unit.sincos.cordic.x24 [32] = 00000000000000000000000000000000     // x24
net:   tb.dut.float_unit.sincos.cordic.x23 [32] = 00000000000000000000000000000000     // x23
net:   tb.dut.float_unit.sincos.cordic.x22 [32] = 00000000000000000000000000000000     // x22
net:   tb.dut.float_unit.sincos.cordic.x21 [32] = 00000000000000000000000000000000     // x21
net:   tb.dut.float_unit.sincos.cordic.x20 [32] = 00000000000000000000000000000000     // x20
net:   tb.dut.float_unit.sincos.cordic.x2 [32] = 00000000000000000000000000000000     // x2
net:   tb.dut.float_unit.sincos.cordic.x19 [32] = 00000000000000000000000000000000     // x19
net:   tb.dut.float_unit.sincos.cordic.x18 [32] = 00000000000000000000000000000000     // x18
net:   tb.dut.float_unit.sincos.cordic.x17 [32] = 00000000000000000000000000000000     // x17
net:   tb.dut.float_unit.sincos.cordic.x16 [32] = 00000000000000000000000000000000     // x16
net:   tb.dut.float_unit.sincos.cordic.x15 [32] = 00000000000000000000000000000000     // x15
net:   tb.dut.float_unit.sincos.cordic.x14 [32] = 00000000000000000000000000000000     // x14
net:   tb.dut.float_unit.sincos.cordic.x13 [32] = 00000000000000000000000000000000     // x13
net:   tb.dut.float_unit.sincos.cordic.x12 [32] = 00000000000000000000000000000000     // x12
net:   tb.dut.float_unit.sincos.cordic.x11 [32] = 00000000000000000000000000000000     // x11
net:   tb.dut.float_unit.sincos.cordic.x10 [32] = 00000000000000000000000000000000     // x10
net:   tb.dut.float_unit.sincos.cordic.x1 [32] = 00000000000000000000000000000000     // x1
net:   tb.dut.float_unit.sincos.cordic.work0 [5] = 00000     // work0
net:   tb.dut.float_unit.sincos.cordic.start [1] = 0     // start
net:   tb.dut.float_unit.sincos.cordic.src02 [32] = 00000000000000000000000000000000     // src02
net:   tb.dut.float_unit.sincos.cordic.src00 [32] = 00000000000000000000000000000000     // src00
net:   tb.dut.float_unit.sincos.cordic.sin24 [1] = 0     // sin24
net:   tb.dut.float_unit.sincos.cordic.shift6 [6] = 011000     // shift6
net:   tb.dut.float_unit.sincos.cordic.outhold3 [32] = 00000000000000000000000000000000     // outhold3
net:   tb.dut.float_unit.sincos.cordic.outhold2 [32] = 00000000000000000000000000000000     // outhold2
net:   tb.dut.float_unit.sincos.cordic.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.sincos.cordic.nc25 [1] = 0     // nc25
net:   tb.dut.float_unit.sincos.cordic.nc24 [1] = 0     // nc24
net:   tb.dut.float_unit.sincos.cordic.limitatan20 [32] = 01001101100100000000000000000000     // limitatan20
net:   tb.dut.float_unit.sincos.cordic.isneg [1] = 0     // isneg
net:   tb.dut.float_unit.sincos.cordic.forout [32] = 00000000000000000000000000000000     // forout
net:   tb.dut.float_unit.sincos.cordic.cos24 [1] = 0     // cos24
net:   tb.dut.float_unit.sincos.cordic.backShift [6] = 101100     // backShift
net:   tb.dut.float_unit.sincos.cordic.atanOverLimit [1] = 0     // atanOverLimit
net:   tb.dut.float_unit.sincos.cordic.atan24 [1] = 0     // atan24
net:   tb.dut.float_unit.sincos.cordic.angle9 [32] = 11111111111111110000000000000001     // angle9
net:   tb.dut.float_unit.sincos.cordic.angle8 [32] = 11111110010000111011011111111100     // angle8
net:   tb.dut.float_unit.sincos.cordic.angle7 [32] = 11111110010001011011011111111001     // angle7
net:   tb.dut.float_unit.sincos.cordic.angle6 [32] = 11111110010010011011011111100011     // angle6
net:   tb.dut.float_unit.sincos.cordic.angle5 [32] = 11111110010100011011011100111000     // angle5
net:   tb.dut.float_unit.sincos.cordic.angle4 [32] = 11111110011000011011000111100101     // angle4
net:   tb.dut.float_unit.sincos.cordic.angle3 [32] = 11111110100000011000011110011111     // angle3
net:   tb.dut.float_unit.sincos.cordic.angle24 [32] = 11111111111111111111111000001010     // angle24
net:   tb.dut.float_unit.sincos.cordic.angle23 [32] = 11111111111111111111111000001011     // angle23
net:   tb.dut.float_unit.sincos.cordic.angle22 [32] = 11111111111111111111111000001110     // angle22
net:   tb.dut.float_unit.sincos.cordic.angle21 [32] = 11111111111111111111111000010101     // angle21
net:   tb.dut.float_unit.sincos.cordic.angle20 [32] = 11111111111111111111111000100100     // angle20
net:   tb.dut.float_unit.sincos.cordic.angle2 [32] = 11111110110000000011111010001010     // angle2
net:   tb.dut.float_unit.sincos.cordic.angle19 [32] = 11111111111111111111111001000011     // angle19
net:   tb.dut.float_unit.sincos.cordic.angle18 [32] = 11111111111111111111111010000010     // angle18
net:   tb.dut.float_unit.sincos.cordic.angle17 [32] = 11111111111111111111111100000001     // angle17
net:   tb.dut.float_unit.sincos.cordic.angle16 [32] = 11111111111111100000001000001000     // angle16
net:   tb.dut.float_unit.sincos.cordic.angle15 [32] = 11111111111111100000010000000111     // angle15
net:   tb.dut.float_unit.sincos.cordic.angle14 [32] = 11111111111111100000100000000110     // angle14
net:   tb.dut.float_unit.sincos.cordic.angle13 [32] = 11111111111111100001000000000101     // angle13
net:   tb.dut.float_unit.sincos.cordic.angle12 [32] = 11111111111111100010000000000100     // angle12
net:   tb.dut.float_unit.sincos.cordic.angle11 [32] = 11111111111111100100000000000011     // angle11
net:   tb.dut.float_unit.sincos.cordic.angle10 [32] = 11111111111111101000000000000010     // angle10
net:   tb.dut.float_unit.sincos.cordic.angle1 [32] = 11111111001101101111000000100110     // angle1
net:   tb.dut.float_unit.sincos.cordic.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.I24 [32] = 00000000000100000000000000000000     // I24
net:   tb.dut.float_unit.sincos.cordic.Angle0 [32] = 00000000000000000000000000000000     // Angle0
reg:   angleST0 [32] = 00000000000000000000000000000000 // angleST0
reg:   angleST1 [32] = 00000000000000000000000000000000 // angleST1
reg:   done [1] = 0 // done
reg:   isneg24 [1] = 0 // isneg24
reg:   isnegST0 [1] = 0 // isnegST0
reg:   isnegST1 [1] = 0 // isnegST1
reg:   outhold [32] = 00000000000000000000000000000000 // outhold
reg:   target1 [32] = 00000000000000000000000000000000 // target1
reg:   target2 [32] = 00000000000000000000000000000000 // target2
reg:   vldST0 [1] = 0 // vldST0
reg:   vldST1 [1] = 0 // vldST1
reg:   work24 [5] = 00000 // work24
reg:   workST0 [5] = 00000 // workST0
reg:   workST1 [5] = 00000 // workST1
reg:   xST0 [32] = 00000000000000000000000000000000 // xST0
reg:   xST1 [32] = 00000000000000000000000000000000 // xST1
reg:   xfinal [32] = 00000000000000000000000000000000 // xfinal
reg:   yST0 [32] = 00000000000000000000000000000000 // yST0
reg:   yST1 [32] = 00000000000000000000000000000000 // yST1
reg:   yfinal [32] = 00000000000000000000000000000000 // yfinal
son:   tb.dut.float_unit.sincos.cordic.fint0
son:   tb.dut.float_unit.sincos.cordic.gtatan
son:   tb.dut.float_unit.sincos.cordic.intf0
son:   tb.dut.float_unit.sincos.cordic.intf0_was
son:   tb.dut.float_unit.sincos.cordic.stepx0
son:   tb.dut.float_unit.sincos.cordic.stepx1
son:   tb.dut.float_unit.sincos.cordic.stepx10
son:   tb.dut.float_unit.sincos.cordic.stepx11
son:   tb.dut.float_unit.sincos.cordic.stepx12
son:   tb.dut.float_unit.sincos.cordic.stepx13
son:   tb.dut.float_unit.sincos.cordic.stepx14
son:   tb.dut.float_unit.sincos.cordic.stepx15
son:   tb.dut.float_unit.sincos.cordic.stepx16
son:   tb.dut.float_unit.sincos.cordic.stepx17
son:   tb.dut.float_unit.sincos.cordic.stepx18
son:   tb.dut.float_unit.sincos.cordic.stepx19
son:   tb.dut.float_unit.sincos.cordic.stepx2
son:   tb.dut.float_unit.sincos.cordic.stepx20
son:   tb.dut.float_unit.sincos.cordic.stepx21
son:   tb.dut.float_unit.sincos.cordic.stepx22
son:   tb.dut.float_unit.sincos.cordic.stepx23
son:   tb.dut.float_unit.sincos.cordic.stepx3
son:   tb.dut.float_unit.sincos.cordic.stepx4
son:   tb.dut.float_unit.sincos.cordic.stepx5
son:   tb.dut.float_unit.sincos.cordic.stepx6
son:   tb.dut.float_unit.sincos.cordic.stepx7
son:   tb.dut.float_unit.sincos.cordic.stepx8
son:   tb.dut.float_unit.sincos.cordic.stepx9
module: fp_float2int tb.dut.float_unit.sincos.cordic.fint0
net:   tb.dut.float_unit.sincos.cordic.fint0.ZERO [31] = 0000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.cordic.fint0.all_good [1] = 1     // all_good
net:   tb.dut.float_unit.sincos.cordic.fint0.data0 [32] = 00000000000000000000000000000000     // data0
net:   tb.dut.float_unit.sincos.cordic.fint0.data1 [32] = 01111111111111111111111111111111     // data1
net:   tb.dut.float_unit.sincos.cordic.fint0.mask0 [32] = 01111111111111111111111111111111     // mask0
net:   tb.dut.float_unit.sincos.cordic.fint0.mask1 [32] = 10000000000000000000000000000000     // mask1
net:   tb.dut.float_unit.sincos.cordic.fint0.special0 [1] = 1     // special0
net:   tb.dut.float_unit.sincos.cordic.fint0.special2 [1] = 0     // special2
net:   tb.dut.float_unit.sincos.cordic.fint0.special3 [1] = 0     // special3
net:   tb.dut.float_unit.sincos.cordic.fint0.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.fint0.src1 [6] = 011000     // src1
net:   tb.dut.float_unit.sincos.cordic.fint0.special1 [1] = 0     // special1
net:   tb.dut.float_unit.sincos.cordic.fint0.sign [1] = 0     // sign
net:   tb.dut.float_unit.sincos.cordic.fint0.shift_wire [8] = 10000110     // shift_wire
net:   tb.dut.float_unit.sincos.cordic.fint0.shift [6] = 100000     // shift
net:   tb.dut.float_unit.sincos.cordic.fint0.panic [1] = 0     // panic
net:   tb.dut.float_unit.sincos.cordic.fint0.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.sincos.cordic.fint0.mant3 [32] = 00000000000000000000000000000000     // mant3
net:   tb.dut.float_unit.sincos.cordic.fint0.mant2 [32] = 00000000000000000000000000000000     // mant2
net:   tb.dut.float_unit.sincos.cordic.fint0.mant [32] = 10000000000000000000000000000000     // mant
net:   tb.dut.float_unit.sincos.cordic.fint0.exp0 [8] = 00000000     // exp0
net:   tb.dut.float_unit.sincos.cordic.fint0.exp [8] = 10011001     // exp
module: fp_gt tb.dut.float_unit.sincos.cordic.gtatan
net:   tb.dut.float_unit.sincos.cordic.gtatan.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.gtatan.src1 [32] = 01000100100110110010000000000000     // src1
net:   tb.dut.float_unit.sincos.cordic.gtatan.out [1] = 0     // out
net:   tb.dut.float_unit.sincos.cordic.gtatan.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.cordic.gtatan.b_mat [27] = 000100110110010000000000000     // b_mat
net:   tb.dut.float_unit.sincos.cordic.gtatan.b_exp [8] = 10001001     // b_exp
net:   tb.dut.float_unit.sincos.cordic.gtatan.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.cordic.gtatan.a_mat [27] = 000100000000000000000000000     // a_mat
net:   tb.dut.float_unit.sincos.cordic.gtatan.a_exp [8] = 00000000     // a_exp
module: fp_int2float tb.dut.float_unit.sincos.cordic.intf0
net:   tb.dut.float_unit.sincos.cordic.intf0.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.cordic.intf0.is_signed [1] = 1     // is_signed
net:   tb.dut.float_unit.sincos.cordic.intf0.rounding [1] = 0     // rounding
net:   tb.dut.float_unit.sincos.cordic.intf0.sign [1] = 0     // sign
net:   tb.dut.float_unit.sincos.cordic.intf0.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.intf0.src1 [6] = 101100     // src1
net:   tb.dut.float_unit.sincos.cordic.intf0.value [32] = 00000000000000000000000000000000     // value
net:   tb.dut.float_unit.sincos.cordic.intf0.value0 [32] = 00000000000000000000000000000000     // value0
net:   tb.dut.float_unit.sincos.cordic.intf0.svalue [32] = 00000000000000000000000000000000     // svalue
net:   tb.dut.float_unit.sincos.cordic.intf0.sticky [1] = 0     // sticky
net:   tb.dut.float_unit.sincos.cordic.intf0.shift [5] = 11111     // shift
net:   tb.dut.float_unit.sincos.cordic.intf0.round_bit [1] = 0     // round_bit
net:   tb.dut.float_unit.sincos.cordic.intf0.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.sincos.cordic.intf0.most [5] = 00000     // most
net:   tb.dut.float_unit.sincos.cordic.intf0.man1 [24] = 000000000000000000000000     // man1
net:   tb.dut.float_unit.sincos.cordic.intf0.man0 [24] = 000000000000000000000000     // man0
net:   tb.dut.float_unit.sincos.cordic.intf0.guard [1] = 0     // guard
net:   tb.dut.float_unit.sincos.cordic.intf0.exp1 [8] = 01101011     // exp1
net:   tb.dut.float_unit.sincos.cordic.intf0.exp0 [8] = 11111111     // exp0
son:   tb.dut.float_unit.sincos.cordic.intf0.find
module: findFirstOne32 tb.dut.float_unit.sincos.cordic.intf0.find
net:   tb.dut.float_unit.sincos.cordic.intf0.find.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.intf0.find.most_wire [32] = 00000000000000000000000000000000     // most_wire
net:   tb.dut.float_unit.sincos.cordic.intf0.find.most [5] = 00000     // most
module: fp_int2float_was tb.dut.float_unit.sincos.cordic.intf0_was
net:   tb.dut.float_unit.sincos.cordic.intf0_was.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.cordic.intf0_was.rounding [1] = 0     // rounding
net:   tb.dut.float_unit.sincos.cordic.intf0_was.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.intf0_was.src1 [6] = 101100     // src1
net:   tb.dut.float_unit.sincos.cordic.intf0_was.value [32] = 00000000000000000000000000000000     // value
net:   tb.dut.float_unit.sincos.cordic.intf0_was.svalue [32] = 00000000000000000000000000000000     // svalue
net:   tb.dut.float_unit.sincos.cordic.intf0_was.sticky [1] = 0     // sticky
net:   tb.dut.float_unit.sincos.cordic.intf0_was.sign [1] = 0     // sign
net:   tb.dut.float_unit.sincos.cordic.intf0_was.shift [5] = 11111     // shift
net:   tb.dut.float_unit.sincos.cordic.intf0_was.round_bit [1] = 0     // round_bit
net:   tb.dut.float_unit.sincos.cordic.intf0_was.out [32] = 00000000000000000000000000000000     // out
net:   tb.dut.float_unit.sincos.cordic.intf0_was.most [5] = 00000     // most
net:   tb.dut.float_unit.sincos.cordic.intf0_was.man1 [24] = 000000000000000000000000     // man1
net:   tb.dut.float_unit.sincos.cordic.intf0_was.man0 [24] = 000000000000000000000000     // man0
net:   tb.dut.float_unit.sincos.cordic.intf0_was.guard [1] = 0     // guard
net:   tb.dut.float_unit.sincos.cordic.intf0_was.exp1 [8] = 01101011     // exp1
net:   tb.dut.float_unit.sincos.cordic.intf0_was.exp0 [8] = 11111111     // exp0
son:   tb.dut.float_unit.sincos.cordic.intf0_was.find
module: findFirstOne32 tb.dut.float_unit.sincos.cordic.intf0_was.find
net:   tb.dut.float_unit.sincos.cordic.intf0_was.find.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.cordic.intf0_was.find.most_wire [32] = 00000000000000000000000000000000     // most_wire
net:   tb.dut.float_unit.sincos.cordic.intf0_was.find.most [5] = 00000     // most
module: oneStep tb.dut.float_unit.sincos.cordic.stepx0
net:   tb.dut.float_unit.sincos.cordic.stepx0.Angle [32] = 00000000000000000000000000000000     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx0.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx0.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx0.Mask1 [32] = 00000000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx0.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx0.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx0.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx0.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx0.step [5] = 00000     // step
net:   tb.dut.float_unit.sincos.cordic.stepx0.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx0.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx0.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx0.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx0.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx0.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx0.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx0.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx0.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx0.Tmp [32] = 11111111001101101111000000100110     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx0.Mask0 [32] = 11111111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx0.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx0.Angle1 [32] = 11111111001101101111000000100110     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx0.Addit [32] = 00000000110010010000111111011010     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx0.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx0.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx0.angles0.step [5] = 00000     // step
reg:   angle [32] = 00000000110010010000111111011010 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx1
net:   tb.dut.float_unit.sincos.cordic.stepx1.Angle [32] = 11111111001101101111000000100110     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx1.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx1.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx1.Mask1 [32] = 10000000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx1.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx1.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx1.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx1.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx1.step [5] = 00001     // step
net:   tb.dut.float_unit.sincos.cordic.stepx1.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx1.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx1.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx1.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx1.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx1.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx1.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx1.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx1.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx1.Tmp [32] = 11111110110000000011111010001010     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx1.Mask0 [32] = 01111111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx1.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx1.Angle1 [32] = 11111110110000000011111010001010     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx1.Addit [32] = 00000000011101101011000110011100     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx1.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx1.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx1.angles0.step [5] = 00001     // step
reg:   angle [32] = 00000000011101101011000110011100 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx10
net:   tb.dut.float_unit.sincos.cordic.stepx10.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx10.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx10.Mask1 [32] = 11111111110000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx10.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx10.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx10.step [5] = 01010     // step
net:   tb.dut.float_unit.sincos.cordic.stepx10.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx10.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx10.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx10.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx10.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx10.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx10.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx10.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx10.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx10.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx10.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx10.Tmp [32] = 11111111111111100100000000000011     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx10.Mask0 [32] = 00000000001111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx10.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx10.Angle1 [32] = 11111111111111100100000000000011     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx10.Angle [32] = 11111111111111101000000000000010     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx10.Addit [32] = 00000000000000000011111111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx10.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx10.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx10.angles0.step [5] = 01010     // step
reg:   angle [32] = 00000000000000000011111111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx11
net:   tb.dut.float_unit.sincos.cordic.stepx11.Angle [32] = 11111111111111100100000000000011     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx11.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx11.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx11.Mask1 [32] = 11111111111000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx11.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx11.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx11.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx11.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx11.step [5] = 01011     // step
net:   tb.dut.float_unit.sincos.cordic.stepx11.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx11.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx11.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx11.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx11.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx11.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx11.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx11.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx11.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx11.Tmp [32] = 11111111111111100010000000000100     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx11.Mask0 [32] = 00000000000111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx11.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx11.Angle1 [32] = 11111111111111100010000000000100     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx11.Addit [32] = 00000000000000000001111111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx11.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx11.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx11.angles0.step [5] = 01011     // step
reg:   angle [32] = 00000000000000000001111111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx12
net:   tb.dut.float_unit.sincos.cordic.stepx12.Angle [32] = 11111111111111100010000000000100     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx12.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx12.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx12.Mask1 [32] = 11111111111100000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx12.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx12.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx12.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx12.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx12.step [5] = 01100     // step
net:   tb.dut.float_unit.sincos.cordic.stepx12.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx12.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx12.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx12.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx12.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx12.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx12.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx12.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx12.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx12.Tmp [32] = 11111111111111100001000000000101     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx12.Mask0 [32] = 00000000000011111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx12.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx12.Angle1 [32] = 11111111111111100001000000000101     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx12.Addit [32] = 00000000000000000000111111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx12.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx12.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx12.angles0.step [5] = 01100     // step
reg:   angle [32] = 00000000000000000000111111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx13
net:   tb.dut.float_unit.sincos.cordic.stepx13.Angle [32] = 11111111111111100001000000000101     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx13.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx13.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx13.Mask1 [32] = 11111111111110000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx13.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx13.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx13.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx13.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx13.step [5] = 01101     // step
net:   tb.dut.float_unit.sincos.cordic.stepx13.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx13.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx13.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx13.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx13.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx13.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx13.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx13.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx13.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx13.Tmp [32] = 11111111111111100000100000000110     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx13.Mask0 [32] = 00000000000001111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx13.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx13.Angle1 [32] = 11111111111111100000100000000110     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx13.Addit [32] = 00000000000000000000011111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx13.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx13.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx13.angles0.step [5] = 01101     // step
reg:   angle [32] = 00000000000000000000011111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx14
net:   tb.dut.float_unit.sincos.cordic.stepx14.Angle [32] = 11111111111111100000100000000110     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx14.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx14.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx14.Mask1 [32] = 11111111111111000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx14.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx14.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx14.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx14.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx14.step [5] = 01110     // step
net:   tb.dut.float_unit.sincos.cordic.stepx14.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx14.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx14.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx14.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx14.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx14.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx14.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx14.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx14.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx14.Tmp [32] = 11111111111111100000010000000111     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx14.Mask0 [32] = 00000000000000111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx14.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx14.Angle1 [32] = 11111111111111100000010000000111     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx14.Addit [32] = 00000000000000000000001111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx14.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx14.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx14.angles0.step [5] = 01110     // step
reg:   angle [32] = 00000000000000000000001111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx15
net:   tb.dut.float_unit.sincos.cordic.stepx15.Angle [32] = 11111111111111100000010000000111     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx15.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx15.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx15.Mask1 [32] = 11111111111111100000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx15.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx15.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx15.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx15.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx15.step [5] = 01111     // step
net:   tb.dut.float_unit.sincos.cordic.stepx15.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx15.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx15.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx15.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx15.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx15.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx15.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx15.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx15.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx15.Tmp [32] = 11111111111111100000001000001000     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx15.Mask0 [32] = 00000000000000011111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx15.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx15.Angle1 [32] = 11111111111111100000001000001000     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx15.Addit [32] = 00000000000000000000000111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx15.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx15.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx15.angles0.step [5] = 01111     // step
reg:   angle [32] = 00000000000000000000000111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx16
net:   tb.dut.float_unit.sincos.cordic.stepx16.Angle [32] = 00000000000000000000000000000000     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx16.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx16.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx16.Mask1 [32] = 11111111111111110000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx16.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx16.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx16.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx16.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx16.step [5] = 10000     // step
net:   tb.dut.float_unit.sincos.cordic.stepx16.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx16.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx16.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx16.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx16.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx16.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx16.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx16.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx16.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx16.Tmp [32] = 11111111111111111111111100000001     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx16.Mask0 [32] = 00000000000000001111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx16.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx16.Angle1 [32] = 11111111111111111111111100000001     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx16.Addit [32] = 00000000000000000000000011111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx16.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx16.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx16.angles0.step [5] = 10000     // step
reg:   angle [32] = 00000000000000000000000011111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx17
net:   tb.dut.float_unit.sincos.cordic.stepx17.Angle [32] = 11111111111111111111111100000001     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx17.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx17.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx17.Mask1 [32] = 11111111111111111000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx17.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx17.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx17.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx17.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx17.step [5] = 10001     // step
net:   tb.dut.float_unit.sincos.cordic.stepx17.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx17.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx17.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx17.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx17.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx17.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx17.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx17.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx17.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx17.Tmp [32] = 11111111111111111111111010000010     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx17.Mask0 [32] = 00000000000000000111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx17.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx17.Angle1 [32] = 11111111111111111111111010000010     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx17.Addit [32] = 00000000000000000000000001111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx17.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx17.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx17.angles0.step [5] = 10001     // step
reg:   angle [32] = 00000000000000000000000001111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx18
net:   tb.dut.float_unit.sincos.cordic.stepx18.Angle [32] = 11111111111111111111111010000010     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx18.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx18.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx18.Mask1 [32] = 11111111111111111100000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx18.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx18.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx18.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx18.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx18.step [5] = 10010     // step
net:   tb.dut.float_unit.sincos.cordic.stepx18.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx18.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx18.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx18.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx18.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx18.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx18.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx18.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx18.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx18.Tmp [32] = 11111111111111111111111001000011     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx18.Mask0 [32] = 00000000000000000011111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx18.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx18.Angle1 [32] = 11111111111111111111111001000011     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx18.Addit [32] = 00000000000000000000000000111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx18.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx18.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx18.angles0.step [5] = 10010     // step
reg:   angle [32] = 00000000000000000000000000111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx19
net:   tb.dut.float_unit.sincos.cordic.stepx19.Angle [32] = 11111111111111111111111001000011     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx19.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx19.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx19.Mask1 [32] = 11111111111111111110000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx19.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx19.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx19.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx19.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx19.step [5] = 10011     // step
net:   tb.dut.float_unit.sincos.cordic.stepx19.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx19.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx19.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx19.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx19.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx19.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx19.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx19.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx19.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx19.Tmp [32] = 11111111111111111111111000100100     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx19.Mask0 [32] = 00000000000000000001111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx19.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx19.Angle1 [32] = 11111111111111111111111000100100     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx19.Addit [32] = 00000000000000000000000000011111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx19.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx19.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx19.angles0.step [5] = 10011     // step
reg:   angle [32] = 00000000000000000000000000011111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx2
net:   tb.dut.float_unit.sincos.cordic.stepx2.Angle [32] = 11111110110000000011111010001010     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx2.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx2.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx2.Mask1 [32] = 11000000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx2.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx2.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx2.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx2.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx2.step [5] = 00010     // step
net:   tb.dut.float_unit.sincos.cordic.stepx2.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx2.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx2.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx2.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx2.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx2.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx2.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx2.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx2.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx2.Tmp [32] = 11111110100000011000011110011111     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx2.Mask0 [32] = 00111111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx2.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx2.Angle1 [32] = 11111110100000011000011110011111     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx2.Addit [32] = 00000000001111101011011011101011     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx2.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx2.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx2.angles0.step [5] = 00010     // step
reg:   angle [32] = 00000000001111101011011011101011 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx20
net:   tb.dut.float_unit.sincos.cordic.stepx20.Angle [32] = 11111111111111111111111000100100     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx20.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx20.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx20.Mask1 [32] = 11111111111111111111000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx20.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx20.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx20.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx20.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx20.step [5] = 10100     // step
net:   tb.dut.float_unit.sincos.cordic.stepx20.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx20.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx20.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx20.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx20.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx20.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx20.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx20.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx20.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx20.Tmp [32] = 11111111111111111111111000010101     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx20.Mask0 [32] = 00000000000000000000111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx20.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx20.Angle1 [32] = 11111111111111111111111000010101     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx20.Addit [32] = 00000000000000000000000000001111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx20.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx20.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx20.angles0.step [5] = 10100     // step
reg:   angle [32] = 00000000000000000000000000001111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx21
net:   tb.dut.float_unit.sincos.cordic.stepx21.Angle [32] = 11111111111111111111111000010101     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx21.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx21.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx21.Mask1 [32] = 11111111111111111111100000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx21.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx21.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx21.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx21.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx21.step [5] = 10101     // step
net:   tb.dut.float_unit.sincos.cordic.stepx21.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx21.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx21.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx21.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx21.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx21.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx21.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx21.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx21.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx21.Tmp [32] = 11111111111111111111111000001110     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx21.Mask0 [32] = 00000000000000000000011111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx21.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx21.Angle1 [32] = 11111111111111111111111000001110     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx21.Addit [32] = 00000000000000000000000000000111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx21.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx21.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx21.angles0.step [5] = 10101     // step
reg:   angle [32] = 00000000000000000000000000000111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx22
net:   tb.dut.float_unit.sincos.cordic.stepx22.Angle [32] = 11111111111111111111111000001110     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx22.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx22.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx22.Mask1 [32] = 11111111111111111111110000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx22.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx22.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx22.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx22.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx22.step [5] = 10110     // step
net:   tb.dut.float_unit.sincos.cordic.stepx22.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx22.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx22.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx22.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx22.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx22.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx22.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx22.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx22.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx22.Tmp [32] = 11111111111111111111111000001011     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx22.Mask0 [32] = 00000000000000000000001111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx22.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx22.Angle1 [32] = 11111111111111111111111000001011     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx22.Addit [32] = 00000000000000000000000000000011     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx22.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx22.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx22.angles0.step [5] = 10110     // step
reg:   angle [32] = 00000000000000000000000000000011 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx23
net:   tb.dut.float_unit.sincos.cordic.stepx23.Angle [32] = 11111111111111111111111000001011     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx23.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx23.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx23.Mask1 [32] = 11111111111111111111111000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx23.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx23.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx23.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx23.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx23.step [5] = 10111     // step
net:   tb.dut.float_unit.sincos.cordic.stepx23.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx23.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx23.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx23.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx23.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx23.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx23.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx23.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx23.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx23.Tmp [32] = 11111111111111111111111000001010     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx23.Mask0 [32] = 00000000000000000000000111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx23.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx23.Angle1 [32] = 11111111111111111111111000001010     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx23.Addit [32] = 00000000000000000000000000000001     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx23.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx23.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx23.angles0.step [5] = 10111     // step
reg:   angle [32] = 00000000000000000000000000000001 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx3
net:   tb.dut.float_unit.sincos.cordic.stepx3.Angle [32] = 11111110100000011000011110011111     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx3.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx3.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx3.Mask1 [32] = 11100000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx3.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx3.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx3.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx3.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx3.step [5] = 00011     // step
net:   tb.dut.float_unit.sincos.cordic.stepx3.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx3.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx3.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx3.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx3.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx3.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx3.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx3.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx3.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx3.Tmp [32] = 11111110011000011011000111100101     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx3.Mask0 [32] = 00011111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx3.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx3.Angle1 [32] = 11111110011000011011000111100101     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx3.Addit [32] = 00000000000111111101010110111010     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx3.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx3.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx3.angles0.step [5] = 00011     // step
reg:   angle [32] = 00000000000111111101010110111010 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx4
net:   tb.dut.float_unit.sincos.cordic.stepx4.Angle [32] = 11111110011000011011000111100101     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx4.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx4.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx4.Mask1 [32] = 11110000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx4.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx4.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx4.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx4.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx4.step [5] = 00100     // step
net:   tb.dut.float_unit.sincos.cordic.stepx4.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx4.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx4.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx4.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx4.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx4.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx4.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx4.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx4.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx4.Tmp [32] = 11111110010100011011011100111000     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx4.Mask0 [32] = 00001111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx4.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx4.Angle1 [32] = 11111110010100011011011100111000     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx4.Addit [32] = 00000000000011111111101010101101     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx4.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx4.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx4.angles0.step [5] = 00100     // step
reg:   angle [32] = 00000000000011111111101010101101 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx5
net:   tb.dut.float_unit.sincos.cordic.stepx5.Angle [32] = 11111110010100011011011100111000     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx5.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx5.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx5.Mask1 [32] = 11111000000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx5.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx5.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx5.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx5.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx5.step [5] = 00101     // step
net:   tb.dut.float_unit.sincos.cordic.stepx5.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx5.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx5.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx5.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx5.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx5.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx5.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx5.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx5.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx5.Tmp [32] = 11111110010010011011011111100011     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx5.Mask0 [32] = 00000111111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx5.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx5.Angle1 [32] = 11111110010010011011011111100011     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx5.Addit [32] = 00000000000001111111111101010101     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx5.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx5.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx5.angles0.step [5] = 00101     // step
reg:   angle [32] = 00000000000001111111111101010101 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx6
net:   tb.dut.float_unit.sincos.cordic.stepx6.Angle [32] = 11111110010010011011011111100011     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx6.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx6.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx6.Mask1 [32] = 11111100000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx6.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx6.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx6.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx6.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx6.step [5] = 00110     // step
net:   tb.dut.float_unit.sincos.cordic.stepx6.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx6.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx6.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx6.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx6.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx6.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx6.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx6.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx6.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx6.Tmp [32] = 11111110010001011011011111111001     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx6.Mask0 [32] = 00000011111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx6.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx6.Angle1 [32] = 11111110010001011011011111111001     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx6.Addit [32] = 00000000000000111111111111101010     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx6.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx6.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx6.angles0.step [5] = 00110     // step
reg:   angle [32] = 00000000000000111111111111101010 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx7
net:   tb.dut.float_unit.sincos.cordic.stepx7.Angle [32] = 11111110010001011011011111111001     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx7.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx7.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx7.Mask1 [32] = 11111110000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx7.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx7.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx7.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx7.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx7.step [5] = 00111     // step
net:   tb.dut.float_unit.sincos.cordic.stepx7.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx7.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx7.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx7.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx7.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx7.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx7.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx7.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx7.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx7.Tmp [32] = 11111110010000111011011111111100     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx7.Mask0 [32] = 00000001111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx7.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx7.Angle1 [32] = 11111110010000111011011111111100     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx7.Addit [32] = 00000000000000011111111111111101     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx7.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx7.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx7.angles0.step [5] = 00111     // step
reg:   angle [32] = 00000000000000011111111111111101 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx8
net:   tb.dut.float_unit.sincos.cordic.stepx8.Angle [32] = 00000000000000000000000000000000     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx8.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx8.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx8.Mask1 [32] = 11111111000000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx8.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx8.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx8.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx8.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx8.step [5] = 01000     // step
net:   tb.dut.float_unit.sincos.cordic.stepx8.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx8.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx8.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx8.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx8.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx8.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx8.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx8.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx8.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx8.Tmp [32] = 11111111111111110000000000000001     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx8.Mask0 [32] = 00000000111111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx8.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx8.Angle1 [32] = 11111111111111110000000000000001     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx8.Addit [32] = 00000000000000001111111111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx8.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx8.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx8.angles0.step [5] = 01000     // step
reg:   angle [32] = 00000000000000001111111111111111 // angle
module: oneStep tb.dut.float_unit.sincos.cordic.stepx9
net:   tb.dut.float_unit.sincos.cordic.stepx9.Angle [32] = 11111111111111110000000000000001     // Angle
net:   tb.dut.float_unit.sincos.cordic.stepx9.DX [32] = 00000000000000000000000000000000     // DX
net:   tb.dut.float_unit.sincos.cordic.stepx9.DY [32] = 00000000000000000000000000000000     // DY
net:   tb.dut.float_unit.sincos.cordic.stepx9.Mask1 [32] = 11111111100000000000000000000000     // Mask1
net:   tb.dut.float_unit.sincos.cordic.stepx9.X0 [32] = 00000000000000000000000000000000     // X0
net:   tb.dut.float_unit.sincos.cordic.stepx9.XX [32] = 00000000000000000000000000000000     // XX
net:   tb.dut.float_unit.sincos.cordic.stepx9.Y0 [32] = 00000000000000000000000000000000     // Y0
net:   tb.dut.float_unit.sincos.cordic.stepx9.YY [32] = 00000000000000000000000000000000     // YY
net:   tb.dut.float_unit.sincos.cordic.stepx9.step [5] = 01001     // step
net:   tb.dut.float_unit.sincos.cordic.stepx9.target [32] = 00000000000000000000000000000000     // target
net:   tb.dut.float_unit.sincos.cordic.stepx9.work [5] = 00000     // work
net:   tb.dut.float_unit.sincos.cordic.stepx9.sin [1] = 0     // sin
net:   tb.dut.float_unit.sincos.cordic.stepx9.nc1 [1] = 0     // nc1
net:   tb.dut.float_unit.sincos.cordic.stepx9.nc0 [1] = 0     // nc0
net:   tb.dut.float_unit.sincos.cordic.stepx9.cos [1] = 0     // cos
net:   tb.dut.float_unit.sincos.cordic.stepx9.atan [1] = 0     // atan
net:   tb.dut.float_unit.sincos.cordic.stepx9.Y1 [32] = 00000000000000000000000000000000     // Y1
net:   tb.dut.float_unit.sincos.cordic.stepx9.X1 [32] = 00000000000000000000000000000000     // X1
net:   tb.dut.float_unit.sincos.cordic.stepx9.Tmp [32] = 11111111111111101000000000000010     // Tmp
net:   tb.dut.float_unit.sincos.cordic.stepx9.Mask0 [32] = 00000000011111111111111111111111     // Mask0
net:   tb.dut.float_unit.sincos.cordic.stepx9.Dir [1] = 0     // Dir
net:   tb.dut.float_unit.sincos.cordic.stepx9.Angle1 [32] = 11111111111111101000000000000010     // Angle1
net:   tb.dut.float_unit.sincos.cordic.stepx9.Addit [32] = 00000000000000000111111111111111     // Addit
son:   tb.dut.float_unit.sincos.cordic.stepx9.angles0
module: fixangles tb.dut.float_unit.sincos.cordic.stepx9.angles0
net:   tb.dut.float_unit.sincos.cordic.stepx9.angles0.step [5] = 01001     // step
reg:   angle [32] = 00000000000000000111111111111111 // angle
module: delay_reg tb.dut.float_unit.sincos.dlygt0
net:   tb.dut.float_unit.sincos.dlygt0.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt0.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt0.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt0.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt0.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt0.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt1
net:   tb.dut.float_unit.sincos.dlygt1.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt1.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt1.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt1.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt1.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt1.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt2
net:   tb.dut.float_unit.sincos.dlygt2.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt2.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt2.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt2.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt2.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt2.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt3
net:   tb.dut.float_unit.sincos.dlygt3.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt3.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt3.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt3.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt3.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt3.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt4
net:   tb.dut.float_unit.sincos.dlygt4.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt4.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt4.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt4.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt4.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt4.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt5
net:   tb.dut.float_unit.sincos.dlygt5.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt5.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt5.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt5.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt5.src0 [1] = 1     // src0
net:   tb.dut.float_unit.sincos.dlygt5.out [1] = 1     // out
reg:   shifter [8] = 11111111 // shifter
module: delay_reg tb.dut.float_unit.sincos.dlygt6
net:   tb.dut.float_unit.sincos.dlygt6.clk [1] = 1     // clk
net:   tb.dut.float_unit.sincos.dlygt6.en [1] = 1     // en
net:   tb.dut.float_unit.sincos.dlygt6.rst_n [1] = 1     // rst_n
net:   tb.dut.float_unit.sincos.dlygt6.src0 [1] = 0     // src0
net:   tb.dut.float_unit.sincos.dlygt6.tap [3] = 011     // tap
net:   tb.dut.float_unit.sincos.dlygt6.out [1] = 0     // out
reg:   shifter [8] = 00000000 // shifter
module: fp_gt tb.dut.float_unit.sincos.i_gt0
net:   tb.dut.float_unit.sincos.i_gt0.src0 [32] = 00111111110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.i_gt0.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.i_gt0.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt0.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.i_gt0.b_mat [27] = 000100000000000000000000000     // b_mat
net:   tb.dut.float_unit.sincos.i_gt0.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.i_gt0.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt0.a_mat [27] = 000110010010000111111011010     // a_mat
net:   tb.dut.float_unit.sincos.i_gt0.a_exp [8] = 01111111     // a_exp
module: fp_gt tb.dut.float_unit.sincos.i_gt0_n
net:   tb.dut.float_unit.sincos.i_gt0_n.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.i_gt0_n.src1 [32] = 10111111110010010000111111011010     // src1
net:   tb.dut.float_unit.sincos.i_gt0_n.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt0_n.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.i_gt0_n.b_mat [27] = 000110010010000111111011010     // b_mat
net:   tb.dut.float_unit.sincos.i_gt0_n.b_exp [8] = 01111111     // b_exp
net:   tb.dut.float_unit.sincos.i_gt0_n.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt0_n.a_mat [27] = 000100000000000000000000000     // a_mat
net:   tb.dut.float_unit.sincos.i_gt0_n.a_exp [8] = 00000000     // a_exp
module: fp_gt tb.dut.float_unit.sincos.i_gt1
net:   tb.dut.float_unit.sincos.i_gt1.src0 [32] = 01000000010010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.i_gt1.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.i_gt1.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt1.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.i_gt1.b_mat [27] = 000100000000000000000000000     // b_mat
net:   tb.dut.float_unit.sincos.i_gt1.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.i_gt1.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt1.a_mat [27] = 000110010010000111111011010     // a_mat
net:   tb.dut.float_unit.sincos.i_gt1.a_exp [8] = 10000000     // a_exp
module: fp_gt tb.dut.float_unit.sincos.i_gt1_n
net:   tb.dut.float_unit.sincos.i_gt1_n.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.i_gt1_n.src1 [32] = 11000000010010010000111111011010     // src1
net:   tb.dut.float_unit.sincos.i_gt1_n.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt1_n.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.i_gt1_n.b_mat [27] = 000110010010000111111011010     // b_mat
net:   tb.dut.float_unit.sincos.i_gt1_n.b_exp [8] = 10000000     // b_exp
net:   tb.dut.float_unit.sincos.i_gt1_n.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt1_n.a_mat [27] = 000100000000000000000000000     // a_mat
net:   tb.dut.float_unit.sincos.i_gt1_n.a_exp [8] = 00000000     // a_exp
module: fp_gt tb.dut.float_unit.sincos.i_gt2
net:   tb.dut.float_unit.sincos.i_gt2.src0 [32] = 01000000100101101100101111100011     // src0
net:   tb.dut.float_unit.sincos.i_gt2.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.i_gt2.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt2.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.i_gt2.b_mat [27] = 000100000000000000000000000     // b_mat
net:   tb.dut.float_unit.sincos.i_gt2.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.i_gt2.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt2.a_mat [27] = 000100101101100101111100011     // a_mat
net:   tb.dut.float_unit.sincos.i_gt2.a_exp [8] = 10000001     // a_exp
module: fp_gt tb.dut.float_unit.sincos.i_gt2_n
net:   tb.dut.float_unit.sincos.i_gt2_n.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.i_gt2_n.src1 [32] = 11000000100101101100101111100011     // src1
net:   tb.dut.float_unit.sincos.i_gt2_n.out [1] = 1     // out
net:   tb.dut.float_unit.sincos.i_gt2_n.b_sign [1] = 1     // b_sign
net:   tb.dut.float_unit.sincos.i_gt2_n.b_mat [27] = 000100101101100101111100011     // b_mat
net:   tb.dut.float_unit.sincos.i_gt2_n.b_exp [8] = 10000001     // b_exp
net:   tb.dut.float_unit.sincos.i_gt2_n.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.i_gt2_n.a_mat [27] = 000100000000000000000000000     // a_mat
net:   tb.dut.float_unit.sincos.i_gt2_n.a_exp [8] = 00000000     // a_exp
module: fp_adder tb.dut.float_unit.sincos.nadd1
net:   tb.dut.float_unit.sincos.nadd1.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.nadd1.src0 [32] = 01000000010010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.nadd1.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.nadd1.z_exp [8] = 10000000     // z_exp
net:   tb.dut.float_unit.sincos.nadd1.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.nadd1.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.sincos.nadd1.z_exp_sh [8] = 10000000     // z_exp_sh
net:   tb.dut.float_unit.sincos.nadd1.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.nadd1.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.nadd1.out [32] = 01000000010010010000111111011010     // out
net:   tb.dut.float_unit.sincos.nadd1.max_exp [8] = 10000000     // max_exp
net:   tb.dut.float_unit.sincos.nadd1.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.nadd1.diff1 [8] = 10000000     // diff1
net:   tb.dut.float_unit.sincos.nadd1.diff0 [8] = 00000000     // diff0
net:   tb.dut.float_unit.sincos.nadd1.b_val_sh [27] = 000000000000000000000000000     // b_val_sh
net:   tb.dut.float_unit.sincos.nadd1.b_val [27] = 000100000000000000000000000     // b_val
net:   tb.dut.float_unit.sincos.nadd1.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.nadd1.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.nadd1.a_val_sh [27] = 000110010010000111111011010     // a_val_sh
net:   tb.dut.float_unit.sincos.nadd1.a_val [27] = 000110010010000111111011010     // a_val
net:   tb.dut.float_unit.sincos.nadd1.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.nadd1.a_exp [8] = 10000000     // a_exp
son:   tb.dut.float_unit.sincos.nadd1.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.nadd1.onea
net:   tb.dut.float_unit.sincos.nadd1.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.nadd1.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.nadd1.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.nadd1.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.nadd1.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.nadd1.onea.act1 [1] = 1     // act1
module: fp_adder tb.dut.float_unit.sincos.nadd2
net:   tb.dut.float_unit.sincos.nadd2.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.nadd2.src0 [32] = 00000000000000000000000000000000     // src0
net:   tb.dut.float_unit.sincos.nadd2.src1 [32] = 01000000010010010000111111011010     // src1
net:   tb.dut.float_unit.sincos.nadd2.z_exp [8] = 10000000     // z_exp
net:   tb.dut.float_unit.sincos.nadd2.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.nadd2.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.sincos.nadd2.z_exp_sh [8] = 10000000     // z_exp_sh
net:   tb.dut.float_unit.sincos.nadd2.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.nadd2.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.nadd2.out [32] = 01000000010010010000111111011010     // out
net:   tb.dut.float_unit.sincos.nadd2.max_exp [8] = 10000000     // max_exp
net:   tb.dut.float_unit.sincos.nadd2.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.nadd2.diff1 [8] = 00000000     // diff1
net:   tb.dut.float_unit.sincos.nadd2.diff0 [8] = 10000000     // diff0
net:   tb.dut.float_unit.sincos.nadd2.b_val_sh [27] = 000110010010000111111011010     // b_val_sh
net:   tb.dut.float_unit.sincos.nadd2.b_val [27] = 000110010010000111111011010     // b_val
net:   tb.dut.float_unit.sincos.nadd2.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.nadd2.b_exp [8] = 10000000     // b_exp
net:   tb.dut.float_unit.sincos.nadd2.a_val_sh [27] = 000000000000000000000000000     // a_val_sh
net:   tb.dut.float_unit.sincos.nadd2.a_val [27] = 000100000000000000000000000     // a_val
net:   tb.dut.float_unit.sincos.nadd2.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.nadd2.a_exp [8] = 00000000     // a_exp
son:   tb.dut.float_unit.sincos.nadd2.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.nadd2.onea
net:   tb.dut.float_unit.sincos.nadd2.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.nadd2.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.nadd2.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.nadd2.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.nadd2.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.nadd2.onea.act1 [1] = 1     // act1
module: fp_adder tb.dut.float_unit.sincos.nadd3
net:   tb.dut.float_unit.sincos.nadd3.ZERO [32] = 00000000000000000000000000000000     // ZERO
net:   tb.dut.float_unit.sincos.nadd3.src0 [32] = 01000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.nadd3.src1 [32] = 00000000000000000000000000000000     // src1
net:   tb.dut.float_unit.sincos.nadd3.z_exp [8] = 10000001     // z_exp
net:   tb.dut.float_unit.sincos.nadd3.zero [1] = 0     // zero
net:   tb.dut.float_unit.sincos.nadd3.z_sign [1] = 0     // z_sign
net:   tb.dut.float_unit.sincos.nadd3.z_exp_sh [8] = 10000001     // z_exp_sh
net:   tb.dut.float_unit.sincos.nadd3.sum_sh [28] = 0000110010010000111111011010     // sum_sh
net:   tb.dut.float_unit.sincos.nadd3.sum [28] = 0000110010010000111111011010     // sum
net:   tb.dut.float_unit.sincos.nadd3.out [32] = 01000000110010010000111111011010     // out
net:   tb.dut.float_unit.sincos.nadd3.max_exp [8] = 10000001     // max_exp
net:   tb.dut.float_unit.sincos.nadd3.lead [5] = 10111     // lead
net:   tb.dut.float_unit.sincos.nadd3.diff1 [8] = 10000001     // diff1
net:   tb.dut.float_unit.sincos.nadd3.diff0 [8] = 00000000     // diff0
net:   tb.dut.float_unit.sincos.nadd3.b_val_sh [27] = 000000000000000000000000000     // b_val_sh
net:   tb.dut.float_unit.sincos.nadd3.b_val [27] = 000100000000000000000000000     // b_val
net:   tb.dut.float_unit.sincos.nadd3.b_sign [1] = 0     // b_sign
net:   tb.dut.float_unit.sincos.nadd3.b_exp [8] = 00000000     // b_exp
net:   tb.dut.float_unit.sincos.nadd3.a_val_sh [27] = 000110010010000111111011010     // a_val_sh
net:   tb.dut.float_unit.sincos.nadd3.a_val [27] = 000110010010000111111011010     // a_val
net:   tb.dut.float_unit.sincos.nadd3.a_sign [1] = 0     // a_sign
net:   tb.dut.float_unit.sincos.nadd3.a_exp [8] = 10000001     // a_exp
son:   tb.dut.float_unit.sincos.nadd3.onea
module: findLeadingOne32 tb.dut.float_unit.sincos.nadd3.onea
net:   tb.dut.float_unit.sincos.nadd3.onea.src0 [32] = 00000000110010010000111111011010     // src0
net:   tb.dut.float_unit.sincos.nadd3.onea.out [5] = 10111     // out
net:   tb.dut.float_unit.sincos.nadd3.onea.bytex [8] = 11001001     // bytex
net:   tb.dut.float_unit.sincos.nadd3.onea.act3 [1] = 0     // act3
net:   tb.dut.float_unit.sincos.nadd3.onea.act2 [1] = 1     // act2
net:   tb.dut.float_unit.sincos.nadd3.onea.act1 [1] = 1     // act1
module: multififo_w1_r10 tb.dut.rxfifo
net:   tb.dut.rxfifo.clk [1] = 1     // clk
net:   tb.dut.rxfifo.oktoread [1] = 1     // oktoread
net:   tb.dut.rxfifo.oktowrite [1] = 1     // oktowrite
net:   tb.dut.rxfifo.reads [4] = 0000     // reads
net:   tb.dut.rxfifo.rptr0 [6] = 000000     // rptr0
net:   tb.dut.rxfifo.rst_n [1] = 1     // rst_n
net:   tb.dut.rxfifo.softreset [1] = 0     // softreset
net:   tb.dut.rxfifo.taken [1] = 1     // taken
net:   tb.dut.rxfifo.writes [1] = 0     // writes
net:   tb.dut.rxfifo.rptr9 [6] = 001001     // rptr9
net:   tb.dut.rxfifo.rptr8 [6] = 001000     // rptr8
net:   tb.dut.rxfifo.rptr7 [6] = 000111     // rptr7
net:   tb.dut.rxfifo.rptr6 [6] = 000110     // rptr6
net:   tb.dut.rxfifo.rptr5 [6] = 000101     // rptr5
net:   tb.dut.rxfifo.rptr4 [6] = 000100     // rptr4
net:   tb.dut.rxfifo.rptr3 [6] = 000011     // rptr3
net:   tb.dut.rxfifo.rptr2 [6] = 000010     // rptr2
net:   tb.dut.rxfifo.rptr1 [6] = 000001     // rptr1
net:   tb.dut.rxfifo.nextwptr [6] = 000000     // nextwptr
net:   tb.dut.rxfifo.nextrptr [6] = 000000     // nextrptr
net:   tb.dut.rxfifo.frees [16] = 0000000000100000     // frees
net:   tb.dut.rxfifo.dout [80] = 00000000000000000000000000000000000000000000000000000000000000000000000000000000     // dout
net:   tb.dut.rxfifo.din [8] = 00000000     // din
net:   tb.dut.rxfifo.badwrite [1] = 0     // badwrite
net:   tb.dut.rxfifo.badread [1] = 0     // badread
reg:   count [16] = 0000000000000000 // count
reg:   fifos [256] = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // fifos
reg:   rptr [6] = 000000 // rptr
reg:   wptr [6] = 000000 // wptr
module: multififo_w10_r1 tb.dut.txfifo
net:   tb.dut.txfifo.clk [1] = 1     // clk
net:   tb.dut.txfifo.din [80] = 00000000000010100011000000110000001100000011000000110000001100000011000000110000     // din
net:   tb.dut.txfifo.oktoread [1] = 1     // oktoread
net:   tb.dut.txfifo.oktowrite [1] = 1     // oktowrite
net:   tb.dut.txfifo.reads [1] = 0     // reads
net:   tb.dut.txfifo.rptr0 [6] = 000000     // rptr0
net:   tb.dut.txfifo.rst_n [1] = 1     // rst_n
net:   tb.dut.txfifo.softreset [1] = 0     // softreset
net:   tb.dut.txfifo.taken [1] = 1     // taken
net:   tb.dut.txfifo.writes [4] = 0000     // writes
net:   tb.dut.txfifo.wptr9 [6] = 001001     // wptr9
net:   tb.dut.txfifo.wptr8 [6] = 001000     // wptr8
net:   tb.dut.txfifo.wptr7 [6] = 000111     // wptr7
net:   tb.dut.txfifo.wptr6 [6] = 000110     // wptr6
net:   tb.dut.txfifo.wptr5 [6] = 000101     // wptr5
net:   tb.dut.txfifo.wptr4 [6] = 000100     // wptr4
net:   tb.dut.txfifo.wptr3 [6] = 000011     // wptr3
net:   tb.dut.txfifo.wptr2 [6] = 000010     // wptr2
net:   tb.dut.txfifo.wptr1 [6] = 000001     // wptr1
net:   tb.dut.txfifo.nextwptr [6] = 000000     // nextwptr
net:   tb.dut.txfifo.nextrptr [6] = 000000     // nextrptr
net:   tb.dut.txfifo.frees [16] = 0000000000100000     // frees
net:   tb.dut.txfifo.dout [8] = 00000000     // dout
net:   tb.dut.txfifo.badwrite [1] = 0     // badwrite
net:   tb.dut.txfifo.badread [1] = 0     // badread
reg:   count [16] = 0000000000000000 // count
reg:   fifos [256] = 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // fifos
reg:   rptr [6] = 000000 // rptr
reg:   wptr [6] = 000000 // wptr
module: uartx2frac tb.dut.uart
net:   tb.dut.uart.baudrate [16] = 0000000001100100     // baudrate
net:   tb.dut.uart.byte_is_acceptable [1] = 1     // byte_is_acceptable
net:   tb.dut.uart.clk [1] = 1     // clk
net:   tb.dut.uart.compute_rx_parity_error [1] = 0     // compute_rx_parity_error
net:   tb.dut.uart.control [8] = 01010000     // control
net:   tb.dut.uart.control_eight_bits [1] = 1     // control_eight_bits
net:   tb.dut.uart.control_ninth_data [1] = 0     // control_ninth_data
net:   tb.dut.uart.control_parity_even [1] = 0     // control_parity_even
net:   tb.dut.uart.control_parity_odd [1] = 0     // control_parity_odd
net:   tb.dut.uart.filtered_ok_byte [1] = 1     // filtered_ok_byte
net:   tb.dut.uart.fractional [8] = 00000000     // fractional
net:   tb.dut.uart.is_noise [1] = 0     // is_noise
net:   tb.dut.uart.is_one [1] = 1     // is_one
net:   tb.dut.uart.is_zero [1] = 0     // is_zero
net:   tb.dut.uart.negedge_rxd [1] = 0     // negedge_rxd
net:   tb.dut.uart.read_rx [1] = 0     // read_rx
net:   tb.dut.uart.rst_n [1] = 1     // rst_n
net:   tb.dut.uart.rx_midbit [1] = 0     // rx_midbit
net:   tb.dut.uart.rx_midbit1 [1] = 0     // rx_midbit1
net:   tb.dut.uart.rx_parity_error [1] = 0     // rx_parity_error
net:   tb.dut.uart.rx_shift [1] = 0     // rx_shift
net:   tb.dut.uart.rx_valid [1] = 0     // rx_valid
net:   tb.dut.uart.rxd [1] = 1     // rxd
net:   tb.dut.uart.rxdata [8] = 00000000     // rxdata
net:   tb.dut.uart.rxnewdata [1] = 0     // rxnewdata
net:   tb.dut.uart.tx_empty [1] = 1     // tx_empty
net:   tb.dut.uart.tx_shift [1] = 0     // tx_shift
net:   tb.dut.uart.tx_start [1] = 0     // tx_start
net:   tb.dut.uart.txbit_nine [1] = 1     // txbit_nine
net:   tb.dut.uart.txd [1] = 1     // txd
net:   tb.dut.uart.txdata [8] = 00000000     // txdata
net:   tb.dut.uart.write_tx [1] = 0     // write_tx
net:   tb.dut.uart.txfixer [1] = 0     // txfixer
net:   tb.dut.uart.status [8] = 00000010     // status
net:   tb.dut.uart.rxfixer [1] = 0     // rxfixer
net:   tb.dut.uart.rx_xor [1] = 0     // rx_xor
net:   tb.dut.uart.rx_framing_error [1] = 0     // rx_framing_error
net:   tb.dut.uart.effectivetxbaudrate [16] = 0000000001100100     // effectivetxbaudrate
net:   tb.dut.uart.effectiverxbaudrate [16] = 0000000001100100     // effectiverxbaudrate
net:   tb.dut.uart.control_nine_bits [1] = 0     // control_nine_bits
net:   tb.dut.uart.bit_place [16] = 0000000000110011     // bit_place
reg:   first [1] = 1 // first
reg:   last_rxd [1] = 1 // last_rxd
reg:   rx_active [1] = 0 // rx_active
reg:   rx_bufa [9] = 000000000 // rx_bufa
reg:   rx_bufa_valid [1] = 0 // rx_bufa_valid
reg:   rx_bufb [8] = 00000000 // rx_bufb
reg:   rx_bufb_valid [1] = 0 // rx_bufb_valid
reg:   rx_noise [1] = 0 // rx_noise
reg:   rx_overrun [1] = 0 // rx_overrun
reg:   rxaddition [9] = 000000000 // rxaddition
reg:   rxd1 [1] = 1 // rxd1
reg:   rxd_filt [1] = 1 // rxd_filt
reg:   rxd_raw [1] = 1 // rxd_raw
reg:   rxinbit [16] = 0000000000000000 // rxinbit
reg:   rxsr [11] = 11111111111 // rxsr
reg:   rxstatusa [3] = 000 // rxstatusa
reg:   rxstatusb [5] = 00000 // rxstatusb
reg:   tx_active [1] = 0 // tx_active
reg:   tx_bufa [8] = 00000000 // tx_bufa
reg:   tx_bufa_valid [1] = 0 // tx_bufa_valid
reg:   tx_bufb [9] = 000000000 // tx_bufb
reg:   tx_bufb_valid [1] = 0 // tx_bufb_valid
reg:   txaddition [9] = 000000000 // txaddition
reg:   txinbit [16] = 0000000000011001 // txinbit
reg:   txsr [11] = 11111111111 // txsr
reg:   was_bit_noise [1] = 0 // was_bit_noise
