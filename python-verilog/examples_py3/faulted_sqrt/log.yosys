
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 11.0.3 -fPIC -Os)


-- Executing script file `sqrt_u40_5.inc' --

1. Executing Verilog-2005 frontend: sqrt_u40_5.all
Parsing SystemVerilog input from `sqrt_u40_5.all' to AST representation.
Generating RTLIL representation for module `\sqrt_u40_5'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \sqrt_u40_5

2.2. Analyzing design hierarchy..
Top module:  \sqrt_u40_5
Removed 0 unused modules.

3. Executing CHECK pass (checking for obvious problems).
Warning: Ignoring module sqrt_u40_5 because it contains processes (run 'proc' command first).
found and reported 0 problems.

4. Executing Verilog backend.
Dumping module `\sqrt_u40_5'.
Warning: Module sqrt_u40_5 contains unmapped RTLIL processes. RTLIL processes
can't always be mapped directly to Verilog always blocks. Unintended
changes in simulation behavior are possible! Use "proc" to convert
processes to logic networks and registers.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:124$85'.
     1/1: $0\YY10[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:126$86'.
     1/1: $0\Y10[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:128$87'.
     1/1: $0\datain10[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:130$88'.
     1/1: $0\vld10[0:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:185$128'.
     1/1: $0\YY5[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:187$129'.
     1/1: $0\Y5[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:189$130'.
     1/1: $0\datain5[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:191$131'.
     1/1: $0\vld5[0:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:248$171'.
     1/1: $0\out[19:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:249$172'.
     1/1: $0\vldout[0:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:5$1'.
     1/1: $0\vld20[0:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:63$42'.
     1/1: $0\YY15[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:65$43'.
     1/1: $0\Y15[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:67$44'.
     1/1: $0\datain15[39:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:69$45'.
     1/1: $0\vld15[0:0]
Creating decoders for process `\sqrt_u40_5.$proc$sqrt_u40_5.all:7$2'.
     1/1: $0\datain20[39:0]

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sqrt_u40_5.\YY10' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:124$85'.
  created $dff cell `$procdff$205' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\Y10' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:126$86'.
  created $dff cell `$procdff$206' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\datain10' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:128$87'.
  created $dff cell `$procdff$207' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\vld10' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:130$88'.
  created $dff cell `$procdff$208' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\YY5' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:185$128'.
  created $dff cell `$procdff$209' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\Y5' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:187$129'.
  created $dff cell `$procdff$210' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\datain5' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:189$130'.
  created $dff cell `$procdff$211' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\vld5' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:191$131'.
  created $dff cell `$procdff$212' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\out' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:248$171'.
  created $dff cell `$procdff$213' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\vldout' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:249$172'.
  created $dff cell `$procdff$214' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\vld20' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:5$1'.
  created $dff cell `$procdff$215' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\YY15' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:63$42'.
  created $dff cell `$procdff$216' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\Y15' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:65$43'.
  created $dff cell `$procdff$217' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\datain15' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:67$44'.
  created $dff cell `$procdff$218' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\vld15' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:69$45'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\sqrt_u40_5.\datain20' using process `\sqrt_u40_5.$proc$sqrt_u40_5.all:7$2'.
  created $dff cell `$procdff$220' with positive edge clock.

5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:124$85'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:124$85'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:126$86'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:126$86'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:128$87'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:128$87'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:130$88'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:130$88'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:185$128'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:185$128'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:187$129'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:187$129'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:189$130'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:189$130'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:191$131'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:191$131'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:248$171'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:248$171'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:249$172'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:249$172'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:5$1'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:5$1'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:63$42'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:63$42'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:65$43'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:65$43'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:67$44'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:67$44'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:69$45'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:69$45'.
Found and cleaned up 1 empty switch in `\sqrt_u40_5.$proc$sqrt_u40_5.all:7$2'.
Removing empty process `sqrt_u40_5.$proc$sqrt_u40_5.all:7$2'.
Cleaned up 16 empty switches.

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.
<suppressed ~26 debug messages>

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$sqrt_u40_5.all:243$167.
    dead port 2/2 on $mux $ternary$sqrt_u40_5.all:243$167.
Removed 2 multiplexer ports.
<suppressed ~48 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..
Removed 0 unused cells and 150 unused wires.
<suppressed ~18 debug messages>

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

6.9. Rerunning OPT passes. (Maybe there is more to do..)

6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

6.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

6.16. Finished OPT passes. (There is nothing left to do.)

7. Executing FSM pass (extract and optimize FSM).

7.1. Executing FSM_DETECT pass (finding FSMs in design).

7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing MEMORY pass.

9.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

9.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

9.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

9.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

9.5. Executing MEMORY_COLLECT pass (generating $mem cells).

9.6. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~48 debug messages>

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.
Dumping module `\sqrt_u40_5'.

12. Executing CHECK pass (checking for obvious problems).
checking module sqrt_u40_5..
found and reported 0 problems.

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
Running "alumacc" on wrapper $extern:wrap:$le:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$le:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$le:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=40:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=20:B_SIGNED=0:B_WIDTH=40:Y_WIDTH=40:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=40\B_WIDTH=40\Y_WIDTH=40 for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=40\Y_WIDTH=40 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=40 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~14963 debug messages>

14. Executing OPT pass (performing simple optimizations).

14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.
<suppressed ~18893 debug messages>

14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
<suppressed ~8061 debug messages>
Removed a total of 2687 cells.

14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

14.6. Executing OPT_RMDFF pass (remove dff with constant values).

14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..
Removed 2645 unused cells and 10491 unused wires.
<suppressed ~2646 debug messages>

14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

14.9. Rerunning OPT passes. (Maybe there is more to do..)

14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sqrt_u40_5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sqrt_u40_5.
Performed a total of 0 changes.

14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sqrt_u40_5'.
Removed a total of 0 cells.

14.13. Executing OPT_RMDFF pass (remove dff with constant values).

14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sqrt_u40_5..

14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sqrt_u40_5.

14.16. Finished OPT passes. (There is nothing left to do.)

15. Executing Verilog backend.
Dumping module `\sqrt_u40_5'.

16. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=10.00) is a direct match for cell type $_DFF_P_.
  cell DFFR (noninv, pins=4, area=10.00) is a direct match for cell type $_DFF_PN0_.
  cell DFFS (noninv, pins=4, area=10.00) is a direct match for cell type $_DFF_PN1_.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  final dff cell mappings:
    DFF _DFF_N_ (.CK(~C), .D( D), .Q( Q));
    DFF _DFF_P_ (.CK( C), .D( D), .Q( Q));
    DFFR _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .RN( R));
    DFFR _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .RN( R));
    DFFR _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .RN(~R));
    DFFR _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .RN(~R));
    DFFR _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .RN( R));
    DFFS _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .SN( R));
    DFFR _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .RN(~R));
    DFFS _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .SN(~R));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_
Mapping DFF cells in module `\sqrt_u40_5':
  mapped 395 $_DFF_P_ cells to \DFF cells.

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\sqrt_u40_5' to `<abc-temp-dir>/input.blif'..
Extracted 7870 gates and 8309 wires to a netlist network with 437 inputs and 395 outputs.

17.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/ilia/clients/yosys_libs/basic2.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT".
ABC: Library "basic2" from "/Users/ilia/clients/yosys_libs/basic2.lib" has 16 cells (4 skipped: 4 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: Warning: Detected 1 multi-output gates (for example, "ADDF").
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:              AND2 cells:      510
ABC RESULTS:              AND3 cells:      523
ABC RESULTS:               INV cells:      401
ABC RESULTS:              MUX2 cells:      662
ABC RESULTS:             NAND2 cells:     1658
ABC RESULTS:             NAND3 cells:      599
ABC RESULTS:              NOR2 cells:      122
ABC RESULTS:              NOR3 cells:       68
ABC RESULTS:               OR2 cells:      772
ABC RESULTS:               OR3 cells:       52
ABC RESULTS:             XNOR2 cells:      599
ABC RESULTS:             XNOR3 cells:      252
ABC RESULTS:              XOR2 cells:      262
ABC RESULTS:              XOR3 cells:       76
ABC RESULTS:        internal signals:     7477
ABC RESULTS:           input signals:      437
ABC RESULTS:          output signals:      395
Removing temp directory.
Removed 0 unused cells and 3630 unused wires.

18. Executing Verilog backend.
Dumping module `\sqrt_u40_5'.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 7e09da28d6, CPU: user 10.64s system 0.14s
Yosys 0.9 (git sha1 UNKNOWN, clang 11.0.3 -fPIC -Os)
Time spent: 41% 11x opt_merge (4 sec), 12% 1x techmap (1 sec), ...
