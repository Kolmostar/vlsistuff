

K280 = 0x1c 
K281 = 0x3c 
K282 = 0x5c 
K283 = 0x7c 
K284 = 0x9c 
K285 = 0xbc 
K286 = 0xdc 
K287 = 0xfc 

K237 = 0xf7
K277 = 0xfb
K297 = 0xfd
K307 = 0xfe

K_K = K285
K_R = K280
K_A = K283

SOF = K281
EOF = K287


EIGTHS = {}

EIGTHS[0x1c] = 'K280' 
EIGTHS[0x3c] = 'K281' 
EIGTHS[0x5c] = 'K282' 
EIGTHS[0x7c] = 'K283' 
EIGTHS[0x9c] = 'K284' 
EIGTHS[0xbc] = 'K285' 
EIGTHS[0xdc] = 'K286' 
EIGTHS[0xfc] = 'K287'
 
EIGTHS[0xf7] = 'K237' 
EIGTHS[0xfb] = 'K277' 
EIGTHS[0xfd] = 'K297' 
EIGTHS[0xfe] = 'K307' 


TENS = {}

TENS['0011110100'] = ('K280',K280,-1)
TENS['1100001011'] = ('K280',K280, 1)

TENS['0011111001'] = ('K281',K281,-1)
TENS['1100000110'] = ('K281',K281, 1)

TENS['0011110101'] = ('K282',K282,-1)
TENS['1100001010'] = ('K282',K282, 1)

TENS['0011110011'] = ('K283',K283,-1)
TENS['1100001100'] = ('K283',K283, 1)

TENS['0011110010'] = ('K284',K284,-1)
TENS['1100001101'] = ('K284',K284, 1)

TENS['0011111010'] = ('K285',K285,-1)
TENS['1100000101'] = ('K285',K285, 1)

TENS['0011110110'] = ('K286',K286,-1)
TENS['1100001001'] = ('K286',K286, 1)

TENS['0011111000'] = ('K287',K287,-1)
TENS['1100000111'] = ('K287',K287, 1)


##### 
TENS['1110101000'] = ('K237',K237,-1)
TENS['0001010111'] = ('K237',K237, 1)

TENS['1101101000'] = ('K277',K277,-1)
TENS['0010010111'] = ('K277',K277, 1)

TENS['1011101000'] = ('K297',K297,-1)
TENS['0100010111'] = ('K297',K297, 1)

TENS['0111101000'] = ('K307',K307,-1)
TENS['1000010111'] = ('K307',K307, 1)

def validTen(Str):
    if Str in TENS:
        return TENS[Str]
    return (False,False,False)

