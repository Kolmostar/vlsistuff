module: tb tb
net:   tb.mst0_wready [1] = 1     // mst0_wready
net:   tb.mst10_wready [1] = 1     // mst10_wready
net:   tb.mst11_wready [1] = 1     // mst11_wready
net:   tb.mst12_wready [1] = 1     // mst12_wready
net:   tb.mst13_wready [1] = 1     // mst13_wready
net:   tb.mst14_wready [1] = 1     // mst14_wready
net:   tb.mst15_wready [1] = 1     // mst15_wready
net:   tb.mst1_wready [1] = 1     // mst1_wready
net:   tb.mst2_wready [1] = 1     // mst2_wready
net:   tb.mst3_wready [1] = 1     // mst3_wready
net:   tb.mst4_wready [1] = 1     // mst4_wready
net:   tb.mst5_wready [1] = 1     // mst5_wready
net:   tb.mst6_wready [1] = 1     // mst6_wready
net:   tb.mst7_wready [1] = 1     // mst7_wready
net:   tb.mst8_wready [1] = 1     // mst8_wready
net:   tb.mst9_wready [1] = 1     // mst9_wready
net:   tb.slv9_wvalid [1] = 0     // slv9_wvalid
net:   tb.slv9_wstrb [8] = 00000000     // slv9_wstrb
net:   tb.slv9_wlast [1] = 0     // slv9_wlast
net:   tb.slv9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv9_wdata
net:   tb.slv9_rready [1] = 1     // slv9_rready
net:   tb.slv9_bready [1] = 1     // slv9_bready
net:   tb.slv9_awvalid [1] = 0     // slv9_awvalid
net:   tb.slv9_awlen [8] = 00000000     // slv9_awlen
net:   tb.slv9_awid [4] = 0000     // slv9_awid
net:   tb.slv9_awextras [8] = 00000000     // slv9_awextras
net:   tb.slv9_awburst [2] = 00     // slv9_awburst
net:   tb.slv9_awaddr [32] = 00000000000000000000000000000000     // slv9_awaddr
net:   tb.slv9_arvalid [1] = 0     // slv9_arvalid
net:   tb.slv9_arlen [8] = 00000000     // slv9_arlen
net:   tb.slv9_arid [4] = 0000     // slv9_arid
net:   tb.slv9_arextras [8] = 00000000     // slv9_arextras
net:   tb.slv9_arburst [2] = 00     // slv9_arburst
net:   tb.slv9_araddr [32] = 00000000000000000000000000000000     // slv9_araddr
net:   tb.slv8_wvalid [1] = 0     // slv8_wvalid
net:   tb.slv8_wstrb [8] = 00000000     // slv8_wstrb
net:   tb.slv8_wlast [1] = 0     // slv8_wlast
net:   tb.slv8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv8_wdata
net:   tb.slv8_rready [1] = 1     // slv8_rready
net:   tb.slv8_bready [1] = 1     // slv8_bready
net:   tb.slv8_awvalid [1] = 0     // slv8_awvalid
net:   tb.slv8_awlen [8] = 00000000     // slv8_awlen
net:   tb.slv8_awid [4] = 0000     // slv8_awid
net:   tb.slv8_awextras [8] = 00000000     // slv8_awextras
net:   tb.slv8_awburst [2] = 00     // slv8_awburst
net:   tb.slv8_awaddr [32] = 00000000000000000000000000000000     // slv8_awaddr
net:   tb.slv8_arvalid [1] = 0     // slv8_arvalid
net:   tb.slv8_arlen [8] = 00000000     // slv8_arlen
net:   tb.slv8_arid [4] = 0000     // slv8_arid
net:   tb.slv8_arextras [8] = 00000000     // slv8_arextras
net:   tb.slv8_arburst [2] = 00     // slv8_arburst
net:   tb.slv8_araddr [32] = 00000000000000000000000000000000     // slv8_araddr
net:   tb.slv7_wvalid [1] = 0     // slv7_wvalid
net:   tb.slv7_wstrb [8] = 00000000     // slv7_wstrb
net:   tb.slv7_wlast [1] = 0     // slv7_wlast
net:   tb.slv7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv7_wdata
net:   tb.slv7_rready [1] = 1     // slv7_rready
net:   tb.slv7_bready [1] = 1     // slv7_bready
net:   tb.slv7_awvalid [1] = 0     // slv7_awvalid
net:   tb.slv7_awlen [8] = 00000000     // slv7_awlen
net:   tb.slv7_awid [4] = 0000     // slv7_awid
net:   tb.slv7_awextras [8] = 00000000     // slv7_awextras
net:   tb.slv7_awburst [2] = 00     // slv7_awburst
net:   tb.slv7_awaddr [32] = 00000000000000000000000000000000     // slv7_awaddr
net:   tb.slv7_arvalid [1] = 0     // slv7_arvalid
net:   tb.slv7_arlen [8] = 00000000     // slv7_arlen
net:   tb.slv7_arid [4] = 0000     // slv7_arid
net:   tb.slv7_arextras [8] = 00000000     // slv7_arextras
net:   tb.slv7_arburst [2] = 00     // slv7_arburst
net:   tb.slv7_araddr [32] = 00000000000000000000000000000000     // slv7_araddr
net:   tb.slv6_wvalid [1] = 0     // slv6_wvalid
net:   tb.slv6_wstrb [8] = 00000000     // slv6_wstrb
net:   tb.slv6_wlast [1] = 0     // slv6_wlast
net:   tb.slv6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv6_wdata
net:   tb.slv6_rready [1] = 1     // slv6_rready
net:   tb.slv6_bready [1] = 1     // slv6_bready
net:   tb.slv6_awvalid [1] = 0     // slv6_awvalid
net:   tb.slv6_awlen [8] = 00000000     // slv6_awlen
net:   tb.slv6_awid [4] = 0000     // slv6_awid
net:   tb.slv6_awextras [8] = 00000000     // slv6_awextras
net:   tb.slv6_awburst [2] = 00     // slv6_awburst
net:   tb.slv6_awaddr [32] = 00000000000000000000000000000000     // slv6_awaddr
net:   tb.slv6_arvalid [1] = 0     // slv6_arvalid
net:   tb.slv6_arlen [8] = 00000000     // slv6_arlen
net:   tb.slv6_arid [4] = 0000     // slv6_arid
net:   tb.slv6_arextras [8] = 00000000     // slv6_arextras
net:   tb.slv6_arburst [2] = 00     // slv6_arburst
net:   tb.slv6_araddr [32] = 00000000000000000000000000000000     // slv6_araddr
net:   tb.slv5_wvalid [1] = 0     // slv5_wvalid
net:   tb.slv5_wstrb [8] = 00000000     // slv5_wstrb
net:   tb.slv5_wlast [1] = 0     // slv5_wlast
net:   tb.slv5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv5_wdata
net:   tb.slv5_rready [1] = 1     // slv5_rready
net:   tb.slv5_bready [1] = 1     // slv5_bready
net:   tb.slv5_awvalid [1] = 0     // slv5_awvalid
net:   tb.slv5_awlen [8] = 00000000     // slv5_awlen
net:   tb.slv5_awid [4] = 0000     // slv5_awid
net:   tb.slv5_awextras [8] = 00000000     // slv5_awextras
net:   tb.slv5_awburst [2] = 00     // slv5_awburst
net:   tb.slv5_awaddr [32] = 00000000000000000000000000000000     // slv5_awaddr
net:   tb.slv5_arvalid [1] = 0     // slv5_arvalid
net:   tb.slv5_arlen [8] = 00000000     // slv5_arlen
net:   tb.slv5_arid [4] = 0000     // slv5_arid
net:   tb.slv5_arextras [8] = 00000000     // slv5_arextras
net:   tb.slv5_arburst [2] = 00     // slv5_arburst
net:   tb.slv5_araddr [32] = 00000000000000000000000000000000     // slv5_araddr
net:   tb.slv4_wvalid [1] = 0     // slv4_wvalid
net:   tb.slv4_wstrb [8] = 00000000     // slv4_wstrb
net:   tb.slv4_wlast [1] = 0     // slv4_wlast
net:   tb.slv4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv4_wdata
net:   tb.slv4_rready [1] = 1     // slv4_rready
net:   tb.slv4_bready [1] = 1     // slv4_bready
net:   tb.slv4_awvalid [1] = 0     // slv4_awvalid
net:   tb.slv4_awlen [8] = 00000000     // slv4_awlen
net:   tb.slv4_awid [4] = 0000     // slv4_awid
net:   tb.slv4_awextras [8] = 00000000     // slv4_awextras
net:   tb.slv4_awburst [2] = 00     // slv4_awburst
net:   tb.slv4_awaddr [32] = 00000000000000000000000000000000     // slv4_awaddr
net:   tb.slv4_arvalid [1] = 0     // slv4_arvalid
net:   tb.slv4_arlen [8] = 00000000     // slv4_arlen
net:   tb.slv4_arid [4] = 0000     // slv4_arid
net:   tb.slv4_arextras [8] = 00000000     // slv4_arextras
net:   tb.slv4_arburst [2] = 00     // slv4_arburst
net:   tb.slv4_araddr [32] = 00000000000000000000000000000000     // slv4_araddr
net:   tb.slv3_wvalid [1] = 0     // slv3_wvalid
net:   tb.slv3_wstrb [8] = 00000000     // slv3_wstrb
net:   tb.slv3_wlast [1] = 0     // slv3_wlast
net:   tb.slv3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv3_wdata
net:   tb.slv3_rready [1] = 1     // slv3_rready
net:   tb.slv3_bready [1] = 1     // slv3_bready
net:   tb.slv3_awvalid [1] = 0     // slv3_awvalid
net:   tb.slv3_awlen [8] = 00000000     // slv3_awlen
net:   tb.slv3_awid [4] = 0000     // slv3_awid
net:   tb.slv3_awextras [8] = 00000000     // slv3_awextras
net:   tb.slv3_awburst [2] = 00     // slv3_awburst
net:   tb.slv3_awaddr [32] = 00000000000000000000000000000000     // slv3_awaddr
net:   tb.slv3_arvalid [1] = 0     // slv3_arvalid
net:   tb.slv3_arlen [8] = 00000000     // slv3_arlen
net:   tb.slv3_arid [4] = 0000     // slv3_arid
net:   tb.slv3_arextras [8] = 00000000     // slv3_arextras
net:   tb.slv3_arburst [2] = 00     // slv3_arburst
net:   tb.slv3_araddr [32] = 00000000000000000000000000000000     // slv3_araddr
net:   tb.slv2_wvalid [1] = 0     // slv2_wvalid
net:   tb.slv2_wstrb [8] = 00000000     // slv2_wstrb
net:   tb.slv2_wlast [1] = 0     // slv2_wlast
net:   tb.slv2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv2_wdata
net:   tb.slv2_rready [1] = 1     // slv2_rready
net:   tb.slv2_bready [1] = 1     // slv2_bready
net:   tb.slv2_awvalid [1] = 0     // slv2_awvalid
net:   tb.slv2_awlen [8] = 00000000     // slv2_awlen
net:   tb.slv2_awid [4] = 0000     // slv2_awid
net:   tb.slv2_awextras [8] = 00000000     // slv2_awextras
net:   tb.slv2_awburst [2] = 00     // slv2_awburst
net:   tb.slv2_awaddr [32] = 00000000000000000000000000000000     // slv2_awaddr
net:   tb.slv2_arvalid [1] = 0     // slv2_arvalid
net:   tb.slv2_arlen [8] = 00000000     // slv2_arlen
net:   tb.slv2_arid [4] = 0000     // slv2_arid
net:   tb.slv2_arextras [8] = 00000000     // slv2_arextras
net:   tb.slv2_arburst [2] = 00     // slv2_arburst
net:   tb.slv2_araddr [32] = 00000000000000000000000000000000     // slv2_araddr
net:   tb.slv1_wvalid [1] = 0     // slv1_wvalid
net:   tb.slv1_wstrb [8] = 00000000     // slv1_wstrb
net:   tb.slv1_wlast [1] = 0     // slv1_wlast
net:   tb.slv1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv1_wdata
net:   tb.slv1_rready [1] = 1     // slv1_rready
net:   tb.slv1_bready [1] = 1     // slv1_bready
net:   tb.slv1_awvalid [1] = 0     // slv1_awvalid
net:   tb.slv1_awlen [8] = 00000000     // slv1_awlen
net:   tb.slv1_awid [4] = 0000     // slv1_awid
net:   tb.slv1_awextras [8] = 00000000     // slv1_awextras
net:   tb.slv1_awburst [2] = 00     // slv1_awburst
net:   tb.slv1_awaddr [32] = 00000000000000000000000000000000     // slv1_awaddr
net:   tb.slv1_arvalid [1] = 0     // slv1_arvalid
net:   tb.slv1_arlen [8] = 00000000     // slv1_arlen
net:   tb.slv1_arid [4] = 0000     // slv1_arid
net:   tb.slv1_arextras [8] = 00000000     // slv1_arextras
net:   tb.slv1_arburst [2] = 00     // slv1_arburst
net:   tb.slv1_araddr [32] = 00000000000000000000000000000000     // slv1_araddr
net:   tb.slv15_wvalid [1] = 0     // slv15_wvalid
net:   tb.slv15_wstrb [8] = 00000000     // slv15_wstrb
net:   tb.slv15_wlast [1] = 0     // slv15_wlast
net:   tb.slv15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv15_wdata
net:   tb.slv15_rready [1] = 1     // slv15_rready
net:   tb.slv15_bready [1] = 1     // slv15_bready
net:   tb.slv15_awvalid [1] = 0     // slv15_awvalid
net:   tb.slv15_awlen [8] = 00000000     // slv15_awlen
net:   tb.slv15_awid [4] = 0000     // slv15_awid
net:   tb.slv15_awextras [8] = 00000000     // slv15_awextras
net:   tb.slv15_awburst [2] = 00     // slv15_awburst
net:   tb.slv15_awaddr [32] = 00000000000000000000000000000000     // slv15_awaddr
net:   tb.slv15_arvalid [1] = 0     // slv15_arvalid
net:   tb.slv15_arlen [8] = 00000000     // slv15_arlen
net:   tb.slv15_arid [4] = 0000     // slv15_arid
net:   tb.slv15_arextras [8] = 00000000     // slv15_arextras
net:   tb.slv15_arburst [2] = 00     // slv15_arburst
net:   tb.slv15_araddr [32] = 00000000000000000000000000000000     // slv15_araddr
net:   tb.slv14_wvalid [1] = 0     // slv14_wvalid
net:   tb.slv14_wstrb [8] = 00000000     // slv14_wstrb
net:   tb.slv14_wlast [1] = 0     // slv14_wlast
net:   tb.slv14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv14_wdata
net:   tb.slv14_rready [1] = 1     // slv14_rready
net:   tb.slv14_bready [1] = 1     // slv14_bready
net:   tb.slv14_awvalid [1] = 0     // slv14_awvalid
net:   tb.slv14_awlen [8] = 00000000     // slv14_awlen
net:   tb.slv14_awid [4] = 0000     // slv14_awid
net:   tb.slv14_awextras [8] = 00000000     // slv14_awextras
net:   tb.slv14_awburst [2] = 00     // slv14_awburst
net:   tb.slv14_awaddr [32] = 00000000000000000000000000000000     // slv14_awaddr
net:   tb.slv14_arvalid [1] = 0     // slv14_arvalid
net:   tb.slv14_arlen [8] = 00000000     // slv14_arlen
net:   tb.slv14_arid [4] = 0000     // slv14_arid
net:   tb.slv14_arextras [8] = 00000000     // slv14_arextras
net:   tb.slv14_arburst [2] = 00     // slv14_arburst
net:   tb.slv14_araddr [32] = 00000000000000000000000000000000     // slv14_araddr
net:   tb.slv13_wvalid [1] = 0     // slv13_wvalid
net:   tb.slv13_wstrb [8] = 00000000     // slv13_wstrb
net:   tb.slv13_wlast [1] = 0     // slv13_wlast
net:   tb.slv13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv13_wdata
net:   tb.slv13_rready [1] = 1     // slv13_rready
net:   tb.slv13_bready [1] = 1     // slv13_bready
net:   tb.slv13_awvalid [1] = 0     // slv13_awvalid
net:   tb.slv13_awlen [8] = 00000000     // slv13_awlen
net:   tb.slv13_awid [4] = 0000     // slv13_awid
net:   tb.slv13_awextras [8] = 00000000     // slv13_awextras
net:   tb.slv13_awburst [2] = 00     // slv13_awburst
net:   tb.slv13_awaddr [32] = 00000000000000000000000000000000     // slv13_awaddr
net:   tb.slv13_arvalid [1] = 0     // slv13_arvalid
net:   tb.slv13_arlen [8] = 00000000     // slv13_arlen
net:   tb.slv13_arid [4] = 0000     // slv13_arid
net:   tb.slv13_arextras [8] = 00000000     // slv13_arextras
net:   tb.slv13_arburst [2] = 00     // slv13_arburst
net:   tb.slv13_araddr [32] = 00000000000000000000000000000000     // slv13_araddr
net:   tb.slv12_wvalid [1] = 0     // slv12_wvalid
net:   tb.slv12_wstrb [8] = 00000000     // slv12_wstrb
net:   tb.slv12_wlast [1] = 0     // slv12_wlast
net:   tb.slv12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv12_wdata
net:   tb.slv12_rready [1] = 1     // slv12_rready
net:   tb.slv12_bready [1] = 1     // slv12_bready
net:   tb.slv12_awvalid [1] = 0     // slv12_awvalid
net:   tb.slv12_awlen [8] = 00000000     // slv12_awlen
net:   tb.slv12_awid [4] = 0000     // slv12_awid
net:   tb.slv12_awextras [8] = 00000000     // slv12_awextras
net:   tb.slv12_awburst [2] = 00     // slv12_awburst
net:   tb.slv12_awaddr [32] = 00000000000000000000000000000000     // slv12_awaddr
net:   tb.slv12_arvalid [1] = 0     // slv12_arvalid
net:   tb.slv12_arlen [8] = 00000000     // slv12_arlen
net:   tb.slv12_arid [4] = 0000     // slv12_arid
net:   tb.slv12_arextras [8] = 00000000     // slv12_arextras
net:   tb.slv12_arburst [2] = 00     // slv12_arburst
net:   tb.slv12_araddr [32] = 00000000000000000000000000000000     // slv12_araddr
net:   tb.slv11_wvalid [1] = 0     // slv11_wvalid
net:   tb.slv11_wstrb [8] = 00000000     // slv11_wstrb
net:   tb.slv11_wlast [1] = 0     // slv11_wlast
net:   tb.slv11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv11_wdata
net:   tb.slv11_rready [1] = 1     // slv11_rready
net:   tb.slv11_bready [1] = 1     // slv11_bready
net:   tb.slv11_awvalid [1] = 0     // slv11_awvalid
net:   tb.slv11_awlen [8] = 00000000     // slv11_awlen
net:   tb.slv11_awid [4] = 0000     // slv11_awid
net:   tb.slv11_awextras [8] = 00000000     // slv11_awextras
net:   tb.slv11_awburst [2] = 00     // slv11_awburst
net:   tb.slv11_awaddr [32] = 00000000000000000000000000000000     // slv11_awaddr
net:   tb.slv11_arvalid [1] = 0     // slv11_arvalid
net:   tb.slv11_arlen [8] = 00000000     // slv11_arlen
net:   tb.slv11_arid [4] = 0000     // slv11_arid
net:   tb.slv11_arextras [8] = 00000000     // slv11_arextras
net:   tb.slv11_arburst [2] = 00     // slv11_arburst
net:   tb.slv11_araddr [32] = 00000000000000000000000000000000     // slv11_araddr
net:   tb.slv10_wvalid [1] = 0     // slv10_wvalid
net:   tb.slv10_wstrb [8] = 00000000     // slv10_wstrb
net:   tb.slv10_wlast [1] = 0     // slv10_wlast
net:   tb.slv10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv10_wdata
net:   tb.slv10_rready [1] = 1     // slv10_rready
net:   tb.slv10_bready [1] = 1     // slv10_bready
net:   tb.slv10_awvalid [1] = 0     // slv10_awvalid
net:   tb.slv10_awlen [8] = 00000000     // slv10_awlen
net:   tb.slv10_awid [4] = 0000     // slv10_awid
net:   tb.slv10_awextras [8] = 00000000     // slv10_awextras
net:   tb.slv10_awburst [2] = 00     // slv10_awburst
net:   tb.slv10_awaddr [32] = 00000000000000000000000000000000     // slv10_awaddr
net:   tb.slv10_arvalid [1] = 0     // slv10_arvalid
net:   tb.slv10_arlen [8] = 00000000     // slv10_arlen
net:   tb.slv10_arid [4] = 0000     // slv10_arid
net:   tb.slv10_arextras [8] = 00000000     // slv10_arextras
net:   tb.slv10_arburst [2] = 00     // slv10_arburst
net:   tb.slv10_araddr [32] = 00000000000000000000000000000000     // slv10_araddr
net:   tb.slv0_wvalid [1] = 0     // slv0_wvalid
net:   tb.slv0_wstrb [8] = 00000000     // slv0_wstrb
net:   tb.slv0_wlast [1] = 0     // slv0_wlast
net:   tb.slv0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv0_wdata
net:   tb.slv0_rready [1] = 1     // slv0_rready
net:   tb.slv0_bready [1] = 1     // slv0_bready
net:   tb.slv0_awvalid [1] = 0     // slv0_awvalid
net:   tb.slv0_awlen [8] = 00000000     // slv0_awlen
net:   tb.slv0_awid [4] = 0000     // slv0_awid
net:   tb.slv0_awextras [8] = 00000000     // slv0_awextras
net:   tb.slv0_awburst [2] = 00     // slv0_awburst
net:   tb.slv0_awaddr [32] = 00000000000000000000000000000000     // slv0_awaddr
net:   tb.slv0_arvalid [1] = 0     // slv0_arvalid
net:   tb.slv0_arlen [8] = 00000000     // slv0_arlen
net:   tb.slv0_arid [4] = 0000     // slv0_arid
net:   tb.slv0_arextras [8] = 00000000     // slv0_arextras
net:   tb.slv0_arburst [2] = 00     // slv0_arburst
net:   tb.slv0_araddr [32] = 00000000000000000000000000000000     // slv0_araddr
net:   tb.mst9_rvalid [1] = 0     // mst9_rvalid
net:   tb.mst9_rresp [2] = 00     // mst9_rresp
net:   tb.mst9_rlast [1] = 0     // mst9_rlast
net:   tb.mst9_rid [4] = 0000     // mst9_rid
net:   tb.mst9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst9_rdata
net:   tb.mst9_bvalid [1] = 0     // mst9_bvalid
net:   tb.mst9_bresp [2] = 00     // mst9_bresp
net:   tb.mst9_bid [4] = 0000     // mst9_bid
net:   tb.mst9_awready [1] = 1     // mst9_awready
net:   tb.mst9_arready [1] = 1     // mst9_arready
net:   tb.mst8_rvalid [1] = 0     // mst8_rvalid
net:   tb.mst8_rresp [2] = 00     // mst8_rresp
net:   tb.mst8_rlast [1] = 0     // mst8_rlast
net:   tb.mst8_rid [4] = 0000     // mst8_rid
net:   tb.mst8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst8_rdata
net:   tb.mst8_bvalid [1] = 0     // mst8_bvalid
net:   tb.mst8_bresp [2] = 00     // mst8_bresp
net:   tb.mst8_bid [4] = 0000     // mst8_bid
net:   tb.mst8_awready [1] = 1     // mst8_awready
net:   tb.mst8_arready [1] = 1     // mst8_arready
net:   tb.mst7_rvalid [1] = 0     // mst7_rvalid
net:   tb.mst7_rresp [2] = 00     // mst7_rresp
net:   tb.mst7_rlast [1] = 0     // mst7_rlast
net:   tb.mst7_rid [4] = 0000     // mst7_rid
net:   tb.mst7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst7_rdata
net:   tb.mst7_bvalid [1] = 0     // mst7_bvalid
net:   tb.mst7_bresp [2] = 00     // mst7_bresp
net:   tb.mst7_bid [4] = 0000     // mst7_bid
net:   tb.mst7_awready [1] = 1     // mst7_awready
net:   tb.mst7_arready [1] = 1     // mst7_arready
net:   tb.mst6_rvalid [1] = 0     // mst6_rvalid
net:   tb.mst6_rresp [2] = 00     // mst6_rresp
net:   tb.mst6_rlast [1] = 0     // mst6_rlast
net:   tb.mst6_rid [4] = 0000     // mst6_rid
net:   tb.mst6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst6_rdata
net:   tb.mst6_bvalid [1] = 0     // mst6_bvalid
net:   tb.mst6_bresp [2] = 00     // mst6_bresp
net:   tb.mst6_bid [4] = 0000     // mst6_bid
net:   tb.mst6_awready [1] = 1     // mst6_awready
net:   tb.mst6_arready [1] = 1     // mst6_arready
net:   tb.mst5_rvalid [1] = 0     // mst5_rvalid
net:   tb.mst5_rresp [2] = 00     // mst5_rresp
net:   tb.mst5_rlast [1] = 0     // mst5_rlast
net:   tb.mst5_rid [4] = 0000     // mst5_rid
net:   tb.mst5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst5_rdata
net:   tb.mst5_bvalid [1] = 0     // mst5_bvalid
net:   tb.mst5_bresp [2] = 00     // mst5_bresp
net:   tb.mst5_bid [4] = 0000     // mst5_bid
net:   tb.mst5_awready [1] = 1     // mst5_awready
net:   tb.mst5_arready [1] = 1     // mst5_arready
net:   tb.mst4_rvalid [1] = 0     // mst4_rvalid
net:   tb.mst4_rresp [2] = 00     // mst4_rresp
net:   tb.mst4_rlast [1] = 0     // mst4_rlast
net:   tb.mst4_rid [4] = 0000     // mst4_rid
net:   tb.mst4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst4_rdata
net:   tb.mst4_bvalid [1] = 0     // mst4_bvalid
net:   tb.mst4_bresp [2] = 00     // mst4_bresp
net:   tb.mst4_bid [4] = 0000     // mst4_bid
net:   tb.mst4_awready [1] = 1     // mst4_awready
net:   tb.mst4_arready [1] = 1     // mst4_arready
net:   tb.mst3_rvalid [1] = 0     // mst3_rvalid
net:   tb.mst3_rresp [2] = 00     // mst3_rresp
net:   tb.mst3_rlast [1] = 0     // mst3_rlast
net:   tb.mst3_rid [4] = 0000     // mst3_rid
net:   tb.mst3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst3_rdata
net:   tb.mst3_bvalid [1] = 0     // mst3_bvalid
net:   tb.mst3_bresp [2] = 00     // mst3_bresp
net:   tb.mst3_bid [4] = 0000     // mst3_bid
net:   tb.mst3_awready [1] = 1     // mst3_awready
net:   tb.mst3_arready [1] = 1     // mst3_arready
net:   tb.mst2_rvalid [1] = 0     // mst2_rvalid
net:   tb.mst2_rresp [2] = 00     // mst2_rresp
net:   tb.mst2_rlast [1] = 0     // mst2_rlast
net:   tb.mst2_rid [4] = 0000     // mst2_rid
net:   tb.mst2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst2_rdata
net:   tb.mst2_bvalid [1] = 0     // mst2_bvalid
net:   tb.mst2_bresp [2] = 00     // mst2_bresp
net:   tb.mst2_bid [4] = 0000     // mst2_bid
net:   tb.mst2_awready [1] = 1     // mst2_awready
net:   tb.mst2_arready [1] = 1     // mst2_arready
net:   tb.mst1_rvalid [1] = 0     // mst1_rvalid
net:   tb.mst1_rresp [2] = 00     // mst1_rresp
net:   tb.mst1_rlast [1] = 0     // mst1_rlast
net:   tb.mst1_rid [4] = 0000     // mst1_rid
net:   tb.mst1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst1_rdata
net:   tb.mst1_bvalid [1] = 0     // mst1_bvalid
net:   tb.mst1_bresp [2] = 00     // mst1_bresp
net:   tb.mst1_bid [4] = 0000     // mst1_bid
net:   tb.mst1_awready [1] = 1     // mst1_awready
net:   tb.mst1_arready [1] = 1     // mst1_arready
net:   tb.mst15_rvalid [1] = 0     // mst15_rvalid
net:   tb.mst15_rresp [2] = 00     // mst15_rresp
net:   tb.mst15_rlast [1] = 0     // mst15_rlast
net:   tb.mst15_rid [4] = 0000     // mst15_rid
net:   tb.mst15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst15_rdata
net:   tb.mst15_bvalid [1] = 0     // mst15_bvalid
net:   tb.mst15_bresp [2] = 00     // mst15_bresp
net:   tb.mst15_bid [4] = 0000     // mst15_bid
net:   tb.mst15_awready [1] = 1     // mst15_awready
net:   tb.mst15_arready [1] = 1     // mst15_arready
net:   tb.mst14_rvalid [1] = 0     // mst14_rvalid
net:   tb.mst14_rresp [2] = 00     // mst14_rresp
net:   tb.mst14_rlast [1] = 0     // mst14_rlast
net:   tb.mst14_rid [4] = 0000     // mst14_rid
net:   tb.mst14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst14_rdata
net:   tb.mst14_bvalid [1] = 0     // mst14_bvalid
net:   tb.mst14_bresp [2] = 00     // mst14_bresp
net:   tb.mst14_bid [4] = 0000     // mst14_bid
net:   tb.mst14_awready [1] = 1     // mst14_awready
net:   tb.mst14_arready [1] = 1     // mst14_arready
net:   tb.mst13_rvalid [1] = 0     // mst13_rvalid
net:   tb.mst13_rresp [2] = 00     // mst13_rresp
net:   tb.mst13_rlast [1] = 0     // mst13_rlast
net:   tb.mst13_rid [4] = 0000     // mst13_rid
net:   tb.mst13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst13_rdata
net:   tb.mst13_bvalid [1] = 0     // mst13_bvalid
net:   tb.mst13_bresp [2] = 00     // mst13_bresp
net:   tb.mst13_bid [4] = 0000     // mst13_bid
net:   tb.mst13_awready [1] = 1     // mst13_awready
net:   tb.mst13_arready [1] = 1     // mst13_arready
net:   tb.mst12_rvalid [1] = 0     // mst12_rvalid
net:   tb.mst12_rresp [2] = 00     // mst12_rresp
net:   tb.mst12_rlast [1] = 0     // mst12_rlast
net:   tb.mst12_rid [4] = 0000     // mst12_rid
net:   tb.mst12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst12_rdata
net:   tb.mst12_bvalid [1] = 0     // mst12_bvalid
net:   tb.mst12_bresp [2] = 00     // mst12_bresp
net:   tb.mst12_bid [4] = 0000     // mst12_bid
net:   tb.mst12_awready [1] = 1     // mst12_awready
net:   tb.mst12_arready [1] = 1     // mst12_arready
net:   tb.mst11_rvalid [1] = 0     // mst11_rvalid
net:   tb.mst11_rresp [2] = 00     // mst11_rresp
net:   tb.mst11_rlast [1] = 0     // mst11_rlast
net:   tb.mst11_rid [4] = 0000     // mst11_rid
net:   tb.mst11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst11_rdata
net:   tb.mst11_bvalid [1] = 0     // mst11_bvalid
net:   tb.mst11_bresp [2] = 00     // mst11_bresp
net:   tb.mst11_bid [4] = 0000     // mst11_bid
net:   tb.mst11_awready [1] = 1     // mst11_awready
net:   tb.mst11_arready [1] = 1     // mst11_arready
net:   tb.mst10_rvalid [1] = 0     // mst10_rvalid
net:   tb.mst10_rresp [2] = 00     // mst10_rresp
net:   tb.mst10_rlast [1] = 0     // mst10_rlast
net:   tb.mst10_rid [4] = 0000     // mst10_rid
net:   tb.mst10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst10_rdata
net:   tb.mst10_bvalid [1] = 0     // mst10_bvalid
net:   tb.mst10_bresp [2] = 00     // mst10_bresp
net:   tb.mst10_bid [4] = 0000     // mst10_bid
net:   tb.mst10_awready [1] = 1     // mst10_awready
net:   tb.mst10_arready [1] = 1     // mst10_arready
net:   tb.mst0_rvalid [1] = 0     // mst0_rvalid
net:   tb.mst0_rresp [2] = 00     // mst0_rresp
net:   tb.mst0_rlast [1] = 0     // mst0_rlast
net:   tb.mst0_rid [4] = 0000     // mst0_rid
net:   tb.mst0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst0_rdata
net:   tb.mst0_bvalid [1] = 0     // mst0_bvalid
net:   tb.mst0_bresp [2] = 00     // mst0_bresp
net:   tb.mst0_bid [4] = 0000     // mst0_bid
net:   tb.mst0_awready [1] = 1     // mst0_awready
net:   tb.mst0_arready [1] = 1     // mst0_arready
reg:   Index [32] = 00000000000000000000000000000000 // Index
reg:   Panics [32] = 00000000000000000000000000000000 // Panics
reg:   clk [1] = 1 // clk
reg:   corrects [32] = 00000000000000000000000000000000 // corrects
reg:   cycles [32] = 00000000000000000000000000011110 // cycles
reg:   errors [32] = 00000000000000000000000000000000 // errors
reg:   marker [32] = 00000000000000000000000000000000 // marker
reg:   marker0 [32] = 00000000000000000000000000000000 // marker0
reg:   marker1 [32] = 00000000000000000000000000000000 // marker1
reg:   marker2 [32] = 00000000000000000000000000000000 // marker2
reg:   marker3 [32] = 00000000000000000000000000000000 // marker3
reg:   mst0_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_araddr
reg:   mst0_arburst [2] = xx // mst0_arburst
reg:   mst0_arextras [8] = xxxxxxxx // mst0_arextras
reg:   mst0_arid [4] = xxxx // mst0_arid
reg:   mst0_arlen [8] = xxxxxxxx // mst0_arlen
reg:   mst0_arsize [3] = 000 // mst0_arsize
reg:   mst0_arvalid [1] = 0 // mst0_arvalid
reg:   mst0_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_awaddr
reg:   mst0_awburst [2] = xx // mst0_awburst
reg:   mst0_awextras [8] = xxxxxxxx // mst0_awextras
reg:   mst0_awid [4] = xxxx // mst0_awid
reg:   mst0_awlen [8] = xxxxxxxx // mst0_awlen
reg:   mst0_awsize [3] = 000 // mst0_awsize
reg:   mst0_awvalid [1] = 0 // mst0_awvalid
reg:   mst0_bready [1] = 0 // mst0_bready
reg:   mst0_rready [1] = 0 // mst0_rready
reg:   mst0_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_wdata
reg:   mst0_wlast [1] = x // mst0_wlast
reg:   mst0_wstrb [8] = xxxxxxxx // mst0_wstrb
reg:   mst0_wvalid [1] = 0 // mst0_wvalid
reg:   mst10_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst10_araddr
reg:   mst10_arburst [2] = xx // mst10_arburst
reg:   mst10_arextras [8] = xxxxxxxx // mst10_arextras
reg:   mst10_arid [4] = xxxx // mst10_arid
reg:   mst10_arlen [8] = xxxxxxxx // mst10_arlen
reg:   mst10_arsize [3] = 000 // mst10_arsize
reg:   mst10_arvalid [1] = 0 // mst10_arvalid
reg:   mst10_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst10_awaddr
reg:   mst10_awburst [2] = xx // mst10_awburst
reg:   mst10_awextras [8] = xxxxxxxx // mst10_awextras
reg:   mst10_awid [4] = xxxx // mst10_awid
reg:   mst10_awlen [8] = xxxxxxxx // mst10_awlen
reg:   mst10_awsize [3] = 000 // mst10_awsize
reg:   mst10_awvalid [1] = 0 // mst10_awvalid
reg:   mst10_bready [1] = 0 // mst10_bready
reg:   mst10_rready [1] = 0 // mst10_rready
reg:   mst10_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst10_wdata
reg:   mst10_wlast [1] = x // mst10_wlast
reg:   mst10_wstrb [8] = xxxxxxxx // mst10_wstrb
reg:   mst10_wvalid [1] = 0 // mst10_wvalid
reg:   mst11_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst11_araddr
reg:   mst11_arburst [2] = xx // mst11_arburst
reg:   mst11_arextras [8] = xxxxxxxx // mst11_arextras
reg:   mst11_arid [4] = xxxx // mst11_arid
reg:   mst11_arlen [8] = xxxxxxxx // mst11_arlen
reg:   mst11_arsize [3] = 000 // mst11_arsize
reg:   mst11_arvalid [1] = 0 // mst11_arvalid
reg:   mst11_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst11_awaddr
reg:   mst11_awburst [2] = xx // mst11_awburst
reg:   mst11_awextras [8] = xxxxxxxx // mst11_awextras
reg:   mst11_awid [4] = xxxx // mst11_awid
reg:   mst11_awlen [8] = xxxxxxxx // mst11_awlen
reg:   mst11_awsize [3] = 000 // mst11_awsize
reg:   mst11_awvalid [1] = 0 // mst11_awvalid
reg:   mst11_bready [1] = 0 // mst11_bready
reg:   mst11_rready [1] = 0 // mst11_rready
reg:   mst11_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst11_wdata
reg:   mst11_wlast [1] = x // mst11_wlast
reg:   mst11_wstrb [8] = xxxxxxxx // mst11_wstrb
reg:   mst11_wvalid [1] = 0 // mst11_wvalid
reg:   mst12_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst12_araddr
reg:   mst12_arburst [2] = xx // mst12_arburst
reg:   mst12_arextras [8] = xxxxxxxx // mst12_arextras
reg:   mst12_arid [4] = xxxx // mst12_arid
reg:   mst12_arlen [8] = xxxxxxxx // mst12_arlen
reg:   mst12_arsize [3] = 000 // mst12_arsize
reg:   mst12_arvalid [1] = 0 // mst12_arvalid
reg:   mst12_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst12_awaddr
reg:   mst12_awburst [2] = xx // mst12_awburst
reg:   mst12_awextras [8] = xxxxxxxx // mst12_awextras
reg:   mst12_awid [4] = xxxx // mst12_awid
reg:   mst12_awlen [8] = xxxxxxxx // mst12_awlen
reg:   mst12_awsize [3] = 000 // mst12_awsize
reg:   mst12_awvalid [1] = 0 // mst12_awvalid
reg:   mst12_bready [1] = 0 // mst12_bready
reg:   mst12_rready [1] = 0 // mst12_rready
reg:   mst12_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst12_wdata
reg:   mst12_wlast [1] = x // mst12_wlast
reg:   mst12_wstrb [8] = xxxxxxxx // mst12_wstrb
reg:   mst12_wvalid [1] = 0 // mst12_wvalid
reg:   mst13_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst13_araddr
reg:   mst13_arburst [2] = xx // mst13_arburst
reg:   mst13_arextras [8] = xxxxxxxx // mst13_arextras
reg:   mst13_arid [4] = xxxx // mst13_arid
reg:   mst13_arlen [8] = xxxxxxxx // mst13_arlen
reg:   mst13_arsize [3] = 000 // mst13_arsize
reg:   mst13_arvalid [1] = 0 // mst13_arvalid
reg:   mst13_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst13_awaddr
reg:   mst13_awburst [2] = xx // mst13_awburst
reg:   mst13_awextras [8] = xxxxxxxx // mst13_awextras
reg:   mst13_awid [4] = xxxx // mst13_awid
reg:   mst13_awlen [8] = xxxxxxxx // mst13_awlen
reg:   mst13_awsize [3] = 000 // mst13_awsize
reg:   mst13_awvalid [1] = 0 // mst13_awvalid
reg:   mst13_bready [1] = 0 // mst13_bready
reg:   mst13_rready [1] = 0 // mst13_rready
reg:   mst13_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst13_wdata
reg:   mst13_wlast [1] = x // mst13_wlast
reg:   mst13_wstrb [8] = xxxxxxxx // mst13_wstrb
reg:   mst13_wvalid [1] = 0 // mst13_wvalid
reg:   mst14_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst14_araddr
reg:   mst14_arburst [2] = xx // mst14_arburst
reg:   mst14_arextras [8] = xxxxxxxx // mst14_arextras
reg:   mst14_arid [4] = xxxx // mst14_arid
reg:   mst14_arlen [8] = xxxxxxxx // mst14_arlen
reg:   mst14_arsize [3] = 000 // mst14_arsize
reg:   mst14_arvalid [1] = 0 // mst14_arvalid
reg:   mst14_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst14_awaddr
reg:   mst14_awburst [2] = xx // mst14_awburst
reg:   mst14_awextras [8] = xxxxxxxx // mst14_awextras
reg:   mst14_awid [4] = xxxx // mst14_awid
reg:   mst14_awlen [8] = xxxxxxxx // mst14_awlen
reg:   mst14_awsize [3] = 000 // mst14_awsize
reg:   mst14_awvalid [1] = 0 // mst14_awvalid
reg:   mst14_bready [1] = 0 // mst14_bready
reg:   mst14_rready [1] = 0 // mst14_rready
reg:   mst14_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst14_wdata
reg:   mst14_wlast [1] = x // mst14_wlast
reg:   mst14_wstrb [8] = xxxxxxxx // mst14_wstrb
reg:   mst14_wvalid [1] = 0 // mst14_wvalid
reg:   mst15_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst15_araddr
reg:   mst15_arburst [2] = xx // mst15_arburst
reg:   mst15_arextras [8] = xxxxxxxx // mst15_arextras
reg:   mst15_arid [4] = xxxx // mst15_arid
reg:   mst15_arlen [8] = xxxxxxxx // mst15_arlen
reg:   mst15_arsize [3] = 000 // mst15_arsize
reg:   mst15_arvalid [1] = 0 // mst15_arvalid
reg:   mst15_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst15_awaddr
reg:   mst15_awburst [2] = xx // mst15_awburst
reg:   mst15_awextras [8] = xxxxxxxx // mst15_awextras
reg:   mst15_awid [4] = xxxx // mst15_awid
reg:   mst15_awlen [8] = xxxxxxxx // mst15_awlen
reg:   mst15_awsize [3] = 000 // mst15_awsize
reg:   mst15_awvalid [1] = 0 // mst15_awvalid
reg:   mst15_bready [1] = 0 // mst15_bready
reg:   mst15_rready [1] = 0 // mst15_rready
reg:   mst15_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst15_wdata
reg:   mst15_wlast [1] = x // mst15_wlast
reg:   mst15_wstrb [8] = xxxxxxxx // mst15_wstrb
reg:   mst15_wvalid [1] = 0 // mst15_wvalid
reg:   mst1_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_araddr
reg:   mst1_arburst [2] = xx // mst1_arburst
reg:   mst1_arextras [8] = xxxxxxxx // mst1_arextras
reg:   mst1_arid [4] = xxxx // mst1_arid
reg:   mst1_arlen [8] = xxxxxxxx // mst1_arlen
reg:   mst1_arsize [3] = 000 // mst1_arsize
reg:   mst1_arvalid [1] = 0 // mst1_arvalid
reg:   mst1_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_awaddr
reg:   mst1_awburst [2] = xx // mst1_awburst
reg:   mst1_awextras [8] = xxxxxxxx // mst1_awextras
reg:   mst1_awid [4] = xxxx // mst1_awid
reg:   mst1_awlen [8] = xxxxxxxx // mst1_awlen
reg:   mst1_awsize [3] = 000 // mst1_awsize
reg:   mst1_awvalid [1] = 0 // mst1_awvalid
reg:   mst1_bready [1] = 0 // mst1_bready
reg:   mst1_rready [1] = 0 // mst1_rready
reg:   mst1_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_wdata
reg:   mst1_wlast [1] = x // mst1_wlast
reg:   mst1_wstrb [8] = xxxxxxxx // mst1_wstrb
reg:   mst1_wvalid [1] = 0 // mst1_wvalid
reg:   mst2_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_araddr
reg:   mst2_arburst [2] = xx // mst2_arburst
reg:   mst2_arextras [8] = xxxxxxxx // mst2_arextras
reg:   mst2_arid [4] = xxxx // mst2_arid
reg:   mst2_arlen [8] = xxxxxxxx // mst2_arlen
reg:   mst2_arsize [3] = 000 // mst2_arsize
reg:   mst2_arvalid [1] = 0 // mst2_arvalid
reg:   mst2_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_awaddr
reg:   mst2_awburst [2] = xx // mst2_awburst
reg:   mst2_awextras [8] = xxxxxxxx // mst2_awextras
reg:   mst2_awid [4] = xxxx // mst2_awid
reg:   mst2_awlen [8] = xxxxxxxx // mst2_awlen
reg:   mst2_awsize [3] = 000 // mst2_awsize
reg:   mst2_awvalid [1] = 0 // mst2_awvalid
reg:   mst2_bready [1] = 0 // mst2_bready
reg:   mst2_rready [1] = 0 // mst2_rready
reg:   mst2_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_wdata
reg:   mst2_wlast [1] = x // mst2_wlast
reg:   mst2_wstrb [8] = xxxxxxxx // mst2_wstrb
reg:   mst2_wvalid [1] = 0 // mst2_wvalid
reg:   mst3_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_araddr
reg:   mst3_arburst [2] = xx // mst3_arburst
reg:   mst3_arextras [8] = xxxxxxxx // mst3_arextras
reg:   mst3_arid [4] = xxxx // mst3_arid
reg:   mst3_arlen [8] = xxxxxxxx // mst3_arlen
reg:   mst3_arsize [3] = 000 // mst3_arsize
reg:   mst3_arvalid [1] = 0 // mst3_arvalid
reg:   mst3_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_awaddr
reg:   mst3_awburst [2] = xx // mst3_awburst
reg:   mst3_awextras [8] = xxxxxxxx // mst3_awextras
reg:   mst3_awid [4] = xxxx // mst3_awid
reg:   mst3_awlen [8] = xxxxxxxx // mst3_awlen
reg:   mst3_awsize [3] = 000 // mst3_awsize
reg:   mst3_awvalid [1] = 0 // mst3_awvalid
reg:   mst3_bready [1] = 0 // mst3_bready
reg:   mst3_rready [1] = 0 // mst3_rready
reg:   mst3_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_wdata
reg:   mst3_wlast [1] = x // mst3_wlast
reg:   mst3_wstrb [8] = xxxxxxxx // mst3_wstrb
reg:   mst3_wvalid [1] = 0 // mst3_wvalid
reg:   mst4_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst4_araddr
reg:   mst4_arburst [2] = xx // mst4_arburst
reg:   mst4_arextras [8] = xxxxxxxx // mst4_arextras
reg:   mst4_arid [4] = xxxx // mst4_arid
reg:   mst4_arlen [8] = xxxxxxxx // mst4_arlen
reg:   mst4_arsize [3] = 000 // mst4_arsize
reg:   mst4_arvalid [1] = 0 // mst4_arvalid
reg:   mst4_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst4_awaddr
reg:   mst4_awburst [2] = xx // mst4_awburst
reg:   mst4_awextras [8] = xxxxxxxx // mst4_awextras
reg:   mst4_awid [4] = xxxx // mst4_awid
reg:   mst4_awlen [8] = xxxxxxxx // mst4_awlen
reg:   mst4_awsize [3] = 000 // mst4_awsize
reg:   mst4_awvalid [1] = 0 // mst4_awvalid
reg:   mst4_bready [1] = 0 // mst4_bready
reg:   mst4_rready [1] = 0 // mst4_rready
reg:   mst4_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst4_wdata
reg:   mst4_wlast [1] = x // mst4_wlast
reg:   mst4_wstrb [8] = xxxxxxxx // mst4_wstrb
reg:   mst4_wvalid [1] = 0 // mst4_wvalid
reg:   mst5_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst5_araddr
reg:   mst5_arburst [2] = xx // mst5_arburst
reg:   mst5_arextras [8] = xxxxxxxx // mst5_arextras
reg:   mst5_arid [4] = xxxx // mst5_arid
reg:   mst5_arlen [8] = xxxxxxxx // mst5_arlen
reg:   mst5_arsize [3] = 000 // mst5_arsize
reg:   mst5_arvalid [1] = 0 // mst5_arvalid
reg:   mst5_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst5_awaddr
reg:   mst5_awburst [2] = xx // mst5_awburst
reg:   mst5_awextras [8] = xxxxxxxx // mst5_awextras
reg:   mst5_awid [4] = xxxx // mst5_awid
reg:   mst5_awlen [8] = xxxxxxxx // mst5_awlen
reg:   mst5_awsize [3] = 000 // mst5_awsize
reg:   mst5_awvalid [1] = 0 // mst5_awvalid
reg:   mst5_bready [1] = 0 // mst5_bready
reg:   mst5_rready [1] = 0 // mst5_rready
reg:   mst5_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst5_wdata
reg:   mst5_wlast [1] = x // mst5_wlast
reg:   mst5_wstrb [8] = xxxxxxxx // mst5_wstrb
reg:   mst5_wvalid [1] = 0 // mst5_wvalid
reg:   mst6_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst6_araddr
reg:   mst6_arburst [2] = xx // mst6_arburst
reg:   mst6_arextras [8] = xxxxxxxx // mst6_arextras
reg:   mst6_arid [4] = xxxx // mst6_arid
reg:   mst6_arlen [8] = xxxxxxxx // mst6_arlen
reg:   mst6_arsize [3] = 000 // mst6_arsize
reg:   mst6_arvalid [1] = 0 // mst6_arvalid
reg:   mst6_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst6_awaddr
reg:   mst6_awburst [2] = xx // mst6_awburst
reg:   mst6_awextras [8] = xxxxxxxx // mst6_awextras
reg:   mst6_awid [4] = xxxx // mst6_awid
reg:   mst6_awlen [8] = xxxxxxxx // mst6_awlen
reg:   mst6_awsize [3] = 000 // mst6_awsize
reg:   mst6_awvalid [1] = 0 // mst6_awvalid
reg:   mst6_bready [1] = 0 // mst6_bready
reg:   mst6_rready [1] = 0 // mst6_rready
reg:   mst6_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst6_wdata
reg:   mst6_wlast [1] = x // mst6_wlast
reg:   mst6_wstrb [8] = xxxxxxxx // mst6_wstrb
reg:   mst6_wvalid [1] = 0 // mst6_wvalid
reg:   mst7_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst7_araddr
reg:   mst7_arburst [2] = xx // mst7_arburst
reg:   mst7_arextras [8] = xxxxxxxx // mst7_arextras
reg:   mst7_arid [4] = xxxx // mst7_arid
reg:   mst7_arlen [8] = xxxxxxxx // mst7_arlen
reg:   mst7_arsize [3] = 000 // mst7_arsize
reg:   mst7_arvalid [1] = 0 // mst7_arvalid
reg:   mst7_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst7_awaddr
reg:   mst7_awburst [2] = xx // mst7_awburst
reg:   mst7_awextras [8] = xxxxxxxx // mst7_awextras
reg:   mst7_awid [4] = xxxx // mst7_awid
reg:   mst7_awlen [8] = xxxxxxxx // mst7_awlen
reg:   mst7_awsize [3] = 000 // mst7_awsize
reg:   mst7_awvalid [1] = 0 // mst7_awvalid
reg:   mst7_bready [1] = 0 // mst7_bready
reg:   mst7_rready [1] = 0 // mst7_rready
reg:   mst7_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst7_wdata
reg:   mst7_wlast [1] = x // mst7_wlast
reg:   mst7_wstrb [8] = xxxxxxxx // mst7_wstrb
reg:   mst7_wvalid [1] = 0 // mst7_wvalid
reg:   mst8_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst8_araddr
reg:   mst8_arburst [2] = xx // mst8_arburst
reg:   mst8_arextras [8] = xxxxxxxx // mst8_arextras
reg:   mst8_arid [4] = xxxx // mst8_arid
reg:   mst8_arlen [8] = xxxxxxxx // mst8_arlen
reg:   mst8_arsize [3] = 000 // mst8_arsize
reg:   mst8_arvalid [1] = 0 // mst8_arvalid
reg:   mst8_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst8_awaddr
reg:   mst8_awburst [2] = xx // mst8_awburst
reg:   mst8_awextras [8] = xxxxxxxx // mst8_awextras
reg:   mst8_awid [4] = xxxx // mst8_awid
reg:   mst8_awlen [8] = xxxxxxxx // mst8_awlen
reg:   mst8_awsize [3] = 000 // mst8_awsize
reg:   mst8_awvalid [1] = 0 // mst8_awvalid
reg:   mst8_bready [1] = 0 // mst8_bready
reg:   mst8_rready [1] = 0 // mst8_rready
reg:   mst8_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst8_wdata
reg:   mst8_wlast [1] = x // mst8_wlast
reg:   mst8_wstrb [8] = xxxxxxxx // mst8_wstrb
reg:   mst8_wvalid [1] = 0 // mst8_wvalid
reg:   mst9_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst9_araddr
reg:   mst9_arburst [2] = xx // mst9_arburst
reg:   mst9_arextras [8] = xxxxxxxx // mst9_arextras
reg:   mst9_arid [4] = xxxx // mst9_arid
reg:   mst9_arlen [8] = xxxxxxxx // mst9_arlen
reg:   mst9_arsize [3] = 000 // mst9_arsize
reg:   mst9_arvalid [1] = 0 // mst9_arvalid
reg:   mst9_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst9_awaddr
reg:   mst9_awburst [2] = xx // mst9_awburst
reg:   mst9_awextras [8] = xxxxxxxx // mst9_awextras
reg:   mst9_awid [4] = xxxx // mst9_awid
reg:   mst9_awlen [8] = xxxxxxxx // mst9_awlen
reg:   mst9_awsize [3] = 000 // mst9_awsize
reg:   mst9_awvalid [1] = 0 // mst9_awvalid
reg:   mst9_bready [1] = 0 // mst9_bready
reg:   mst9_rready [1] = 0 // mst9_rready
reg:   mst9_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst9_wdata
reg:   mst9_wlast [1] = x // mst9_wlast
reg:   mst9_wstrb [8] = xxxxxxxx // mst9_wstrb
reg:   mst9_wvalid [1] = 0 // mst9_wvalid
reg:   rst_n [1] = 1 // rst_n
reg:   slv0_arready [1] = 0 // slv0_arready
reg:   slv0_arsize [3] = 000 // slv0_arsize
reg:   slv0_awready [1] = 0 // slv0_awready
reg:   slv0_awsize [3] = 000 // slv0_awsize
reg:   slv0_bid [4] = xxxx // slv0_bid
reg:   slv0_bresp [2] = xx // slv0_bresp
reg:   slv0_bvalid [1] = 0 // slv0_bvalid
reg:   slv0_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv0_rdata
reg:   slv0_rid [4] = xxxx // slv0_rid
reg:   slv0_rlast [1] = x // slv0_rlast
reg:   slv0_rresp [2] = xx // slv0_rresp
reg:   slv0_rvalid [1] = 0 // slv0_rvalid
reg:   slv0_wready [1] = x // slv0_wready
reg:   slv10_arready [1] = 0 // slv10_arready
reg:   slv10_arsize [3] = 000 // slv10_arsize
reg:   slv10_awready [1] = 0 // slv10_awready
reg:   slv10_awsize [3] = 000 // slv10_awsize
reg:   slv10_bid [4] = xxxx // slv10_bid
reg:   slv10_bresp [2] = xx // slv10_bresp
reg:   slv10_bvalid [1] = 0 // slv10_bvalid
reg:   slv10_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv10_rdata
reg:   slv10_rid [4] = xxxx // slv10_rid
reg:   slv10_rlast [1] = x // slv10_rlast
reg:   slv10_rresp [2] = xx // slv10_rresp
reg:   slv10_rvalid [1] = 0 // slv10_rvalid
reg:   slv10_wready [1] = x // slv10_wready
reg:   slv11_arready [1] = 0 // slv11_arready
reg:   slv11_arsize [3] = 000 // slv11_arsize
reg:   slv11_awready [1] = 0 // slv11_awready
reg:   slv11_awsize [3] = 000 // slv11_awsize
reg:   slv11_bid [4] = xxxx // slv11_bid
reg:   slv11_bresp [2] = xx // slv11_bresp
reg:   slv11_bvalid [1] = 0 // slv11_bvalid
reg:   slv11_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv11_rdata
reg:   slv11_rid [4] = xxxx // slv11_rid
reg:   slv11_rlast [1] = x // slv11_rlast
reg:   slv11_rresp [2] = xx // slv11_rresp
reg:   slv11_rvalid [1] = 0 // slv11_rvalid
reg:   slv11_wready [1] = x // slv11_wready
reg:   slv12_arready [1] = 0 // slv12_arready
reg:   slv12_arsize [3] = 000 // slv12_arsize
reg:   slv12_awready [1] = 0 // slv12_awready
reg:   slv12_awsize [3] = 000 // slv12_awsize
reg:   slv12_bid [4] = xxxx // slv12_bid
reg:   slv12_bresp [2] = xx // slv12_bresp
reg:   slv12_bvalid [1] = 0 // slv12_bvalid
reg:   slv12_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv12_rdata
reg:   slv12_rid [4] = xxxx // slv12_rid
reg:   slv12_rlast [1] = x // slv12_rlast
reg:   slv12_rresp [2] = xx // slv12_rresp
reg:   slv12_rvalid [1] = 0 // slv12_rvalid
reg:   slv12_wready [1] = x // slv12_wready
reg:   slv13_arready [1] = 0 // slv13_arready
reg:   slv13_arsize [3] = 000 // slv13_arsize
reg:   slv13_awready [1] = 0 // slv13_awready
reg:   slv13_awsize [3] = 000 // slv13_awsize
reg:   slv13_bid [4] = xxxx // slv13_bid
reg:   slv13_bresp [2] = xx // slv13_bresp
reg:   slv13_bvalid [1] = 0 // slv13_bvalid
reg:   slv13_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv13_rdata
reg:   slv13_rid [4] = xxxx // slv13_rid
reg:   slv13_rlast [1] = x // slv13_rlast
reg:   slv13_rresp [2] = xx // slv13_rresp
reg:   slv13_rvalid [1] = 0 // slv13_rvalid
reg:   slv13_wready [1] = x // slv13_wready
reg:   slv14_arready [1] = 0 // slv14_arready
reg:   slv14_arsize [3] = 000 // slv14_arsize
reg:   slv14_awready [1] = 0 // slv14_awready
reg:   slv14_awsize [3] = 000 // slv14_awsize
reg:   slv14_bid [4] = xxxx // slv14_bid
reg:   slv14_bresp [2] = xx // slv14_bresp
reg:   slv14_bvalid [1] = 0 // slv14_bvalid
reg:   slv14_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv14_rdata
reg:   slv14_rid [4] = xxxx // slv14_rid
reg:   slv14_rlast [1] = x // slv14_rlast
reg:   slv14_rresp [2] = xx // slv14_rresp
reg:   slv14_rvalid [1] = 0 // slv14_rvalid
reg:   slv14_wready [1] = x // slv14_wready
reg:   slv15_arready [1] = 0 // slv15_arready
reg:   slv15_arsize [3] = 000 // slv15_arsize
reg:   slv15_awready [1] = 0 // slv15_awready
reg:   slv15_awsize [3] = 000 // slv15_awsize
reg:   slv15_bid [4] = xxxx // slv15_bid
reg:   slv15_bresp [2] = xx // slv15_bresp
reg:   slv15_bvalid [1] = 0 // slv15_bvalid
reg:   slv15_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv15_rdata
reg:   slv15_rid [4] = xxxx // slv15_rid
reg:   slv15_rlast [1] = x // slv15_rlast
reg:   slv15_rresp [2] = xx // slv15_rresp
reg:   slv15_rvalid [1] = 0 // slv15_rvalid
reg:   slv15_wready [1] = x // slv15_wready
reg:   slv1_arready [1] = 0 // slv1_arready
reg:   slv1_arsize [3] = 000 // slv1_arsize
reg:   slv1_awready [1] = 0 // slv1_awready
reg:   slv1_awsize [3] = 000 // slv1_awsize
reg:   slv1_bid [4] = xxxx // slv1_bid
reg:   slv1_bresp [2] = xx // slv1_bresp
reg:   slv1_bvalid [1] = 0 // slv1_bvalid
reg:   slv1_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv1_rdata
reg:   slv1_rid [4] = xxxx // slv1_rid
reg:   slv1_rlast [1] = x // slv1_rlast
reg:   slv1_rresp [2] = xx // slv1_rresp
reg:   slv1_rvalid [1] = 0 // slv1_rvalid
reg:   slv1_wready [1] = x // slv1_wready
reg:   slv2_arready [1] = 0 // slv2_arready
reg:   slv2_arsize [3] = 000 // slv2_arsize
reg:   slv2_awready [1] = 0 // slv2_awready
reg:   slv2_awsize [3] = 000 // slv2_awsize
reg:   slv2_bid [4] = xxxx // slv2_bid
reg:   slv2_bresp [2] = xx // slv2_bresp
reg:   slv2_bvalid [1] = 0 // slv2_bvalid
reg:   slv2_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv2_rdata
reg:   slv2_rid [4] = xxxx // slv2_rid
reg:   slv2_rlast [1] = x // slv2_rlast
reg:   slv2_rresp [2] = xx // slv2_rresp
reg:   slv2_rvalid [1] = 0 // slv2_rvalid
reg:   slv2_wready [1] = x // slv2_wready
reg:   slv3_arready [1] = 0 // slv3_arready
reg:   slv3_arsize [3] = 000 // slv3_arsize
reg:   slv3_awready [1] = 0 // slv3_awready
reg:   slv3_awsize [3] = 000 // slv3_awsize
reg:   slv3_bid [4] = xxxx // slv3_bid
reg:   slv3_bresp [2] = xx // slv3_bresp
reg:   slv3_bvalid [1] = 0 // slv3_bvalid
reg:   slv3_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv3_rdata
reg:   slv3_rid [4] = xxxx // slv3_rid
reg:   slv3_rlast [1] = x // slv3_rlast
reg:   slv3_rresp [2] = xx // slv3_rresp
reg:   slv3_rvalid [1] = 0 // slv3_rvalid
reg:   slv3_wready [1] = x // slv3_wready
reg:   slv4_arready [1] = 0 // slv4_arready
reg:   slv4_arsize [3] = 000 // slv4_arsize
reg:   slv4_awready [1] = 0 // slv4_awready
reg:   slv4_awsize [3] = 000 // slv4_awsize
reg:   slv4_bid [4] = xxxx // slv4_bid
reg:   slv4_bresp [2] = xx // slv4_bresp
reg:   slv4_bvalid [1] = 0 // slv4_bvalid
reg:   slv4_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv4_rdata
reg:   slv4_rid [4] = xxxx // slv4_rid
reg:   slv4_rlast [1] = x // slv4_rlast
reg:   slv4_rresp [2] = xx // slv4_rresp
reg:   slv4_rvalid [1] = 0 // slv4_rvalid
reg:   slv4_wready [1] = x // slv4_wready
reg:   slv5_arready [1] = 0 // slv5_arready
reg:   slv5_arsize [3] = 000 // slv5_arsize
reg:   slv5_awready [1] = 0 // slv5_awready
reg:   slv5_awsize [3] = 000 // slv5_awsize
reg:   slv5_bid [4] = xxxx // slv5_bid
reg:   slv5_bresp [2] = xx // slv5_bresp
reg:   slv5_bvalid [1] = 0 // slv5_bvalid
reg:   slv5_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv5_rdata
reg:   slv5_rid [4] = xxxx // slv5_rid
reg:   slv5_rlast [1] = x // slv5_rlast
reg:   slv5_rresp [2] = xx // slv5_rresp
reg:   slv5_rvalid [1] = 0 // slv5_rvalid
reg:   slv5_wready [1] = x // slv5_wready
reg:   slv6_arready [1] = 0 // slv6_arready
reg:   slv6_arsize [3] = 000 // slv6_arsize
reg:   slv6_awready [1] = 0 // slv6_awready
reg:   slv6_awsize [3] = 000 // slv6_awsize
reg:   slv6_bid [4] = xxxx // slv6_bid
reg:   slv6_bresp [2] = xx // slv6_bresp
reg:   slv6_bvalid [1] = 0 // slv6_bvalid
reg:   slv6_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv6_rdata
reg:   slv6_rid [4] = xxxx // slv6_rid
reg:   slv6_rlast [1] = x // slv6_rlast
reg:   slv6_rresp [2] = xx // slv6_rresp
reg:   slv6_rvalid [1] = 0 // slv6_rvalid
reg:   slv6_wready [1] = x // slv6_wready
reg:   slv7_arready [1] = 0 // slv7_arready
reg:   slv7_arsize [3] = 000 // slv7_arsize
reg:   slv7_awready [1] = 0 // slv7_awready
reg:   slv7_awsize [3] = 000 // slv7_awsize
reg:   slv7_bid [4] = xxxx // slv7_bid
reg:   slv7_bresp [2] = xx // slv7_bresp
reg:   slv7_bvalid [1] = 0 // slv7_bvalid
reg:   slv7_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv7_rdata
reg:   slv7_rid [4] = xxxx // slv7_rid
reg:   slv7_rlast [1] = x // slv7_rlast
reg:   slv7_rresp [2] = xx // slv7_rresp
reg:   slv7_rvalid [1] = 0 // slv7_rvalid
reg:   slv7_wready [1] = x // slv7_wready
reg:   slv8_arready [1] = 0 // slv8_arready
reg:   slv8_arsize [3] = 000 // slv8_arsize
reg:   slv8_awready [1] = 0 // slv8_awready
reg:   slv8_awsize [3] = 000 // slv8_awsize
reg:   slv8_bid [4] = xxxx // slv8_bid
reg:   slv8_bresp [2] = xx // slv8_bresp
reg:   slv8_bvalid [1] = 0 // slv8_bvalid
reg:   slv8_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv8_rdata
reg:   slv8_rid [4] = xxxx // slv8_rid
reg:   slv8_rlast [1] = x // slv8_rlast
reg:   slv8_rresp [2] = xx // slv8_rresp
reg:   slv8_rvalid [1] = 0 // slv8_rvalid
reg:   slv8_wready [1] = x // slv8_wready
reg:   slv9_arready [1] = 0 // slv9_arready
reg:   slv9_arsize [3] = 000 // slv9_arsize
reg:   slv9_awready [1] = 0 // slv9_awready
reg:   slv9_awsize [3] = 000 // slv9_awsize
reg:   slv9_bid [4] = xxxx // slv9_bid
reg:   slv9_bresp [2] = xx // slv9_bresp
reg:   slv9_bvalid [1] = 0 // slv9_bvalid
reg:   slv9_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv9_rdata
reg:   slv9_rid [4] = xxxx // slv9_rid
reg:   slv9_rlast [1] = x // slv9_rlast
reg:   slv9_rresp [2] = xx // slv9_rresp
reg:   slv9_rvalid [1] = 0 // slv9_rvalid
reg:   slv9_wready [1] = x // slv9_wready
reg:   wrongs [32] = 00000000000000000000000000000000 // wrongs
son:   tb.dut
module: x16 tb.dut
net:   tb.dut.clk [1] = 1     // clk
net:   tb.dut.merge0_split100_wready [1] = 1     // merge0_split100_wready
net:   tb.dut.merge10_split110_wready [1] = 1     // merge10_split110_wready
net:   tb.dut.merge11_split111_wready [1] = 1     // merge11_split111_wready
net:   tb.dut.merge12_split112_wready [1] = 1     // merge12_split112_wready
net:   tb.dut.merge13_split113_wready [1] = 1     // merge13_split113_wready
net:   tb.dut.merge14_split114_wready [1] = 1     // merge14_split114_wready
net:   tb.dut.merge15_split115_wready [1] = 1     // merge15_split115_wready
net:   tb.dut.merge1_split101_wready [1] = 1     // merge1_split101_wready
net:   tb.dut.merge2_split102_wready [1] = 1     // merge2_split102_wready
net:   tb.dut.merge3_split103_wready [1] = 1     // merge3_split103_wready
net:   tb.dut.merge4_split104_wready [1] = 1     // merge4_split104_wready
net:   tb.dut.merge5_split105_wready [1] = 1     // merge5_split105_wready
net:   tb.dut.merge6_split106_wready [1] = 1     // merge6_split106_wready
net:   tb.dut.merge7_split107_wready [1] = 1     // merge7_split107_wready
net:   tb.dut.merge8_split108_wready [1] = 1     // merge8_split108_wready
net:   tb.dut.merge9_split109_wready [1] = 1     // merge9_split109_wready
net:   tb.dut.mst0_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_araddr
net:   tb.dut.mst0_arburst [2] = xx     // mst0_arburst
net:   tb.dut.mst0_arextras [8] = xxxxxxxx     // mst0_arextras
net:   tb.dut.mst0_arid [4] = xxxx     // mst0_arid
net:   tb.dut.mst0_arlen [8] = xxxxxxxx     // mst0_arlen
net:   tb.dut.mst0_arvalid [1] = 0     // mst0_arvalid
net:   tb.dut.mst0_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_awaddr
net:   tb.dut.mst0_awburst [2] = xx     // mst0_awburst
net:   tb.dut.mst0_awextras [8] = xxxxxxxx     // mst0_awextras
net:   tb.dut.mst0_awid [4] = xxxx     // mst0_awid
net:   tb.dut.mst0_awlen [8] = xxxxxxxx     // mst0_awlen
net:   tb.dut.mst0_awvalid [1] = 0     // mst0_awvalid
net:   tb.dut.mst0_bready [1] = 0     // mst0_bready
net:   tb.dut.mst0_rready [1] = 0     // mst0_rready
net:   tb.dut.mst0_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_wdata
net:   tb.dut.mst0_wlast [1] = x     // mst0_wlast
net:   tb.dut.mst0_wready [1] = 1     // mst0_wready
net:   tb.dut.mst0_wstrb [8] = xxxxxxxx     // mst0_wstrb
net:   tb.dut.mst0_wvalid [1] = 0     // mst0_wvalid
net:   tb.dut.mst10_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst10_araddr
net:   tb.dut.mst10_arburst [2] = xx     // mst10_arburst
net:   tb.dut.mst10_arextras [8] = xxxxxxxx     // mst10_arextras
net:   tb.dut.mst10_arid [4] = xxxx     // mst10_arid
net:   tb.dut.mst10_arlen [8] = xxxxxxxx     // mst10_arlen
net:   tb.dut.mst10_arvalid [1] = 0     // mst10_arvalid
net:   tb.dut.mst10_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst10_awaddr
net:   tb.dut.mst10_awburst [2] = xx     // mst10_awburst
net:   tb.dut.mst10_awextras [8] = xxxxxxxx     // mst10_awextras
net:   tb.dut.mst10_awid [4] = xxxx     // mst10_awid
net:   tb.dut.mst10_awlen [8] = xxxxxxxx     // mst10_awlen
net:   tb.dut.mst10_awvalid [1] = 0     // mst10_awvalid
net:   tb.dut.mst10_bready [1] = 0     // mst10_bready
net:   tb.dut.mst10_rready [1] = 0     // mst10_rready
net:   tb.dut.mst10_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst10_wdata
net:   tb.dut.mst10_wlast [1] = x     // mst10_wlast
net:   tb.dut.mst10_wready [1] = 1     // mst10_wready
net:   tb.dut.mst10_wstrb [8] = xxxxxxxx     // mst10_wstrb
net:   tb.dut.mst10_wvalid [1] = 0     // mst10_wvalid
net:   tb.dut.mst11_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst11_araddr
net:   tb.dut.mst11_arburst [2] = xx     // mst11_arburst
net:   tb.dut.mst11_arextras [8] = xxxxxxxx     // mst11_arextras
net:   tb.dut.mst11_arid [4] = xxxx     // mst11_arid
net:   tb.dut.mst11_arlen [8] = xxxxxxxx     // mst11_arlen
net:   tb.dut.mst11_arvalid [1] = 0     // mst11_arvalid
net:   tb.dut.mst11_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst11_awaddr
net:   tb.dut.mst11_awburst [2] = xx     // mst11_awburst
net:   tb.dut.mst11_awextras [8] = xxxxxxxx     // mst11_awextras
net:   tb.dut.mst11_awid [4] = xxxx     // mst11_awid
net:   tb.dut.mst11_awlen [8] = xxxxxxxx     // mst11_awlen
net:   tb.dut.mst11_awvalid [1] = 0     // mst11_awvalid
net:   tb.dut.mst11_bready [1] = 0     // mst11_bready
net:   tb.dut.mst11_rready [1] = 0     // mst11_rready
net:   tb.dut.mst11_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst11_wdata
net:   tb.dut.mst11_wlast [1] = x     // mst11_wlast
net:   tb.dut.mst11_wready [1] = 1     // mst11_wready
net:   tb.dut.mst11_wstrb [8] = xxxxxxxx     // mst11_wstrb
net:   tb.dut.mst11_wvalid [1] = 0     // mst11_wvalid
net:   tb.dut.mst12_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst12_araddr
net:   tb.dut.mst12_arburst [2] = xx     // mst12_arburst
net:   tb.dut.mst12_arextras [8] = xxxxxxxx     // mst12_arextras
net:   tb.dut.mst12_arid [4] = xxxx     // mst12_arid
net:   tb.dut.mst12_arlen [8] = xxxxxxxx     // mst12_arlen
net:   tb.dut.mst12_arvalid [1] = 0     // mst12_arvalid
net:   tb.dut.mst12_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst12_awaddr
net:   tb.dut.mst12_awburst [2] = xx     // mst12_awburst
net:   tb.dut.mst12_awextras [8] = xxxxxxxx     // mst12_awextras
net:   tb.dut.mst12_awid [4] = xxxx     // mst12_awid
net:   tb.dut.mst12_awlen [8] = xxxxxxxx     // mst12_awlen
net:   tb.dut.mst12_awvalid [1] = 0     // mst12_awvalid
net:   tb.dut.mst12_bready [1] = 0     // mst12_bready
net:   tb.dut.mst12_rready [1] = 0     // mst12_rready
net:   tb.dut.mst12_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst12_wdata
net:   tb.dut.mst12_wlast [1] = x     // mst12_wlast
net:   tb.dut.mst12_wready [1] = 1     // mst12_wready
net:   tb.dut.mst12_wstrb [8] = xxxxxxxx     // mst12_wstrb
net:   tb.dut.mst12_wvalid [1] = 0     // mst12_wvalid
net:   tb.dut.mst13_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst13_araddr
net:   tb.dut.mst13_arburst [2] = xx     // mst13_arburst
net:   tb.dut.mst13_arextras [8] = xxxxxxxx     // mst13_arextras
net:   tb.dut.mst13_arid [4] = xxxx     // mst13_arid
net:   tb.dut.mst13_arlen [8] = xxxxxxxx     // mst13_arlen
net:   tb.dut.mst13_arvalid [1] = 0     // mst13_arvalid
net:   tb.dut.mst13_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst13_awaddr
net:   tb.dut.mst13_awburst [2] = xx     // mst13_awburst
net:   tb.dut.mst13_awextras [8] = xxxxxxxx     // mst13_awextras
net:   tb.dut.mst13_awid [4] = xxxx     // mst13_awid
net:   tb.dut.mst13_awlen [8] = xxxxxxxx     // mst13_awlen
net:   tb.dut.mst13_awvalid [1] = 0     // mst13_awvalid
net:   tb.dut.mst13_bready [1] = 0     // mst13_bready
net:   tb.dut.mst13_rready [1] = 0     // mst13_rready
net:   tb.dut.mst13_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst13_wdata
net:   tb.dut.mst13_wlast [1] = x     // mst13_wlast
net:   tb.dut.mst13_wready [1] = 1     // mst13_wready
net:   tb.dut.mst13_wstrb [8] = xxxxxxxx     // mst13_wstrb
net:   tb.dut.mst13_wvalid [1] = 0     // mst13_wvalid
net:   tb.dut.mst14_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst14_araddr
net:   tb.dut.mst14_arburst [2] = xx     // mst14_arburst
net:   tb.dut.mst14_arextras [8] = xxxxxxxx     // mst14_arextras
net:   tb.dut.mst14_arid [4] = xxxx     // mst14_arid
net:   tb.dut.mst14_arlen [8] = xxxxxxxx     // mst14_arlen
net:   tb.dut.mst14_arvalid [1] = 0     // mst14_arvalid
net:   tb.dut.mst14_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst14_awaddr
net:   tb.dut.mst14_awburst [2] = xx     // mst14_awburst
net:   tb.dut.mst14_awextras [8] = xxxxxxxx     // mst14_awextras
net:   tb.dut.mst14_awid [4] = xxxx     // mst14_awid
net:   tb.dut.mst14_awlen [8] = xxxxxxxx     // mst14_awlen
net:   tb.dut.mst14_awvalid [1] = 0     // mst14_awvalid
net:   tb.dut.mst14_bready [1] = 0     // mst14_bready
net:   tb.dut.mst14_rready [1] = 0     // mst14_rready
net:   tb.dut.mst14_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst14_wdata
net:   tb.dut.mst14_wlast [1] = x     // mst14_wlast
net:   tb.dut.mst14_wready [1] = 1     // mst14_wready
net:   tb.dut.mst14_wstrb [8] = xxxxxxxx     // mst14_wstrb
net:   tb.dut.mst14_wvalid [1] = 0     // mst14_wvalid
net:   tb.dut.mst15_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst15_araddr
net:   tb.dut.mst15_arburst [2] = xx     // mst15_arburst
net:   tb.dut.mst15_arextras [8] = xxxxxxxx     // mst15_arextras
net:   tb.dut.mst15_arid [4] = xxxx     // mst15_arid
net:   tb.dut.mst15_arlen [8] = xxxxxxxx     // mst15_arlen
net:   tb.dut.mst15_arvalid [1] = 0     // mst15_arvalid
net:   tb.dut.mst15_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst15_awaddr
net:   tb.dut.mst15_awburst [2] = xx     // mst15_awburst
net:   tb.dut.mst15_awextras [8] = xxxxxxxx     // mst15_awextras
net:   tb.dut.mst15_awid [4] = xxxx     // mst15_awid
net:   tb.dut.mst15_awlen [8] = xxxxxxxx     // mst15_awlen
net:   tb.dut.mst15_awvalid [1] = 0     // mst15_awvalid
net:   tb.dut.mst15_bready [1] = 0     // mst15_bready
net:   tb.dut.mst15_rready [1] = 0     // mst15_rready
net:   tb.dut.mst15_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst15_wdata
net:   tb.dut.mst15_wlast [1] = x     // mst15_wlast
net:   tb.dut.mst15_wready [1] = 1     // mst15_wready
net:   tb.dut.mst15_wstrb [8] = xxxxxxxx     // mst15_wstrb
net:   tb.dut.mst15_wvalid [1] = 0     // mst15_wvalid
net:   tb.dut.mst1_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_araddr
net:   tb.dut.mst1_arburst [2] = xx     // mst1_arburst
net:   tb.dut.mst1_arextras [8] = xxxxxxxx     // mst1_arextras
net:   tb.dut.mst1_arid [4] = xxxx     // mst1_arid
net:   tb.dut.mst1_arlen [8] = xxxxxxxx     // mst1_arlen
net:   tb.dut.mst1_arvalid [1] = 0     // mst1_arvalid
net:   tb.dut.mst1_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_awaddr
net:   tb.dut.mst1_awburst [2] = xx     // mst1_awburst
net:   tb.dut.mst1_awextras [8] = xxxxxxxx     // mst1_awextras
net:   tb.dut.mst1_awid [4] = xxxx     // mst1_awid
net:   tb.dut.mst1_awlen [8] = xxxxxxxx     // mst1_awlen
net:   tb.dut.mst1_awvalid [1] = 0     // mst1_awvalid
net:   tb.dut.mst1_bready [1] = 0     // mst1_bready
net:   tb.dut.mst1_rready [1] = 0     // mst1_rready
net:   tb.dut.mst1_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_wdata
net:   tb.dut.mst1_wlast [1] = x     // mst1_wlast
net:   tb.dut.mst1_wready [1] = 1     // mst1_wready
net:   tb.dut.mst1_wstrb [8] = xxxxxxxx     // mst1_wstrb
net:   tb.dut.mst1_wvalid [1] = 0     // mst1_wvalid
net:   tb.dut.mst2_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_araddr
net:   tb.dut.mst2_arburst [2] = xx     // mst2_arburst
net:   tb.dut.mst2_arextras [8] = xxxxxxxx     // mst2_arextras
net:   tb.dut.mst2_arid [4] = xxxx     // mst2_arid
net:   tb.dut.mst2_arlen [8] = xxxxxxxx     // mst2_arlen
net:   tb.dut.mst2_arvalid [1] = 0     // mst2_arvalid
net:   tb.dut.mst2_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_awaddr
net:   tb.dut.mst2_awburst [2] = xx     // mst2_awburst
net:   tb.dut.mst2_awextras [8] = xxxxxxxx     // mst2_awextras
net:   tb.dut.mst2_awid [4] = xxxx     // mst2_awid
net:   tb.dut.mst2_awlen [8] = xxxxxxxx     // mst2_awlen
net:   tb.dut.mst2_awvalid [1] = 0     // mst2_awvalid
net:   tb.dut.mst2_bready [1] = 0     // mst2_bready
net:   tb.dut.mst2_rready [1] = 0     // mst2_rready
net:   tb.dut.mst2_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_wdata
net:   tb.dut.mst2_wlast [1] = x     // mst2_wlast
net:   tb.dut.mst2_wready [1] = 1     // mst2_wready
net:   tb.dut.mst2_wstrb [8] = xxxxxxxx     // mst2_wstrb
net:   tb.dut.mst2_wvalid [1] = 0     // mst2_wvalid
net:   tb.dut.mst3_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_araddr
net:   tb.dut.mst3_arburst [2] = xx     // mst3_arburst
net:   tb.dut.mst3_arextras [8] = xxxxxxxx     // mst3_arextras
net:   tb.dut.mst3_arid [4] = xxxx     // mst3_arid
net:   tb.dut.mst3_arlen [8] = xxxxxxxx     // mst3_arlen
net:   tb.dut.mst3_arvalid [1] = 0     // mst3_arvalid
net:   tb.dut.mst3_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_awaddr
net:   tb.dut.mst3_awburst [2] = xx     // mst3_awburst
net:   tb.dut.mst3_awextras [8] = xxxxxxxx     // mst3_awextras
net:   tb.dut.mst3_awid [4] = xxxx     // mst3_awid
net:   tb.dut.mst3_awlen [8] = xxxxxxxx     // mst3_awlen
net:   tb.dut.mst3_awvalid [1] = 0     // mst3_awvalid
net:   tb.dut.mst3_bready [1] = 0     // mst3_bready
net:   tb.dut.mst3_rready [1] = 0     // mst3_rready
net:   tb.dut.mst3_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_wdata
net:   tb.dut.mst3_wlast [1] = x     // mst3_wlast
net:   tb.dut.mst3_wready [1] = 1     // mst3_wready
net:   tb.dut.mst3_wstrb [8] = xxxxxxxx     // mst3_wstrb
net:   tb.dut.mst3_wvalid [1] = 0     // mst3_wvalid
net:   tb.dut.mst4_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst4_araddr
net:   tb.dut.mst4_arburst [2] = xx     // mst4_arburst
net:   tb.dut.mst4_arextras [8] = xxxxxxxx     // mst4_arextras
net:   tb.dut.mst4_arid [4] = xxxx     // mst4_arid
net:   tb.dut.mst4_arlen [8] = xxxxxxxx     // mst4_arlen
net:   tb.dut.mst4_arvalid [1] = 0     // mst4_arvalid
net:   tb.dut.mst4_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst4_awaddr
net:   tb.dut.mst4_awburst [2] = xx     // mst4_awburst
net:   tb.dut.mst4_awextras [8] = xxxxxxxx     // mst4_awextras
net:   tb.dut.mst4_awid [4] = xxxx     // mst4_awid
net:   tb.dut.mst4_awlen [8] = xxxxxxxx     // mst4_awlen
net:   tb.dut.mst4_awvalid [1] = 0     // mst4_awvalid
net:   tb.dut.mst4_bready [1] = 0     // mst4_bready
net:   tb.dut.mst4_rready [1] = 0     // mst4_rready
net:   tb.dut.mst4_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst4_wdata
net:   tb.dut.mst4_wlast [1] = x     // mst4_wlast
net:   tb.dut.mst4_wready [1] = 1     // mst4_wready
net:   tb.dut.mst4_wstrb [8] = xxxxxxxx     // mst4_wstrb
net:   tb.dut.mst4_wvalid [1] = 0     // mst4_wvalid
net:   tb.dut.mst5_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst5_araddr
net:   tb.dut.mst5_arburst [2] = xx     // mst5_arburst
net:   tb.dut.mst5_arextras [8] = xxxxxxxx     // mst5_arextras
net:   tb.dut.mst5_arid [4] = xxxx     // mst5_arid
net:   tb.dut.mst5_arlen [8] = xxxxxxxx     // mst5_arlen
net:   tb.dut.mst5_arvalid [1] = 0     // mst5_arvalid
net:   tb.dut.mst5_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst5_awaddr
net:   tb.dut.mst5_awburst [2] = xx     // mst5_awburst
net:   tb.dut.mst5_awextras [8] = xxxxxxxx     // mst5_awextras
net:   tb.dut.mst5_awid [4] = xxxx     // mst5_awid
net:   tb.dut.mst5_awlen [8] = xxxxxxxx     // mst5_awlen
net:   tb.dut.mst5_awvalid [1] = 0     // mst5_awvalid
net:   tb.dut.mst5_bready [1] = 0     // mst5_bready
net:   tb.dut.mst5_rready [1] = 0     // mst5_rready
net:   tb.dut.mst5_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst5_wdata
net:   tb.dut.mst5_wlast [1] = x     // mst5_wlast
net:   tb.dut.mst5_wready [1] = 1     // mst5_wready
net:   tb.dut.mst5_wstrb [8] = xxxxxxxx     // mst5_wstrb
net:   tb.dut.mst5_wvalid [1] = 0     // mst5_wvalid
net:   tb.dut.mst6_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst6_araddr
net:   tb.dut.mst6_arburst [2] = xx     // mst6_arburst
net:   tb.dut.mst6_arextras [8] = xxxxxxxx     // mst6_arextras
net:   tb.dut.mst6_arid [4] = xxxx     // mst6_arid
net:   tb.dut.mst6_arlen [8] = xxxxxxxx     // mst6_arlen
net:   tb.dut.mst6_arvalid [1] = 0     // mst6_arvalid
net:   tb.dut.mst6_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst6_awaddr
net:   tb.dut.mst6_awburst [2] = xx     // mst6_awburst
net:   tb.dut.mst6_awextras [8] = xxxxxxxx     // mst6_awextras
net:   tb.dut.mst6_awid [4] = xxxx     // mst6_awid
net:   tb.dut.mst6_awlen [8] = xxxxxxxx     // mst6_awlen
net:   tb.dut.mst6_awvalid [1] = 0     // mst6_awvalid
net:   tb.dut.mst6_bready [1] = 0     // mst6_bready
net:   tb.dut.mst6_rready [1] = 0     // mst6_rready
net:   tb.dut.mst6_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst6_wdata
net:   tb.dut.mst6_wlast [1] = x     // mst6_wlast
net:   tb.dut.mst6_wready [1] = 1     // mst6_wready
net:   tb.dut.mst6_wstrb [8] = xxxxxxxx     // mst6_wstrb
net:   tb.dut.mst6_wvalid [1] = 0     // mst6_wvalid
net:   tb.dut.mst7_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst7_araddr
net:   tb.dut.mst7_arburst [2] = xx     // mst7_arburst
net:   tb.dut.mst7_arextras [8] = xxxxxxxx     // mst7_arextras
net:   tb.dut.mst7_arid [4] = xxxx     // mst7_arid
net:   tb.dut.mst7_arlen [8] = xxxxxxxx     // mst7_arlen
net:   tb.dut.mst7_arvalid [1] = 0     // mst7_arvalid
net:   tb.dut.mst7_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst7_awaddr
net:   tb.dut.mst7_awburst [2] = xx     // mst7_awburst
net:   tb.dut.mst7_awextras [8] = xxxxxxxx     // mst7_awextras
net:   tb.dut.mst7_awid [4] = xxxx     // mst7_awid
net:   tb.dut.mst7_awlen [8] = xxxxxxxx     // mst7_awlen
net:   tb.dut.mst7_awvalid [1] = 0     // mst7_awvalid
net:   tb.dut.mst7_bready [1] = 0     // mst7_bready
net:   tb.dut.mst7_rready [1] = 0     // mst7_rready
net:   tb.dut.mst7_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst7_wdata
net:   tb.dut.mst7_wlast [1] = x     // mst7_wlast
net:   tb.dut.mst7_wready [1] = 1     // mst7_wready
net:   tb.dut.mst7_wstrb [8] = xxxxxxxx     // mst7_wstrb
net:   tb.dut.mst7_wvalid [1] = 0     // mst7_wvalid
net:   tb.dut.mst8_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst8_araddr
net:   tb.dut.mst8_arburst [2] = xx     // mst8_arburst
net:   tb.dut.mst8_arextras [8] = xxxxxxxx     // mst8_arextras
net:   tb.dut.mst8_arid [4] = xxxx     // mst8_arid
net:   tb.dut.mst8_arlen [8] = xxxxxxxx     // mst8_arlen
net:   tb.dut.mst8_arvalid [1] = 0     // mst8_arvalid
net:   tb.dut.mst8_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst8_awaddr
net:   tb.dut.mst8_awburst [2] = xx     // mst8_awburst
net:   tb.dut.mst8_awextras [8] = xxxxxxxx     // mst8_awextras
net:   tb.dut.mst8_awid [4] = xxxx     // mst8_awid
net:   tb.dut.mst8_awlen [8] = xxxxxxxx     // mst8_awlen
net:   tb.dut.mst8_awvalid [1] = 0     // mst8_awvalid
net:   tb.dut.mst8_bready [1] = 0     // mst8_bready
net:   tb.dut.mst8_rready [1] = 0     // mst8_rready
net:   tb.dut.mst8_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst8_wdata
net:   tb.dut.mst8_wlast [1] = x     // mst8_wlast
net:   tb.dut.mst8_wready [1] = 1     // mst8_wready
net:   tb.dut.mst8_wstrb [8] = xxxxxxxx     // mst8_wstrb
net:   tb.dut.mst8_wvalid [1] = 0     // mst8_wvalid
net:   tb.dut.mst9_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst9_araddr
net:   tb.dut.mst9_arburst [2] = xx     // mst9_arburst
net:   tb.dut.mst9_arextras [8] = xxxxxxxx     // mst9_arextras
net:   tb.dut.mst9_arid [4] = xxxx     // mst9_arid
net:   tb.dut.mst9_arlen [8] = xxxxxxxx     // mst9_arlen
net:   tb.dut.mst9_arvalid [1] = 0     // mst9_arvalid
net:   tb.dut.mst9_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst9_awaddr
net:   tb.dut.mst9_awburst [2] = xx     // mst9_awburst
net:   tb.dut.mst9_awextras [8] = xxxxxxxx     // mst9_awextras
net:   tb.dut.mst9_awid [4] = xxxx     // mst9_awid
net:   tb.dut.mst9_awlen [8] = xxxxxxxx     // mst9_awlen
net:   tb.dut.mst9_awvalid [1] = 0     // mst9_awvalid
net:   tb.dut.mst9_bready [1] = 0     // mst9_bready
net:   tb.dut.mst9_rready [1] = 0     // mst9_rready
net:   tb.dut.mst9_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst9_wdata
net:   tb.dut.mst9_wlast [1] = x     // mst9_wlast
net:   tb.dut.mst9_wready [1] = 1     // mst9_wready
net:   tb.dut.mst9_wstrb [8] = xxxxxxxx     // mst9_wstrb
net:   tb.dut.mst9_wvalid [1] = 0     // mst9_wvalid
net:   tb.dut.rst_n [1] = 1     // rst_n
net:   tb.dut.slv0_arready [1] = 0     // slv0_arready
net:   tb.dut.slv0_awready [1] = 0     // slv0_awready
net:   tb.dut.slv0_bid [4] = xxxx     // slv0_bid
net:   tb.dut.slv0_bresp [2] = xx     // slv0_bresp
net:   tb.dut.slv0_bvalid [1] = 0     // slv0_bvalid
net:   tb.dut.slv0_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv0_rdata
net:   tb.dut.slv0_rid [4] = xxxx     // slv0_rid
net:   tb.dut.slv0_rlast [1] = x     // slv0_rlast
net:   tb.dut.slv0_rresp [2] = xx     // slv0_rresp
net:   tb.dut.slv0_rvalid [1] = 0     // slv0_rvalid
net:   tb.dut.slv0_wready [1] = x     // slv0_wready
net:   tb.dut.slv10_arready [1] = 0     // slv10_arready
net:   tb.dut.slv10_awready [1] = 0     // slv10_awready
net:   tb.dut.slv10_bid [4] = xxxx     // slv10_bid
net:   tb.dut.slv10_bresp [2] = xx     // slv10_bresp
net:   tb.dut.slv10_bvalid [1] = 0     // slv10_bvalid
net:   tb.dut.slv10_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv10_rdata
net:   tb.dut.slv10_rid [4] = xxxx     // slv10_rid
net:   tb.dut.slv10_rlast [1] = x     // slv10_rlast
net:   tb.dut.slv10_rresp [2] = xx     // slv10_rresp
net:   tb.dut.slv10_rvalid [1] = 0     // slv10_rvalid
net:   tb.dut.slv10_wready [1] = x     // slv10_wready
net:   tb.dut.slv11_arready [1] = 0     // slv11_arready
net:   tb.dut.slv11_awready [1] = 0     // slv11_awready
net:   tb.dut.slv11_bid [4] = xxxx     // slv11_bid
net:   tb.dut.slv11_bresp [2] = xx     // slv11_bresp
net:   tb.dut.slv11_bvalid [1] = 0     // slv11_bvalid
net:   tb.dut.slv11_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv11_rdata
net:   tb.dut.slv11_rid [4] = xxxx     // slv11_rid
net:   tb.dut.slv11_rlast [1] = x     // slv11_rlast
net:   tb.dut.slv11_rresp [2] = xx     // slv11_rresp
net:   tb.dut.slv11_rvalid [1] = 0     // slv11_rvalid
net:   tb.dut.slv11_wready [1] = x     // slv11_wready
net:   tb.dut.slv12_arready [1] = 0     // slv12_arready
net:   tb.dut.slv12_awready [1] = 0     // slv12_awready
net:   tb.dut.slv12_bid [4] = xxxx     // slv12_bid
net:   tb.dut.slv12_bresp [2] = xx     // slv12_bresp
net:   tb.dut.slv12_bvalid [1] = 0     // slv12_bvalid
net:   tb.dut.slv12_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv12_rdata
net:   tb.dut.slv12_rid [4] = xxxx     // slv12_rid
net:   tb.dut.slv12_rlast [1] = x     // slv12_rlast
net:   tb.dut.slv12_rresp [2] = xx     // slv12_rresp
net:   tb.dut.slv12_rvalid [1] = 0     // slv12_rvalid
net:   tb.dut.slv12_wready [1] = x     // slv12_wready
net:   tb.dut.slv13_arready [1] = 0     // slv13_arready
net:   tb.dut.slv13_awready [1] = 0     // slv13_awready
net:   tb.dut.slv13_bid [4] = xxxx     // slv13_bid
net:   tb.dut.slv13_bresp [2] = xx     // slv13_bresp
net:   tb.dut.slv13_bvalid [1] = 0     // slv13_bvalid
net:   tb.dut.slv13_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv13_rdata
net:   tb.dut.slv13_rid [4] = xxxx     // slv13_rid
net:   tb.dut.slv13_rlast [1] = x     // slv13_rlast
net:   tb.dut.slv13_rresp [2] = xx     // slv13_rresp
net:   tb.dut.slv13_rvalid [1] = 0     // slv13_rvalid
net:   tb.dut.slv13_wready [1] = x     // slv13_wready
net:   tb.dut.slv14_arready [1] = 0     // slv14_arready
net:   tb.dut.slv14_awready [1] = 0     // slv14_awready
net:   tb.dut.slv14_bid [4] = xxxx     // slv14_bid
net:   tb.dut.slv14_bresp [2] = xx     // slv14_bresp
net:   tb.dut.slv14_bvalid [1] = 0     // slv14_bvalid
net:   tb.dut.slv14_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv14_rdata
net:   tb.dut.slv14_rid [4] = xxxx     // slv14_rid
net:   tb.dut.slv14_rlast [1] = x     // slv14_rlast
net:   tb.dut.slv14_rresp [2] = xx     // slv14_rresp
net:   tb.dut.slv14_rvalid [1] = 0     // slv14_rvalid
net:   tb.dut.slv14_wready [1] = x     // slv14_wready
net:   tb.dut.slv15_arready [1] = 0     // slv15_arready
net:   tb.dut.slv15_awready [1] = 0     // slv15_awready
net:   tb.dut.slv15_bid [4] = xxxx     // slv15_bid
net:   tb.dut.slv15_bresp [2] = xx     // slv15_bresp
net:   tb.dut.slv15_bvalid [1] = 0     // slv15_bvalid
net:   tb.dut.slv15_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv15_rdata
net:   tb.dut.slv15_rid [4] = xxxx     // slv15_rid
net:   tb.dut.slv15_rlast [1] = x     // slv15_rlast
net:   tb.dut.slv15_rresp [2] = xx     // slv15_rresp
net:   tb.dut.slv15_rvalid [1] = 0     // slv15_rvalid
net:   tb.dut.slv15_wready [1] = x     // slv15_wready
net:   tb.dut.slv1_arready [1] = 0     // slv1_arready
net:   tb.dut.slv1_awready [1] = 0     // slv1_awready
net:   tb.dut.slv1_bid [4] = xxxx     // slv1_bid
net:   tb.dut.slv1_bresp [2] = xx     // slv1_bresp
net:   tb.dut.slv1_bvalid [1] = 0     // slv1_bvalid
net:   tb.dut.slv1_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv1_rdata
net:   tb.dut.slv1_rid [4] = xxxx     // slv1_rid
net:   tb.dut.slv1_rlast [1] = x     // slv1_rlast
net:   tb.dut.slv1_rresp [2] = xx     // slv1_rresp
net:   tb.dut.slv1_rvalid [1] = 0     // slv1_rvalid
net:   tb.dut.slv1_wready [1] = x     // slv1_wready
net:   tb.dut.slv2_arready [1] = 0     // slv2_arready
net:   tb.dut.slv2_awready [1] = 0     // slv2_awready
net:   tb.dut.slv2_bid [4] = xxxx     // slv2_bid
net:   tb.dut.slv2_bresp [2] = xx     // slv2_bresp
net:   tb.dut.slv2_bvalid [1] = 0     // slv2_bvalid
net:   tb.dut.slv2_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv2_rdata
net:   tb.dut.slv2_rid [4] = xxxx     // slv2_rid
net:   tb.dut.slv2_rlast [1] = x     // slv2_rlast
net:   tb.dut.slv2_rresp [2] = xx     // slv2_rresp
net:   tb.dut.slv2_rvalid [1] = 0     // slv2_rvalid
net:   tb.dut.slv2_wready [1] = x     // slv2_wready
net:   tb.dut.slv3_arready [1] = 0     // slv3_arready
net:   tb.dut.slv3_awready [1] = 0     // slv3_awready
net:   tb.dut.slv3_bid [4] = xxxx     // slv3_bid
net:   tb.dut.slv3_bresp [2] = xx     // slv3_bresp
net:   tb.dut.slv3_bvalid [1] = 0     // slv3_bvalid
net:   tb.dut.slv3_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv3_rdata
net:   tb.dut.slv3_rid [4] = xxxx     // slv3_rid
net:   tb.dut.slv3_rlast [1] = x     // slv3_rlast
net:   tb.dut.slv3_rresp [2] = xx     // slv3_rresp
net:   tb.dut.slv3_rvalid [1] = 0     // slv3_rvalid
net:   tb.dut.slv3_wready [1] = x     // slv3_wready
net:   tb.dut.slv4_arready [1] = 0     // slv4_arready
net:   tb.dut.slv4_awready [1] = 0     // slv4_awready
net:   tb.dut.slv4_bid [4] = xxxx     // slv4_bid
net:   tb.dut.slv4_bresp [2] = xx     // slv4_bresp
net:   tb.dut.slv4_bvalid [1] = 0     // slv4_bvalid
net:   tb.dut.slv4_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv4_rdata
net:   tb.dut.slv4_rid [4] = xxxx     // slv4_rid
net:   tb.dut.slv4_rlast [1] = x     // slv4_rlast
net:   tb.dut.slv4_rresp [2] = xx     // slv4_rresp
net:   tb.dut.slv4_rvalid [1] = 0     // slv4_rvalid
net:   tb.dut.slv4_wready [1] = x     // slv4_wready
net:   tb.dut.slv5_arready [1] = 0     // slv5_arready
net:   tb.dut.slv5_awready [1] = 0     // slv5_awready
net:   tb.dut.slv5_bid [4] = xxxx     // slv5_bid
net:   tb.dut.slv5_bresp [2] = xx     // slv5_bresp
net:   tb.dut.slv5_bvalid [1] = 0     // slv5_bvalid
net:   tb.dut.slv5_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv5_rdata
net:   tb.dut.slv5_rid [4] = xxxx     // slv5_rid
net:   tb.dut.slv5_rlast [1] = x     // slv5_rlast
net:   tb.dut.slv5_rresp [2] = xx     // slv5_rresp
net:   tb.dut.slv5_rvalid [1] = 0     // slv5_rvalid
net:   tb.dut.slv5_wready [1] = x     // slv5_wready
net:   tb.dut.slv6_arready [1] = 0     // slv6_arready
net:   tb.dut.slv6_awready [1] = 0     // slv6_awready
net:   tb.dut.slv6_bid [4] = xxxx     // slv6_bid
net:   tb.dut.slv6_bresp [2] = xx     // slv6_bresp
net:   tb.dut.slv6_bvalid [1] = 0     // slv6_bvalid
net:   tb.dut.slv6_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv6_rdata
net:   tb.dut.slv6_rid [4] = xxxx     // slv6_rid
net:   tb.dut.slv6_rlast [1] = x     // slv6_rlast
net:   tb.dut.slv6_rresp [2] = xx     // slv6_rresp
net:   tb.dut.slv6_rvalid [1] = 0     // slv6_rvalid
net:   tb.dut.slv6_wready [1] = x     // slv6_wready
net:   tb.dut.slv7_arready [1] = 0     // slv7_arready
net:   tb.dut.slv7_awready [1] = 0     // slv7_awready
net:   tb.dut.slv7_bid [4] = xxxx     // slv7_bid
net:   tb.dut.slv7_bresp [2] = xx     // slv7_bresp
net:   tb.dut.slv7_bvalid [1] = 0     // slv7_bvalid
net:   tb.dut.slv7_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv7_rdata
net:   tb.dut.slv7_rid [4] = xxxx     // slv7_rid
net:   tb.dut.slv7_rlast [1] = x     // slv7_rlast
net:   tb.dut.slv7_rresp [2] = xx     // slv7_rresp
net:   tb.dut.slv7_rvalid [1] = 0     // slv7_rvalid
net:   tb.dut.slv7_wready [1] = x     // slv7_wready
net:   tb.dut.slv8_arready [1] = 0     // slv8_arready
net:   tb.dut.slv8_awready [1] = 0     // slv8_awready
net:   tb.dut.slv8_bid [4] = xxxx     // slv8_bid
net:   tb.dut.slv8_bresp [2] = xx     // slv8_bresp
net:   tb.dut.slv8_bvalid [1] = 0     // slv8_bvalid
net:   tb.dut.slv8_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv8_rdata
net:   tb.dut.slv8_rid [4] = xxxx     // slv8_rid
net:   tb.dut.slv8_rlast [1] = x     // slv8_rlast
net:   tb.dut.slv8_rresp [2] = xx     // slv8_rresp
net:   tb.dut.slv8_rvalid [1] = 0     // slv8_rvalid
net:   tb.dut.slv8_wready [1] = x     // slv8_wready
net:   tb.dut.slv9_arready [1] = 0     // slv9_arready
net:   tb.dut.slv9_awready [1] = 0     // slv9_awready
net:   tb.dut.slv9_bid [4] = xxxx     // slv9_bid
net:   tb.dut.slv9_bresp [2] = xx     // slv9_bresp
net:   tb.dut.slv9_bvalid [1] = 0     // slv9_bvalid
net:   tb.dut.slv9_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv9_rdata
net:   tb.dut.slv9_rid [4] = xxxx     // slv9_rid
net:   tb.dut.slv9_rlast [1] = x     // slv9_rlast
net:   tb.dut.slv9_rresp [2] = xx     // slv9_rresp
net:   tb.dut.slv9_rvalid [1] = 0     // slv9_rvalid
net:   tb.dut.slv9_wready [1] = x     // slv9_wready
net:   tb.dut.split9_merge9_wvalid [1] = 0     // split9_merge9_wvalid
net:   tb.dut.split9_merge9_wstrb [8] = 00000000     // split9_merge9_wstrb
net:   tb.dut.split9_merge9_wready [1] = 1     // split9_merge9_wready
net:   tb.dut.split9_merge9_wlast [1] = 0     // split9_merge9_wlast
net:   tb.dut.split9_merge9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge9_wdata
net:   tb.dut.split9_merge9_rvalid [1] = 0     // split9_merge9_rvalid
net:   tb.dut.split9_merge9_rresp [2] = 00     // split9_merge9_rresp
net:   tb.dut.split9_merge9_rready [1] = 1     // split9_merge9_rready
net:   tb.dut.split9_merge9_rlast [1] = 0     // split9_merge9_rlast
net:   tb.dut.split9_merge9_rid [4] = 0000     // split9_merge9_rid
net:   tb.dut.split9_merge9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge9_rdata
net:   tb.dut.split9_merge9_bvalid [1] = 0     // split9_merge9_bvalid
net:   tb.dut.split9_merge9_bresp [2] = 00     // split9_merge9_bresp
net:   tb.dut.split9_merge9_bready [1] = 1     // split9_merge9_bready
net:   tb.dut.split9_merge9_bid [4] = 0000     // split9_merge9_bid
net:   tb.dut.split9_merge9_awvalid [1] = 0     // split9_merge9_awvalid
net:   tb.dut.split9_merge9_awready [1] = 1     // split9_merge9_awready
net:   tb.dut.split9_merge9_awlen [8] = 00000000     // split9_merge9_awlen
net:   tb.dut.split9_merge9_awid [4] = 0000     // split9_merge9_awid
net:   tb.dut.split9_merge9_awextras [8] = 00000000     // split9_merge9_awextras
net:   tb.dut.split9_merge9_awburst [2] = 00     // split9_merge9_awburst
net:   tb.dut.split9_merge9_awaddr [32] = 00000000000000000000000000000000     // split9_merge9_awaddr
net:   tb.dut.split9_merge9_arvalid [1] = 0     // split9_merge9_arvalid
net:   tb.dut.split9_merge9_arready [1] = 1     // split9_merge9_arready
net:   tb.dut.split9_merge9_arlen [8] = 00000000     // split9_merge9_arlen
net:   tb.dut.split9_merge9_arid [4] = 0000     // split9_merge9_arid
net:   tb.dut.split9_merge9_arextras [8] = 00000000     // split9_merge9_arextras
net:   tb.dut.split9_merge9_arburst [2] = 00     // split9_merge9_arburst
net:   tb.dut.split9_merge9_araddr [32] = 00000000000000000000000000000000     // split9_merge9_araddr
net:   tb.dut.split9_merge8_wvalid [1] = 0     // split9_merge8_wvalid
net:   tb.dut.split9_merge8_wstrb [8] = 00000000     // split9_merge8_wstrb
net:   tb.dut.split9_merge8_wready [1] = 1     // split9_merge8_wready
net:   tb.dut.split9_merge8_wlast [1] = 0     // split9_merge8_wlast
net:   tb.dut.split9_merge8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge8_wdata
net:   tb.dut.split9_merge8_rvalid [1] = 0     // split9_merge8_rvalid
net:   tb.dut.split9_merge8_rresp [2] = 00     // split9_merge8_rresp
net:   tb.dut.split9_merge8_rready [1] = 1     // split9_merge8_rready
net:   tb.dut.split9_merge8_rlast [1] = 0     // split9_merge8_rlast
net:   tb.dut.split9_merge8_rid [4] = 0000     // split9_merge8_rid
net:   tb.dut.split9_merge8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge8_rdata
net:   tb.dut.split9_merge8_bvalid [1] = 0     // split9_merge8_bvalid
net:   tb.dut.split9_merge8_bresp [2] = 00     // split9_merge8_bresp
net:   tb.dut.split9_merge8_bready [1] = 1     // split9_merge8_bready
net:   tb.dut.split9_merge8_bid [4] = 0000     // split9_merge8_bid
net:   tb.dut.split9_merge8_awvalid [1] = 0     // split9_merge8_awvalid
net:   tb.dut.split9_merge8_awready [1] = 1     // split9_merge8_awready
net:   tb.dut.split9_merge8_awlen [8] = 00000000     // split9_merge8_awlen
net:   tb.dut.split9_merge8_awid [4] = 0000     // split9_merge8_awid
net:   tb.dut.split9_merge8_awextras [8] = 00000000     // split9_merge8_awextras
net:   tb.dut.split9_merge8_awburst [2] = 00     // split9_merge8_awburst
net:   tb.dut.split9_merge8_awaddr [32] = 00000000000000000000000000000000     // split9_merge8_awaddr
net:   tb.dut.split9_merge8_arvalid [1] = 0     // split9_merge8_arvalid
net:   tb.dut.split9_merge8_arready [1] = 1     // split9_merge8_arready
net:   tb.dut.split9_merge8_arlen [8] = 00000000     // split9_merge8_arlen
net:   tb.dut.split9_merge8_arid [4] = 0000     // split9_merge8_arid
net:   tb.dut.split9_merge8_arextras [8] = 00000000     // split9_merge8_arextras
net:   tb.dut.split9_merge8_arburst [2] = 00     // split9_merge8_arburst
net:   tb.dut.split9_merge8_araddr [32] = 00000000000000000000000000000000     // split9_merge8_araddr
net:   tb.dut.split9_merge11_wvalid [1] = 0     // split9_merge11_wvalid
net:   tb.dut.split9_merge11_wstrb [8] = 00000000     // split9_merge11_wstrb
net:   tb.dut.split9_merge11_wready [1] = 1     // split9_merge11_wready
net:   tb.dut.split9_merge11_wlast [1] = 0     // split9_merge11_wlast
net:   tb.dut.split9_merge11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge11_wdata
net:   tb.dut.split9_merge11_rvalid [1] = 0     // split9_merge11_rvalid
net:   tb.dut.split9_merge11_rresp [2] = 00     // split9_merge11_rresp
net:   tb.dut.split9_merge11_rready [1] = 1     // split9_merge11_rready
net:   tb.dut.split9_merge11_rlast [1] = 0     // split9_merge11_rlast
net:   tb.dut.split9_merge11_rid [4] = 0000     // split9_merge11_rid
net:   tb.dut.split9_merge11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge11_rdata
net:   tb.dut.split9_merge11_bvalid [1] = 0     // split9_merge11_bvalid
net:   tb.dut.split9_merge11_bresp [2] = 00     // split9_merge11_bresp
net:   tb.dut.split9_merge11_bready [1] = 1     // split9_merge11_bready
net:   tb.dut.split9_merge11_bid [4] = 0000     // split9_merge11_bid
net:   tb.dut.split9_merge11_awvalid [1] = 0     // split9_merge11_awvalid
net:   tb.dut.split9_merge11_awready [1] = 1     // split9_merge11_awready
net:   tb.dut.split9_merge11_awlen [8] = 00000000     // split9_merge11_awlen
net:   tb.dut.split9_merge11_awid [4] = 0000     // split9_merge11_awid
net:   tb.dut.split9_merge11_awextras [8] = 00000000     // split9_merge11_awextras
net:   tb.dut.split9_merge11_awburst [2] = 00     // split9_merge11_awburst
net:   tb.dut.split9_merge11_awaddr [32] = 00000000000000000000000000000000     // split9_merge11_awaddr
net:   tb.dut.split9_merge11_arvalid [1] = 0     // split9_merge11_arvalid
net:   tb.dut.split9_merge11_arready [1] = 1     // split9_merge11_arready
net:   tb.dut.split9_merge11_arlen [8] = 00000000     // split9_merge11_arlen
net:   tb.dut.split9_merge11_arid [4] = 0000     // split9_merge11_arid
net:   tb.dut.split9_merge11_arextras [8] = 00000000     // split9_merge11_arextras
net:   tb.dut.split9_merge11_arburst [2] = 00     // split9_merge11_arburst
net:   tb.dut.split9_merge11_araddr [32] = 00000000000000000000000000000000     // split9_merge11_araddr
net:   tb.dut.split9_merge10_wvalid [1] = 0     // split9_merge10_wvalid
net:   tb.dut.split9_merge10_wstrb [8] = 00000000     // split9_merge10_wstrb
net:   tb.dut.split9_merge10_wready [1] = 1     // split9_merge10_wready
net:   tb.dut.split9_merge10_wlast [1] = 0     // split9_merge10_wlast
net:   tb.dut.split9_merge10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge10_wdata
net:   tb.dut.split9_merge10_rvalid [1] = 0     // split9_merge10_rvalid
net:   tb.dut.split9_merge10_rresp [2] = 00     // split9_merge10_rresp
net:   tb.dut.split9_merge10_rready [1] = 1     // split9_merge10_rready
net:   tb.dut.split9_merge10_rlast [1] = 0     // split9_merge10_rlast
net:   tb.dut.split9_merge10_rid [4] = 0000     // split9_merge10_rid
net:   tb.dut.split9_merge10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split9_merge10_rdata
net:   tb.dut.split9_merge10_bvalid [1] = 0     // split9_merge10_bvalid
net:   tb.dut.split9_merge10_bresp [2] = 00     // split9_merge10_bresp
net:   tb.dut.split9_merge10_bready [1] = 1     // split9_merge10_bready
net:   tb.dut.split9_merge10_bid [4] = 0000     // split9_merge10_bid
net:   tb.dut.split9_merge10_awvalid [1] = 0     // split9_merge10_awvalid
net:   tb.dut.split9_merge10_awready [1] = 1     // split9_merge10_awready
net:   tb.dut.split9_merge10_awlen [8] = 00000000     // split9_merge10_awlen
net:   tb.dut.split9_merge10_awid [4] = 0000     // split9_merge10_awid
net:   tb.dut.split9_merge10_awextras [8] = 00000000     // split9_merge10_awextras
net:   tb.dut.split9_merge10_awburst [2] = 00     // split9_merge10_awburst
net:   tb.dut.split9_merge10_awaddr [32] = 00000000000000000000000000000000     // split9_merge10_awaddr
net:   tb.dut.split9_merge10_arvalid [1] = 0     // split9_merge10_arvalid
net:   tb.dut.split9_merge10_arready [1] = 1     // split9_merge10_arready
net:   tb.dut.split9_merge10_arlen [8] = 00000000     // split9_merge10_arlen
net:   tb.dut.split9_merge10_arid [4] = 0000     // split9_merge10_arid
net:   tb.dut.split9_merge10_arextras [8] = 00000000     // split9_merge10_arextras
net:   tb.dut.split9_merge10_arburst [2] = 00     // split9_merge10_arburst
net:   tb.dut.split9_merge10_araddr [32] = 00000000000000000000000000000000     // split9_merge10_araddr
net:   tb.dut.split8_merge9_wvalid [1] = 0     // split8_merge9_wvalid
net:   tb.dut.split8_merge9_wstrb [8] = 00000000     // split8_merge9_wstrb
net:   tb.dut.split8_merge9_wready [1] = 1     // split8_merge9_wready
net:   tb.dut.split8_merge9_wlast [1] = 0     // split8_merge9_wlast
net:   tb.dut.split8_merge9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge9_wdata
net:   tb.dut.split8_merge9_rvalid [1] = 0     // split8_merge9_rvalid
net:   tb.dut.split8_merge9_rresp [2] = 00     // split8_merge9_rresp
net:   tb.dut.split8_merge9_rready [1] = 1     // split8_merge9_rready
net:   tb.dut.split8_merge9_rlast [1] = 0     // split8_merge9_rlast
net:   tb.dut.split8_merge9_rid [4] = 0000     // split8_merge9_rid
net:   tb.dut.split8_merge9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge9_rdata
net:   tb.dut.split8_merge9_bvalid [1] = 0     // split8_merge9_bvalid
net:   tb.dut.split8_merge9_bresp [2] = 00     // split8_merge9_bresp
net:   tb.dut.split8_merge9_bready [1] = 1     // split8_merge9_bready
net:   tb.dut.split8_merge9_bid [4] = 0000     // split8_merge9_bid
net:   tb.dut.split8_merge9_awvalid [1] = 0     // split8_merge9_awvalid
net:   tb.dut.split8_merge9_awready [1] = 1     // split8_merge9_awready
net:   tb.dut.split8_merge9_awlen [8] = 00000000     // split8_merge9_awlen
net:   tb.dut.split8_merge9_awid [4] = 0000     // split8_merge9_awid
net:   tb.dut.split8_merge9_awextras [8] = 00000000     // split8_merge9_awextras
net:   tb.dut.split8_merge9_awburst [2] = 00     // split8_merge9_awburst
net:   tb.dut.split8_merge9_awaddr [32] = 00000000000000000000000000000000     // split8_merge9_awaddr
net:   tb.dut.split8_merge9_arvalid [1] = 0     // split8_merge9_arvalid
net:   tb.dut.split8_merge9_arready [1] = 1     // split8_merge9_arready
net:   tb.dut.split8_merge9_arlen [8] = 00000000     // split8_merge9_arlen
net:   tb.dut.split8_merge9_arid [4] = 0000     // split8_merge9_arid
net:   tb.dut.split8_merge9_arextras [8] = 00000000     // split8_merge9_arextras
net:   tb.dut.split8_merge9_arburst [2] = 00     // split8_merge9_arburst
net:   tb.dut.split8_merge9_araddr [32] = 00000000000000000000000000000000     // split8_merge9_araddr
net:   tb.dut.split8_merge8_wvalid [1] = 0     // split8_merge8_wvalid
net:   tb.dut.split8_merge8_wstrb [8] = 00000000     // split8_merge8_wstrb
net:   tb.dut.split8_merge8_wready [1] = 1     // split8_merge8_wready
net:   tb.dut.split8_merge8_wlast [1] = 0     // split8_merge8_wlast
net:   tb.dut.split8_merge8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge8_wdata
net:   tb.dut.split8_merge8_rvalid [1] = 0     // split8_merge8_rvalid
net:   tb.dut.split8_merge8_rresp [2] = 00     // split8_merge8_rresp
net:   tb.dut.split8_merge8_rready [1] = 1     // split8_merge8_rready
net:   tb.dut.split8_merge8_rlast [1] = 0     // split8_merge8_rlast
net:   tb.dut.split8_merge8_rid [4] = 0000     // split8_merge8_rid
net:   tb.dut.split8_merge8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge8_rdata
net:   tb.dut.split8_merge8_bvalid [1] = 0     // split8_merge8_bvalid
net:   tb.dut.split8_merge8_bresp [2] = 00     // split8_merge8_bresp
net:   tb.dut.split8_merge8_bready [1] = 1     // split8_merge8_bready
net:   tb.dut.split8_merge8_bid [4] = 0000     // split8_merge8_bid
net:   tb.dut.split8_merge8_awvalid [1] = 0     // split8_merge8_awvalid
net:   tb.dut.split8_merge8_awready [1] = 1     // split8_merge8_awready
net:   tb.dut.split8_merge8_awlen [8] = 00000000     // split8_merge8_awlen
net:   tb.dut.split8_merge8_awid [4] = 0000     // split8_merge8_awid
net:   tb.dut.split8_merge8_awextras [8] = 00000000     // split8_merge8_awextras
net:   tb.dut.split8_merge8_awburst [2] = 00     // split8_merge8_awburst
net:   tb.dut.split8_merge8_awaddr [32] = 00000000000000000000000000000000     // split8_merge8_awaddr
net:   tb.dut.split8_merge8_arvalid [1] = 0     // split8_merge8_arvalid
net:   tb.dut.split8_merge8_arready [1] = 1     // split8_merge8_arready
net:   tb.dut.split8_merge8_arlen [8] = 00000000     // split8_merge8_arlen
net:   tb.dut.split8_merge8_arid [4] = 0000     // split8_merge8_arid
net:   tb.dut.split8_merge8_arextras [8] = 00000000     // split8_merge8_arextras
net:   tb.dut.split8_merge8_arburst [2] = 00     // split8_merge8_arburst
net:   tb.dut.split8_merge8_araddr [32] = 00000000000000000000000000000000     // split8_merge8_araddr
net:   tb.dut.split8_merge11_wvalid [1] = 0     // split8_merge11_wvalid
net:   tb.dut.split8_merge11_wstrb [8] = 00000000     // split8_merge11_wstrb
net:   tb.dut.split8_merge11_wready [1] = 1     // split8_merge11_wready
net:   tb.dut.split8_merge11_wlast [1] = 0     // split8_merge11_wlast
net:   tb.dut.split8_merge11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge11_wdata
net:   tb.dut.split8_merge11_rvalid [1] = 0     // split8_merge11_rvalid
net:   tb.dut.split8_merge11_rresp [2] = 00     // split8_merge11_rresp
net:   tb.dut.split8_merge11_rready [1] = 1     // split8_merge11_rready
net:   tb.dut.split8_merge11_rlast [1] = 0     // split8_merge11_rlast
net:   tb.dut.split8_merge11_rid [4] = 0000     // split8_merge11_rid
net:   tb.dut.split8_merge11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge11_rdata
net:   tb.dut.split8_merge11_bvalid [1] = 0     // split8_merge11_bvalid
net:   tb.dut.split8_merge11_bresp [2] = 00     // split8_merge11_bresp
net:   tb.dut.split8_merge11_bready [1] = 1     // split8_merge11_bready
net:   tb.dut.split8_merge11_bid [4] = 0000     // split8_merge11_bid
net:   tb.dut.split8_merge11_awvalid [1] = 0     // split8_merge11_awvalid
net:   tb.dut.split8_merge11_awready [1] = 1     // split8_merge11_awready
net:   tb.dut.split8_merge11_awlen [8] = 00000000     // split8_merge11_awlen
net:   tb.dut.split8_merge11_awid [4] = 0000     // split8_merge11_awid
net:   tb.dut.split8_merge11_awextras [8] = 00000000     // split8_merge11_awextras
net:   tb.dut.split8_merge11_awburst [2] = 00     // split8_merge11_awburst
net:   tb.dut.split8_merge11_awaddr [32] = 00000000000000000000000000000000     // split8_merge11_awaddr
net:   tb.dut.split8_merge11_arvalid [1] = 0     // split8_merge11_arvalid
net:   tb.dut.split8_merge11_arready [1] = 1     // split8_merge11_arready
net:   tb.dut.split8_merge11_arlen [8] = 00000000     // split8_merge11_arlen
net:   tb.dut.split8_merge11_arid [4] = 0000     // split8_merge11_arid
net:   tb.dut.split8_merge11_arextras [8] = 00000000     // split8_merge11_arextras
net:   tb.dut.split8_merge11_arburst [2] = 00     // split8_merge11_arburst
net:   tb.dut.split8_merge11_araddr [32] = 00000000000000000000000000000000     // split8_merge11_araddr
net:   tb.dut.split8_merge10_wvalid [1] = 0     // split8_merge10_wvalid
net:   tb.dut.split8_merge10_wstrb [8] = 00000000     // split8_merge10_wstrb
net:   tb.dut.split8_merge10_wready [1] = 1     // split8_merge10_wready
net:   tb.dut.split8_merge10_wlast [1] = 0     // split8_merge10_wlast
net:   tb.dut.split8_merge10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge10_wdata
net:   tb.dut.split8_merge10_rvalid [1] = 0     // split8_merge10_rvalid
net:   tb.dut.split8_merge10_rresp [2] = 00     // split8_merge10_rresp
net:   tb.dut.split8_merge10_rready [1] = 1     // split8_merge10_rready
net:   tb.dut.split8_merge10_rlast [1] = 0     // split8_merge10_rlast
net:   tb.dut.split8_merge10_rid [4] = 0000     // split8_merge10_rid
net:   tb.dut.split8_merge10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split8_merge10_rdata
net:   tb.dut.split8_merge10_bvalid [1] = 0     // split8_merge10_bvalid
net:   tb.dut.split8_merge10_bresp [2] = 00     // split8_merge10_bresp
net:   tb.dut.split8_merge10_bready [1] = 1     // split8_merge10_bready
net:   tb.dut.split8_merge10_bid [4] = 0000     // split8_merge10_bid
net:   tb.dut.split8_merge10_awvalid [1] = 0     // split8_merge10_awvalid
net:   tb.dut.split8_merge10_awready [1] = 1     // split8_merge10_awready
net:   tb.dut.split8_merge10_awlen [8] = 00000000     // split8_merge10_awlen
net:   tb.dut.split8_merge10_awid [4] = 0000     // split8_merge10_awid
net:   tb.dut.split8_merge10_awextras [8] = 00000000     // split8_merge10_awextras
net:   tb.dut.split8_merge10_awburst [2] = 00     // split8_merge10_awburst
net:   tb.dut.split8_merge10_awaddr [32] = 00000000000000000000000000000000     // split8_merge10_awaddr
net:   tb.dut.split8_merge10_arvalid [1] = 0     // split8_merge10_arvalid
net:   tb.dut.split8_merge10_arready [1] = 1     // split8_merge10_arready
net:   tb.dut.split8_merge10_arlen [8] = 00000000     // split8_merge10_arlen
net:   tb.dut.split8_merge10_arid [4] = 0000     // split8_merge10_arid
net:   tb.dut.split8_merge10_arextras [8] = 00000000     // split8_merge10_arextras
net:   tb.dut.split8_merge10_arburst [2] = 00     // split8_merge10_arburst
net:   tb.dut.split8_merge10_araddr [32] = 00000000000000000000000000000000     // split8_merge10_araddr
net:   tb.dut.split7_merge7_wvalid [1] = 0     // split7_merge7_wvalid
net:   tb.dut.split7_merge7_wstrb [8] = 00000000     // split7_merge7_wstrb
net:   tb.dut.split7_merge7_wready [1] = 1     // split7_merge7_wready
net:   tb.dut.split7_merge7_wlast [1] = 0     // split7_merge7_wlast
net:   tb.dut.split7_merge7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge7_wdata
net:   tb.dut.split7_merge7_rvalid [1] = 0     // split7_merge7_rvalid
net:   tb.dut.split7_merge7_rresp [2] = 00     // split7_merge7_rresp
net:   tb.dut.split7_merge7_rready [1] = 1     // split7_merge7_rready
net:   tb.dut.split7_merge7_rlast [1] = 0     // split7_merge7_rlast
net:   tb.dut.split7_merge7_rid [4] = 0000     // split7_merge7_rid
net:   tb.dut.split7_merge7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge7_rdata
net:   tb.dut.split7_merge7_bvalid [1] = 0     // split7_merge7_bvalid
net:   tb.dut.split7_merge7_bresp [2] = 00     // split7_merge7_bresp
net:   tb.dut.split7_merge7_bready [1] = 1     // split7_merge7_bready
net:   tb.dut.split7_merge7_bid [4] = 0000     // split7_merge7_bid
net:   tb.dut.split7_merge7_awvalid [1] = 0     // split7_merge7_awvalid
net:   tb.dut.split7_merge7_awready [1] = 1     // split7_merge7_awready
net:   tb.dut.split7_merge7_awlen [8] = 00000000     // split7_merge7_awlen
net:   tb.dut.split7_merge7_awid [4] = 0000     // split7_merge7_awid
net:   tb.dut.split7_merge7_awextras [8] = 00000000     // split7_merge7_awextras
net:   tb.dut.split7_merge7_awburst [2] = 00     // split7_merge7_awburst
net:   tb.dut.split7_merge7_awaddr [32] = 00000000000000000000000000000000     // split7_merge7_awaddr
net:   tb.dut.split7_merge7_arvalid [1] = 0     // split7_merge7_arvalid
net:   tb.dut.split7_merge7_arready [1] = 1     // split7_merge7_arready
net:   tb.dut.split7_merge7_arlen [8] = 00000000     // split7_merge7_arlen
net:   tb.dut.split7_merge7_arid [4] = 0000     // split7_merge7_arid
net:   tb.dut.split7_merge7_arextras [8] = 00000000     // split7_merge7_arextras
net:   tb.dut.split7_merge7_arburst [2] = 00     // split7_merge7_arburst
net:   tb.dut.split7_merge7_araddr [32] = 00000000000000000000000000000000     // split7_merge7_araddr
net:   tb.dut.split7_merge6_wvalid [1] = 0     // split7_merge6_wvalid
net:   tb.dut.split7_merge6_wstrb [8] = 00000000     // split7_merge6_wstrb
net:   tb.dut.split7_merge6_wready [1] = 1     // split7_merge6_wready
net:   tb.dut.split7_merge6_wlast [1] = 0     // split7_merge6_wlast
net:   tb.dut.split7_merge6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge6_wdata
net:   tb.dut.split7_merge6_rvalid [1] = 0     // split7_merge6_rvalid
net:   tb.dut.split7_merge6_rresp [2] = 00     // split7_merge6_rresp
net:   tb.dut.split7_merge6_rready [1] = 1     // split7_merge6_rready
net:   tb.dut.split7_merge6_rlast [1] = 0     // split7_merge6_rlast
net:   tb.dut.split7_merge6_rid [4] = 0000     // split7_merge6_rid
net:   tb.dut.split7_merge6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge6_rdata
net:   tb.dut.split7_merge6_bvalid [1] = 0     // split7_merge6_bvalid
net:   tb.dut.split7_merge6_bresp [2] = 00     // split7_merge6_bresp
net:   tb.dut.split7_merge6_bready [1] = 1     // split7_merge6_bready
net:   tb.dut.split7_merge6_bid [4] = 0000     // split7_merge6_bid
net:   tb.dut.split7_merge6_awvalid [1] = 0     // split7_merge6_awvalid
net:   tb.dut.split7_merge6_awready [1] = 1     // split7_merge6_awready
net:   tb.dut.split7_merge6_awlen [8] = 00000000     // split7_merge6_awlen
net:   tb.dut.split7_merge6_awid [4] = 0000     // split7_merge6_awid
net:   tb.dut.split7_merge6_awextras [8] = 00000000     // split7_merge6_awextras
net:   tb.dut.split7_merge6_awburst [2] = 00     // split7_merge6_awburst
net:   tb.dut.split7_merge6_awaddr [32] = 00000000000000000000000000000000     // split7_merge6_awaddr
net:   tb.dut.split7_merge6_arvalid [1] = 0     // split7_merge6_arvalid
net:   tb.dut.split7_merge6_arready [1] = 1     // split7_merge6_arready
net:   tb.dut.split7_merge6_arlen [8] = 00000000     // split7_merge6_arlen
net:   tb.dut.split7_merge6_arid [4] = 0000     // split7_merge6_arid
net:   tb.dut.split7_merge6_arextras [8] = 00000000     // split7_merge6_arextras
net:   tb.dut.split7_merge6_arburst [2] = 00     // split7_merge6_arburst
net:   tb.dut.split7_merge6_araddr [32] = 00000000000000000000000000000000     // split7_merge6_araddr
net:   tb.dut.split7_merge5_wvalid [1] = 0     // split7_merge5_wvalid
net:   tb.dut.split7_merge5_wstrb [8] = 00000000     // split7_merge5_wstrb
net:   tb.dut.split7_merge5_wready [1] = 1     // split7_merge5_wready
net:   tb.dut.split7_merge5_wlast [1] = 0     // split7_merge5_wlast
net:   tb.dut.split7_merge5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge5_wdata
net:   tb.dut.split7_merge5_rvalid [1] = 0     // split7_merge5_rvalid
net:   tb.dut.split7_merge5_rresp [2] = 00     // split7_merge5_rresp
net:   tb.dut.split7_merge5_rready [1] = 1     // split7_merge5_rready
net:   tb.dut.split7_merge5_rlast [1] = 0     // split7_merge5_rlast
net:   tb.dut.split7_merge5_rid [4] = 0000     // split7_merge5_rid
net:   tb.dut.split7_merge5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge5_rdata
net:   tb.dut.split7_merge5_bvalid [1] = 0     // split7_merge5_bvalid
net:   tb.dut.split7_merge5_bresp [2] = 00     // split7_merge5_bresp
net:   tb.dut.split7_merge5_bready [1] = 1     // split7_merge5_bready
net:   tb.dut.split7_merge5_bid [4] = 0000     // split7_merge5_bid
net:   tb.dut.split7_merge5_awvalid [1] = 0     // split7_merge5_awvalid
net:   tb.dut.split7_merge5_awready [1] = 1     // split7_merge5_awready
net:   tb.dut.split7_merge5_awlen [8] = 00000000     // split7_merge5_awlen
net:   tb.dut.split7_merge5_awid [4] = 0000     // split7_merge5_awid
net:   tb.dut.split7_merge5_awextras [8] = 00000000     // split7_merge5_awextras
net:   tb.dut.split7_merge5_awburst [2] = 00     // split7_merge5_awburst
net:   tb.dut.split7_merge5_awaddr [32] = 00000000000000000000000000000000     // split7_merge5_awaddr
net:   tb.dut.split7_merge5_arvalid [1] = 0     // split7_merge5_arvalid
net:   tb.dut.split7_merge5_arready [1] = 1     // split7_merge5_arready
net:   tb.dut.split7_merge5_arlen [8] = 00000000     // split7_merge5_arlen
net:   tb.dut.split7_merge5_arid [4] = 0000     // split7_merge5_arid
net:   tb.dut.split7_merge5_arextras [8] = 00000000     // split7_merge5_arextras
net:   tb.dut.split7_merge5_arburst [2] = 00     // split7_merge5_arburst
net:   tb.dut.split7_merge5_araddr [32] = 00000000000000000000000000000000     // split7_merge5_araddr
net:   tb.dut.split7_merge4_wvalid [1] = 0     // split7_merge4_wvalid
net:   tb.dut.split7_merge4_wstrb [8] = 00000000     // split7_merge4_wstrb
net:   tb.dut.split7_merge4_wready [1] = 1     // split7_merge4_wready
net:   tb.dut.split7_merge4_wlast [1] = 0     // split7_merge4_wlast
net:   tb.dut.split7_merge4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge4_wdata
net:   tb.dut.split7_merge4_rvalid [1] = 0     // split7_merge4_rvalid
net:   tb.dut.split7_merge4_rresp [2] = 00     // split7_merge4_rresp
net:   tb.dut.split7_merge4_rready [1] = 1     // split7_merge4_rready
net:   tb.dut.split7_merge4_rlast [1] = 0     // split7_merge4_rlast
net:   tb.dut.split7_merge4_rid [4] = 0000     // split7_merge4_rid
net:   tb.dut.split7_merge4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split7_merge4_rdata
net:   tb.dut.split7_merge4_bvalid [1] = 0     // split7_merge4_bvalid
net:   tb.dut.split7_merge4_bresp [2] = 00     // split7_merge4_bresp
net:   tb.dut.split7_merge4_bready [1] = 1     // split7_merge4_bready
net:   tb.dut.split7_merge4_bid [4] = 0000     // split7_merge4_bid
net:   tb.dut.split7_merge4_awvalid [1] = 0     // split7_merge4_awvalid
net:   tb.dut.split7_merge4_awready [1] = 1     // split7_merge4_awready
net:   tb.dut.split7_merge4_awlen [8] = 00000000     // split7_merge4_awlen
net:   tb.dut.split7_merge4_awid [4] = 0000     // split7_merge4_awid
net:   tb.dut.split7_merge4_awextras [8] = 00000000     // split7_merge4_awextras
net:   tb.dut.split7_merge4_awburst [2] = 00     // split7_merge4_awburst
net:   tb.dut.split7_merge4_awaddr [32] = 00000000000000000000000000000000     // split7_merge4_awaddr
net:   tb.dut.split7_merge4_arvalid [1] = 0     // split7_merge4_arvalid
net:   tb.dut.split7_merge4_arready [1] = 1     // split7_merge4_arready
net:   tb.dut.split7_merge4_arlen [8] = 00000000     // split7_merge4_arlen
net:   tb.dut.split7_merge4_arid [4] = 0000     // split7_merge4_arid
net:   tb.dut.split7_merge4_arextras [8] = 00000000     // split7_merge4_arextras
net:   tb.dut.split7_merge4_arburst [2] = 00     // split7_merge4_arburst
net:   tb.dut.split7_merge4_araddr [32] = 00000000000000000000000000000000     // split7_merge4_araddr
net:   tb.dut.split6_merge7_wvalid [1] = 0     // split6_merge7_wvalid
net:   tb.dut.split6_merge7_wstrb [8] = 00000000     // split6_merge7_wstrb
net:   tb.dut.split6_merge7_wready [1] = 1     // split6_merge7_wready
net:   tb.dut.split6_merge7_wlast [1] = 0     // split6_merge7_wlast
net:   tb.dut.split6_merge7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge7_wdata
net:   tb.dut.split6_merge7_rvalid [1] = 0     // split6_merge7_rvalid
net:   tb.dut.split6_merge7_rresp [2] = 00     // split6_merge7_rresp
net:   tb.dut.split6_merge7_rready [1] = 1     // split6_merge7_rready
net:   tb.dut.split6_merge7_rlast [1] = 0     // split6_merge7_rlast
net:   tb.dut.split6_merge7_rid [4] = 0000     // split6_merge7_rid
net:   tb.dut.split6_merge7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge7_rdata
net:   tb.dut.split6_merge7_bvalid [1] = 0     // split6_merge7_bvalid
net:   tb.dut.split6_merge7_bresp [2] = 00     // split6_merge7_bresp
net:   tb.dut.split6_merge7_bready [1] = 1     // split6_merge7_bready
net:   tb.dut.split6_merge7_bid [4] = 0000     // split6_merge7_bid
net:   tb.dut.split6_merge7_awvalid [1] = 0     // split6_merge7_awvalid
net:   tb.dut.split6_merge7_awready [1] = 1     // split6_merge7_awready
net:   tb.dut.split6_merge7_awlen [8] = 00000000     // split6_merge7_awlen
net:   tb.dut.split6_merge7_awid [4] = 0000     // split6_merge7_awid
net:   tb.dut.split6_merge7_awextras [8] = 00000000     // split6_merge7_awextras
net:   tb.dut.split6_merge7_awburst [2] = 00     // split6_merge7_awburst
net:   tb.dut.split6_merge7_awaddr [32] = 00000000000000000000000000000000     // split6_merge7_awaddr
net:   tb.dut.split6_merge7_arvalid [1] = 0     // split6_merge7_arvalid
net:   tb.dut.split6_merge7_arready [1] = 1     // split6_merge7_arready
net:   tb.dut.split6_merge7_arlen [8] = 00000000     // split6_merge7_arlen
net:   tb.dut.split6_merge7_arid [4] = 0000     // split6_merge7_arid
net:   tb.dut.split6_merge7_arextras [8] = 00000000     // split6_merge7_arextras
net:   tb.dut.split6_merge7_arburst [2] = 00     // split6_merge7_arburst
net:   tb.dut.split6_merge7_araddr [32] = 00000000000000000000000000000000     // split6_merge7_araddr
net:   tb.dut.split6_merge6_wvalid [1] = 0     // split6_merge6_wvalid
net:   tb.dut.split6_merge6_wstrb [8] = 00000000     // split6_merge6_wstrb
net:   tb.dut.split6_merge6_wready [1] = 1     // split6_merge6_wready
net:   tb.dut.split6_merge6_wlast [1] = 0     // split6_merge6_wlast
net:   tb.dut.split6_merge6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge6_wdata
net:   tb.dut.split6_merge6_rvalid [1] = 0     // split6_merge6_rvalid
net:   tb.dut.split6_merge6_rresp [2] = 00     // split6_merge6_rresp
net:   tb.dut.split6_merge6_rready [1] = 1     // split6_merge6_rready
net:   tb.dut.split6_merge6_rlast [1] = 0     // split6_merge6_rlast
net:   tb.dut.split6_merge6_rid [4] = 0000     // split6_merge6_rid
net:   tb.dut.split6_merge6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge6_rdata
net:   tb.dut.split6_merge6_bvalid [1] = 0     // split6_merge6_bvalid
net:   tb.dut.split6_merge6_bresp [2] = 00     // split6_merge6_bresp
net:   tb.dut.split6_merge6_bready [1] = 1     // split6_merge6_bready
net:   tb.dut.split6_merge6_bid [4] = 0000     // split6_merge6_bid
net:   tb.dut.split6_merge6_awvalid [1] = 0     // split6_merge6_awvalid
net:   tb.dut.split6_merge6_awready [1] = 1     // split6_merge6_awready
net:   tb.dut.split6_merge6_awlen [8] = 00000000     // split6_merge6_awlen
net:   tb.dut.split6_merge6_awid [4] = 0000     // split6_merge6_awid
net:   tb.dut.split6_merge6_awextras [8] = 00000000     // split6_merge6_awextras
net:   tb.dut.split6_merge6_awburst [2] = 00     // split6_merge6_awburst
net:   tb.dut.split6_merge6_awaddr [32] = 00000000000000000000000000000000     // split6_merge6_awaddr
net:   tb.dut.split6_merge6_arvalid [1] = 0     // split6_merge6_arvalid
net:   tb.dut.split6_merge6_arready [1] = 1     // split6_merge6_arready
net:   tb.dut.split6_merge6_arlen [8] = 00000000     // split6_merge6_arlen
net:   tb.dut.split6_merge6_arid [4] = 0000     // split6_merge6_arid
net:   tb.dut.split6_merge6_arextras [8] = 00000000     // split6_merge6_arextras
net:   tb.dut.split6_merge6_arburst [2] = 00     // split6_merge6_arburst
net:   tb.dut.split6_merge6_araddr [32] = 00000000000000000000000000000000     // split6_merge6_araddr
net:   tb.dut.split6_merge5_wvalid [1] = 0     // split6_merge5_wvalid
net:   tb.dut.split6_merge5_wstrb [8] = 00000000     // split6_merge5_wstrb
net:   tb.dut.split6_merge5_wready [1] = 1     // split6_merge5_wready
net:   tb.dut.split6_merge5_wlast [1] = 0     // split6_merge5_wlast
net:   tb.dut.split6_merge5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge5_wdata
net:   tb.dut.split6_merge5_rvalid [1] = 0     // split6_merge5_rvalid
net:   tb.dut.split6_merge5_rresp [2] = 00     // split6_merge5_rresp
net:   tb.dut.split6_merge5_rready [1] = 1     // split6_merge5_rready
net:   tb.dut.split6_merge5_rlast [1] = 0     // split6_merge5_rlast
net:   tb.dut.split6_merge5_rid [4] = 0000     // split6_merge5_rid
net:   tb.dut.split6_merge5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge5_rdata
net:   tb.dut.split6_merge5_bvalid [1] = 0     // split6_merge5_bvalid
net:   tb.dut.split6_merge5_bresp [2] = 00     // split6_merge5_bresp
net:   tb.dut.split6_merge5_bready [1] = 1     // split6_merge5_bready
net:   tb.dut.split6_merge5_bid [4] = 0000     // split6_merge5_bid
net:   tb.dut.split6_merge5_awvalid [1] = 0     // split6_merge5_awvalid
net:   tb.dut.split6_merge5_awready [1] = 1     // split6_merge5_awready
net:   tb.dut.split6_merge5_awlen [8] = 00000000     // split6_merge5_awlen
net:   tb.dut.split6_merge5_awid [4] = 0000     // split6_merge5_awid
net:   tb.dut.split6_merge5_awextras [8] = 00000000     // split6_merge5_awextras
net:   tb.dut.split6_merge5_awburst [2] = 00     // split6_merge5_awburst
net:   tb.dut.split6_merge5_awaddr [32] = 00000000000000000000000000000000     // split6_merge5_awaddr
net:   tb.dut.split6_merge5_arvalid [1] = 0     // split6_merge5_arvalid
net:   tb.dut.split6_merge5_arready [1] = 1     // split6_merge5_arready
net:   tb.dut.split6_merge5_arlen [8] = 00000000     // split6_merge5_arlen
net:   tb.dut.split6_merge5_arid [4] = 0000     // split6_merge5_arid
net:   tb.dut.split6_merge5_arextras [8] = 00000000     // split6_merge5_arextras
net:   tb.dut.split6_merge5_arburst [2] = 00     // split6_merge5_arburst
net:   tb.dut.split6_merge5_araddr [32] = 00000000000000000000000000000000     // split6_merge5_araddr
net:   tb.dut.split6_merge4_wvalid [1] = 0     // split6_merge4_wvalid
net:   tb.dut.split6_merge4_wstrb [8] = 00000000     // split6_merge4_wstrb
net:   tb.dut.split6_merge4_wready [1] = 1     // split6_merge4_wready
net:   tb.dut.split6_merge4_wlast [1] = 0     // split6_merge4_wlast
net:   tb.dut.split6_merge4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge4_wdata
net:   tb.dut.split6_merge4_rvalid [1] = 0     // split6_merge4_rvalid
net:   tb.dut.split6_merge4_rresp [2] = 00     // split6_merge4_rresp
net:   tb.dut.split6_merge4_rready [1] = 1     // split6_merge4_rready
net:   tb.dut.split6_merge4_rlast [1] = 0     // split6_merge4_rlast
net:   tb.dut.split6_merge4_rid [4] = 0000     // split6_merge4_rid
net:   tb.dut.split6_merge4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split6_merge4_rdata
net:   tb.dut.split6_merge4_bvalid [1] = 0     // split6_merge4_bvalid
net:   tb.dut.split6_merge4_bresp [2] = 00     // split6_merge4_bresp
net:   tb.dut.split6_merge4_bready [1] = 1     // split6_merge4_bready
net:   tb.dut.split6_merge4_bid [4] = 0000     // split6_merge4_bid
net:   tb.dut.split6_merge4_awvalid [1] = 0     // split6_merge4_awvalid
net:   tb.dut.split6_merge4_awready [1] = 1     // split6_merge4_awready
net:   tb.dut.split6_merge4_awlen [8] = 00000000     // split6_merge4_awlen
net:   tb.dut.split6_merge4_awid [4] = 0000     // split6_merge4_awid
net:   tb.dut.split6_merge4_awextras [8] = 00000000     // split6_merge4_awextras
net:   tb.dut.split6_merge4_awburst [2] = 00     // split6_merge4_awburst
net:   tb.dut.split6_merge4_awaddr [32] = 00000000000000000000000000000000     // split6_merge4_awaddr
net:   tb.dut.split6_merge4_arvalid [1] = 0     // split6_merge4_arvalid
net:   tb.dut.split6_merge4_arready [1] = 1     // split6_merge4_arready
net:   tb.dut.split6_merge4_arlen [8] = 00000000     // split6_merge4_arlen
net:   tb.dut.split6_merge4_arid [4] = 0000     // split6_merge4_arid
net:   tb.dut.split6_merge4_arextras [8] = 00000000     // split6_merge4_arextras
net:   tb.dut.split6_merge4_arburst [2] = 00     // split6_merge4_arburst
net:   tb.dut.split6_merge4_araddr [32] = 00000000000000000000000000000000     // split6_merge4_araddr
net:   tb.dut.split5_merge7_wvalid [1] = 0     // split5_merge7_wvalid
net:   tb.dut.split5_merge7_wstrb [8] = 00000000     // split5_merge7_wstrb
net:   tb.dut.split5_merge7_wready [1] = 1     // split5_merge7_wready
net:   tb.dut.split5_merge7_wlast [1] = 0     // split5_merge7_wlast
net:   tb.dut.split5_merge7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge7_wdata
net:   tb.dut.split5_merge7_rvalid [1] = 0     // split5_merge7_rvalid
net:   tb.dut.split5_merge7_rresp [2] = 00     // split5_merge7_rresp
net:   tb.dut.split5_merge7_rready [1] = 1     // split5_merge7_rready
net:   tb.dut.split5_merge7_rlast [1] = 0     // split5_merge7_rlast
net:   tb.dut.split5_merge7_rid [4] = 0000     // split5_merge7_rid
net:   tb.dut.split5_merge7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge7_rdata
net:   tb.dut.split5_merge7_bvalid [1] = 0     // split5_merge7_bvalid
net:   tb.dut.split5_merge7_bresp [2] = 00     // split5_merge7_bresp
net:   tb.dut.split5_merge7_bready [1] = 1     // split5_merge7_bready
net:   tb.dut.split5_merge7_bid [4] = 0000     // split5_merge7_bid
net:   tb.dut.split5_merge7_awvalid [1] = 0     // split5_merge7_awvalid
net:   tb.dut.split5_merge7_awready [1] = 1     // split5_merge7_awready
net:   tb.dut.split5_merge7_awlen [8] = 00000000     // split5_merge7_awlen
net:   tb.dut.split5_merge7_awid [4] = 0000     // split5_merge7_awid
net:   tb.dut.split5_merge7_awextras [8] = 00000000     // split5_merge7_awextras
net:   tb.dut.split5_merge7_awburst [2] = 00     // split5_merge7_awburst
net:   tb.dut.split5_merge7_awaddr [32] = 00000000000000000000000000000000     // split5_merge7_awaddr
net:   tb.dut.split5_merge7_arvalid [1] = 0     // split5_merge7_arvalid
net:   tb.dut.split5_merge7_arready [1] = 1     // split5_merge7_arready
net:   tb.dut.split5_merge7_arlen [8] = 00000000     // split5_merge7_arlen
net:   tb.dut.split5_merge7_arid [4] = 0000     // split5_merge7_arid
net:   tb.dut.split5_merge7_arextras [8] = 00000000     // split5_merge7_arextras
net:   tb.dut.split5_merge7_arburst [2] = 00     // split5_merge7_arburst
net:   tb.dut.split5_merge7_araddr [32] = 00000000000000000000000000000000     // split5_merge7_araddr
net:   tb.dut.split5_merge6_wvalid [1] = 0     // split5_merge6_wvalid
net:   tb.dut.split5_merge6_wstrb [8] = 00000000     // split5_merge6_wstrb
net:   tb.dut.split5_merge6_wready [1] = 1     // split5_merge6_wready
net:   tb.dut.split5_merge6_wlast [1] = 0     // split5_merge6_wlast
net:   tb.dut.split5_merge6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge6_wdata
net:   tb.dut.split5_merge6_rvalid [1] = 0     // split5_merge6_rvalid
net:   tb.dut.split5_merge6_rresp [2] = 00     // split5_merge6_rresp
net:   tb.dut.split5_merge6_rready [1] = 1     // split5_merge6_rready
net:   tb.dut.split5_merge6_rlast [1] = 0     // split5_merge6_rlast
net:   tb.dut.split5_merge6_rid [4] = 0000     // split5_merge6_rid
net:   tb.dut.split5_merge6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge6_rdata
net:   tb.dut.split5_merge6_bvalid [1] = 0     // split5_merge6_bvalid
net:   tb.dut.split5_merge6_bresp [2] = 00     // split5_merge6_bresp
net:   tb.dut.split5_merge6_bready [1] = 1     // split5_merge6_bready
net:   tb.dut.split5_merge6_bid [4] = 0000     // split5_merge6_bid
net:   tb.dut.split5_merge6_awvalid [1] = 0     // split5_merge6_awvalid
net:   tb.dut.split5_merge6_awready [1] = 1     // split5_merge6_awready
net:   tb.dut.split5_merge6_awlen [8] = 00000000     // split5_merge6_awlen
net:   tb.dut.split5_merge6_awid [4] = 0000     // split5_merge6_awid
net:   tb.dut.split5_merge6_awextras [8] = 00000000     // split5_merge6_awextras
net:   tb.dut.split5_merge6_awburst [2] = 00     // split5_merge6_awburst
net:   tb.dut.split5_merge6_awaddr [32] = 00000000000000000000000000000000     // split5_merge6_awaddr
net:   tb.dut.split5_merge6_arvalid [1] = 0     // split5_merge6_arvalid
net:   tb.dut.split5_merge6_arready [1] = 1     // split5_merge6_arready
net:   tb.dut.split5_merge6_arlen [8] = 00000000     // split5_merge6_arlen
net:   tb.dut.split5_merge6_arid [4] = 0000     // split5_merge6_arid
net:   tb.dut.split5_merge6_arextras [8] = 00000000     // split5_merge6_arextras
net:   tb.dut.split5_merge6_arburst [2] = 00     // split5_merge6_arburst
net:   tb.dut.split5_merge6_araddr [32] = 00000000000000000000000000000000     // split5_merge6_araddr
net:   tb.dut.split5_merge5_wvalid [1] = 0     // split5_merge5_wvalid
net:   tb.dut.split5_merge5_wstrb [8] = 00000000     // split5_merge5_wstrb
net:   tb.dut.split5_merge5_wready [1] = 1     // split5_merge5_wready
net:   tb.dut.split5_merge5_wlast [1] = 0     // split5_merge5_wlast
net:   tb.dut.split5_merge5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge5_wdata
net:   tb.dut.split5_merge5_rvalid [1] = 0     // split5_merge5_rvalid
net:   tb.dut.split5_merge5_rresp [2] = 00     // split5_merge5_rresp
net:   tb.dut.split5_merge5_rready [1] = 1     // split5_merge5_rready
net:   tb.dut.split5_merge5_rlast [1] = 0     // split5_merge5_rlast
net:   tb.dut.split5_merge5_rid [4] = 0000     // split5_merge5_rid
net:   tb.dut.split5_merge5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge5_rdata
net:   tb.dut.split5_merge5_bvalid [1] = 0     // split5_merge5_bvalid
net:   tb.dut.split5_merge5_bresp [2] = 00     // split5_merge5_bresp
net:   tb.dut.split5_merge5_bready [1] = 1     // split5_merge5_bready
net:   tb.dut.split5_merge5_bid [4] = 0000     // split5_merge5_bid
net:   tb.dut.split5_merge5_awvalid [1] = 0     // split5_merge5_awvalid
net:   tb.dut.split5_merge5_awready [1] = 1     // split5_merge5_awready
net:   tb.dut.split5_merge5_awlen [8] = 00000000     // split5_merge5_awlen
net:   tb.dut.split5_merge5_awid [4] = 0000     // split5_merge5_awid
net:   tb.dut.split5_merge5_awextras [8] = 00000000     // split5_merge5_awextras
net:   tb.dut.split5_merge5_awburst [2] = 00     // split5_merge5_awburst
net:   tb.dut.split5_merge5_awaddr [32] = 00000000000000000000000000000000     // split5_merge5_awaddr
net:   tb.dut.split5_merge5_arvalid [1] = 0     // split5_merge5_arvalid
net:   tb.dut.split5_merge5_arready [1] = 1     // split5_merge5_arready
net:   tb.dut.split5_merge5_arlen [8] = 00000000     // split5_merge5_arlen
net:   tb.dut.split5_merge5_arid [4] = 0000     // split5_merge5_arid
net:   tb.dut.split5_merge5_arextras [8] = 00000000     // split5_merge5_arextras
net:   tb.dut.split5_merge5_arburst [2] = 00     // split5_merge5_arburst
net:   tb.dut.split5_merge5_araddr [32] = 00000000000000000000000000000000     // split5_merge5_araddr
net:   tb.dut.split5_merge4_wvalid [1] = 0     // split5_merge4_wvalid
net:   tb.dut.split5_merge4_wstrb [8] = 00000000     // split5_merge4_wstrb
net:   tb.dut.split5_merge4_wready [1] = 1     // split5_merge4_wready
net:   tb.dut.split5_merge4_wlast [1] = 0     // split5_merge4_wlast
net:   tb.dut.split5_merge4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge4_wdata
net:   tb.dut.split5_merge4_rvalid [1] = 0     // split5_merge4_rvalid
net:   tb.dut.split5_merge4_rresp [2] = 00     // split5_merge4_rresp
net:   tb.dut.split5_merge4_rready [1] = 1     // split5_merge4_rready
net:   tb.dut.split5_merge4_rlast [1] = 0     // split5_merge4_rlast
net:   tb.dut.split5_merge4_rid [4] = 0000     // split5_merge4_rid
net:   tb.dut.split5_merge4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split5_merge4_rdata
net:   tb.dut.split5_merge4_bvalid [1] = 0     // split5_merge4_bvalid
net:   tb.dut.split5_merge4_bresp [2] = 00     // split5_merge4_bresp
net:   tb.dut.split5_merge4_bready [1] = 1     // split5_merge4_bready
net:   tb.dut.split5_merge4_bid [4] = 0000     // split5_merge4_bid
net:   tb.dut.split5_merge4_awvalid [1] = 0     // split5_merge4_awvalid
net:   tb.dut.split5_merge4_awready [1] = 1     // split5_merge4_awready
net:   tb.dut.split5_merge4_awlen [8] = 00000000     // split5_merge4_awlen
net:   tb.dut.split5_merge4_awid [4] = 0000     // split5_merge4_awid
net:   tb.dut.split5_merge4_awextras [8] = 00000000     // split5_merge4_awextras
net:   tb.dut.split5_merge4_awburst [2] = 00     // split5_merge4_awburst
net:   tb.dut.split5_merge4_awaddr [32] = 00000000000000000000000000000000     // split5_merge4_awaddr
net:   tb.dut.split5_merge4_arvalid [1] = 0     // split5_merge4_arvalid
net:   tb.dut.split5_merge4_arready [1] = 1     // split5_merge4_arready
net:   tb.dut.split5_merge4_arlen [8] = 00000000     // split5_merge4_arlen
net:   tb.dut.split5_merge4_arid [4] = 0000     // split5_merge4_arid
net:   tb.dut.split5_merge4_arextras [8] = 00000000     // split5_merge4_arextras
net:   tb.dut.split5_merge4_arburst [2] = 00     // split5_merge4_arburst
net:   tb.dut.split5_merge4_araddr [32] = 00000000000000000000000000000000     // split5_merge4_araddr
net:   tb.dut.split4_merge7_wvalid [1] = 0     // split4_merge7_wvalid
net:   tb.dut.split4_merge7_wstrb [8] = 00000000     // split4_merge7_wstrb
net:   tb.dut.split4_merge7_wready [1] = 1     // split4_merge7_wready
net:   tb.dut.split4_merge7_wlast [1] = 0     // split4_merge7_wlast
net:   tb.dut.split4_merge7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge7_wdata
net:   tb.dut.split4_merge7_rvalid [1] = 0     // split4_merge7_rvalid
net:   tb.dut.split4_merge7_rresp [2] = 00     // split4_merge7_rresp
net:   tb.dut.split4_merge7_rready [1] = 1     // split4_merge7_rready
net:   tb.dut.split4_merge7_rlast [1] = 0     // split4_merge7_rlast
net:   tb.dut.split4_merge7_rid [4] = 0000     // split4_merge7_rid
net:   tb.dut.split4_merge7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge7_rdata
net:   tb.dut.split4_merge7_bvalid [1] = 0     // split4_merge7_bvalid
net:   tb.dut.split4_merge7_bresp [2] = 00     // split4_merge7_bresp
net:   tb.dut.split4_merge7_bready [1] = 1     // split4_merge7_bready
net:   tb.dut.split4_merge7_bid [4] = 0000     // split4_merge7_bid
net:   tb.dut.split4_merge7_awvalid [1] = 0     // split4_merge7_awvalid
net:   tb.dut.split4_merge7_awready [1] = 1     // split4_merge7_awready
net:   tb.dut.split4_merge7_awlen [8] = 00000000     // split4_merge7_awlen
net:   tb.dut.split4_merge7_awid [4] = 0000     // split4_merge7_awid
net:   tb.dut.split4_merge7_awextras [8] = 00000000     // split4_merge7_awextras
net:   tb.dut.split4_merge7_awburst [2] = 00     // split4_merge7_awburst
net:   tb.dut.split4_merge7_awaddr [32] = 00000000000000000000000000000000     // split4_merge7_awaddr
net:   tb.dut.split4_merge7_arvalid [1] = 0     // split4_merge7_arvalid
net:   tb.dut.split4_merge7_arready [1] = 1     // split4_merge7_arready
net:   tb.dut.split4_merge7_arlen [8] = 00000000     // split4_merge7_arlen
net:   tb.dut.split4_merge7_arid [4] = 0000     // split4_merge7_arid
net:   tb.dut.split4_merge7_arextras [8] = 00000000     // split4_merge7_arextras
net:   tb.dut.split4_merge7_arburst [2] = 00     // split4_merge7_arburst
net:   tb.dut.split4_merge7_araddr [32] = 00000000000000000000000000000000     // split4_merge7_araddr
net:   tb.dut.split4_merge6_wvalid [1] = 0     // split4_merge6_wvalid
net:   tb.dut.split4_merge6_wstrb [8] = 00000000     // split4_merge6_wstrb
net:   tb.dut.split4_merge6_wready [1] = 1     // split4_merge6_wready
net:   tb.dut.split4_merge6_wlast [1] = 0     // split4_merge6_wlast
net:   tb.dut.split4_merge6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge6_wdata
net:   tb.dut.split4_merge6_rvalid [1] = 0     // split4_merge6_rvalid
net:   tb.dut.split4_merge6_rresp [2] = 00     // split4_merge6_rresp
net:   tb.dut.split4_merge6_rready [1] = 1     // split4_merge6_rready
net:   tb.dut.split4_merge6_rlast [1] = 0     // split4_merge6_rlast
net:   tb.dut.split4_merge6_rid [4] = 0000     // split4_merge6_rid
net:   tb.dut.split4_merge6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge6_rdata
net:   tb.dut.split4_merge6_bvalid [1] = 0     // split4_merge6_bvalid
net:   tb.dut.split4_merge6_bresp [2] = 00     // split4_merge6_bresp
net:   tb.dut.split4_merge6_bready [1] = 1     // split4_merge6_bready
net:   tb.dut.split4_merge6_bid [4] = 0000     // split4_merge6_bid
net:   tb.dut.split4_merge6_awvalid [1] = 0     // split4_merge6_awvalid
net:   tb.dut.split4_merge6_awready [1] = 1     // split4_merge6_awready
net:   tb.dut.split4_merge6_awlen [8] = 00000000     // split4_merge6_awlen
net:   tb.dut.split4_merge6_awid [4] = 0000     // split4_merge6_awid
net:   tb.dut.split4_merge6_awextras [8] = 00000000     // split4_merge6_awextras
net:   tb.dut.split4_merge6_awburst [2] = 00     // split4_merge6_awburst
net:   tb.dut.split4_merge6_awaddr [32] = 00000000000000000000000000000000     // split4_merge6_awaddr
net:   tb.dut.split4_merge6_arvalid [1] = 0     // split4_merge6_arvalid
net:   tb.dut.split4_merge6_arready [1] = 1     // split4_merge6_arready
net:   tb.dut.split4_merge6_arlen [8] = 00000000     // split4_merge6_arlen
net:   tb.dut.split4_merge6_arid [4] = 0000     // split4_merge6_arid
net:   tb.dut.split4_merge6_arextras [8] = 00000000     // split4_merge6_arextras
net:   tb.dut.split4_merge6_arburst [2] = 00     // split4_merge6_arburst
net:   tb.dut.split4_merge6_araddr [32] = 00000000000000000000000000000000     // split4_merge6_araddr
net:   tb.dut.split4_merge5_wvalid [1] = 0     // split4_merge5_wvalid
net:   tb.dut.split4_merge5_wstrb [8] = 00000000     // split4_merge5_wstrb
net:   tb.dut.split4_merge5_wready [1] = 1     // split4_merge5_wready
net:   tb.dut.split4_merge5_wlast [1] = 0     // split4_merge5_wlast
net:   tb.dut.split4_merge5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge5_wdata
net:   tb.dut.split4_merge5_rvalid [1] = 0     // split4_merge5_rvalid
net:   tb.dut.split4_merge5_rresp [2] = 00     // split4_merge5_rresp
net:   tb.dut.split4_merge5_rready [1] = 1     // split4_merge5_rready
net:   tb.dut.split4_merge5_rlast [1] = 0     // split4_merge5_rlast
net:   tb.dut.split4_merge5_rid [4] = 0000     // split4_merge5_rid
net:   tb.dut.split4_merge5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge5_rdata
net:   tb.dut.split4_merge5_bvalid [1] = 0     // split4_merge5_bvalid
net:   tb.dut.split4_merge5_bresp [2] = 00     // split4_merge5_bresp
net:   tb.dut.split4_merge5_bready [1] = 1     // split4_merge5_bready
net:   tb.dut.split4_merge5_bid [4] = 0000     // split4_merge5_bid
net:   tb.dut.split4_merge5_awvalid [1] = 0     // split4_merge5_awvalid
net:   tb.dut.split4_merge5_awready [1] = 1     // split4_merge5_awready
net:   tb.dut.split4_merge5_awlen [8] = 00000000     // split4_merge5_awlen
net:   tb.dut.split4_merge5_awid [4] = 0000     // split4_merge5_awid
net:   tb.dut.split4_merge5_awextras [8] = 00000000     // split4_merge5_awextras
net:   tb.dut.split4_merge5_awburst [2] = 00     // split4_merge5_awburst
net:   tb.dut.split4_merge5_awaddr [32] = 00000000000000000000000000000000     // split4_merge5_awaddr
net:   tb.dut.split4_merge5_arvalid [1] = 0     // split4_merge5_arvalid
net:   tb.dut.split4_merge5_arready [1] = 1     // split4_merge5_arready
net:   tb.dut.split4_merge5_arlen [8] = 00000000     // split4_merge5_arlen
net:   tb.dut.split4_merge5_arid [4] = 0000     // split4_merge5_arid
net:   tb.dut.split4_merge5_arextras [8] = 00000000     // split4_merge5_arextras
net:   tb.dut.split4_merge5_arburst [2] = 00     // split4_merge5_arburst
net:   tb.dut.split4_merge5_araddr [32] = 00000000000000000000000000000000     // split4_merge5_araddr
net:   tb.dut.split4_merge4_wvalid [1] = 0     // split4_merge4_wvalid
net:   tb.dut.split4_merge4_wstrb [8] = 00000000     // split4_merge4_wstrb
net:   tb.dut.split4_merge4_wready [1] = 1     // split4_merge4_wready
net:   tb.dut.split4_merge4_wlast [1] = 0     // split4_merge4_wlast
net:   tb.dut.split4_merge4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge4_wdata
net:   tb.dut.split4_merge4_rvalid [1] = 0     // split4_merge4_rvalid
net:   tb.dut.split4_merge4_rresp [2] = 00     // split4_merge4_rresp
net:   tb.dut.split4_merge4_rready [1] = 1     // split4_merge4_rready
net:   tb.dut.split4_merge4_rlast [1] = 0     // split4_merge4_rlast
net:   tb.dut.split4_merge4_rid [4] = 0000     // split4_merge4_rid
net:   tb.dut.split4_merge4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split4_merge4_rdata
net:   tb.dut.split4_merge4_bvalid [1] = 0     // split4_merge4_bvalid
net:   tb.dut.split4_merge4_bresp [2] = 00     // split4_merge4_bresp
net:   tb.dut.split4_merge4_bready [1] = 1     // split4_merge4_bready
net:   tb.dut.split4_merge4_bid [4] = 0000     // split4_merge4_bid
net:   tb.dut.split4_merge4_awvalid [1] = 0     // split4_merge4_awvalid
net:   tb.dut.split4_merge4_awready [1] = 1     // split4_merge4_awready
net:   tb.dut.split4_merge4_awlen [8] = 00000000     // split4_merge4_awlen
net:   tb.dut.split4_merge4_awid [4] = 0000     // split4_merge4_awid
net:   tb.dut.split4_merge4_awextras [8] = 00000000     // split4_merge4_awextras
net:   tb.dut.split4_merge4_awburst [2] = 00     // split4_merge4_awburst
net:   tb.dut.split4_merge4_awaddr [32] = 00000000000000000000000000000000     // split4_merge4_awaddr
net:   tb.dut.split4_merge4_arvalid [1] = 0     // split4_merge4_arvalid
net:   tb.dut.split4_merge4_arready [1] = 1     // split4_merge4_arready
net:   tb.dut.split4_merge4_arlen [8] = 00000000     // split4_merge4_arlen
net:   tb.dut.split4_merge4_arid [4] = 0000     // split4_merge4_arid
net:   tb.dut.split4_merge4_arextras [8] = 00000000     // split4_merge4_arextras
net:   tb.dut.split4_merge4_arburst [2] = 00     // split4_merge4_arburst
net:   tb.dut.split4_merge4_araddr [32] = 00000000000000000000000000000000     // split4_merge4_araddr
net:   tb.dut.split3_merge3_wvalid [1] = 0     // split3_merge3_wvalid
net:   tb.dut.split3_merge3_wstrb [8] = 00000000     // split3_merge3_wstrb
net:   tb.dut.split3_merge3_wready [1] = 1     // split3_merge3_wready
net:   tb.dut.split3_merge3_wlast [1] = 0     // split3_merge3_wlast
net:   tb.dut.split3_merge3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge3_wdata
net:   tb.dut.split3_merge3_rvalid [1] = 0     // split3_merge3_rvalid
net:   tb.dut.split3_merge3_rresp [2] = 00     // split3_merge3_rresp
net:   tb.dut.split3_merge3_rready [1] = 1     // split3_merge3_rready
net:   tb.dut.split3_merge3_rlast [1] = 0     // split3_merge3_rlast
net:   tb.dut.split3_merge3_rid [4] = 0000     // split3_merge3_rid
net:   tb.dut.split3_merge3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge3_rdata
net:   tb.dut.split3_merge3_bvalid [1] = 0     // split3_merge3_bvalid
net:   tb.dut.split3_merge3_bresp [2] = 00     // split3_merge3_bresp
net:   tb.dut.split3_merge3_bready [1] = 1     // split3_merge3_bready
net:   tb.dut.split3_merge3_bid [4] = 0000     // split3_merge3_bid
net:   tb.dut.split3_merge3_awvalid [1] = 0     // split3_merge3_awvalid
net:   tb.dut.split3_merge3_awready [1] = 1     // split3_merge3_awready
net:   tb.dut.split3_merge3_awlen [8] = 00000000     // split3_merge3_awlen
net:   tb.dut.split3_merge3_awid [4] = 0000     // split3_merge3_awid
net:   tb.dut.split3_merge3_awextras [8] = 00000000     // split3_merge3_awextras
net:   tb.dut.split3_merge3_awburst [2] = 00     // split3_merge3_awburst
net:   tb.dut.split3_merge3_awaddr [32] = 00000000000000000000000000000000     // split3_merge3_awaddr
net:   tb.dut.split3_merge3_arvalid [1] = 0     // split3_merge3_arvalid
net:   tb.dut.split3_merge3_arready [1] = 1     // split3_merge3_arready
net:   tb.dut.split3_merge3_arlen [8] = 00000000     // split3_merge3_arlen
net:   tb.dut.split3_merge3_arid [4] = 0000     // split3_merge3_arid
net:   tb.dut.split3_merge3_arextras [8] = 00000000     // split3_merge3_arextras
net:   tb.dut.split3_merge3_arburst [2] = 00     // split3_merge3_arburst
net:   tb.dut.split3_merge3_araddr [32] = 00000000000000000000000000000000     // split3_merge3_araddr
net:   tb.dut.split3_merge2_wvalid [1] = 0     // split3_merge2_wvalid
net:   tb.dut.split3_merge2_wstrb [8] = 00000000     // split3_merge2_wstrb
net:   tb.dut.split3_merge2_wready [1] = 1     // split3_merge2_wready
net:   tb.dut.split3_merge2_wlast [1] = 0     // split3_merge2_wlast
net:   tb.dut.split3_merge2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge2_wdata
net:   tb.dut.split3_merge2_rvalid [1] = 0     // split3_merge2_rvalid
net:   tb.dut.split3_merge2_rresp [2] = 00     // split3_merge2_rresp
net:   tb.dut.split3_merge2_rready [1] = 1     // split3_merge2_rready
net:   tb.dut.split3_merge2_rlast [1] = 0     // split3_merge2_rlast
net:   tb.dut.split3_merge2_rid [4] = 0000     // split3_merge2_rid
net:   tb.dut.split3_merge2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge2_rdata
net:   tb.dut.split3_merge2_bvalid [1] = 0     // split3_merge2_bvalid
net:   tb.dut.split3_merge2_bresp [2] = 00     // split3_merge2_bresp
net:   tb.dut.split3_merge2_bready [1] = 1     // split3_merge2_bready
net:   tb.dut.split3_merge2_bid [4] = 0000     // split3_merge2_bid
net:   tb.dut.split3_merge2_awvalid [1] = 0     // split3_merge2_awvalid
net:   tb.dut.split3_merge2_awready [1] = 1     // split3_merge2_awready
net:   tb.dut.split3_merge2_awlen [8] = 00000000     // split3_merge2_awlen
net:   tb.dut.split3_merge2_awid [4] = 0000     // split3_merge2_awid
net:   tb.dut.split3_merge2_awextras [8] = 00000000     // split3_merge2_awextras
net:   tb.dut.split3_merge2_awburst [2] = 00     // split3_merge2_awburst
net:   tb.dut.split3_merge2_awaddr [32] = 00000000000000000000000000000000     // split3_merge2_awaddr
net:   tb.dut.split3_merge2_arvalid [1] = 0     // split3_merge2_arvalid
net:   tb.dut.split3_merge2_arready [1] = 1     // split3_merge2_arready
net:   tb.dut.split3_merge2_arlen [8] = 00000000     // split3_merge2_arlen
net:   tb.dut.split3_merge2_arid [4] = 0000     // split3_merge2_arid
net:   tb.dut.split3_merge2_arextras [8] = 00000000     // split3_merge2_arextras
net:   tb.dut.split3_merge2_arburst [2] = 00     // split3_merge2_arburst
net:   tb.dut.split3_merge2_araddr [32] = 00000000000000000000000000000000     // split3_merge2_araddr
net:   tb.dut.split3_merge1_wvalid [1] = 0     // split3_merge1_wvalid
net:   tb.dut.split3_merge1_wstrb [8] = 00000000     // split3_merge1_wstrb
net:   tb.dut.split3_merge1_wready [1] = 1     // split3_merge1_wready
net:   tb.dut.split3_merge1_wlast [1] = 0     // split3_merge1_wlast
net:   tb.dut.split3_merge1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge1_wdata
net:   tb.dut.split3_merge1_rvalid [1] = 0     // split3_merge1_rvalid
net:   tb.dut.split3_merge1_rresp [2] = 00     // split3_merge1_rresp
net:   tb.dut.split3_merge1_rready [1] = 1     // split3_merge1_rready
net:   tb.dut.split3_merge1_rlast [1] = 0     // split3_merge1_rlast
net:   tb.dut.split3_merge1_rid [4] = 0000     // split3_merge1_rid
net:   tb.dut.split3_merge1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge1_rdata
net:   tb.dut.split3_merge1_bvalid [1] = 0     // split3_merge1_bvalid
net:   tb.dut.split3_merge1_bresp [2] = 00     // split3_merge1_bresp
net:   tb.dut.split3_merge1_bready [1] = 1     // split3_merge1_bready
net:   tb.dut.split3_merge1_bid [4] = 0000     // split3_merge1_bid
net:   tb.dut.split3_merge1_awvalid [1] = 0     // split3_merge1_awvalid
net:   tb.dut.split3_merge1_awready [1] = 1     // split3_merge1_awready
net:   tb.dut.split3_merge1_awlen [8] = 00000000     // split3_merge1_awlen
net:   tb.dut.split3_merge1_awid [4] = 0000     // split3_merge1_awid
net:   tb.dut.split3_merge1_awextras [8] = 00000000     // split3_merge1_awextras
net:   tb.dut.split3_merge1_awburst [2] = 00     // split3_merge1_awburst
net:   tb.dut.split3_merge1_awaddr [32] = 00000000000000000000000000000000     // split3_merge1_awaddr
net:   tb.dut.split3_merge1_arvalid [1] = 0     // split3_merge1_arvalid
net:   tb.dut.split3_merge1_arready [1] = 1     // split3_merge1_arready
net:   tb.dut.split3_merge1_arlen [8] = 00000000     // split3_merge1_arlen
net:   tb.dut.split3_merge1_arid [4] = 0000     // split3_merge1_arid
net:   tb.dut.split3_merge1_arextras [8] = 00000000     // split3_merge1_arextras
net:   tb.dut.split3_merge1_arburst [2] = 00     // split3_merge1_arburst
net:   tb.dut.split3_merge1_araddr [32] = 00000000000000000000000000000000     // split3_merge1_araddr
net:   tb.dut.split3_merge0_wvalid [1] = 0     // split3_merge0_wvalid
net:   tb.dut.split3_merge0_wstrb [8] = 00000000     // split3_merge0_wstrb
net:   tb.dut.split3_merge0_wready [1] = 1     // split3_merge0_wready
net:   tb.dut.split3_merge0_wlast [1] = 0     // split3_merge0_wlast
net:   tb.dut.split3_merge0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge0_wdata
net:   tb.dut.split3_merge0_rvalid [1] = 0     // split3_merge0_rvalid
net:   tb.dut.split3_merge0_rresp [2] = 00     // split3_merge0_rresp
net:   tb.dut.split3_merge0_rready [1] = 1     // split3_merge0_rready
net:   tb.dut.split3_merge0_rlast [1] = 0     // split3_merge0_rlast
net:   tb.dut.split3_merge0_rid [4] = 0000     // split3_merge0_rid
net:   tb.dut.split3_merge0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split3_merge0_rdata
net:   tb.dut.split3_merge0_bvalid [1] = 0     // split3_merge0_bvalid
net:   tb.dut.split3_merge0_bresp [2] = 00     // split3_merge0_bresp
net:   tb.dut.split3_merge0_bready [1] = 1     // split3_merge0_bready
net:   tb.dut.split3_merge0_bid [4] = 0000     // split3_merge0_bid
net:   tb.dut.split3_merge0_awvalid [1] = 0     // split3_merge0_awvalid
net:   tb.dut.split3_merge0_awready [1] = 1     // split3_merge0_awready
net:   tb.dut.split3_merge0_awlen [8] = 00000000     // split3_merge0_awlen
net:   tb.dut.split3_merge0_awid [4] = 0000     // split3_merge0_awid
net:   tb.dut.split3_merge0_awextras [8] = 00000000     // split3_merge0_awextras
net:   tb.dut.split3_merge0_awburst [2] = 00     // split3_merge0_awburst
net:   tb.dut.split3_merge0_awaddr [32] = 00000000000000000000000000000000     // split3_merge0_awaddr
net:   tb.dut.split3_merge0_arvalid [1] = 0     // split3_merge0_arvalid
net:   tb.dut.split3_merge0_arready [1] = 1     // split3_merge0_arready
net:   tb.dut.split3_merge0_arlen [8] = 00000000     // split3_merge0_arlen
net:   tb.dut.split3_merge0_arid [4] = 0000     // split3_merge0_arid
net:   tb.dut.split3_merge0_arextras [8] = 00000000     // split3_merge0_arextras
net:   tb.dut.split3_merge0_arburst [2] = 00     // split3_merge0_arburst
net:   tb.dut.split3_merge0_araddr [32] = 00000000000000000000000000000000     // split3_merge0_araddr
net:   tb.dut.split2_merge3_wvalid [1] = 0     // split2_merge3_wvalid
net:   tb.dut.split2_merge3_wstrb [8] = 00000000     // split2_merge3_wstrb
net:   tb.dut.split2_merge3_wready [1] = 1     // split2_merge3_wready
net:   tb.dut.split2_merge3_wlast [1] = 0     // split2_merge3_wlast
net:   tb.dut.split2_merge3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge3_wdata
net:   tb.dut.split2_merge3_rvalid [1] = 0     // split2_merge3_rvalid
net:   tb.dut.split2_merge3_rresp [2] = 00     // split2_merge3_rresp
net:   tb.dut.split2_merge3_rready [1] = 1     // split2_merge3_rready
net:   tb.dut.split2_merge3_rlast [1] = 0     // split2_merge3_rlast
net:   tb.dut.split2_merge3_rid [4] = 0000     // split2_merge3_rid
net:   tb.dut.split2_merge3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge3_rdata
net:   tb.dut.split2_merge3_bvalid [1] = 0     // split2_merge3_bvalid
net:   tb.dut.split2_merge3_bresp [2] = 00     // split2_merge3_bresp
net:   tb.dut.split2_merge3_bready [1] = 1     // split2_merge3_bready
net:   tb.dut.split2_merge3_bid [4] = 0000     // split2_merge3_bid
net:   tb.dut.split2_merge3_awvalid [1] = 0     // split2_merge3_awvalid
net:   tb.dut.split2_merge3_awready [1] = 1     // split2_merge3_awready
net:   tb.dut.split2_merge3_awlen [8] = 00000000     // split2_merge3_awlen
net:   tb.dut.split2_merge3_awid [4] = 0000     // split2_merge3_awid
net:   tb.dut.split2_merge3_awextras [8] = 00000000     // split2_merge3_awextras
net:   tb.dut.split2_merge3_awburst [2] = 00     // split2_merge3_awburst
net:   tb.dut.split2_merge3_awaddr [32] = 00000000000000000000000000000000     // split2_merge3_awaddr
net:   tb.dut.split2_merge3_arvalid [1] = 0     // split2_merge3_arvalid
net:   tb.dut.split2_merge3_arready [1] = 1     // split2_merge3_arready
net:   tb.dut.split2_merge3_arlen [8] = 00000000     // split2_merge3_arlen
net:   tb.dut.split2_merge3_arid [4] = 0000     // split2_merge3_arid
net:   tb.dut.split2_merge3_arextras [8] = 00000000     // split2_merge3_arextras
net:   tb.dut.split2_merge3_arburst [2] = 00     // split2_merge3_arburst
net:   tb.dut.split2_merge3_araddr [32] = 00000000000000000000000000000000     // split2_merge3_araddr
net:   tb.dut.split2_merge2_wvalid [1] = 0     // split2_merge2_wvalid
net:   tb.dut.split2_merge2_wstrb [8] = 00000000     // split2_merge2_wstrb
net:   tb.dut.split2_merge2_wready [1] = 1     // split2_merge2_wready
net:   tb.dut.split2_merge2_wlast [1] = 0     // split2_merge2_wlast
net:   tb.dut.split2_merge2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge2_wdata
net:   tb.dut.split2_merge2_rvalid [1] = 0     // split2_merge2_rvalid
net:   tb.dut.split2_merge2_rresp [2] = 00     // split2_merge2_rresp
net:   tb.dut.split2_merge2_rready [1] = 1     // split2_merge2_rready
net:   tb.dut.split2_merge2_rlast [1] = 0     // split2_merge2_rlast
net:   tb.dut.split2_merge2_rid [4] = 0000     // split2_merge2_rid
net:   tb.dut.split2_merge2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge2_rdata
net:   tb.dut.split2_merge2_bvalid [1] = 0     // split2_merge2_bvalid
net:   tb.dut.split2_merge2_bresp [2] = 00     // split2_merge2_bresp
net:   tb.dut.split2_merge2_bready [1] = 1     // split2_merge2_bready
net:   tb.dut.split2_merge2_bid [4] = 0000     // split2_merge2_bid
net:   tb.dut.split2_merge2_awvalid [1] = 0     // split2_merge2_awvalid
net:   tb.dut.split2_merge2_awready [1] = 1     // split2_merge2_awready
net:   tb.dut.split2_merge2_awlen [8] = 00000000     // split2_merge2_awlen
net:   tb.dut.split2_merge2_awid [4] = 0000     // split2_merge2_awid
net:   tb.dut.split2_merge2_awextras [8] = 00000000     // split2_merge2_awextras
net:   tb.dut.split2_merge2_awburst [2] = 00     // split2_merge2_awburst
net:   tb.dut.split2_merge2_awaddr [32] = 00000000000000000000000000000000     // split2_merge2_awaddr
net:   tb.dut.split2_merge2_arvalid [1] = 0     // split2_merge2_arvalid
net:   tb.dut.split2_merge2_arready [1] = 1     // split2_merge2_arready
net:   tb.dut.split2_merge2_arlen [8] = 00000000     // split2_merge2_arlen
net:   tb.dut.split2_merge2_arid [4] = 0000     // split2_merge2_arid
net:   tb.dut.split2_merge2_arextras [8] = 00000000     // split2_merge2_arextras
net:   tb.dut.split2_merge2_arburst [2] = 00     // split2_merge2_arburst
net:   tb.dut.split2_merge2_araddr [32] = 00000000000000000000000000000000     // split2_merge2_araddr
net:   tb.dut.split2_merge1_wvalid [1] = 0     // split2_merge1_wvalid
net:   tb.dut.split2_merge1_wstrb [8] = 00000000     // split2_merge1_wstrb
net:   tb.dut.split2_merge1_wready [1] = 1     // split2_merge1_wready
net:   tb.dut.split2_merge1_wlast [1] = 0     // split2_merge1_wlast
net:   tb.dut.split2_merge1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge1_wdata
net:   tb.dut.split2_merge1_rvalid [1] = 0     // split2_merge1_rvalid
net:   tb.dut.split2_merge1_rresp [2] = 00     // split2_merge1_rresp
net:   tb.dut.split2_merge1_rready [1] = 1     // split2_merge1_rready
net:   tb.dut.split2_merge1_rlast [1] = 0     // split2_merge1_rlast
net:   tb.dut.split2_merge1_rid [4] = 0000     // split2_merge1_rid
net:   tb.dut.split2_merge1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge1_rdata
net:   tb.dut.split2_merge1_bvalid [1] = 0     // split2_merge1_bvalid
net:   tb.dut.split2_merge1_bresp [2] = 00     // split2_merge1_bresp
net:   tb.dut.split2_merge1_bready [1] = 1     // split2_merge1_bready
net:   tb.dut.split2_merge1_bid [4] = 0000     // split2_merge1_bid
net:   tb.dut.split2_merge1_awvalid [1] = 0     // split2_merge1_awvalid
net:   tb.dut.split2_merge1_awready [1] = 1     // split2_merge1_awready
net:   tb.dut.split2_merge1_awlen [8] = 00000000     // split2_merge1_awlen
net:   tb.dut.split2_merge1_awid [4] = 0000     // split2_merge1_awid
net:   tb.dut.split2_merge1_awextras [8] = 00000000     // split2_merge1_awextras
net:   tb.dut.split2_merge1_awburst [2] = 00     // split2_merge1_awburst
net:   tb.dut.split2_merge1_awaddr [32] = 00000000000000000000000000000000     // split2_merge1_awaddr
net:   tb.dut.split2_merge1_arvalid [1] = 0     // split2_merge1_arvalid
net:   tb.dut.split2_merge1_arready [1] = 1     // split2_merge1_arready
net:   tb.dut.split2_merge1_arlen [8] = 00000000     // split2_merge1_arlen
net:   tb.dut.split2_merge1_arid [4] = 0000     // split2_merge1_arid
net:   tb.dut.split2_merge1_arextras [8] = 00000000     // split2_merge1_arextras
net:   tb.dut.split2_merge1_arburst [2] = 00     // split2_merge1_arburst
net:   tb.dut.split2_merge1_araddr [32] = 00000000000000000000000000000000     // split2_merge1_araddr
net:   tb.dut.split2_merge0_wvalid [1] = 0     // split2_merge0_wvalid
net:   tb.dut.split2_merge0_wstrb [8] = 00000000     // split2_merge0_wstrb
net:   tb.dut.split2_merge0_wready [1] = 1     // split2_merge0_wready
net:   tb.dut.split2_merge0_wlast [1] = 0     // split2_merge0_wlast
net:   tb.dut.split2_merge0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge0_wdata
net:   tb.dut.split2_merge0_rvalid [1] = 0     // split2_merge0_rvalid
net:   tb.dut.split2_merge0_rresp [2] = 00     // split2_merge0_rresp
net:   tb.dut.split2_merge0_rready [1] = 1     // split2_merge0_rready
net:   tb.dut.split2_merge0_rlast [1] = 0     // split2_merge0_rlast
net:   tb.dut.split2_merge0_rid [4] = 0000     // split2_merge0_rid
net:   tb.dut.split2_merge0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split2_merge0_rdata
net:   tb.dut.split2_merge0_bvalid [1] = 0     // split2_merge0_bvalid
net:   tb.dut.split2_merge0_bresp [2] = 00     // split2_merge0_bresp
net:   tb.dut.split2_merge0_bready [1] = 1     // split2_merge0_bready
net:   tb.dut.split2_merge0_bid [4] = 0000     // split2_merge0_bid
net:   tb.dut.split2_merge0_awvalid [1] = 0     // split2_merge0_awvalid
net:   tb.dut.split2_merge0_awready [1] = 1     // split2_merge0_awready
net:   tb.dut.split2_merge0_awlen [8] = 00000000     // split2_merge0_awlen
net:   tb.dut.split2_merge0_awid [4] = 0000     // split2_merge0_awid
net:   tb.dut.split2_merge0_awextras [8] = 00000000     // split2_merge0_awextras
net:   tb.dut.split2_merge0_awburst [2] = 00     // split2_merge0_awburst
net:   tb.dut.split2_merge0_awaddr [32] = 00000000000000000000000000000000     // split2_merge0_awaddr
net:   tb.dut.split2_merge0_arvalid [1] = 0     // split2_merge0_arvalid
net:   tb.dut.split2_merge0_arready [1] = 1     // split2_merge0_arready
net:   tb.dut.split2_merge0_arlen [8] = 00000000     // split2_merge0_arlen
net:   tb.dut.split2_merge0_arid [4] = 0000     // split2_merge0_arid
net:   tb.dut.split2_merge0_arextras [8] = 00000000     // split2_merge0_arextras
net:   tb.dut.split2_merge0_arburst [2] = 00     // split2_merge0_arburst
net:   tb.dut.split2_merge0_araddr [32] = 00000000000000000000000000000000     // split2_merge0_araddr
net:   tb.dut.split1_merge3_wvalid [1] = 0     // split1_merge3_wvalid
net:   tb.dut.split1_merge3_wstrb [8] = 00000000     // split1_merge3_wstrb
net:   tb.dut.split1_merge3_wready [1] = 1     // split1_merge3_wready
net:   tb.dut.split1_merge3_wlast [1] = 0     // split1_merge3_wlast
net:   tb.dut.split1_merge3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge3_wdata
net:   tb.dut.split1_merge3_rvalid [1] = 0     // split1_merge3_rvalid
net:   tb.dut.split1_merge3_rresp [2] = 00     // split1_merge3_rresp
net:   tb.dut.split1_merge3_rready [1] = 1     // split1_merge3_rready
net:   tb.dut.split1_merge3_rlast [1] = 0     // split1_merge3_rlast
net:   tb.dut.split1_merge3_rid [4] = 0000     // split1_merge3_rid
net:   tb.dut.split1_merge3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge3_rdata
net:   tb.dut.split1_merge3_bvalid [1] = 0     // split1_merge3_bvalid
net:   tb.dut.split1_merge3_bresp [2] = 00     // split1_merge3_bresp
net:   tb.dut.split1_merge3_bready [1] = 1     // split1_merge3_bready
net:   tb.dut.split1_merge3_bid [4] = 0000     // split1_merge3_bid
net:   tb.dut.split1_merge3_awvalid [1] = 0     // split1_merge3_awvalid
net:   tb.dut.split1_merge3_awready [1] = 1     // split1_merge3_awready
net:   tb.dut.split1_merge3_awlen [8] = 00000000     // split1_merge3_awlen
net:   tb.dut.split1_merge3_awid [4] = 0000     // split1_merge3_awid
net:   tb.dut.split1_merge3_awextras [8] = 00000000     // split1_merge3_awextras
net:   tb.dut.split1_merge3_awburst [2] = 00     // split1_merge3_awburst
net:   tb.dut.split1_merge3_awaddr [32] = 00000000000000000000000000000000     // split1_merge3_awaddr
net:   tb.dut.split1_merge3_arvalid [1] = 0     // split1_merge3_arvalid
net:   tb.dut.split1_merge3_arready [1] = 1     // split1_merge3_arready
net:   tb.dut.split1_merge3_arlen [8] = 00000000     // split1_merge3_arlen
net:   tb.dut.split1_merge3_arid [4] = 0000     // split1_merge3_arid
net:   tb.dut.split1_merge3_arextras [8] = 00000000     // split1_merge3_arextras
net:   tb.dut.split1_merge3_arburst [2] = 00     // split1_merge3_arburst
net:   tb.dut.split1_merge3_araddr [32] = 00000000000000000000000000000000     // split1_merge3_araddr
net:   tb.dut.split1_merge2_wvalid [1] = 0     // split1_merge2_wvalid
net:   tb.dut.split1_merge2_wstrb [8] = 00000000     // split1_merge2_wstrb
net:   tb.dut.split1_merge2_wready [1] = 1     // split1_merge2_wready
net:   tb.dut.split1_merge2_wlast [1] = 0     // split1_merge2_wlast
net:   tb.dut.split1_merge2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge2_wdata
net:   tb.dut.split1_merge2_rvalid [1] = 0     // split1_merge2_rvalid
net:   tb.dut.split1_merge2_rresp [2] = 00     // split1_merge2_rresp
net:   tb.dut.split1_merge2_rready [1] = 1     // split1_merge2_rready
net:   tb.dut.split1_merge2_rlast [1] = 0     // split1_merge2_rlast
net:   tb.dut.split1_merge2_rid [4] = 0000     // split1_merge2_rid
net:   tb.dut.split1_merge2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge2_rdata
net:   tb.dut.split1_merge2_bvalid [1] = 0     // split1_merge2_bvalid
net:   tb.dut.split1_merge2_bresp [2] = 00     // split1_merge2_bresp
net:   tb.dut.split1_merge2_bready [1] = 1     // split1_merge2_bready
net:   tb.dut.split1_merge2_bid [4] = 0000     // split1_merge2_bid
net:   tb.dut.split1_merge2_awvalid [1] = 0     // split1_merge2_awvalid
net:   tb.dut.split1_merge2_awready [1] = 1     // split1_merge2_awready
net:   tb.dut.split1_merge2_awlen [8] = 00000000     // split1_merge2_awlen
net:   tb.dut.split1_merge2_awid [4] = 0000     // split1_merge2_awid
net:   tb.dut.split1_merge2_awextras [8] = 00000000     // split1_merge2_awextras
net:   tb.dut.split1_merge2_awburst [2] = 00     // split1_merge2_awburst
net:   tb.dut.split1_merge2_awaddr [32] = 00000000000000000000000000000000     // split1_merge2_awaddr
net:   tb.dut.split1_merge2_arvalid [1] = 0     // split1_merge2_arvalid
net:   tb.dut.split1_merge2_arready [1] = 1     // split1_merge2_arready
net:   tb.dut.split1_merge2_arlen [8] = 00000000     // split1_merge2_arlen
net:   tb.dut.split1_merge2_arid [4] = 0000     // split1_merge2_arid
net:   tb.dut.split1_merge2_arextras [8] = 00000000     // split1_merge2_arextras
net:   tb.dut.split1_merge2_arburst [2] = 00     // split1_merge2_arburst
net:   tb.dut.split1_merge2_araddr [32] = 00000000000000000000000000000000     // split1_merge2_araddr
net:   tb.dut.split1_merge1_wvalid [1] = 0     // split1_merge1_wvalid
net:   tb.dut.split1_merge1_wstrb [8] = 00000000     // split1_merge1_wstrb
net:   tb.dut.split1_merge1_wready [1] = 1     // split1_merge1_wready
net:   tb.dut.split1_merge1_wlast [1] = 0     // split1_merge1_wlast
net:   tb.dut.split1_merge1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge1_wdata
net:   tb.dut.split1_merge1_rvalid [1] = 0     // split1_merge1_rvalid
net:   tb.dut.split1_merge1_rresp [2] = 00     // split1_merge1_rresp
net:   tb.dut.split1_merge1_rready [1] = 1     // split1_merge1_rready
net:   tb.dut.split1_merge1_rlast [1] = 0     // split1_merge1_rlast
net:   tb.dut.split1_merge1_rid [4] = 0000     // split1_merge1_rid
net:   tb.dut.split1_merge1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge1_rdata
net:   tb.dut.split1_merge1_bvalid [1] = 0     // split1_merge1_bvalid
net:   tb.dut.split1_merge1_bresp [2] = 00     // split1_merge1_bresp
net:   tb.dut.split1_merge1_bready [1] = 1     // split1_merge1_bready
net:   tb.dut.split1_merge1_bid [4] = 0000     // split1_merge1_bid
net:   tb.dut.split1_merge1_awvalid [1] = 0     // split1_merge1_awvalid
net:   tb.dut.split1_merge1_awready [1] = 1     // split1_merge1_awready
net:   tb.dut.split1_merge1_awlen [8] = 00000000     // split1_merge1_awlen
net:   tb.dut.split1_merge1_awid [4] = 0000     // split1_merge1_awid
net:   tb.dut.split1_merge1_awextras [8] = 00000000     // split1_merge1_awextras
net:   tb.dut.split1_merge1_awburst [2] = 00     // split1_merge1_awburst
net:   tb.dut.split1_merge1_awaddr [32] = 00000000000000000000000000000000     // split1_merge1_awaddr
net:   tb.dut.split1_merge1_arvalid [1] = 0     // split1_merge1_arvalid
net:   tb.dut.split1_merge1_arready [1] = 1     // split1_merge1_arready
net:   tb.dut.split1_merge1_arlen [8] = 00000000     // split1_merge1_arlen
net:   tb.dut.split1_merge1_arid [4] = 0000     // split1_merge1_arid
net:   tb.dut.split1_merge1_arextras [8] = 00000000     // split1_merge1_arextras
net:   tb.dut.split1_merge1_arburst [2] = 00     // split1_merge1_arburst
net:   tb.dut.split1_merge1_araddr [32] = 00000000000000000000000000000000     // split1_merge1_araddr
net:   tb.dut.split1_merge0_wvalid [1] = 0     // split1_merge0_wvalid
net:   tb.dut.split1_merge0_wstrb [8] = 00000000     // split1_merge0_wstrb
net:   tb.dut.split1_merge0_wready [1] = 1     // split1_merge0_wready
net:   tb.dut.split1_merge0_wlast [1] = 0     // split1_merge0_wlast
net:   tb.dut.split1_merge0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge0_wdata
net:   tb.dut.split1_merge0_rvalid [1] = 0     // split1_merge0_rvalid
net:   tb.dut.split1_merge0_rresp [2] = 00     // split1_merge0_rresp
net:   tb.dut.split1_merge0_rready [1] = 1     // split1_merge0_rready
net:   tb.dut.split1_merge0_rlast [1] = 0     // split1_merge0_rlast
net:   tb.dut.split1_merge0_rid [4] = 0000     // split1_merge0_rid
net:   tb.dut.split1_merge0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split1_merge0_rdata
net:   tb.dut.split1_merge0_bvalid [1] = 0     // split1_merge0_bvalid
net:   tb.dut.split1_merge0_bresp [2] = 00     // split1_merge0_bresp
net:   tb.dut.split1_merge0_bready [1] = 1     // split1_merge0_bready
net:   tb.dut.split1_merge0_bid [4] = 0000     // split1_merge0_bid
net:   tb.dut.split1_merge0_awvalid [1] = 0     // split1_merge0_awvalid
net:   tb.dut.split1_merge0_awready [1] = 1     // split1_merge0_awready
net:   tb.dut.split1_merge0_awlen [8] = 00000000     // split1_merge0_awlen
net:   tb.dut.split1_merge0_awid [4] = 0000     // split1_merge0_awid
net:   tb.dut.split1_merge0_awextras [8] = 00000000     // split1_merge0_awextras
net:   tb.dut.split1_merge0_awburst [2] = 00     // split1_merge0_awburst
net:   tb.dut.split1_merge0_awaddr [32] = 00000000000000000000000000000000     // split1_merge0_awaddr
net:   tb.dut.split1_merge0_arvalid [1] = 0     // split1_merge0_arvalid
net:   tb.dut.split1_merge0_arready [1] = 1     // split1_merge0_arready
net:   tb.dut.split1_merge0_arlen [8] = 00000000     // split1_merge0_arlen
net:   tb.dut.split1_merge0_arid [4] = 0000     // split1_merge0_arid
net:   tb.dut.split1_merge0_arextras [8] = 00000000     // split1_merge0_arextras
net:   tb.dut.split1_merge0_arburst [2] = 00     // split1_merge0_arburst
net:   tb.dut.split1_merge0_araddr [32] = 00000000000000000000000000000000     // split1_merge0_araddr
net:   tb.dut.split15_merge15_wvalid [1] = 0     // split15_merge15_wvalid
net:   tb.dut.split15_merge15_wstrb [8] = 00000000     // split15_merge15_wstrb
net:   tb.dut.split15_merge15_wready [1] = 1     // split15_merge15_wready
net:   tb.dut.split15_merge15_wlast [1] = 0     // split15_merge15_wlast
net:   tb.dut.split15_merge15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge15_wdata
net:   tb.dut.split15_merge15_rvalid [1] = 0     // split15_merge15_rvalid
net:   tb.dut.split15_merge15_rresp [2] = 00     // split15_merge15_rresp
net:   tb.dut.split15_merge15_rready [1] = 1     // split15_merge15_rready
net:   tb.dut.split15_merge15_rlast [1] = 0     // split15_merge15_rlast
net:   tb.dut.split15_merge15_rid [4] = 0000     // split15_merge15_rid
net:   tb.dut.split15_merge15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge15_rdata
net:   tb.dut.split15_merge15_bvalid [1] = 0     // split15_merge15_bvalid
net:   tb.dut.split15_merge15_bresp [2] = 00     // split15_merge15_bresp
net:   tb.dut.split15_merge15_bready [1] = 1     // split15_merge15_bready
net:   tb.dut.split15_merge15_bid [4] = 0000     // split15_merge15_bid
net:   tb.dut.split15_merge15_awvalid [1] = 0     // split15_merge15_awvalid
net:   tb.dut.split15_merge15_awready [1] = 1     // split15_merge15_awready
net:   tb.dut.split15_merge15_awlen [8] = 00000000     // split15_merge15_awlen
net:   tb.dut.split15_merge15_awid [4] = 0000     // split15_merge15_awid
net:   tb.dut.split15_merge15_awextras [8] = 00000000     // split15_merge15_awextras
net:   tb.dut.split15_merge15_awburst [2] = 00     // split15_merge15_awburst
net:   tb.dut.split15_merge15_awaddr [32] = 00000000000000000000000000000000     // split15_merge15_awaddr
net:   tb.dut.split15_merge15_arvalid [1] = 0     // split15_merge15_arvalid
net:   tb.dut.split15_merge15_arready [1] = 1     // split15_merge15_arready
net:   tb.dut.split15_merge15_arlen [8] = 00000000     // split15_merge15_arlen
net:   tb.dut.split15_merge15_arid [4] = 0000     // split15_merge15_arid
net:   tb.dut.split15_merge15_arextras [8] = 00000000     // split15_merge15_arextras
net:   tb.dut.split15_merge15_arburst [2] = 00     // split15_merge15_arburst
net:   tb.dut.split15_merge15_araddr [32] = 00000000000000000000000000000000     // split15_merge15_araddr
net:   tb.dut.split15_merge14_wvalid [1] = 0     // split15_merge14_wvalid
net:   tb.dut.split15_merge14_wstrb [8] = 00000000     // split15_merge14_wstrb
net:   tb.dut.split15_merge14_wready [1] = 1     // split15_merge14_wready
net:   tb.dut.split15_merge14_wlast [1] = 0     // split15_merge14_wlast
net:   tb.dut.split15_merge14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge14_wdata
net:   tb.dut.split15_merge14_rvalid [1] = 0     // split15_merge14_rvalid
net:   tb.dut.split15_merge14_rresp [2] = 00     // split15_merge14_rresp
net:   tb.dut.split15_merge14_rready [1] = 1     // split15_merge14_rready
net:   tb.dut.split15_merge14_rlast [1] = 0     // split15_merge14_rlast
net:   tb.dut.split15_merge14_rid [4] = 0000     // split15_merge14_rid
net:   tb.dut.split15_merge14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge14_rdata
net:   tb.dut.split15_merge14_bvalid [1] = 0     // split15_merge14_bvalid
net:   tb.dut.split15_merge14_bresp [2] = 00     // split15_merge14_bresp
net:   tb.dut.split15_merge14_bready [1] = 1     // split15_merge14_bready
net:   tb.dut.split15_merge14_bid [4] = 0000     // split15_merge14_bid
net:   tb.dut.split15_merge14_awvalid [1] = 0     // split15_merge14_awvalid
net:   tb.dut.split15_merge14_awready [1] = 1     // split15_merge14_awready
net:   tb.dut.split15_merge14_awlen [8] = 00000000     // split15_merge14_awlen
net:   tb.dut.split15_merge14_awid [4] = 0000     // split15_merge14_awid
net:   tb.dut.split15_merge14_awextras [8] = 00000000     // split15_merge14_awextras
net:   tb.dut.split15_merge14_awburst [2] = 00     // split15_merge14_awburst
net:   tb.dut.split15_merge14_awaddr [32] = 00000000000000000000000000000000     // split15_merge14_awaddr
net:   tb.dut.split15_merge14_arvalid [1] = 0     // split15_merge14_arvalid
net:   tb.dut.split15_merge14_arready [1] = 1     // split15_merge14_arready
net:   tb.dut.split15_merge14_arlen [8] = 00000000     // split15_merge14_arlen
net:   tb.dut.split15_merge14_arid [4] = 0000     // split15_merge14_arid
net:   tb.dut.split15_merge14_arextras [8] = 00000000     // split15_merge14_arextras
net:   tb.dut.split15_merge14_arburst [2] = 00     // split15_merge14_arburst
net:   tb.dut.split15_merge14_araddr [32] = 00000000000000000000000000000000     // split15_merge14_araddr
net:   tb.dut.split15_merge13_wvalid [1] = 0     // split15_merge13_wvalid
net:   tb.dut.split15_merge13_wstrb [8] = 00000000     // split15_merge13_wstrb
net:   tb.dut.split15_merge13_wready [1] = 1     // split15_merge13_wready
net:   tb.dut.split15_merge13_wlast [1] = 0     // split15_merge13_wlast
net:   tb.dut.split15_merge13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge13_wdata
net:   tb.dut.split15_merge13_rvalid [1] = 0     // split15_merge13_rvalid
net:   tb.dut.split15_merge13_rresp [2] = 00     // split15_merge13_rresp
net:   tb.dut.split15_merge13_rready [1] = 1     // split15_merge13_rready
net:   tb.dut.split15_merge13_rlast [1] = 0     // split15_merge13_rlast
net:   tb.dut.split15_merge13_rid [4] = 0000     // split15_merge13_rid
net:   tb.dut.split15_merge13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge13_rdata
net:   tb.dut.split15_merge13_bvalid [1] = 0     // split15_merge13_bvalid
net:   tb.dut.split15_merge13_bresp [2] = 00     // split15_merge13_bresp
net:   tb.dut.split15_merge13_bready [1] = 1     // split15_merge13_bready
net:   tb.dut.split15_merge13_bid [4] = 0000     // split15_merge13_bid
net:   tb.dut.split15_merge13_awvalid [1] = 0     // split15_merge13_awvalid
net:   tb.dut.split15_merge13_awready [1] = 1     // split15_merge13_awready
net:   tb.dut.split15_merge13_awlen [8] = 00000000     // split15_merge13_awlen
net:   tb.dut.split15_merge13_awid [4] = 0000     // split15_merge13_awid
net:   tb.dut.split15_merge13_awextras [8] = 00000000     // split15_merge13_awextras
net:   tb.dut.split15_merge13_awburst [2] = 00     // split15_merge13_awburst
net:   tb.dut.split15_merge13_awaddr [32] = 00000000000000000000000000000000     // split15_merge13_awaddr
net:   tb.dut.split15_merge13_arvalid [1] = 0     // split15_merge13_arvalid
net:   tb.dut.split15_merge13_arready [1] = 1     // split15_merge13_arready
net:   tb.dut.split15_merge13_arlen [8] = 00000000     // split15_merge13_arlen
net:   tb.dut.split15_merge13_arid [4] = 0000     // split15_merge13_arid
net:   tb.dut.split15_merge13_arextras [8] = 00000000     // split15_merge13_arextras
net:   tb.dut.split15_merge13_arburst [2] = 00     // split15_merge13_arburst
net:   tb.dut.split15_merge13_araddr [32] = 00000000000000000000000000000000     // split15_merge13_araddr
net:   tb.dut.split15_merge12_wvalid [1] = 0     // split15_merge12_wvalid
net:   tb.dut.split15_merge12_wstrb [8] = 00000000     // split15_merge12_wstrb
net:   tb.dut.split15_merge12_wready [1] = 1     // split15_merge12_wready
net:   tb.dut.split15_merge12_wlast [1] = 0     // split15_merge12_wlast
net:   tb.dut.split15_merge12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge12_wdata
net:   tb.dut.split15_merge12_rvalid [1] = 0     // split15_merge12_rvalid
net:   tb.dut.split15_merge12_rresp [2] = 00     // split15_merge12_rresp
net:   tb.dut.split15_merge12_rready [1] = 1     // split15_merge12_rready
net:   tb.dut.split15_merge12_rlast [1] = 0     // split15_merge12_rlast
net:   tb.dut.split15_merge12_rid [4] = 0000     // split15_merge12_rid
net:   tb.dut.split15_merge12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split15_merge12_rdata
net:   tb.dut.split15_merge12_bvalid [1] = 0     // split15_merge12_bvalid
net:   tb.dut.split15_merge12_bresp [2] = 00     // split15_merge12_bresp
net:   tb.dut.split15_merge12_bready [1] = 1     // split15_merge12_bready
net:   tb.dut.split15_merge12_bid [4] = 0000     // split15_merge12_bid
net:   tb.dut.split15_merge12_awvalid [1] = 0     // split15_merge12_awvalid
net:   tb.dut.split15_merge12_awready [1] = 1     // split15_merge12_awready
net:   tb.dut.split15_merge12_awlen [8] = 00000000     // split15_merge12_awlen
net:   tb.dut.split15_merge12_awid [4] = 0000     // split15_merge12_awid
net:   tb.dut.split15_merge12_awextras [8] = 00000000     // split15_merge12_awextras
net:   tb.dut.split15_merge12_awburst [2] = 00     // split15_merge12_awburst
net:   tb.dut.split15_merge12_awaddr [32] = 00000000000000000000000000000000     // split15_merge12_awaddr
net:   tb.dut.split15_merge12_arvalid [1] = 0     // split15_merge12_arvalid
net:   tb.dut.split15_merge12_arready [1] = 1     // split15_merge12_arready
net:   tb.dut.split15_merge12_arlen [8] = 00000000     // split15_merge12_arlen
net:   tb.dut.split15_merge12_arid [4] = 0000     // split15_merge12_arid
net:   tb.dut.split15_merge12_arextras [8] = 00000000     // split15_merge12_arextras
net:   tb.dut.split15_merge12_arburst [2] = 00     // split15_merge12_arburst
net:   tb.dut.split15_merge12_araddr [32] = 00000000000000000000000000000000     // split15_merge12_araddr
net:   tb.dut.split14_merge15_wvalid [1] = 0     // split14_merge15_wvalid
net:   tb.dut.split14_merge15_wstrb [8] = 00000000     // split14_merge15_wstrb
net:   tb.dut.split14_merge15_wready [1] = 1     // split14_merge15_wready
net:   tb.dut.split14_merge15_wlast [1] = 0     // split14_merge15_wlast
net:   tb.dut.split14_merge15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge15_wdata
net:   tb.dut.split14_merge15_rvalid [1] = 0     // split14_merge15_rvalid
net:   tb.dut.split14_merge15_rresp [2] = 00     // split14_merge15_rresp
net:   tb.dut.split14_merge15_rready [1] = 1     // split14_merge15_rready
net:   tb.dut.split14_merge15_rlast [1] = 0     // split14_merge15_rlast
net:   tb.dut.split14_merge15_rid [4] = 0000     // split14_merge15_rid
net:   tb.dut.split14_merge15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge15_rdata
net:   tb.dut.split14_merge15_bvalid [1] = 0     // split14_merge15_bvalid
net:   tb.dut.split14_merge15_bresp [2] = 00     // split14_merge15_bresp
net:   tb.dut.split14_merge15_bready [1] = 1     // split14_merge15_bready
net:   tb.dut.split14_merge15_bid [4] = 0000     // split14_merge15_bid
net:   tb.dut.split14_merge15_awvalid [1] = 0     // split14_merge15_awvalid
net:   tb.dut.split14_merge15_awready [1] = 1     // split14_merge15_awready
net:   tb.dut.split14_merge15_awlen [8] = 00000000     // split14_merge15_awlen
net:   tb.dut.split14_merge15_awid [4] = 0000     // split14_merge15_awid
net:   tb.dut.split14_merge15_awextras [8] = 00000000     // split14_merge15_awextras
net:   tb.dut.split14_merge15_awburst [2] = 00     // split14_merge15_awburst
net:   tb.dut.split14_merge15_awaddr [32] = 00000000000000000000000000000000     // split14_merge15_awaddr
net:   tb.dut.split14_merge15_arvalid [1] = 0     // split14_merge15_arvalid
net:   tb.dut.split14_merge15_arready [1] = 1     // split14_merge15_arready
net:   tb.dut.split14_merge15_arlen [8] = 00000000     // split14_merge15_arlen
net:   tb.dut.split14_merge15_arid [4] = 0000     // split14_merge15_arid
net:   tb.dut.split14_merge15_arextras [8] = 00000000     // split14_merge15_arextras
net:   tb.dut.split14_merge15_arburst [2] = 00     // split14_merge15_arburst
net:   tb.dut.split14_merge15_araddr [32] = 00000000000000000000000000000000     // split14_merge15_araddr
net:   tb.dut.split14_merge14_wvalid [1] = 0     // split14_merge14_wvalid
net:   tb.dut.split14_merge14_wstrb [8] = 00000000     // split14_merge14_wstrb
net:   tb.dut.split14_merge14_wready [1] = 1     // split14_merge14_wready
net:   tb.dut.split14_merge14_wlast [1] = 0     // split14_merge14_wlast
net:   tb.dut.split14_merge14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge14_wdata
net:   tb.dut.split14_merge14_rvalid [1] = 0     // split14_merge14_rvalid
net:   tb.dut.split14_merge14_rresp [2] = 00     // split14_merge14_rresp
net:   tb.dut.split14_merge14_rready [1] = 1     // split14_merge14_rready
net:   tb.dut.split14_merge14_rlast [1] = 0     // split14_merge14_rlast
net:   tb.dut.split14_merge14_rid [4] = 0000     // split14_merge14_rid
net:   tb.dut.split14_merge14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge14_rdata
net:   tb.dut.split14_merge14_bvalid [1] = 0     // split14_merge14_bvalid
net:   tb.dut.split14_merge14_bresp [2] = 00     // split14_merge14_bresp
net:   tb.dut.split14_merge14_bready [1] = 1     // split14_merge14_bready
net:   tb.dut.split14_merge14_bid [4] = 0000     // split14_merge14_bid
net:   tb.dut.split14_merge14_awvalid [1] = 0     // split14_merge14_awvalid
net:   tb.dut.split14_merge14_awready [1] = 1     // split14_merge14_awready
net:   tb.dut.split14_merge14_awlen [8] = 00000000     // split14_merge14_awlen
net:   tb.dut.split14_merge14_awid [4] = 0000     // split14_merge14_awid
net:   tb.dut.split14_merge14_awextras [8] = 00000000     // split14_merge14_awextras
net:   tb.dut.split14_merge14_awburst [2] = 00     // split14_merge14_awburst
net:   tb.dut.split14_merge14_awaddr [32] = 00000000000000000000000000000000     // split14_merge14_awaddr
net:   tb.dut.split14_merge14_arvalid [1] = 0     // split14_merge14_arvalid
net:   tb.dut.split14_merge14_arready [1] = 1     // split14_merge14_arready
net:   tb.dut.split14_merge14_arlen [8] = 00000000     // split14_merge14_arlen
net:   tb.dut.split14_merge14_arid [4] = 0000     // split14_merge14_arid
net:   tb.dut.split14_merge14_arextras [8] = 00000000     // split14_merge14_arextras
net:   tb.dut.split14_merge14_arburst [2] = 00     // split14_merge14_arburst
net:   tb.dut.split14_merge14_araddr [32] = 00000000000000000000000000000000     // split14_merge14_araddr
net:   tb.dut.split14_merge13_wvalid [1] = 0     // split14_merge13_wvalid
net:   tb.dut.split14_merge13_wstrb [8] = 00000000     // split14_merge13_wstrb
net:   tb.dut.split14_merge13_wready [1] = 1     // split14_merge13_wready
net:   tb.dut.split14_merge13_wlast [1] = 0     // split14_merge13_wlast
net:   tb.dut.split14_merge13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge13_wdata
net:   tb.dut.split14_merge13_rvalid [1] = 0     // split14_merge13_rvalid
net:   tb.dut.split14_merge13_rresp [2] = 00     // split14_merge13_rresp
net:   tb.dut.split14_merge13_rready [1] = 1     // split14_merge13_rready
net:   tb.dut.split14_merge13_rlast [1] = 0     // split14_merge13_rlast
net:   tb.dut.split14_merge13_rid [4] = 0000     // split14_merge13_rid
net:   tb.dut.split14_merge13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge13_rdata
net:   tb.dut.split14_merge13_bvalid [1] = 0     // split14_merge13_bvalid
net:   tb.dut.split14_merge13_bresp [2] = 00     // split14_merge13_bresp
net:   tb.dut.split14_merge13_bready [1] = 1     // split14_merge13_bready
net:   tb.dut.split14_merge13_bid [4] = 0000     // split14_merge13_bid
net:   tb.dut.split14_merge13_awvalid [1] = 0     // split14_merge13_awvalid
net:   tb.dut.split14_merge13_awready [1] = 1     // split14_merge13_awready
net:   tb.dut.split14_merge13_awlen [8] = 00000000     // split14_merge13_awlen
net:   tb.dut.split14_merge13_awid [4] = 0000     // split14_merge13_awid
net:   tb.dut.split14_merge13_awextras [8] = 00000000     // split14_merge13_awextras
net:   tb.dut.split14_merge13_awburst [2] = 00     // split14_merge13_awburst
net:   tb.dut.split14_merge13_awaddr [32] = 00000000000000000000000000000000     // split14_merge13_awaddr
net:   tb.dut.split14_merge13_arvalid [1] = 0     // split14_merge13_arvalid
net:   tb.dut.split14_merge13_arready [1] = 1     // split14_merge13_arready
net:   tb.dut.split14_merge13_arlen [8] = 00000000     // split14_merge13_arlen
net:   tb.dut.split14_merge13_arid [4] = 0000     // split14_merge13_arid
net:   tb.dut.split14_merge13_arextras [8] = 00000000     // split14_merge13_arextras
net:   tb.dut.split14_merge13_arburst [2] = 00     // split14_merge13_arburst
net:   tb.dut.split14_merge13_araddr [32] = 00000000000000000000000000000000     // split14_merge13_araddr
net:   tb.dut.split14_merge12_wvalid [1] = 0     // split14_merge12_wvalid
net:   tb.dut.split14_merge12_wstrb [8] = 00000000     // split14_merge12_wstrb
net:   tb.dut.split14_merge12_wready [1] = 1     // split14_merge12_wready
net:   tb.dut.split14_merge12_wlast [1] = 0     // split14_merge12_wlast
net:   tb.dut.split14_merge12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge12_wdata
net:   tb.dut.split14_merge12_rvalid [1] = 0     // split14_merge12_rvalid
net:   tb.dut.split14_merge12_rresp [2] = 00     // split14_merge12_rresp
net:   tb.dut.split14_merge12_rready [1] = 1     // split14_merge12_rready
net:   tb.dut.split14_merge12_rlast [1] = 0     // split14_merge12_rlast
net:   tb.dut.split14_merge12_rid [4] = 0000     // split14_merge12_rid
net:   tb.dut.split14_merge12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split14_merge12_rdata
net:   tb.dut.split14_merge12_bvalid [1] = 0     // split14_merge12_bvalid
net:   tb.dut.split14_merge12_bresp [2] = 00     // split14_merge12_bresp
net:   tb.dut.split14_merge12_bready [1] = 1     // split14_merge12_bready
net:   tb.dut.split14_merge12_bid [4] = 0000     // split14_merge12_bid
net:   tb.dut.split14_merge12_awvalid [1] = 0     // split14_merge12_awvalid
net:   tb.dut.split14_merge12_awready [1] = 1     // split14_merge12_awready
net:   tb.dut.split14_merge12_awlen [8] = 00000000     // split14_merge12_awlen
net:   tb.dut.split14_merge12_awid [4] = 0000     // split14_merge12_awid
net:   tb.dut.split14_merge12_awextras [8] = 00000000     // split14_merge12_awextras
net:   tb.dut.split14_merge12_awburst [2] = 00     // split14_merge12_awburst
net:   tb.dut.split14_merge12_awaddr [32] = 00000000000000000000000000000000     // split14_merge12_awaddr
net:   tb.dut.split14_merge12_arvalid [1] = 0     // split14_merge12_arvalid
net:   tb.dut.split14_merge12_arready [1] = 1     // split14_merge12_arready
net:   tb.dut.split14_merge12_arlen [8] = 00000000     // split14_merge12_arlen
net:   tb.dut.split14_merge12_arid [4] = 0000     // split14_merge12_arid
net:   tb.dut.split14_merge12_arextras [8] = 00000000     // split14_merge12_arextras
net:   tb.dut.split14_merge12_arburst [2] = 00     // split14_merge12_arburst
net:   tb.dut.split14_merge12_araddr [32] = 00000000000000000000000000000000     // split14_merge12_araddr
net:   tb.dut.split13_merge15_wvalid [1] = 0     // split13_merge15_wvalid
net:   tb.dut.split13_merge15_wstrb [8] = 00000000     // split13_merge15_wstrb
net:   tb.dut.split13_merge15_wready [1] = 1     // split13_merge15_wready
net:   tb.dut.split13_merge15_wlast [1] = 0     // split13_merge15_wlast
net:   tb.dut.split13_merge15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge15_wdata
net:   tb.dut.split13_merge15_rvalid [1] = 0     // split13_merge15_rvalid
net:   tb.dut.split13_merge15_rresp [2] = 00     // split13_merge15_rresp
net:   tb.dut.split13_merge15_rready [1] = 1     // split13_merge15_rready
net:   tb.dut.split13_merge15_rlast [1] = 0     // split13_merge15_rlast
net:   tb.dut.split13_merge15_rid [4] = 0000     // split13_merge15_rid
net:   tb.dut.split13_merge15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge15_rdata
net:   tb.dut.split13_merge15_bvalid [1] = 0     // split13_merge15_bvalid
net:   tb.dut.split13_merge15_bresp [2] = 00     // split13_merge15_bresp
net:   tb.dut.split13_merge15_bready [1] = 1     // split13_merge15_bready
net:   tb.dut.split13_merge15_bid [4] = 0000     // split13_merge15_bid
net:   tb.dut.split13_merge15_awvalid [1] = 0     // split13_merge15_awvalid
net:   tb.dut.split13_merge15_awready [1] = 1     // split13_merge15_awready
net:   tb.dut.split13_merge15_awlen [8] = 00000000     // split13_merge15_awlen
net:   tb.dut.split13_merge15_awid [4] = 0000     // split13_merge15_awid
net:   tb.dut.split13_merge15_awextras [8] = 00000000     // split13_merge15_awextras
net:   tb.dut.split13_merge15_awburst [2] = 00     // split13_merge15_awburst
net:   tb.dut.split13_merge15_awaddr [32] = 00000000000000000000000000000000     // split13_merge15_awaddr
net:   tb.dut.split13_merge15_arvalid [1] = 0     // split13_merge15_arvalid
net:   tb.dut.split13_merge15_arready [1] = 1     // split13_merge15_arready
net:   tb.dut.split13_merge15_arlen [8] = 00000000     // split13_merge15_arlen
net:   tb.dut.split13_merge15_arid [4] = 0000     // split13_merge15_arid
net:   tb.dut.split13_merge15_arextras [8] = 00000000     // split13_merge15_arextras
net:   tb.dut.split13_merge15_arburst [2] = 00     // split13_merge15_arburst
net:   tb.dut.split13_merge15_araddr [32] = 00000000000000000000000000000000     // split13_merge15_araddr
net:   tb.dut.split13_merge14_wvalid [1] = 0     // split13_merge14_wvalid
net:   tb.dut.split13_merge14_wstrb [8] = 00000000     // split13_merge14_wstrb
net:   tb.dut.split13_merge14_wready [1] = 1     // split13_merge14_wready
net:   tb.dut.split13_merge14_wlast [1] = 0     // split13_merge14_wlast
net:   tb.dut.split13_merge14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge14_wdata
net:   tb.dut.split13_merge14_rvalid [1] = 0     // split13_merge14_rvalid
net:   tb.dut.split13_merge14_rresp [2] = 00     // split13_merge14_rresp
net:   tb.dut.split13_merge14_rready [1] = 1     // split13_merge14_rready
net:   tb.dut.split13_merge14_rlast [1] = 0     // split13_merge14_rlast
net:   tb.dut.split13_merge14_rid [4] = 0000     // split13_merge14_rid
net:   tb.dut.split13_merge14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge14_rdata
net:   tb.dut.split13_merge14_bvalid [1] = 0     // split13_merge14_bvalid
net:   tb.dut.split13_merge14_bresp [2] = 00     // split13_merge14_bresp
net:   tb.dut.split13_merge14_bready [1] = 1     // split13_merge14_bready
net:   tb.dut.split13_merge14_bid [4] = 0000     // split13_merge14_bid
net:   tb.dut.split13_merge14_awvalid [1] = 0     // split13_merge14_awvalid
net:   tb.dut.split13_merge14_awready [1] = 1     // split13_merge14_awready
net:   tb.dut.split13_merge14_awlen [8] = 00000000     // split13_merge14_awlen
net:   tb.dut.split13_merge14_awid [4] = 0000     // split13_merge14_awid
net:   tb.dut.split13_merge14_awextras [8] = 00000000     // split13_merge14_awextras
net:   tb.dut.split13_merge14_awburst [2] = 00     // split13_merge14_awburst
net:   tb.dut.split13_merge14_awaddr [32] = 00000000000000000000000000000000     // split13_merge14_awaddr
net:   tb.dut.split13_merge14_arvalid [1] = 0     // split13_merge14_arvalid
net:   tb.dut.split13_merge14_arready [1] = 1     // split13_merge14_arready
net:   tb.dut.split13_merge14_arlen [8] = 00000000     // split13_merge14_arlen
net:   tb.dut.split13_merge14_arid [4] = 0000     // split13_merge14_arid
net:   tb.dut.split13_merge14_arextras [8] = 00000000     // split13_merge14_arextras
net:   tb.dut.split13_merge14_arburst [2] = 00     // split13_merge14_arburst
net:   tb.dut.split13_merge14_araddr [32] = 00000000000000000000000000000000     // split13_merge14_araddr
net:   tb.dut.split13_merge13_wvalid [1] = 0     // split13_merge13_wvalid
net:   tb.dut.split13_merge13_wstrb [8] = 00000000     // split13_merge13_wstrb
net:   tb.dut.split13_merge13_wready [1] = 1     // split13_merge13_wready
net:   tb.dut.split13_merge13_wlast [1] = 0     // split13_merge13_wlast
net:   tb.dut.split13_merge13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge13_wdata
net:   tb.dut.split13_merge13_rvalid [1] = 0     // split13_merge13_rvalid
net:   tb.dut.split13_merge13_rresp [2] = 00     // split13_merge13_rresp
net:   tb.dut.split13_merge13_rready [1] = 1     // split13_merge13_rready
net:   tb.dut.split13_merge13_rlast [1] = 0     // split13_merge13_rlast
net:   tb.dut.split13_merge13_rid [4] = 0000     // split13_merge13_rid
net:   tb.dut.split13_merge13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge13_rdata
net:   tb.dut.split13_merge13_bvalid [1] = 0     // split13_merge13_bvalid
net:   tb.dut.split13_merge13_bresp [2] = 00     // split13_merge13_bresp
net:   tb.dut.split13_merge13_bready [1] = 1     // split13_merge13_bready
net:   tb.dut.split13_merge13_bid [4] = 0000     // split13_merge13_bid
net:   tb.dut.split13_merge13_awvalid [1] = 0     // split13_merge13_awvalid
net:   tb.dut.split13_merge13_awready [1] = 1     // split13_merge13_awready
net:   tb.dut.split13_merge13_awlen [8] = 00000000     // split13_merge13_awlen
net:   tb.dut.split13_merge13_awid [4] = 0000     // split13_merge13_awid
net:   tb.dut.split13_merge13_awextras [8] = 00000000     // split13_merge13_awextras
net:   tb.dut.split13_merge13_awburst [2] = 00     // split13_merge13_awburst
net:   tb.dut.split13_merge13_awaddr [32] = 00000000000000000000000000000000     // split13_merge13_awaddr
net:   tb.dut.split13_merge13_arvalid [1] = 0     // split13_merge13_arvalid
net:   tb.dut.split13_merge13_arready [1] = 1     // split13_merge13_arready
net:   tb.dut.split13_merge13_arlen [8] = 00000000     // split13_merge13_arlen
net:   tb.dut.split13_merge13_arid [4] = 0000     // split13_merge13_arid
net:   tb.dut.split13_merge13_arextras [8] = 00000000     // split13_merge13_arextras
net:   tb.dut.split13_merge13_arburst [2] = 00     // split13_merge13_arburst
net:   tb.dut.split13_merge13_araddr [32] = 00000000000000000000000000000000     // split13_merge13_araddr
net:   tb.dut.split13_merge12_wvalid [1] = 0     // split13_merge12_wvalid
net:   tb.dut.split13_merge12_wstrb [8] = 00000000     // split13_merge12_wstrb
net:   tb.dut.split13_merge12_wready [1] = 1     // split13_merge12_wready
net:   tb.dut.split13_merge12_wlast [1] = 0     // split13_merge12_wlast
net:   tb.dut.split13_merge12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge12_wdata
net:   tb.dut.split13_merge12_rvalid [1] = 0     // split13_merge12_rvalid
net:   tb.dut.split13_merge12_rresp [2] = 00     // split13_merge12_rresp
net:   tb.dut.split13_merge12_rready [1] = 1     // split13_merge12_rready
net:   tb.dut.split13_merge12_rlast [1] = 0     // split13_merge12_rlast
net:   tb.dut.split13_merge12_rid [4] = 0000     // split13_merge12_rid
net:   tb.dut.split13_merge12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split13_merge12_rdata
net:   tb.dut.split13_merge12_bvalid [1] = 0     // split13_merge12_bvalid
net:   tb.dut.split13_merge12_bresp [2] = 00     // split13_merge12_bresp
net:   tb.dut.split13_merge12_bready [1] = 1     // split13_merge12_bready
net:   tb.dut.split13_merge12_bid [4] = 0000     // split13_merge12_bid
net:   tb.dut.split13_merge12_awvalid [1] = 0     // split13_merge12_awvalid
net:   tb.dut.split13_merge12_awready [1] = 1     // split13_merge12_awready
net:   tb.dut.split13_merge12_awlen [8] = 00000000     // split13_merge12_awlen
net:   tb.dut.split13_merge12_awid [4] = 0000     // split13_merge12_awid
net:   tb.dut.split13_merge12_awextras [8] = 00000000     // split13_merge12_awextras
net:   tb.dut.split13_merge12_awburst [2] = 00     // split13_merge12_awburst
net:   tb.dut.split13_merge12_awaddr [32] = 00000000000000000000000000000000     // split13_merge12_awaddr
net:   tb.dut.split13_merge12_arvalid [1] = 0     // split13_merge12_arvalid
net:   tb.dut.split13_merge12_arready [1] = 1     // split13_merge12_arready
net:   tb.dut.split13_merge12_arlen [8] = 00000000     // split13_merge12_arlen
net:   tb.dut.split13_merge12_arid [4] = 0000     // split13_merge12_arid
net:   tb.dut.split13_merge12_arextras [8] = 00000000     // split13_merge12_arextras
net:   tb.dut.split13_merge12_arburst [2] = 00     // split13_merge12_arburst
net:   tb.dut.split13_merge12_araddr [32] = 00000000000000000000000000000000     // split13_merge12_araddr
net:   tb.dut.split12_merge15_wvalid [1] = 0     // split12_merge15_wvalid
net:   tb.dut.split12_merge15_wstrb [8] = 00000000     // split12_merge15_wstrb
net:   tb.dut.split12_merge15_wready [1] = 1     // split12_merge15_wready
net:   tb.dut.split12_merge15_wlast [1] = 0     // split12_merge15_wlast
net:   tb.dut.split12_merge15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge15_wdata
net:   tb.dut.split12_merge15_rvalid [1] = 0     // split12_merge15_rvalid
net:   tb.dut.split12_merge15_rresp [2] = 00     // split12_merge15_rresp
net:   tb.dut.split12_merge15_rready [1] = 1     // split12_merge15_rready
net:   tb.dut.split12_merge15_rlast [1] = 0     // split12_merge15_rlast
net:   tb.dut.split12_merge15_rid [4] = 0000     // split12_merge15_rid
net:   tb.dut.split12_merge15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge15_rdata
net:   tb.dut.split12_merge15_bvalid [1] = 0     // split12_merge15_bvalid
net:   tb.dut.split12_merge15_bresp [2] = 00     // split12_merge15_bresp
net:   tb.dut.split12_merge15_bready [1] = 1     // split12_merge15_bready
net:   tb.dut.split12_merge15_bid [4] = 0000     // split12_merge15_bid
net:   tb.dut.split12_merge15_awvalid [1] = 0     // split12_merge15_awvalid
net:   tb.dut.split12_merge15_awready [1] = 1     // split12_merge15_awready
net:   tb.dut.split12_merge15_awlen [8] = 00000000     // split12_merge15_awlen
net:   tb.dut.split12_merge15_awid [4] = 0000     // split12_merge15_awid
net:   tb.dut.split12_merge15_awextras [8] = 00000000     // split12_merge15_awextras
net:   tb.dut.split12_merge15_awburst [2] = 00     // split12_merge15_awburst
net:   tb.dut.split12_merge15_awaddr [32] = 00000000000000000000000000000000     // split12_merge15_awaddr
net:   tb.dut.split12_merge15_arvalid [1] = 0     // split12_merge15_arvalid
net:   tb.dut.split12_merge15_arready [1] = 1     // split12_merge15_arready
net:   tb.dut.split12_merge15_arlen [8] = 00000000     // split12_merge15_arlen
net:   tb.dut.split12_merge15_arid [4] = 0000     // split12_merge15_arid
net:   tb.dut.split12_merge15_arextras [8] = 00000000     // split12_merge15_arextras
net:   tb.dut.split12_merge15_arburst [2] = 00     // split12_merge15_arburst
net:   tb.dut.split12_merge15_araddr [32] = 00000000000000000000000000000000     // split12_merge15_araddr
net:   tb.dut.split12_merge14_wvalid [1] = 0     // split12_merge14_wvalid
net:   tb.dut.split12_merge14_wstrb [8] = 00000000     // split12_merge14_wstrb
net:   tb.dut.split12_merge14_wready [1] = 1     // split12_merge14_wready
net:   tb.dut.split12_merge14_wlast [1] = 0     // split12_merge14_wlast
net:   tb.dut.split12_merge14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge14_wdata
net:   tb.dut.split12_merge14_rvalid [1] = 0     // split12_merge14_rvalid
net:   tb.dut.split12_merge14_rresp [2] = 00     // split12_merge14_rresp
net:   tb.dut.split12_merge14_rready [1] = 1     // split12_merge14_rready
net:   tb.dut.split12_merge14_rlast [1] = 0     // split12_merge14_rlast
net:   tb.dut.split12_merge14_rid [4] = 0000     // split12_merge14_rid
net:   tb.dut.split12_merge14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge14_rdata
net:   tb.dut.split12_merge14_bvalid [1] = 0     // split12_merge14_bvalid
net:   tb.dut.split12_merge14_bresp [2] = 00     // split12_merge14_bresp
net:   tb.dut.split12_merge14_bready [1] = 1     // split12_merge14_bready
net:   tb.dut.split12_merge14_bid [4] = 0000     // split12_merge14_bid
net:   tb.dut.split12_merge14_awvalid [1] = 0     // split12_merge14_awvalid
net:   tb.dut.split12_merge14_awready [1] = 1     // split12_merge14_awready
net:   tb.dut.split12_merge14_awlen [8] = 00000000     // split12_merge14_awlen
net:   tb.dut.split12_merge14_awid [4] = 0000     // split12_merge14_awid
net:   tb.dut.split12_merge14_awextras [8] = 00000000     // split12_merge14_awextras
net:   tb.dut.split12_merge14_awburst [2] = 00     // split12_merge14_awburst
net:   tb.dut.split12_merge14_awaddr [32] = 00000000000000000000000000000000     // split12_merge14_awaddr
net:   tb.dut.split12_merge14_arvalid [1] = 0     // split12_merge14_arvalid
net:   tb.dut.split12_merge14_arready [1] = 1     // split12_merge14_arready
net:   tb.dut.split12_merge14_arlen [8] = 00000000     // split12_merge14_arlen
net:   tb.dut.split12_merge14_arid [4] = 0000     // split12_merge14_arid
net:   tb.dut.split12_merge14_arextras [8] = 00000000     // split12_merge14_arextras
net:   tb.dut.split12_merge14_arburst [2] = 00     // split12_merge14_arburst
net:   tb.dut.split12_merge14_araddr [32] = 00000000000000000000000000000000     // split12_merge14_araddr
net:   tb.dut.split12_merge13_wvalid [1] = 0     // split12_merge13_wvalid
net:   tb.dut.split12_merge13_wstrb [8] = 00000000     // split12_merge13_wstrb
net:   tb.dut.split12_merge13_wready [1] = 1     // split12_merge13_wready
net:   tb.dut.split12_merge13_wlast [1] = 0     // split12_merge13_wlast
net:   tb.dut.split12_merge13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge13_wdata
net:   tb.dut.split12_merge13_rvalid [1] = 0     // split12_merge13_rvalid
net:   tb.dut.split12_merge13_rresp [2] = 00     // split12_merge13_rresp
net:   tb.dut.split12_merge13_rready [1] = 1     // split12_merge13_rready
net:   tb.dut.split12_merge13_rlast [1] = 0     // split12_merge13_rlast
net:   tb.dut.split12_merge13_rid [4] = 0000     // split12_merge13_rid
net:   tb.dut.split12_merge13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge13_rdata
net:   tb.dut.split12_merge13_bvalid [1] = 0     // split12_merge13_bvalid
net:   tb.dut.split12_merge13_bresp [2] = 00     // split12_merge13_bresp
net:   tb.dut.split12_merge13_bready [1] = 1     // split12_merge13_bready
net:   tb.dut.split12_merge13_bid [4] = 0000     // split12_merge13_bid
net:   tb.dut.split12_merge13_awvalid [1] = 0     // split12_merge13_awvalid
net:   tb.dut.split12_merge13_awready [1] = 1     // split12_merge13_awready
net:   tb.dut.split12_merge13_awlen [8] = 00000000     // split12_merge13_awlen
net:   tb.dut.split12_merge13_awid [4] = 0000     // split12_merge13_awid
net:   tb.dut.split12_merge13_awextras [8] = 00000000     // split12_merge13_awextras
net:   tb.dut.split12_merge13_awburst [2] = 00     // split12_merge13_awburst
net:   tb.dut.split12_merge13_awaddr [32] = 00000000000000000000000000000000     // split12_merge13_awaddr
net:   tb.dut.split12_merge13_arvalid [1] = 0     // split12_merge13_arvalid
net:   tb.dut.split12_merge13_arready [1] = 1     // split12_merge13_arready
net:   tb.dut.split12_merge13_arlen [8] = 00000000     // split12_merge13_arlen
net:   tb.dut.split12_merge13_arid [4] = 0000     // split12_merge13_arid
net:   tb.dut.split12_merge13_arextras [8] = 00000000     // split12_merge13_arextras
net:   tb.dut.split12_merge13_arburst [2] = 00     // split12_merge13_arburst
net:   tb.dut.split12_merge13_araddr [32] = 00000000000000000000000000000000     // split12_merge13_araddr
net:   tb.dut.split12_merge12_wvalid [1] = 0     // split12_merge12_wvalid
net:   tb.dut.split12_merge12_wstrb [8] = 00000000     // split12_merge12_wstrb
net:   tb.dut.split12_merge12_wready [1] = 1     // split12_merge12_wready
net:   tb.dut.split12_merge12_wlast [1] = 0     // split12_merge12_wlast
net:   tb.dut.split12_merge12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge12_wdata
net:   tb.dut.split12_merge12_rvalid [1] = 0     // split12_merge12_rvalid
net:   tb.dut.split12_merge12_rresp [2] = 00     // split12_merge12_rresp
net:   tb.dut.split12_merge12_rready [1] = 1     // split12_merge12_rready
net:   tb.dut.split12_merge12_rlast [1] = 0     // split12_merge12_rlast
net:   tb.dut.split12_merge12_rid [4] = 0000     // split12_merge12_rid
net:   tb.dut.split12_merge12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split12_merge12_rdata
net:   tb.dut.split12_merge12_bvalid [1] = 0     // split12_merge12_bvalid
net:   tb.dut.split12_merge12_bresp [2] = 00     // split12_merge12_bresp
net:   tb.dut.split12_merge12_bready [1] = 1     // split12_merge12_bready
net:   tb.dut.split12_merge12_bid [4] = 0000     // split12_merge12_bid
net:   tb.dut.split12_merge12_awvalid [1] = 0     // split12_merge12_awvalid
net:   tb.dut.split12_merge12_awready [1] = 1     // split12_merge12_awready
net:   tb.dut.split12_merge12_awlen [8] = 00000000     // split12_merge12_awlen
net:   tb.dut.split12_merge12_awid [4] = 0000     // split12_merge12_awid
net:   tb.dut.split12_merge12_awextras [8] = 00000000     // split12_merge12_awextras
net:   tb.dut.split12_merge12_awburst [2] = 00     // split12_merge12_awburst
net:   tb.dut.split12_merge12_awaddr [32] = 00000000000000000000000000000000     // split12_merge12_awaddr
net:   tb.dut.split12_merge12_arvalid [1] = 0     // split12_merge12_arvalid
net:   tb.dut.split12_merge12_arready [1] = 1     // split12_merge12_arready
net:   tb.dut.split12_merge12_arlen [8] = 00000000     // split12_merge12_arlen
net:   tb.dut.split12_merge12_arid [4] = 0000     // split12_merge12_arid
net:   tb.dut.split12_merge12_arextras [8] = 00000000     // split12_merge12_arextras
net:   tb.dut.split12_merge12_arburst [2] = 00     // split12_merge12_arburst
net:   tb.dut.split12_merge12_araddr [32] = 00000000000000000000000000000000     // split12_merge12_araddr
net:   tb.dut.split11_merge9_wvalid [1] = 0     // split11_merge9_wvalid
net:   tb.dut.split11_merge9_wstrb [8] = 00000000     // split11_merge9_wstrb
net:   tb.dut.split11_merge9_wready [1] = 1     // split11_merge9_wready
net:   tb.dut.split11_merge9_wlast [1] = 0     // split11_merge9_wlast
net:   tb.dut.split11_merge9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge9_wdata
net:   tb.dut.split11_merge9_rvalid [1] = 0     // split11_merge9_rvalid
net:   tb.dut.split11_merge9_rresp [2] = 00     // split11_merge9_rresp
net:   tb.dut.split11_merge9_rready [1] = 1     // split11_merge9_rready
net:   tb.dut.split11_merge9_rlast [1] = 0     // split11_merge9_rlast
net:   tb.dut.split11_merge9_rid [4] = 0000     // split11_merge9_rid
net:   tb.dut.split11_merge9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge9_rdata
net:   tb.dut.split11_merge9_bvalid [1] = 0     // split11_merge9_bvalid
net:   tb.dut.split11_merge9_bresp [2] = 00     // split11_merge9_bresp
net:   tb.dut.split11_merge9_bready [1] = 1     // split11_merge9_bready
net:   tb.dut.split11_merge9_bid [4] = 0000     // split11_merge9_bid
net:   tb.dut.split11_merge9_awvalid [1] = 0     // split11_merge9_awvalid
net:   tb.dut.split11_merge9_awready [1] = 1     // split11_merge9_awready
net:   tb.dut.split11_merge9_awlen [8] = 00000000     // split11_merge9_awlen
net:   tb.dut.split11_merge9_awid [4] = 0000     // split11_merge9_awid
net:   tb.dut.split11_merge9_awextras [8] = 00000000     // split11_merge9_awextras
net:   tb.dut.split11_merge9_awburst [2] = 00     // split11_merge9_awburst
net:   tb.dut.split11_merge9_awaddr [32] = 00000000000000000000000000000000     // split11_merge9_awaddr
net:   tb.dut.split11_merge9_arvalid [1] = 0     // split11_merge9_arvalid
net:   tb.dut.split11_merge9_arready [1] = 1     // split11_merge9_arready
net:   tb.dut.split11_merge9_arlen [8] = 00000000     // split11_merge9_arlen
net:   tb.dut.split11_merge9_arid [4] = 0000     // split11_merge9_arid
net:   tb.dut.split11_merge9_arextras [8] = 00000000     // split11_merge9_arextras
net:   tb.dut.split11_merge9_arburst [2] = 00     // split11_merge9_arburst
net:   tb.dut.split11_merge9_araddr [32] = 00000000000000000000000000000000     // split11_merge9_araddr
net:   tb.dut.split11_merge8_wvalid [1] = 0     // split11_merge8_wvalid
net:   tb.dut.split11_merge8_wstrb [8] = 00000000     // split11_merge8_wstrb
net:   tb.dut.split11_merge8_wready [1] = 1     // split11_merge8_wready
net:   tb.dut.split11_merge8_wlast [1] = 0     // split11_merge8_wlast
net:   tb.dut.split11_merge8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge8_wdata
net:   tb.dut.split11_merge8_rvalid [1] = 0     // split11_merge8_rvalid
net:   tb.dut.split11_merge8_rresp [2] = 00     // split11_merge8_rresp
net:   tb.dut.split11_merge8_rready [1] = 1     // split11_merge8_rready
net:   tb.dut.split11_merge8_rlast [1] = 0     // split11_merge8_rlast
net:   tb.dut.split11_merge8_rid [4] = 0000     // split11_merge8_rid
net:   tb.dut.split11_merge8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge8_rdata
net:   tb.dut.split11_merge8_bvalid [1] = 0     // split11_merge8_bvalid
net:   tb.dut.split11_merge8_bresp [2] = 00     // split11_merge8_bresp
net:   tb.dut.split11_merge8_bready [1] = 1     // split11_merge8_bready
net:   tb.dut.split11_merge8_bid [4] = 0000     // split11_merge8_bid
net:   tb.dut.split11_merge8_awvalid [1] = 0     // split11_merge8_awvalid
net:   tb.dut.split11_merge8_awready [1] = 1     // split11_merge8_awready
net:   tb.dut.split11_merge8_awlen [8] = 00000000     // split11_merge8_awlen
net:   tb.dut.split11_merge8_awid [4] = 0000     // split11_merge8_awid
net:   tb.dut.split11_merge8_awextras [8] = 00000000     // split11_merge8_awextras
net:   tb.dut.split11_merge8_awburst [2] = 00     // split11_merge8_awburst
net:   tb.dut.split11_merge8_awaddr [32] = 00000000000000000000000000000000     // split11_merge8_awaddr
net:   tb.dut.split11_merge8_arvalid [1] = 0     // split11_merge8_arvalid
net:   tb.dut.split11_merge8_arready [1] = 1     // split11_merge8_arready
net:   tb.dut.split11_merge8_arlen [8] = 00000000     // split11_merge8_arlen
net:   tb.dut.split11_merge8_arid [4] = 0000     // split11_merge8_arid
net:   tb.dut.split11_merge8_arextras [8] = 00000000     // split11_merge8_arextras
net:   tb.dut.split11_merge8_arburst [2] = 00     // split11_merge8_arburst
net:   tb.dut.split11_merge8_araddr [32] = 00000000000000000000000000000000     // split11_merge8_araddr
net:   tb.dut.split11_merge11_wvalid [1] = 0     // split11_merge11_wvalid
net:   tb.dut.split11_merge11_wstrb [8] = 00000000     // split11_merge11_wstrb
net:   tb.dut.split11_merge11_wready [1] = 1     // split11_merge11_wready
net:   tb.dut.split11_merge11_wlast [1] = 0     // split11_merge11_wlast
net:   tb.dut.split11_merge11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge11_wdata
net:   tb.dut.split11_merge11_rvalid [1] = 0     // split11_merge11_rvalid
net:   tb.dut.split11_merge11_rresp [2] = 00     // split11_merge11_rresp
net:   tb.dut.split11_merge11_rready [1] = 1     // split11_merge11_rready
net:   tb.dut.split11_merge11_rlast [1] = 0     // split11_merge11_rlast
net:   tb.dut.split11_merge11_rid [4] = 0000     // split11_merge11_rid
net:   tb.dut.split11_merge11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge11_rdata
net:   tb.dut.split11_merge11_bvalid [1] = 0     // split11_merge11_bvalid
net:   tb.dut.split11_merge11_bresp [2] = 00     // split11_merge11_bresp
net:   tb.dut.split11_merge11_bready [1] = 1     // split11_merge11_bready
net:   tb.dut.split11_merge11_bid [4] = 0000     // split11_merge11_bid
net:   tb.dut.split11_merge11_awvalid [1] = 0     // split11_merge11_awvalid
net:   tb.dut.split11_merge11_awready [1] = 1     // split11_merge11_awready
net:   tb.dut.split11_merge11_awlen [8] = 00000000     // split11_merge11_awlen
net:   tb.dut.split11_merge11_awid [4] = 0000     // split11_merge11_awid
net:   tb.dut.split11_merge11_awextras [8] = 00000000     // split11_merge11_awextras
net:   tb.dut.split11_merge11_awburst [2] = 00     // split11_merge11_awburst
net:   tb.dut.split11_merge11_awaddr [32] = 00000000000000000000000000000000     // split11_merge11_awaddr
net:   tb.dut.split11_merge11_arvalid [1] = 0     // split11_merge11_arvalid
net:   tb.dut.split11_merge11_arready [1] = 1     // split11_merge11_arready
net:   tb.dut.split11_merge11_arlen [8] = 00000000     // split11_merge11_arlen
net:   tb.dut.split11_merge11_arid [4] = 0000     // split11_merge11_arid
net:   tb.dut.split11_merge11_arextras [8] = 00000000     // split11_merge11_arextras
net:   tb.dut.split11_merge11_arburst [2] = 00     // split11_merge11_arburst
net:   tb.dut.split11_merge11_araddr [32] = 00000000000000000000000000000000     // split11_merge11_araddr
net:   tb.dut.split11_merge10_wvalid [1] = 0     // split11_merge10_wvalid
net:   tb.dut.split11_merge10_wstrb [8] = 00000000     // split11_merge10_wstrb
net:   tb.dut.split11_merge10_wready [1] = 1     // split11_merge10_wready
net:   tb.dut.split11_merge10_wlast [1] = 0     // split11_merge10_wlast
net:   tb.dut.split11_merge10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge10_wdata
net:   tb.dut.split11_merge10_rvalid [1] = 0     // split11_merge10_rvalid
net:   tb.dut.split11_merge10_rresp [2] = 00     // split11_merge10_rresp
net:   tb.dut.split11_merge10_rready [1] = 1     // split11_merge10_rready
net:   tb.dut.split11_merge10_rlast [1] = 0     // split11_merge10_rlast
net:   tb.dut.split11_merge10_rid [4] = 0000     // split11_merge10_rid
net:   tb.dut.split11_merge10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split11_merge10_rdata
net:   tb.dut.split11_merge10_bvalid [1] = 0     // split11_merge10_bvalid
net:   tb.dut.split11_merge10_bresp [2] = 00     // split11_merge10_bresp
net:   tb.dut.split11_merge10_bready [1] = 1     // split11_merge10_bready
net:   tb.dut.split11_merge10_bid [4] = 0000     // split11_merge10_bid
net:   tb.dut.split11_merge10_awvalid [1] = 0     // split11_merge10_awvalid
net:   tb.dut.split11_merge10_awready [1] = 1     // split11_merge10_awready
net:   tb.dut.split11_merge10_awlen [8] = 00000000     // split11_merge10_awlen
net:   tb.dut.split11_merge10_awid [4] = 0000     // split11_merge10_awid
net:   tb.dut.split11_merge10_awextras [8] = 00000000     // split11_merge10_awextras
net:   tb.dut.split11_merge10_awburst [2] = 00     // split11_merge10_awburst
net:   tb.dut.split11_merge10_awaddr [32] = 00000000000000000000000000000000     // split11_merge10_awaddr
net:   tb.dut.split11_merge10_arvalid [1] = 0     // split11_merge10_arvalid
net:   tb.dut.split11_merge10_arready [1] = 1     // split11_merge10_arready
net:   tb.dut.split11_merge10_arlen [8] = 00000000     // split11_merge10_arlen
net:   tb.dut.split11_merge10_arid [4] = 0000     // split11_merge10_arid
net:   tb.dut.split11_merge10_arextras [8] = 00000000     // split11_merge10_arextras
net:   tb.dut.split11_merge10_arburst [2] = 00     // split11_merge10_arburst
net:   tb.dut.split11_merge10_araddr [32] = 00000000000000000000000000000000     // split11_merge10_araddr
net:   tb.dut.split115_merge214_wvalid [1] = 0     // split115_merge214_wvalid
net:   tb.dut.split115_merge214_wstrb [8] = 00000000     // split115_merge214_wstrb
net:   tb.dut.split115_merge214_wready [1] = 1     // split115_merge214_wready
net:   tb.dut.split115_merge214_wlast [1] = 0     // split115_merge214_wlast
net:   tb.dut.split115_merge214_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge214_wdata
net:   tb.dut.split115_merge214_rvalid [1] = 0     // split115_merge214_rvalid
net:   tb.dut.split115_merge214_rresp [2] = 00     // split115_merge214_rresp
net:   tb.dut.split115_merge214_rready [1] = 1     // split115_merge214_rready
net:   tb.dut.split115_merge214_rlast [1] = 0     // split115_merge214_rlast
net:   tb.dut.split115_merge214_rid [4] = 0000     // split115_merge214_rid
net:   tb.dut.split115_merge214_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge214_rdata
net:   tb.dut.split115_merge214_bvalid [1] = 0     // split115_merge214_bvalid
net:   tb.dut.split115_merge214_bresp [2] = xx     // split115_merge214_bresp
net:   tb.dut.split115_merge214_bready [1] = 1     // split115_merge214_bready
net:   tb.dut.split115_merge214_bid [4] = 0000     // split115_merge214_bid
net:   tb.dut.split115_merge214_awvalid [1] = 0     // split115_merge214_awvalid
net:   tb.dut.split115_merge214_awready [1] = 1     // split115_merge214_awready
net:   tb.dut.split115_merge214_awlen [8] = 00000000     // split115_merge214_awlen
net:   tb.dut.split115_merge214_awid [4] = 0000     // split115_merge214_awid
net:   tb.dut.split115_merge214_awextras [8] = 00000000     // split115_merge214_awextras
net:   tb.dut.split115_merge214_awburst [2] = 00     // split115_merge214_awburst
net:   tb.dut.split115_merge214_awaddr [32] = 00000000000000000000000000000000     // split115_merge214_awaddr
net:   tb.dut.split115_merge214_arvalid [1] = 0     // split115_merge214_arvalid
net:   tb.dut.split115_merge214_arready [1] = 1     // split115_merge214_arready
net:   tb.dut.split115_merge214_arlen [8] = 00000000     // split115_merge214_arlen
net:   tb.dut.split115_merge214_arid [4] = 0000     // split115_merge214_arid
net:   tb.dut.split115_merge214_arextras [8] = 00000000     // split115_merge214_arextras
net:   tb.dut.split115_merge214_arburst [2] = 00     // split115_merge214_arburst
net:   tb.dut.split115_merge214_araddr [32] = 00000000000000000000000000000000     // split115_merge214_araddr
net:   tb.dut.split115_merge210_wvalid [1] = 0     // split115_merge210_wvalid
net:   tb.dut.split115_merge210_wstrb [8] = 00000000     // split115_merge210_wstrb
net:   tb.dut.split115_merge210_wready [1] = 1     // split115_merge210_wready
net:   tb.dut.split115_merge210_wlast [1] = 0     // split115_merge210_wlast
net:   tb.dut.split115_merge210_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge210_wdata
net:   tb.dut.split115_merge210_rvalid [1] = 0     // split115_merge210_rvalid
net:   tb.dut.split115_merge210_rresp [2] = 00     // split115_merge210_rresp
net:   tb.dut.split115_merge210_rready [1] = 1     // split115_merge210_rready
net:   tb.dut.split115_merge210_rlast [1] = 0     // split115_merge210_rlast
net:   tb.dut.split115_merge210_rid [4] = 0000     // split115_merge210_rid
net:   tb.dut.split115_merge210_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge210_rdata
net:   tb.dut.split115_merge210_bvalid [1] = 0     // split115_merge210_bvalid
net:   tb.dut.split115_merge210_bresp [2] = xx     // split115_merge210_bresp
net:   tb.dut.split115_merge210_bready [1] = 1     // split115_merge210_bready
net:   tb.dut.split115_merge210_bid [4] = 0000     // split115_merge210_bid
net:   tb.dut.split115_merge210_awvalid [1] = 0     // split115_merge210_awvalid
net:   tb.dut.split115_merge210_awready [1] = 1     // split115_merge210_awready
net:   tb.dut.split115_merge210_awlen [8] = 00000000     // split115_merge210_awlen
net:   tb.dut.split115_merge210_awid [4] = 0000     // split115_merge210_awid
net:   tb.dut.split115_merge210_awextras [8] = 00000000     // split115_merge210_awextras
net:   tb.dut.split115_merge210_awburst [2] = 00     // split115_merge210_awburst
net:   tb.dut.split115_merge210_awaddr [32] = 00000000000000000000000000000000     // split115_merge210_awaddr
net:   tb.dut.split115_merge210_arvalid [1] = 0     // split115_merge210_arvalid
net:   tb.dut.split115_merge210_arready [1] = 1     // split115_merge210_arready
net:   tb.dut.split115_merge210_arlen [8] = 00000000     // split115_merge210_arlen
net:   tb.dut.split115_merge210_arid [4] = 0000     // split115_merge210_arid
net:   tb.dut.split115_merge210_arextras [8] = 00000000     // split115_merge210_arextras
net:   tb.dut.split115_merge210_arburst [2] = 00     // split115_merge210_arburst
net:   tb.dut.split115_merge210_araddr [32] = 00000000000000000000000000000000     // split115_merge210_araddr
net:   tb.dut.split115_merge208_wvalid [1] = 0     // split115_merge208_wvalid
net:   tb.dut.split115_merge208_wstrb [8] = 00000000     // split115_merge208_wstrb
net:   tb.dut.split115_merge208_wready [1] = 1     // split115_merge208_wready
net:   tb.dut.split115_merge208_wlast [1] = 0     // split115_merge208_wlast
net:   tb.dut.split115_merge208_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge208_wdata
net:   tb.dut.split115_merge208_rvalid [1] = 0     // split115_merge208_rvalid
net:   tb.dut.split115_merge208_rresp [2] = 00     // split115_merge208_rresp
net:   tb.dut.split115_merge208_rready [1] = 1     // split115_merge208_rready
net:   tb.dut.split115_merge208_rlast [1] = 0     // split115_merge208_rlast
net:   tb.dut.split115_merge208_rid [4] = 0000     // split115_merge208_rid
net:   tb.dut.split115_merge208_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge208_rdata
net:   tb.dut.split115_merge208_bvalid [1] = 0     // split115_merge208_bvalid
net:   tb.dut.split115_merge208_bresp [2] = xx     // split115_merge208_bresp
net:   tb.dut.split115_merge208_bready [1] = 1     // split115_merge208_bready
net:   tb.dut.split115_merge208_bid [4] = 0000     // split115_merge208_bid
net:   tb.dut.split115_merge208_awvalid [1] = 0     // split115_merge208_awvalid
net:   tb.dut.split115_merge208_awready [1] = 1     // split115_merge208_awready
net:   tb.dut.split115_merge208_awlen [8] = 00000000     // split115_merge208_awlen
net:   tb.dut.split115_merge208_awid [4] = 0000     // split115_merge208_awid
net:   tb.dut.split115_merge208_awextras [8] = 00000000     // split115_merge208_awextras
net:   tb.dut.split115_merge208_awburst [2] = 00     // split115_merge208_awburst
net:   tb.dut.split115_merge208_awaddr [32] = 00000000000000000000000000000000     // split115_merge208_awaddr
net:   tb.dut.split115_merge208_arvalid [1] = 0     // split115_merge208_arvalid
net:   tb.dut.split115_merge208_arready [1] = 1     // split115_merge208_arready
net:   tb.dut.split115_merge208_arlen [8] = 00000000     // split115_merge208_arlen
net:   tb.dut.split115_merge208_arid [4] = 0000     // split115_merge208_arid
net:   tb.dut.split115_merge208_arextras [8] = 00000000     // split115_merge208_arextras
net:   tb.dut.split115_merge208_arburst [2] = 00     // split115_merge208_arburst
net:   tb.dut.split115_merge208_araddr [32] = 00000000000000000000000000000000     // split115_merge208_araddr
net:   tb.dut.split115_merge207_wvalid [1] = 0     // split115_merge207_wvalid
net:   tb.dut.split115_merge207_wstrb [8] = 00000000     // split115_merge207_wstrb
net:   tb.dut.split115_merge207_wready [1] = 1     // split115_merge207_wready
net:   tb.dut.split115_merge207_wlast [1] = 0     // split115_merge207_wlast
net:   tb.dut.split115_merge207_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge207_wdata
net:   tb.dut.split115_merge207_rvalid [1] = 0     // split115_merge207_rvalid
net:   tb.dut.split115_merge207_rresp [2] = 00     // split115_merge207_rresp
net:   tb.dut.split115_merge207_rready [1] = 1     // split115_merge207_rready
net:   tb.dut.split115_merge207_rlast [1] = 0     // split115_merge207_rlast
net:   tb.dut.split115_merge207_rid [4] = 0000     // split115_merge207_rid
net:   tb.dut.split115_merge207_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split115_merge207_rdata
net:   tb.dut.split115_merge207_bvalid [1] = 0     // split115_merge207_bvalid
net:   tb.dut.split115_merge207_bresp [2] = xx     // split115_merge207_bresp
net:   tb.dut.split115_merge207_bready [1] = 1     // split115_merge207_bready
net:   tb.dut.split115_merge207_bid [4] = 0000     // split115_merge207_bid
net:   tb.dut.split115_merge207_awvalid [1] = 0     // split115_merge207_awvalid
net:   tb.dut.split115_merge207_awready [1] = 1     // split115_merge207_awready
net:   tb.dut.split115_merge207_awlen [8] = 00000000     // split115_merge207_awlen
net:   tb.dut.split115_merge207_awid [4] = 0000     // split115_merge207_awid
net:   tb.dut.split115_merge207_awextras [8] = 00000000     // split115_merge207_awextras
net:   tb.dut.split115_merge207_awburst [2] = 00     // split115_merge207_awburst
net:   tb.dut.split115_merge207_awaddr [32] = 00000000000000000000000000000000     // split115_merge207_awaddr
net:   tb.dut.split115_merge207_arvalid [1] = 0     // split115_merge207_arvalid
net:   tb.dut.split115_merge207_arready [1] = 1     // split115_merge207_arready
net:   tb.dut.split115_merge207_arlen [8] = 00000000     // split115_merge207_arlen
net:   tb.dut.split115_merge207_arid [4] = 0000     // split115_merge207_arid
net:   tb.dut.split115_merge207_arextras [8] = 00000000     // split115_merge207_arextras
net:   tb.dut.split115_merge207_arburst [2] = 00     // split115_merge207_arburst
net:   tb.dut.split115_merge207_araddr [32] = 00000000000000000000000000000000     // split115_merge207_araddr
net:   tb.dut.split114_merge215_wvalid [1] = 0     // split114_merge215_wvalid
net:   tb.dut.split114_merge215_wstrb [8] = 00000000     // split114_merge215_wstrb
net:   tb.dut.split114_merge215_wready [1] = 1     // split114_merge215_wready
net:   tb.dut.split114_merge215_wlast [1] = 0     // split114_merge215_wlast
net:   tb.dut.split114_merge215_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge215_wdata
net:   tb.dut.split114_merge215_rvalid [1] = 0     // split114_merge215_rvalid
net:   tb.dut.split114_merge215_rresp [2] = 00     // split114_merge215_rresp
net:   tb.dut.split114_merge215_rready [1] = 1     // split114_merge215_rready
net:   tb.dut.split114_merge215_rlast [1] = 0     // split114_merge215_rlast
net:   tb.dut.split114_merge215_rid [4] = 0000     // split114_merge215_rid
net:   tb.dut.split114_merge215_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge215_rdata
net:   tb.dut.split114_merge215_bvalid [1] = 0     // split114_merge215_bvalid
net:   tb.dut.split114_merge215_bresp [2] = xx     // split114_merge215_bresp
net:   tb.dut.split114_merge215_bready [1] = 1     // split114_merge215_bready
net:   tb.dut.split114_merge215_bid [4] = 0000     // split114_merge215_bid
net:   tb.dut.split114_merge215_awvalid [1] = 0     // split114_merge215_awvalid
net:   tb.dut.split114_merge215_awready [1] = 1     // split114_merge215_awready
net:   tb.dut.split114_merge215_awlen [8] = 00000000     // split114_merge215_awlen
net:   tb.dut.split114_merge215_awid [4] = 0000     // split114_merge215_awid
net:   tb.dut.split114_merge215_awextras [8] = 00000000     // split114_merge215_awextras
net:   tb.dut.split114_merge215_awburst [2] = 00     // split114_merge215_awburst
net:   tb.dut.split114_merge215_awaddr [32] = 00000000000000000000000000000000     // split114_merge215_awaddr
net:   tb.dut.split114_merge215_arvalid [1] = 0     // split114_merge215_arvalid
net:   tb.dut.split114_merge215_arready [1] = 1     // split114_merge215_arready
net:   tb.dut.split114_merge215_arlen [8] = 00000000     // split114_merge215_arlen
net:   tb.dut.split114_merge215_arid [4] = 0000     // split114_merge215_arid
net:   tb.dut.split114_merge215_arextras [8] = 00000000     // split114_merge215_arextras
net:   tb.dut.split114_merge215_arburst [2] = 00     // split114_merge215_arburst
net:   tb.dut.split114_merge215_araddr [32] = 00000000000000000000000000000000     // split114_merge215_araddr
net:   tb.dut.split114_merge210_wvalid [1] = 0     // split114_merge210_wvalid
net:   tb.dut.split114_merge210_wstrb [8] = 00000000     // split114_merge210_wstrb
net:   tb.dut.split114_merge210_wready [1] = 1     // split114_merge210_wready
net:   tb.dut.split114_merge210_wlast [1] = 0     // split114_merge210_wlast
net:   tb.dut.split114_merge210_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge210_wdata
net:   tb.dut.split114_merge210_rvalid [1] = 0     // split114_merge210_rvalid
net:   tb.dut.split114_merge210_rresp [2] = 00     // split114_merge210_rresp
net:   tb.dut.split114_merge210_rready [1] = 1     // split114_merge210_rready
net:   tb.dut.split114_merge210_rlast [1] = 0     // split114_merge210_rlast
net:   tb.dut.split114_merge210_rid [4] = 0000     // split114_merge210_rid
net:   tb.dut.split114_merge210_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge210_rdata
net:   tb.dut.split114_merge210_bvalid [1] = 0     // split114_merge210_bvalid
net:   tb.dut.split114_merge210_bresp [2] = xx     // split114_merge210_bresp
net:   tb.dut.split114_merge210_bready [1] = 1     // split114_merge210_bready
net:   tb.dut.split114_merge210_bid [4] = 0000     // split114_merge210_bid
net:   tb.dut.split114_merge210_awvalid [1] = 0     // split114_merge210_awvalid
net:   tb.dut.split114_merge210_awready [1] = 1     // split114_merge210_awready
net:   tb.dut.split114_merge210_awlen [8] = 00000000     // split114_merge210_awlen
net:   tb.dut.split114_merge210_awid [4] = 0000     // split114_merge210_awid
net:   tb.dut.split114_merge210_awextras [8] = 00000000     // split114_merge210_awextras
net:   tb.dut.split114_merge210_awburst [2] = 00     // split114_merge210_awburst
net:   tb.dut.split114_merge210_awaddr [32] = 00000000000000000000000000000000     // split114_merge210_awaddr
net:   tb.dut.split114_merge210_arvalid [1] = 0     // split114_merge210_arvalid
net:   tb.dut.split114_merge210_arready [1] = 1     // split114_merge210_arready
net:   tb.dut.split114_merge210_arlen [8] = 00000000     // split114_merge210_arlen
net:   tb.dut.split114_merge210_arid [4] = 0000     // split114_merge210_arid
net:   tb.dut.split114_merge210_arextras [8] = 00000000     // split114_merge210_arextras
net:   tb.dut.split114_merge210_arburst [2] = 00     // split114_merge210_arburst
net:   tb.dut.split114_merge210_araddr [32] = 00000000000000000000000000000000     // split114_merge210_araddr
net:   tb.dut.split114_merge208_wvalid [1] = 0     // split114_merge208_wvalid
net:   tb.dut.split114_merge208_wstrb [8] = 00000000     // split114_merge208_wstrb
net:   tb.dut.split114_merge208_wready [1] = 1     // split114_merge208_wready
net:   tb.dut.split114_merge208_wlast [1] = 0     // split114_merge208_wlast
net:   tb.dut.split114_merge208_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge208_wdata
net:   tb.dut.split114_merge208_rvalid [1] = 0     // split114_merge208_rvalid
net:   tb.dut.split114_merge208_rresp [2] = 00     // split114_merge208_rresp
net:   tb.dut.split114_merge208_rready [1] = 1     // split114_merge208_rready
net:   tb.dut.split114_merge208_rlast [1] = 0     // split114_merge208_rlast
net:   tb.dut.split114_merge208_rid [4] = 0000     // split114_merge208_rid
net:   tb.dut.split114_merge208_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge208_rdata
net:   tb.dut.split114_merge208_bvalid [1] = 0     // split114_merge208_bvalid
net:   tb.dut.split114_merge208_bresp [2] = xx     // split114_merge208_bresp
net:   tb.dut.split114_merge208_bready [1] = 1     // split114_merge208_bready
net:   tb.dut.split114_merge208_bid [4] = 0000     // split114_merge208_bid
net:   tb.dut.split114_merge208_awvalid [1] = 0     // split114_merge208_awvalid
net:   tb.dut.split114_merge208_awready [1] = 1     // split114_merge208_awready
net:   tb.dut.split114_merge208_awlen [8] = 00000000     // split114_merge208_awlen
net:   tb.dut.split114_merge208_awid [4] = 0000     // split114_merge208_awid
net:   tb.dut.split114_merge208_awextras [8] = 00000000     // split114_merge208_awextras
net:   tb.dut.split114_merge208_awburst [2] = 00     // split114_merge208_awburst
net:   tb.dut.split114_merge208_awaddr [32] = 00000000000000000000000000000000     // split114_merge208_awaddr
net:   tb.dut.split114_merge208_arvalid [1] = 0     // split114_merge208_arvalid
net:   tb.dut.split114_merge208_arready [1] = 1     // split114_merge208_arready
net:   tb.dut.split114_merge208_arlen [8] = 00000000     // split114_merge208_arlen
net:   tb.dut.split114_merge208_arid [4] = 0000     // split114_merge208_arid
net:   tb.dut.split114_merge208_arextras [8] = 00000000     // split114_merge208_arextras
net:   tb.dut.split114_merge208_arburst [2] = 00     // split114_merge208_arburst
net:   tb.dut.split114_merge208_araddr [32] = 00000000000000000000000000000000     // split114_merge208_araddr
net:   tb.dut.split114_merge204_wvalid [1] = 0     // split114_merge204_wvalid
net:   tb.dut.split114_merge204_wstrb [8] = 00000000     // split114_merge204_wstrb
net:   tb.dut.split114_merge204_wready [1] = 1     // split114_merge204_wready
net:   tb.dut.split114_merge204_wlast [1] = 0     // split114_merge204_wlast
net:   tb.dut.split114_merge204_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge204_wdata
net:   tb.dut.split114_merge204_rvalid [1] = 0     // split114_merge204_rvalid
net:   tb.dut.split114_merge204_rresp [2] = 00     // split114_merge204_rresp
net:   tb.dut.split114_merge204_rready [1] = 1     // split114_merge204_rready
net:   tb.dut.split114_merge204_rlast [1] = 0     // split114_merge204_rlast
net:   tb.dut.split114_merge204_rid [4] = 0000     // split114_merge204_rid
net:   tb.dut.split114_merge204_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split114_merge204_rdata
net:   tb.dut.split114_merge204_bvalid [1] = 0     // split114_merge204_bvalid
net:   tb.dut.split114_merge204_bresp [2] = xx     // split114_merge204_bresp
net:   tb.dut.split114_merge204_bready [1] = 1     // split114_merge204_bready
net:   tb.dut.split114_merge204_bid [4] = 0000     // split114_merge204_bid
net:   tb.dut.split114_merge204_awvalid [1] = 0     // split114_merge204_awvalid
net:   tb.dut.split114_merge204_awready [1] = 1     // split114_merge204_awready
net:   tb.dut.split114_merge204_awlen [8] = 00000000     // split114_merge204_awlen
net:   tb.dut.split114_merge204_awid [4] = 0000     // split114_merge204_awid
net:   tb.dut.split114_merge204_awextras [8] = 00000000     // split114_merge204_awextras
net:   tb.dut.split114_merge204_awburst [2] = 00     // split114_merge204_awburst
net:   tb.dut.split114_merge204_awaddr [32] = 00000000000000000000000000000000     // split114_merge204_awaddr
net:   tb.dut.split114_merge204_arvalid [1] = 0     // split114_merge204_arvalid
net:   tb.dut.split114_merge204_arready [1] = 1     // split114_merge204_arready
net:   tb.dut.split114_merge204_arlen [8] = 00000000     // split114_merge204_arlen
net:   tb.dut.split114_merge204_arid [4] = 0000     // split114_merge204_arid
net:   tb.dut.split114_merge204_arextras [8] = 00000000     // split114_merge204_arextras
net:   tb.dut.split114_merge204_arburst [2] = 00     // split114_merge204_arburst
net:   tb.dut.split114_merge204_araddr [32] = 00000000000000000000000000000000     // split114_merge204_araddr
net:   tb.dut.split113_merge212_wvalid [1] = 0     // split113_merge212_wvalid
net:   tb.dut.split113_merge212_wstrb [8] = 00000000     // split113_merge212_wstrb
net:   tb.dut.split113_merge212_wready [1] = 1     // split113_merge212_wready
net:   tb.dut.split113_merge212_wlast [1] = 0     // split113_merge212_wlast
net:   tb.dut.split113_merge212_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge212_wdata
net:   tb.dut.split113_merge212_rvalid [1] = 0     // split113_merge212_rvalid
net:   tb.dut.split113_merge212_rresp [2] = 00     // split113_merge212_rresp
net:   tb.dut.split113_merge212_rready [1] = 1     // split113_merge212_rready
net:   tb.dut.split113_merge212_rlast [1] = 0     // split113_merge212_rlast
net:   tb.dut.split113_merge212_rid [4] = 0000     // split113_merge212_rid
net:   tb.dut.split113_merge212_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge212_rdata
net:   tb.dut.split113_merge212_bvalid [1] = 0     // split113_merge212_bvalid
net:   tb.dut.split113_merge212_bresp [2] = xx     // split113_merge212_bresp
net:   tb.dut.split113_merge212_bready [1] = 1     // split113_merge212_bready
net:   tb.dut.split113_merge212_bid [4] = 0000     // split113_merge212_bid
net:   tb.dut.split113_merge212_awvalid [1] = 0     // split113_merge212_awvalid
net:   tb.dut.split113_merge212_awready [1] = 1     // split113_merge212_awready
net:   tb.dut.split113_merge212_awlen [8] = 00000000     // split113_merge212_awlen
net:   tb.dut.split113_merge212_awid [4] = 0000     // split113_merge212_awid
net:   tb.dut.split113_merge212_awextras [8] = 00000000     // split113_merge212_awextras
net:   tb.dut.split113_merge212_awburst [2] = 00     // split113_merge212_awburst
net:   tb.dut.split113_merge212_awaddr [32] = 00000000000000000000000000000000     // split113_merge212_awaddr
net:   tb.dut.split113_merge212_arvalid [1] = 0     // split113_merge212_arvalid
net:   tb.dut.split113_merge212_arready [1] = 1     // split113_merge212_arready
net:   tb.dut.split113_merge212_arlen [8] = 00000000     // split113_merge212_arlen
net:   tb.dut.split113_merge212_arid [4] = 0000     // split113_merge212_arid
net:   tb.dut.split113_merge212_arextras [8] = 00000000     // split113_merge212_arextras
net:   tb.dut.split113_merge212_arburst [2] = 00     // split113_merge212_arburst
net:   tb.dut.split113_merge212_araddr [32] = 00000000000000000000000000000000     // split113_merge212_araddr
net:   tb.dut.split113_merge206_wvalid [1] = 0     // split113_merge206_wvalid
net:   tb.dut.split113_merge206_wstrb [8] = 00000000     // split113_merge206_wstrb
net:   tb.dut.split113_merge206_wready [1] = 1     // split113_merge206_wready
net:   tb.dut.split113_merge206_wlast [1] = 0     // split113_merge206_wlast
net:   tb.dut.split113_merge206_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge206_wdata
net:   tb.dut.split113_merge206_rvalid [1] = 0     // split113_merge206_rvalid
net:   tb.dut.split113_merge206_rresp [2] = 00     // split113_merge206_rresp
net:   tb.dut.split113_merge206_rready [1] = 1     // split113_merge206_rready
net:   tb.dut.split113_merge206_rlast [1] = 0     // split113_merge206_rlast
net:   tb.dut.split113_merge206_rid [4] = 0000     // split113_merge206_rid
net:   tb.dut.split113_merge206_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge206_rdata
net:   tb.dut.split113_merge206_bvalid [1] = 0     // split113_merge206_bvalid
net:   tb.dut.split113_merge206_bresp [2] = xx     // split113_merge206_bresp
net:   tb.dut.split113_merge206_bready [1] = 1     // split113_merge206_bready
net:   tb.dut.split113_merge206_bid [4] = 0000     // split113_merge206_bid
net:   tb.dut.split113_merge206_awvalid [1] = 0     // split113_merge206_awvalid
net:   tb.dut.split113_merge206_awready [1] = 1     // split113_merge206_awready
net:   tb.dut.split113_merge206_awlen [8] = 00000000     // split113_merge206_awlen
net:   tb.dut.split113_merge206_awid [4] = 0000     // split113_merge206_awid
net:   tb.dut.split113_merge206_awextras [8] = 00000000     // split113_merge206_awextras
net:   tb.dut.split113_merge206_awburst [2] = 00     // split113_merge206_awburst
net:   tb.dut.split113_merge206_awaddr [32] = 00000000000000000000000000000000     // split113_merge206_awaddr
net:   tb.dut.split113_merge206_arvalid [1] = 0     // split113_merge206_arvalid
net:   tb.dut.split113_merge206_arready [1] = 1     // split113_merge206_arready
net:   tb.dut.split113_merge206_arlen [8] = 00000000     // split113_merge206_arlen
net:   tb.dut.split113_merge206_arid [4] = 0000     // split113_merge206_arid
net:   tb.dut.split113_merge206_arextras [8] = 00000000     // split113_merge206_arextras
net:   tb.dut.split113_merge206_arburst [2] = 00     // split113_merge206_arburst
net:   tb.dut.split113_merge206_araddr [32] = 00000000000000000000000000000000     // split113_merge206_araddr
net:   tb.dut.split113_merge205_wvalid [1] = 0     // split113_merge205_wvalid
net:   tb.dut.split113_merge205_wstrb [8] = 00000000     // split113_merge205_wstrb
net:   tb.dut.split113_merge205_wready [1] = 1     // split113_merge205_wready
net:   tb.dut.split113_merge205_wlast [1] = 0     // split113_merge205_wlast
net:   tb.dut.split113_merge205_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge205_wdata
net:   tb.dut.split113_merge205_rvalid [1] = 0     // split113_merge205_rvalid
net:   tb.dut.split113_merge205_rresp [2] = 00     // split113_merge205_rresp
net:   tb.dut.split113_merge205_rready [1] = 1     // split113_merge205_rready
net:   tb.dut.split113_merge205_rlast [1] = 0     // split113_merge205_rlast
net:   tb.dut.split113_merge205_rid [4] = 0000     // split113_merge205_rid
net:   tb.dut.split113_merge205_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge205_rdata
net:   tb.dut.split113_merge205_bvalid [1] = 0     // split113_merge205_bvalid
net:   tb.dut.split113_merge205_bresp [2] = xx     // split113_merge205_bresp
net:   tb.dut.split113_merge205_bready [1] = 1     // split113_merge205_bready
net:   tb.dut.split113_merge205_bid [4] = 0000     // split113_merge205_bid
net:   tb.dut.split113_merge205_awvalid [1] = 0     // split113_merge205_awvalid
net:   tb.dut.split113_merge205_awready [1] = 1     // split113_merge205_awready
net:   tb.dut.split113_merge205_awlen [8] = 00000000     // split113_merge205_awlen
net:   tb.dut.split113_merge205_awid [4] = 0000     // split113_merge205_awid
net:   tb.dut.split113_merge205_awextras [8] = 00000000     // split113_merge205_awextras
net:   tb.dut.split113_merge205_awburst [2] = 00     // split113_merge205_awburst
net:   tb.dut.split113_merge205_awaddr [32] = 00000000000000000000000000000000     // split113_merge205_awaddr
net:   tb.dut.split113_merge205_arvalid [1] = 0     // split113_merge205_arvalid
net:   tb.dut.split113_merge205_arready [1] = 1     // split113_merge205_arready
net:   tb.dut.split113_merge205_arlen [8] = 00000000     // split113_merge205_arlen
net:   tb.dut.split113_merge205_arid [4] = 0000     // split113_merge205_arid
net:   tb.dut.split113_merge205_arextras [8] = 00000000     // split113_merge205_arextras
net:   tb.dut.split113_merge205_arburst [2] = 00     // split113_merge205_arburst
net:   tb.dut.split113_merge205_araddr [32] = 00000000000000000000000000000000     // split113_merge205_araddr
net:   tb.dut.split113_merge201_wvalid [1] = 0     // split113_merge201_wvalid
net:   tb.dut.split113_merge201_wstrb [8] = 00000000     // split113_merge201_wstrb
net:   tb.dut.split113_merge201_wready [1] = 1     // split113_merge201_wready
net:   tb.dut.split113_merge201_wlast [1] = 0     // split113_merge201_wlast
net:   tb.dut.split113_merge201_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge201_wdata
net:   tb.dut.split113_merge201_rvalid [1] = 0     // split113_merge201_rvalid
net:   tb.dut.split113_merge201_rresp [2] = 00     // split113_merge201_rresp
net:   tb.dut.split113_merge201_rready [1] = 1     // split113_merge201_rready
net:   tb.dut.split113_merge201_rlast [1] = 0     // split113_merge201_rlast
net:   tb.dut.split113_merge201_rid [4] = 0000     // split113_merge201_rid
net:   tb.dut.split113_merge201_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split113_merge201_rdata
net:   tb.dut.split113_merge201_bvalid [1] = 0     // split113_merge201_bvalid
net:   tb.dut.split113_merge201_bresp [2] = xx     // split113_merge201_bresp
net:   tb.dut.split113_merge201_bready [1] = 1     // split113_merge201_bready
net:   tb.dut.split113_merge201_bid [4] = 0000     // split113_merge201_bid
net:   tb.dut.split113_merge201_awvalid [1] = 0     // split113_merge201_awvalid
net:   tb.dut.split113_merge201_awready [1] = 1     // split113_merge201_awready
net:   tb.dut.split113_merge201_awlen [8] = 00000000     // split113_merge201_awlen
net:   tb.dut.split113_merge201_awid [4] = 0000     // split113_merge201_awid
net:   tb.dut.split113_merge201_awextras [8] = 00000000     // split113_merge201_awextras
net:   tb.dut.split113_merge201_awburst [2] = 00     // split113_merge201_awburst
net:   tb.dut.split113_merge201_awaddr [32] = 00000000000000000000000000000000     // split113_merge201_awaddr
net:   tb.dut.split113_merge201_arvalid [1] = 0     // split113_merge201_arvalid
net:   tb.dut.split113_merge201_arready [1] = 1     // split113_merge201_arready
net:   tb.dut.split113_merge201_arlen [8] = 00000000     // split113_merge201_arlen
net:   tb.dut.split113_merge201_arid [4] = 0000     // split113_merge201_arid
net:   tb.dut.split113_merge201_arextras [8] = 00000000     // split113_merge201_arextras
net:   tb.dut.split113_merge201_arburst [2] = 00     // split113_merge201_arburst
net:   tb.dut.split113_merge201_araddr [32] = 00000000000000000000000000000000     // split113_merge201_araddr
net:   tb.dut.split112_merge215_wvalid [1] = 0     // split112_merge215_wvalid
net:   tb.dut.split112_merge215_wstrb [8] = 00000000     // split112_merge215_wstrb
net:   tb.dut.split112_merge215_wready [1] = 1     // split112_merge215_wready
net:   tb.dut.split112_merge215_wlast [1] = 0     // split112_merge215_wlast
net:   tb.dut.split112_merge215_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge215_wdata
net:   tb.dut.split112_merge215_rvalid [1] = 0     // split112_merge215_rvalid
net:   tb.dut.split112_merge215_rresp [2] = 00     // split112_merge215_rresp
net:   tb.dut.split112_merge215_rready [1] = 1     // split112_merge215_rready
net:   tb.dut.split112_merge215_rlast [1] = 0     // split112_merge215_rlast
net:   tb.dut.split112_merge215_rid [4] = 0000     // split112_merge215_rid
net:   tb.dut.split112_merge215_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge215_rdata
net:   tb.dut.split112_merge215_bvalid [1] = 0     // split112_merge215_bvalid
net:   tb.dut.split112_merge215_bresp [2] = xx     // split112_merge215_bresp
net:   tb.dut.split112_merge215_bready [1] = 1     // split112_merge215_bready
net:   tb.dut.split112_merge215_bid [4] = 0000     // split112_merge215_bid
net:   tb.dut.split112_merge215_awvalid [1] = 0     // split112_merge215_awvalid
net:   tb.dut.split112_merge215_awready [1] = 1     // split112_merge215_awready
net:   tb.dut.split112_merge215_awlen [8] = 00000000     // split112_merge215_awlen
net:   tb.dut.split112_merge215_awid [4] = 0000     // split112_merge215_awid
net:   tb.dut.split112_merge215_awextras [8] = 00000000     // split112_merge215_awextras
net:   tb.dut.split112_merge215_awburst [2] = 00     // split112_merge215_awburst
net:   tb.dut.split112_merge215_awaddr [32] = 00000000000000000000000000000000     // split112_merge215_awaddr
net:   tb.dut.split112_merge215_arvalid [1] = 0     // split112_merge215_arvalid
net:   tb.dut.split112_merge215_arready [1] = 1     // split112_merge215_arready
net:   tb.dut.split112_merge215_arlen [8] = 00000000     // split112_merge215_arlen
net:   tb.dut.split112_merge215_arid [4] = 0000     // split112_merge215_arid
net:   tb.dut.split112_merge215_arextras [8] = 00000000     // split112_merge215_arextras
net:   tb.dut.split112_merge215_arburst [2] = 00     // split112_merge215_arburst
net:   tb.dut.split112_merge215_araddr [32] = 00000000000000000000000000000000     // split112_merge215_araddr
net:   tb.dut.split112_merge210_wvalid [1] = 0     // split112_merge210_wvalid
net:   tb.dut.split112_merge210_wstrb [8] = 00000000     // split112_merge210_wstrb
net:   tb.dut.split112_merge210_wready [1] = 1     // split112_merge210_wready
net:   tb.dut.split112_merge210_wlast [1] = 0     // split112_merge210_wlast
net:   tb.dut.split112_merge210_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge210_wdata
net:   tb.dut.split112_merge210_rvalid [1] = 0     // split112_merge210_rvalid
net:   tb.dut.split112_merge210_rresp [2] = 00     // split112_merge210_rresp
net:   tb.dut.split112_merge210_rready [1] = 1     // split112_merge210_rready
net:   tb.dut.split112_merge210_rlast [1] = 0     // split112_merge210_rlast
net:   tb.dut.split112_merge210_rid [4] = 0000     // split112_merge210_rid
net:   tb.dut.split112_merge210_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge210_rdata
net:   tb.dut.split112_merge210_bvalid [1] = 0     // split112_merge210_bvalid
net:   tb.dut.split112_merge210_bresp [2] = xx     // split112_merge210_bresp
net:   tb.dut.split112_merge210_bready [1] = 1     // split112_merge210_bready
net:   tb.dut.split112_merge210_bid [4] = 0000     // split112_merge210_bid
net:   tb.dut.split112_merge210_awvalid [1] = 0     // split112_merge210_awvalid
net:   tb.dut.split112_merge210_awready [1] = 1     // split112_merge210_awready
net:   tb.dut.split112_merge210_awlen [8] = 00000000     // split112_merge210_awlen
net:   tb.dut.split112_merge210_awid [4] = 0000     // split112_merge210_awid
net:   tb.dut.split112_merge210_awextras [8] = 00000000     // split112_merge210_awextras
net:   tb.dut.split112_merge210_awburst [2] = 00     // split112_merge210_awburst
net:   tb.dut.split112_merge210_awaddr [32] = 00000000000000000000000000000000     // split112_merge210_awaddr
net:   tb.dut.split112_merge210_arvalid [1] = 0     // split112_merge210_arvalid
net:   tb.dut.split112_merge210_arready [1] = 1     // split112_merge210_arready
net:   tb.dut.split112_merge210_arlen [8] = 00000000     // split112_merge210_arlen
net:   tb.dut.split112_merge210_arid [4] = 0000     // split112_merge210_arid
net:   tb.dut.split112_merge210_arextras [8] = 00000000     // split112_merge210_arextras
net:   tb.dut.split112_merge210_arburst [2] = 00     // split112_merge210_arburst
net:   tb.dut.split112_merge210_araddr [32] = 00000000000000000000000000000000     // split112_merge210_araddr
net:   tb.dut.split112_merge202_wvalid [1] = 0     // split112_merge202_wvalid
net:   tb.dut.split112_merge202_wstrb [8] = 00000000     // split112_merge202_wstrb
net:   tb.dut.split112_merge202_wready [1] = 1     // split112_merge202_wready
net:   tb.dut.split112_merge202_wlast [1] = 0     // split112_merge202_wlast
net:   tb.dut.split112_merge202_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge202_wdata
net:   tb.dut.split112_merge202_rvalid [1] = 0     // split112_merge202_rvalid
net:   tb.dut.split112_merge202_rresp [2] = 00     // split112_merge202_rresp
net:   tb.dut.split112_merge202_rready [1] = 1     // split112_merge202_rready
net:   tb.dut.split112_merge202_rlast [1] = 0     // split112_merge202_rlast
net:   tb.dut.split112_merge202_rid [4] = 0000     // split112_merge202_rid
net:   tb.dut.split112_merge202_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge202_rdata
net:   tb.dut.split112_merge202_bvalid [1] = 0     // split112_merge202_bvalid
net:   tb.dut.split112_merge202_bresp [2] = xx     // split112_merge202_bresp
net:   tb.dut.split112_merge202_bready [1] = 1     // split112_merge202_bready
net:   tb.dut.split112_merge202_bid [4] = 0000     // split112_merge202_bid
net:   tb.dut.split112_merge202_awvalid [1] = 0     // split112_merge202_awvalid
net:   tb.dut.split112_merge202_awready [1] = 1     // split112_merge202_awready
net:   tb.dut.split112_merge202_awlen [8] = 00000000     // split112_merge202_awlen
net:   tb.dut.split112_merge202_awid [4] = 0000     // split112_merge202_awid
net:   tb.dut.split112_merge202_awextras [8] = 00000000     // split112_merge202_awextras
net:   tb.dut.split112_merge202_awburst [2] = 00     // split112_merge202_awburst
net:   tb.dut.split112_merge202_awaddr [32] = 00000000000000000000000000000000     // split112_merge202_awaddr
net:   tb.dut.split112_merge202_arvalid [1] = 0     // split112_merge202_arvalid
net:   tb.dut.split112_merge202_arready [1] = 1     // split112_merge202_arready
net:   tb.dut.split112_merge202_arlen [8] = 00000000     // split112_merge202_arlen
net:   tb.dut.split112_merge202_arid [4] = 0000     // split112_merge202_arid
net:   tb.dut.split112_merge202_arextras [8] = 00000000     // split112_merge202_arextras
net:   tb.dut.split112_merge202_arburst [2] = 00     // split112_merge202_arburst
net:   tb.dut.split112_merge202_araddr [32] = 00000000000000000000000000000000     // split112_merge202_araddr
net:   tb.dut.split112_merge201_wvalid [1] = 0     // split112_merge201_wvalid
net:   tb.dut.split112_merge201_wstrb [8] = 00000000     // split112_merge201_wstrb
net:   tb.dut.split112_merge201_wready [1] = 1     // split112_merge201_wready
net:   tb.dut.split112_merge201_wlast [1] = 0     // split112_merge201_wlast
net:   tb.dut.split112_merge201_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge201_wdata
net:   tb.dut.split112_merge201_rvalid [1] = 0     // split112_merge201_rvalid
net:   tb.dut.split112_merge201_rresp [2] = 00     // split112_merge201_rresp
net:   tb.dut.split112_merge201_rready [1] = 1     // split112_merge201_rready
net:   tb.dut.split112_merge201_rlast [1] = 0     // split112_merge201_rlast
net:   tb.dut.split112_merge201_rid [4] = 0000     // split112_merge201_rid
net:   tb.dut.split112_merge201_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split112_merge201_rdata
net:   tb.dut.split112_merge201_bvalid [1] = 0     // split112_merge201_bvalid
net:   tb.dut.split112_merge201_bresp [2] = xx     // split112_merge201_bresp
net:   tb.dut.split112_merge201_bready [1] = 1     // split112_merge201_bready
net:   tb.dut.split112_merge201_bid [4] = 0000     // split112_merge201_bid
net:   tb.dut.split112_merge201_awvalid [1] = 0     // split112_merge201_awvalid
net:   tb.dut.split112_merge201_awready [1] = 1     // split112_merge201_awready
net:   tb.dut.split112_merge201_awlen [8] = 00000000     // split112_merge201_awlen
net:   tb.dut.split112_merge201_awid [4] = 0000     // split112_merge201_awid
net:   tb.dut.split112_merge201_awextras [8] = 00000000     // split112_merge201_awextras
net:   tb.dut.split112_merge201_awburst [2] = 00     // split112_merge201_awburst
net:   tb.dut.split112_merge201_awaddr [32] = 00000000000000000000000000000000     // split112_merge201_awaddr
net:   tb.dut.split112_merge201_arvalid [1] = 0     // split112_merge201_arvalid
net:   tb.dut.split112_merge201_arready [1] = 1     // split112_merge201_arready
net:   tb.dut.split112_merge201_arlen [8] = 00000000     // split112_merge201_arlen
net:   tb.dut.split112_merge201_arid [4] = 0000     // split112_merge201_arid
net:   tb.dut.split112_merge201_arextras [8] = 00000000     // split112_merge201_arextras
net:   tb.dut.split112_merge201_arburst [2] = 00     // split112_merge201_arburst
net:   tb.dut.split112_merge201_araddr [32] = 00000000000000000000000000000000     // split112_merge201_araddr
net:   tb.dut.split111_merge214_wvalid [1] = 0     // split111_merge214_wvalid
net:   tb.dut.split111_merge214_wstrb [8] = 00000000     // split111_merge214_wstrb
net:   tb.dut.split111_merge214_wready [1] = 1     // split111_merge214_wready
net:   tb.dut.split111_merge214_wlast [1] = 0     // split111_merge214_wlast
net:   tb.dut.split111_merge214_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge214_wdata
net:   tb.dut.split111_merge214_rvalid [1] = 0     // split111_merge214_rvalid
net:   tb.dut.split111_merge214_rresp [2] = 00     // split111_merge214_rresp
net:   tb.dut.split111_merge214_rready [1] = 1     // split111_merge214_rready
net:   tb.dut.split111_merge214_rlast [1] = 0     // split111_merge214_rlast
net:   tb.dut.split111_merge214_rid [4] = 0000     // split111_merge214_rid
net:   tb.dut.split111_merge214_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge214_rdata
net:   tb.dut.split111_merge214_bvalid [1] = 0     // split111_merge214_bvalid
net:   tb.dut.split111_merge214_bresp [2] = xx     // split111_merge214_bresp
net:   tb.dut.split111_merge214_bready [1] = 1     // split111_merge214_bready
net:   tb.dut.split111_merge214_bid [4] = 0000     // split111_merge214_bid
net:   tb.dut.split111_merge214_awvalid [1] = 0     // split111_merge214_awvalid
net:   tb.dut.split111_merge214_awready [1] = 1     // split111_merge214_awready
net:   tb.dut.split111_merge214_awlen [8] = 00000000     // split111_merge214_awlen
net:   tb.dut.split111_merge214_awid [4] = 0000     // split111_merge214_awid
net:   tb.dut.split111_merge214_awextras [8] = 00000000     // split111_merge214_awextras
net:   tb.dut.split111_merge214_awburst [2] = 00     // split111_merge214_awburst
net:   tb.dut.split111_merge214_awaddr [32] = 00000000000000000000000000000000     // split111_merge214_awaddr
net:   tb.dut.split111_merge214_arvalid [1] = 0     // split111_merge214_arvalid
net:   tb.dut.split111_merge214_arready [1] = 1     // split111_merge214_arready
net:   tb.dut.split111_merge214_arlen [8] = 00000000     // split111_merge214_arlen
net:   tb.dut.split111_merge214_arid [4] = 0000     // split111_merge214_arid
net:   tb.dut.split111_merge214_arextras [8] = 00000000     // split111_merge214_arextras
net:   tb.dut.split111_merge214_arburst [2] = 00     // split111_merge214_arburst
net:   tb.dut.split111_merge214_araddr [32] = 00000000000000000000000000000000     // split111_merge214_araddr
net:   tb.dut.split111_merge213_wvalid [1] = 0     // split111_merge213_wvalid
net:   tb.dut.split111_merge213_wstrb [8] = 00000000     // split111_merge213_wstrb
net:   tb.dut.split111_merge213_wready [1] = 1     // split111_merge213_wready
net:   tb.dut.split111_merge213_wlast [1] = 0     // split111_merge213_wlast
net:   tb.dut.split111_merge213_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge213_wdata
net:   tb.dut.split111_merge213_rvalid [1] = 0     // split111_merge213_rvalid
net:   tb.dut.split111_merge213_rresp [2] = 00     // split111_merge213_rresp
net:   tb.dut.split111_merge213_rready [1] = 1     // split111_merge213_rready
net:   tb.dut.split111_merge213_rlast [1] = 0     // split111_merge213_rlast
net:   tb.dut.split111_merge213_rid [4] = 0000     // split111_merge213_rid
net:   tb.dut.split111_merge213_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge213_rdata
net:   tb.dut.split111_merge213_bvalid [1] = 0     // split111_merge213_bvalid
net:   tb.dut.split111_merge213_bresp [2] = xx     // split111_merge213_bresp
net:   tb.dut.split111_merge213_bready [1] = 1     // split111_merge213_bready
net:   tb.dut.split111_merge213_bid [4] = 0000     // split111_merge213_bid
net:   tb.dut.split111_merge213_awvalid [1] = 0     // split111_merge213_awvalid
net:   tb.dut.split111_merge213_awready [1] = 1     // split111_merge213_awready
net:   tb.dut.split111_merge213_awlen [8] = 00000000     // split111_merge213_awlen
net:   tb.dut.split111_merge213_awid [4] = 0000     // split111_merge213_awid
net:   tb.dut.split111_merge213_awextras [8] = 00000000     // split111_merge213_awextras
net:   tb.dut.split111_merge213_awburst [2] = 00     // split111_merge213_awburst
net:   tb.dut.split111_merge213_awaddr [32] = 00000000000000000000000000000000     // split111_merge213_awaddr
net:   tb.dut.split111_merge213_arvalid [1] = 0     // split111_merge213_arvalid
net:   tb.dut.split111_merge213_arready [1] = 1     // split111_merge213_arready
net:   tb.dut.split111_merge213_arlen [8] = 00000000     // split111_merge213_arlen
net:   tb.dut.split111_merge213_arid [4] = 0000     // split111_merge213_arid
net:   tb.dut.split111_merge213_arextras [8] = 00000000     // split111_merge213_arextras
net:   tb.dut.split111_merge213_arburst [2] = 00     // split111_merge213_arburst
net:   tb.dut.split111_merge213_araddr [32] = 00000000000000000000000000000000     // split111_merge213_araddr
net:   tb.dut.split111_merge202_wvalid [1] = 0     // split111_merge202_wvalid
net:   tb.dut.split111_merge202_wstrb [8] = 00000000     // split111_merge202_wstrb
net:   tb.dut.split111_merge202_wready [1] = 1     // split111_merge202_wready
net:   tb.dut.split111_merge202_wlast [1] = 0     // split111_merge202_wlast
net:   tb.dut.split111_merge202_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge202_wdata
net:   tb.dut.split111_merge202_rvalid [1] = 0     // split111_merge202_rvalid
net:   tb.dut.split111_merge202_rresp [2] = 00     // split111_merge202_rresp
net:   tb.dut.split111_merge202_rready [1] = 1     // split111_merge202_rready
net:   tb.dut.split111_merge202_rlast [1] = 0     // split111_merge202_rlast
net:   tb.dut.split111_merge202_rid [4] = 0000     // split111_merge202_rid
net:   tb.dut.split111_merge202_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge202_rdata
net:   tb.dut.split111_merge202_bvalid [1] = 0     // split111_merge202_bvalid
net:   tb.dut.split111_merge202_bresp [2] = xx     // split111_merge202_bresp
net:   tb.dut.split111_merge202_bready [1] = 1     // split111_merge202_bready
net:   tb.dut.split111_merge202_bid [4] = 0000     // split111_merge202_bid
net:   tb.dut.split111_merge202_awvalid [1] = 0     // split111_merge202_awvalid
net:   tb.dut.split111_merge202_awready [1] = 1     // split111_merge202_awready
net:   tb.dut.split111_merge202_awlen [8] = 00000000     // split111_merge202_awlen
net:   tb.dut.split111_merge202_awid [4] = 0000     // split111_merge202_awid
net:   tb.dut.split111_merge202_awextras [8] = 00000000     // split111_merge202_awextras
net:   tb.dut.split111_merge202_awburst [2] = 00     // split111_merge202_awburst
net:   tb.dut.split111_merge202_awaddr [32] = 00000000000000000000000000000000     // split111_merge202_awaddr
net:   tb.dut.split111_merge202_arvalid [1] = 0     // split111_merge202_arvalid
net:   tb.dut.split111_merge202_arready [1] = 1     // split111_merge202_arready
net:   tb.dut.split111_merge202_arlen [8] = 00000000     // split111_merge202_arlen
net:   tb.dut.split111_merge202_arid [4] = 0000     // split111_merge202_arid
net:   tb.dut.split111_merge202_arextras [8] = 00000000     // split111_merge202_arextras
net:   tb.dut.split111_merge202_arburst [2] = 00     // split111_merge202_arburst
net:   tb.dut.split111_merge202_araddr [32] = 00000000000000000000000000000000     // split111_merge202_araddr
net:   tb.dut.split111_merge200_wvalid [1] = 0     // split111_merge200_wvalid
net:   tb.dut.split111_merge200_wstrb [8] = 00000000     // split111_merge200_wstrb
net:   tb.dut.split111_merge200_wready [1] = 1     // split111_merge200_wready
net:   tb.dut.split111_merge200_wlast [1] = 0     // split111_merge200_wlast
net:   tb.dut.split111_merge200_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge200_wdata
net:   tb.dut.split111_merge200_rvalid [1] = 0     // split111_merge200_rvalid
net:   tb.dut.split111_merge200_rresp [2] = 00     // split111_merge200_rresp
net:   tb.dut.split111_merge200_rready [1] = 1     // split111_merge200_rready
net:   tb.dut.split111_merge200_rlast [1] = 0     // split111_merge200_rlast
net:   tb.dut.split111_merge200_rid [4] = 0000     // split111_merge200_rid
net:   tb.dut.split111_merge200_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split111_merge200_rdata
net:   tb.dut.split111_merge200_bvalid [1] = 0     // split111_merge200_bvalid
net:   tb.dut.split111_merge200_bresp [2] = xx     // split111_merge200_bresp
net:   tb.dut.split111_merge200_bready [1] = 1     // split111_merge200_bready
net:   tb.dut.split111_merge200_bid [4] = 0000     // split111_merge200_bid
net:   tb.dut.split111_merge200_awvalid [1] = 0     // split111_merge200_awvalid
net:   tb.dut.split111_merge200_awready [1] = 1     // split111_merge200_awready
net:   tb.dut.split111_merge200_awlen [8] = 00000000     // split111_merge200_awlen
net:   tb.dut.split111_merge200_awid [4] = 0000     // split111_merge200_awid
net:   tb.dut.split111_merge200_awextras [8] = 00000000     // split111_merge200_awextras
net:   tb.dut.split111_merge200_awburst [2] = 00     // split111_merge200_awburst
net:   tb.dut.split111_merge200_awaddr [32] = 00000000000000000000000000000000     // split111_merge200_awaddr
net:   tb.dut.split111_merge200_arvalid [1] = 0     // split111_merge200_arvalid
net:   tb.dut.split111_merge200_arready [1] = 1     // split111_merge200_arready
net:   tb.dut.split111_merge200_arlen [8] = 00000000     // split111_merge200_arlen
net:   tb.dut.split111_merge200_arid [4] = 0000     // split111_merge200_arid
net:   tb.dut.split111_merge200_arextras [8] = 00000000     // split111_merge200_arextras
net:   tb.dut.split111_merge200_arburst [2] = 00     // split111_merge200_arburst
net:   tb.dut.split111_merge200_araddr [32] = 00000000000000000000000000000000     // split111_merge200_araddr
net:   tb.dut.split110_merge215_wvalid [1] = 0     // split110_merge215_wvalid
net:   tb.dut.split110_merge215_wstrb [8] = 00000000     // split110_merge215_wstrb
net:   tb.dut.split110_merge215_wready [1] = 1     // split110_merge215_wready
net:   tb.dut.split110_merge215_wlast [1] = 0     // split110_merge215_wlast
net:   tb.dut.split110_merge215_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge215_wdata
net:   tb.dut.split110_merge215_rvalid [1] = 0     // split110_merge215_rvalid
net:   tb.dut.split110_merge215_rresp [2] = 00     // split110_merge215_rresp
net:   tb.dut.split110_merge215_rready [1] = 1     // split110_merge215_rready
net:   tb.dut.split110_merge215_rlast [1] = 0     // split110_merge215_rlast
net:   tb.dut.split110_merge215_rid [4] = 0000     // split110_merge215_rid
net:   tb.dut.split110_merge215_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge215_rdata
net:   tb.dut.split110_merge215_bvalid [1] = 0     // split110_merge215_bvalid
net:   tb.dut.split110_merge215_bresp [2] = xx     // split110_merge215_bresp
net:   tb.dut.split110_merge215_bready [1] = 1     // split110_merge215_bready
net:   tb.dut.split110_merge215_bid [4] = 0000     // split110_merge215_bid
net:   tb.dut.split110_merge215_awvalid [1] = 0     // split110_merge215_awvalid
net:   tb.dut.split110_merge215_awready [1] = 1     // split110_merge215_awready
net:   tb.dut.split110_merge215_awlen [8] = 00000000     // split110_merge215_awlen
net:   tb.dut.split110_merge215_awid [4] = 0000     // split110_merge215_awid
net:   tb.dut.split110_merge215_awextras [8] = 00000000     // split110_merge215_awextras
net:   tb.dut.split110_merge215_awburst [2] = 00     // split110_merge215_awburst
net:   tb.dut.split110_merge215_awaddr [32] = 00000000000000000000000000000000     // split110_merge215_awaddr
net:   tb.dut.split110_merge215_arvalid [1] = 0     // split110_merge215_arvalid
net:   tb.dut.split110_merge215_arready [1] = 1     // split110_merge215_arready
net:   tb.dut.split110_merge215_arlen [8] = 00000000     // split110_merge215_arlen
net:   tb.dut.split110_merge215_arid [4] = 0000     // split110_merge215_arid
net:   tb.dut.split110_merge215_arextras [8] = 00000000     // split110_merge215_arextras
net:   tb.dut.split110_merge215_arburst [2] = 00     // split110_merge215_arburst
net:   tb.dut.split110_merge215_araddr [32] = 00000000000000000000000000000000     // split110_merge215_araddr
net:   tb.dut.split110_merge214_wvalid [1] = 0     // split110_merge214_wvalid
net:   tb.dut.split110_merge214_wstrb [8] = 00000000     // split110_merge214_wstrb
net:   tb.dut.split110_merge214_wready [1] = 1     // split110_merge214_wready
net:   tb.dut.split110_merge214_wlast [1] = 0     // split110_merge214_wlast
net:   tb.dut.split110_merge214_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge214_wdata
net:   tb.dut.split110_merge214_rvalid [1] = 0     // split110_merge214_rvalid
net:   tb.dut.split110_merge214_rresp [2] = 00     // split110_merge214_rresp
net:   tb.dut.split110_merge214_rready [1] = 1     // split110_merge214_rready
net:   tb.dut.split110_merge214_rlast [1] = 0     // split110_merge214_rlast
net:   tb.dut.split110_merge214_rid [4] = 0000     // split110_merge214_rid
net:   tb.dut.split110_merge214_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge214_rdata
net:   tb.dut.split110_merge214_bvalid [1] = 0     // split110_merge214_bvalid
net:   tb.dut.split110_merge214_bresp [2] = xx     // split110_merge214_bresp
net:   tb.dut.split110_merge214_bready [1] = 1     // split110_merge214_bready
net:   tb.dut.split110_merge214_bid [4] = 0000     // split110_merge214_bid
net:   tb.dut.split110_merge214_awvalid [1] = 0     // split110_merge214_awvalid
net:   tb.dut.split110_merge214_awready [1] = 1     // split110_merge214_awready
net:   tb.dut.split110_merge214_awlen [8] = 00000000     // split110_merge214_awlen
net:   tb.dut.split110_merge214_awid [4] = 0000     // split110_merge214_awid
net:   tb.dut.split110_merge214_awextras [8] = 00000000     // split110_merge214_awextras
net:   tb.dut.split110_merge214_awburst [2] = 00     // split110_merge214_awburst
net:   tb.dut.split110_merge214_awaddr [32] = 00000000000000000000000000000000     // split110_merge214_awaddr
net:   tb.dut.split110_merge214_arvalid [1] = 0     // split110_merge214_arvalid
net:   tb.dut.split110_merge214_arready [1] = 1     // split110_merge214_arready
net:   tb.dut.split110_merge214_arlen [8] = 00000000     // split110_merge214_arlen
net:   tb.dut.split110_merge214_arid [4] = 0000     // split110_merge214_arid
net:   tb.dut.split110_merge214_arextras [8] = 00000000     // split110_merge214_arextras
net:   tb.dut.split110_merge214_arburst [2] = 00     // split110_merge214_arburst
net:   tb.dut.split110_merge214_araddr [32] = 00000000000000000000000000000000     // split110_merge214_araddr
net:   tb.dut.split110_merge209_wvalid [1] = 0     // split110_merge209_wvalid
net:   tb.dut.split110_merge209_wstrb [8] = 00000000     // split110_merge209_wstrb
net:   tb.dut.split110_merge209_wready [1] = 1     // split110_merge209_wready
net:   tb.dut.split110_merge209_wlast [1] = 0     // split110_merge209_wlast
net:   tb.dut.split110_merge209_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge209_wdata
net:   tb.dut.split110_merge209_rvalid [1] = 0     // split110_merge209_rvalid
net:   tb.dut.split110_merge209_rresp [2] = 00     // split110_merge209_rresp
net:   tb.dut.split110_merge209_rready [1] = 1     // split110_merge209_rready
net:   tb.dut.split110_merge209_rlast [1] = 0     // split110_merge209_rlast
net:   tb.dut.split110_merge209_rid [4] = 0000     // split110_merge209_rid
net:   tb.dut.split110_merge209_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge209_rdata
net:   tb.dut.split110_merge209_bvalid [1] = 0     // split110_merge209_bvalid
net:   tb.dut.split110_merge209_bresp [2] = xx     // split110_merge209_bresp
net:   tb.dut.split110_merge209_bready [1] = 1     // split110_merge209_bready
net:   tb.dut.split110_merge209_bid [4] = 0000     // split110_merge209_bid
net:   tb.dut.split110_merge209_awvalid [1] = 0     // split110_merge209_awvalid
net:   tb.dut.split110_merge209_awready [1] = 1     // split110_merge209_awready
net:   tb.dut.split110_merge209_awlen [8] = 00000000     // split110_merge209_awlen
net:   tb.dut.split110_merge209_awid [4] = 0000     // split110_merge209_awid
net:   tb.dut.split110_merge209_awextras [8] = 00000000     // split110_merge209_awextras
net:   tb.dut.split110_merge209_awburst [2] = 00     // split110_merge209_awburst
net:   tb.dut.split110_merge209_awaddr [32] = 00000000000000000000000000000000     // split110_merge209_awaddr
net:   tb.dut.split110_merge209_arvalid [1] = 0     // split110_merge209_arvalid
net:   tb.dut.split110_merge209_arready [1] = 1     // split110_merge209_arready
net:   tb.dut.split110_merge209_arlen [8] = 00000000     // split110_merge209_arlen
net:   tb.dut.split110_merge209_arid [4] = 0000     // split110_merge209_arid
net:   tb.dut.split110_merge209_arextras [8] = 00000000     // split110_merge209_arextras
net:   tb.dut.split110_merge209_arburst [2] = 00     // split110_merge209_arburst
net:   tb.dut.split110_merge209_araddr [32] = 00000000000000000000000000000000     // split110_merge209_araddr
net:   tb.dut.split110_merge203_wvalid [1] = 0     // split110_merge203_wvalid
net:   tb.dut.split110_merge203_wstrb [8] = 00000000     // split110_merge203_wstrb
net:   tb.dut.split110_merge203_wready [1] = 1     // split110_merge203_wready
net:   tb.dut.split110_merge203_wlast [1] = 0     // split110_merge203_wlast
net:   tb.dut.split110_merge203_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge203_wdata
net:   tb.dut.split110_merge203_rvalid [1] = 0     // split110_merge203_rvalid
net:   tb.dut.split110_merge203_rresp [2] = 00     // split110_merge203_rresp
net:   tb.dut.split110_merge203_rready [1] = 1     // split110_merge203_rready
net:   tb.dut.split110_merge203_rlast [1] = 0     // split110_merge203_rlast
net:   tb.dut.split110_merge203_rid [4] = 0000     // split110_merge203_rid
net:   tb.dut.split110_merge203_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split110_merge203_rdata
net:   tb.dut.split110_merge203_bvalid [1] = 0     // split110_merge203_bvalid
net:   tb.dut.split110_merge203_bresp [2] = xx     // split110_merge203_bresp
net:   tb.dut.split110_merge203_bready [1] = 1     // split110_merge203_bready
net:   tb.dut.split110_merge203_bid [4] = 0000     // split110_merge203_bid
net:   tb.dut.split110_merge203_awvalid [1] = 0     // split110_merge203_awvalid
net:   tb.dut.split110_merge203_awready [1] = 1     // split110_merge203_awready
net:   tb.dut.split110_merge203_awlen [8] = 00000000     // split110_merge203_awlen
net:   tb.dut.split110_merge203_awid [4] = 0000     // split110_merge203_awid
net:   tb.dut.split110_merge203_awextras [8] = 00000000     // split110_merge203_awextras
net:   tb.dut.split110_merge203_awburst [2] = 00     // split110_merge203_awburst
net:   tb.dut.split110_merge203_awaddr [32] = 00000000000000000000000000000000     // split110_merge203_awaddr
net:   tb.dut.split110_merge203_arvalid [1] = 0     // split110_merge203_arvalid
net:   tb.dut.split110_merge203_arready [1] = 1     // split110_merge203_arready
net:   tb.dut.split110_merge203_arlen [8] = 00000000     // split110_merge203_arlen
net:   tb.dut.split110_merge203_arid [4] = 0000     // split110_merge203_arid
net:   tb.dut.split110_merge203_arextras [8] = 00000000     // split110_merge203_arextras
net:   tb.dut.split110_merge203_arburst [2] = 00     // split110_merge203_arburst
net:   tb.dut.split110_merge203_araddr [32] = 00000000000000000000000000000000     // split110_merge203_araddr
net:   tb.dut.split10_merge9_wvalid [1] = 0     // split10_merge9_wvalid
net:   tb.dut.split10_merge9_wstrb [8] = 00000000     // split10_merge9_wstrb
net:   tb.dut.split10_merge9_wready [1] = 1     // split10_merge9_wready
net:   tb.dut.split10_merge9_wlast [1] = 0     // split10_merge9_wlast
net:   tb.dut.split10_merge9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge9_wdata
net:   tb.dut.split10_merge9_rvalid [1] = 0     // split10_merge9_rvalid
net:   tb.dut.split10_merge9_rresp [2] = 00     // split10_merge9_rresp
net:   tb.dut.split10_merge9_rready [1] = 1     // split10_merge9_rready
net:   tb.dut.split10_merge9_rlast [1] = 0     // split10_merge9_rlast
net:   tb.dut.split10_merge9_rid [4] = 0000     // split10_merge9_rid
net:   tb.dut.split10_merge9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge9_rdata
net:   tb.dut.split10_merge9_bvalid [1] = 0     // split10_merge9_bvalid
net:   tb.dut.split10_merge9_bresp [2] = 00     // split10_merge9_bresp
net:   tb.dut.split10_merge9_bready [1] = 1     // split10_merge9_bready
net:   tb.dut.split10_merge9_bid [4] = 0000     // split10_merge9_bid
net:   tb.dut.split10_merge9_awvalid [1] = 0     // split10_merge9_awvalid
net:   tb.dut.split10_merge9_awready [1] = 1     // split10_merge9_awready
net:   tb.dut.split10_merge9_awlen [8] = 00000000     // split10_merge9_awlen
net:   tb.dut.split10_merge9_awid [4] = 0000     // split10_merge9_awid
net:   tb.dut.split10_merge9_awextras [8] = 00000000     // split10_merge9_awextras
net:   tb.dut.split10_merge9_awburst [2] = 00     // split10_merge9_awburst
net:   tb.dut.split10_merge9_awaddr [32] = 00000000000000000000000000000000     // split10_merge9_awaddr
net:   tb.dut.split10_merge9_arvalid [1] = 0     // split10_merge9_arvalid
net:   tb.dut.split10_merge9_arready [1] = 1     // split10_merge9_arready
net:   tb.dut.split10_merge9_arlen [8] = 00000000     // split10_merge9_arlen
net:   tb.dut.split10_merge9_arid [4] = 0000     // split10_merge9_arid
net:   tb.dut.split10_merge9_arextras [8] = 00000000     // split10_merge9_arextras
net:   tb.dut.split10_merge9_arburst [2] = 00     // split10_merge9_arburst
net:   tb.dut.split10_merge9_araddr [32] = 00000000000000000000000000000000     // split10_merge9_araddr
net:   tb.dut.split10_merge8_wvalid [1] = 0     // split10_merge8_wvalid
net:   tb.dut.split10_merge8_wstrb [8] = 00000000     // split10_merge8_wstrb
net:   tb.dut.split10_merge8_wready [1] = 1     // split10_merge8_wready
net:   tb.dut.split10_merge8_wlast [1] = 0     // split10_merge8_wlast
net:   tb.dut.split10_merge8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge8_wdata
net:   tb.dut.split10_merge8_rvalid [1] = 0     // split10_merge8_rvalid
net:   tb.dut.split10_merge8_rresp [2] = 00     // split10_merge8_rresp
net:   tb.dut.split10_merge8_rready [1] = 1     // split10_merge8_rready
net:   tb.dut.split10_merge8_rlast [1] = 0     // split10_merge8_rlast
net:   tb.dut.split10_merge8_rid [4] = 0000     // split10_merge8_rid
net:   tb.dut.split10_merge8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge8_rdata
net:   tb.dut.split10_merge8_bvalid [1] = 0     // split10_merge8_bvalid
net:   tb.dut.split10_merge8_bresp [2] = 00     // split10_merge8_bresp
net:   tb.dut.split10_merge8_bready [1] = 1     // split10_merge8_bready
net:   tb.dut.split10_merge8_bid [4] = 0000     // split10_merge8_bid
net:   tb.dut.split10_merge8_awvalid [1] = 0     // split10_merge8_awvalid
net:   tb.dut.split10_merge8_awready [1] = 1     // split10_merge8_awready
net:   tb.dut.split10_merge8_awlen [8] = 00000000     // split10_merge8_awlen
net:   tb.dut.split10_merge8_awid [4] = 0000     // split10_merge8_awid
net:   tb.dut.split10_merge8_awextras [8] = 00000000     // split10_merge8_awextras
net:   tb.dut.split10_merge8_awburst [2] = 00     // split10_merge8_awburst
net:   tb.dut.split10_merge8_awaddr [32] = 00000000000000000000000000000000     // split10_merge8_awaddr
net:   tb.dut.split10_merge8_arvalid [1] = 0     // split10_merge8_arvalid
net:   tb.dut.split10_merge8_arready [1] = 1     // split10_merge8_arready
net:   tb.dut.split10_merge8_arlen [8] = 00000000     // split10_merge8_arlen
net:   tb.dut.split10_merge8_arid [4] = 0000     // split10_merge8_arid
net:   tb.dut.split10_merge8_arextras [8] = 00000000     // split10_merge8_arextras
net:   tb.dut.split10_merge8_arburst [2] = 00     // split10_merge8_arburst
net:   tb.dut.split10_merge8_araddr [32] = 00000000000000000000000000000000     // split10_merge8_araddr
net:   tb.dut.split10_merge11_wvalid [1] = 0     // split10_merge11_wvalid
net:   tb.dut.split10_merge11_wstrb [8] = 00000000     // split10_merge11_wstrb
net:   tb.dut.split10_merge11_wready [1] = 1     // split10_merge11_wready
net:   tb.dut.split10_merge11_wlast [1] = 0     // split10_merge11_wlast
net:   tb.dut.split10_merge11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge11_wdata
net:   tb.dut.split10_merge11_rvalid [1] = 0     // split10_merge11_rvalid
net:   tb.dut.split10_merge11_rresp [2] = 00     // split10_merge11_rresp
net:   tb.dut.split10_merge11_rready [1] = 1     // split10_merge11_rready
net:   tb.dut.split10_merge11_rlast [1] = 0     // split10_merge11_rlast
net:   tb.dut.split10_merge11_rid [4] = 0000     // split10_merge11_rid
net:   tb.dut.split10_merge11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge11_rdata
net:   tb.dut.split10_merge11_bvalid [1] = 0     // split10_merge11_bvalid
net:   tb.dut.split10_merge11_bresp [2] = 00     // split10_merge11_bresp
net:   tb.dut.split10_merge11_bready [1] = 1     // split10_merge11_bready
net:   tb.dut.split10_merge11_bid [4] = 0000     // split10_merge11_bid
net:   tb.dut.split10_merge11_awvalid [1] = 0     // split10_merge11_awvalid
net:   tb.dut.split10_merge11_awready [1] = 1     // split10_merge11_awready
net:   tb.dut.split10_merge11_awlen [8] = 00000000     // split10_merge11_awlen
net:   tb.dut.split10_merge11_awid [4] = 0000     // split10_merge11_awid
net:   tb.dut.split10_merge11_awextras [8] = 00000000     // split10_merge11_awextras
net:   tb.dut.split10_merge11_awburst [2] = 00     // split10_merge11_awburst
net:   tb.dut.split10_merge11_awaddr [32] = 00000000000000000000000000000000     // split10_merge11_awaddr
net:   tb.dut.split10_merge11_arvalid [1] = 0     // split10_merge11_arvalid
net:   tb.dut.split10_merge11_arready [1] = 1     // split10_merge11_arready
net:   tb.dut.split10_merge11_arlen [8] = 00000000     // split10_merge11_arlen
net:   tb.dut.split10_merge11_arid [4] = 0000     // split10_merge11_arid
net:   tb.dut.split10_merge11_arextras [8] = 00000000     // split10_merge11_arextras
net:   tb.dut.split10_merge11_arburst [2] = 00     // split10_merge11_arburst
net:   tb.dut.split10_merge11_araddr [32] = 00000000000000000000000000000000     // split10_merge11_araddr
net:   tb.dut.split10_merge10_wvalid [1] = 0     // split10_merge10_wvalid
net:   tb.dut.split10_merge10_wstrb [8] = 00000000     // split10_merge10_wstrb
net:   tb.dut.split10_merge10_wready [1] = 1     // split10_merge10_wready
net:   tb.dut.split10_merge10_wlast [1] = 0     // split10_merge10_wlast
net:   tb.dut.split10_merge10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge10_wdata
net:   tb.dut.split10_merge10_rvalid [1] = 0     // split10_merge10_rvalid
net:   tb.dut.split10_merge10_rresp [2] = 00     // split10_merge10_rresp
net:   tb.dut.split10_merge10_rready [1] = 1     // split10_merge10_rready
net:   tb.dut.split10_merge10_rlast [1] = 0     // split10_merge10_rlast
net:   tb.dut.split10_merge10_rid [4] = 0000     // split10_merge10_rid
net:   tb.dut.split10_merge10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split10_merge10_rdata
net:   tb.dut.split10_merge10_bvalid [1] = 0     // split10_merge10_bvalid
net:   tb.dut.split10_merge10_bresp [2] = 00     // split10_merge10_bresp
net:   tb.dut.split10_merge10_bready [1] = 1     // split10_merge10_bready
net:   tb.dut.split10_merge10_bid [4] = 0000     // split10_merge10_bid
net:   tb.dut.split10_merge10_awvalid [1] = 0     // split10_merge10_awvalid
net:   tb.dut.split10_merge10_awready [1] = 1     // split10_merge10_awready
net:   tb.dut.split10_merge10_awlen [8] = 00000000     // split10_merge10_awlen
net:   tb.dut.split10_merge10_awid [4] = 0000     // split10_merge10_awid
net:   tb.dut.split10_merge10_awextras [8] = 00000000     // split10_merge10_awextras
net:   tb.dut.split10_merge10_awburst [2] = 00     // split10_merge10_awburst
net:   tb.dut.split10_merge10_awaddr [32] = 00000000000000000000000000000000     // split10_merge10_awaddr
net:   tb.dut.split10_merge10_arvalid [1] = 0     // split10_merge10_arvalid
net:   tb.dut.split10_merge10_arready [1] = 1     // split10_merge10_arready
net:   tb.dut.split10_merge10_arlen [8] = 00000000     // split10_merge10_arlen
net:   tb.dut.split10_merge10_arid [4] = 0000     // split10_merge10_arid
net:   tb.dut.split10_merge10_arextras [8] = 00000000     // split10_merge10_arextras
net:   tb.dut.split10_merge10_arburst [2] = 00     // split10_merge10_arburst
net:   tb.dut.split10_merge10_araddr [32] = 00000000000000000000000000000000     // split10_merge10_araddr
net:   tb.dut.split109_merge215_wvalid [1] = 0     // split109_merge215_wvalid
net:   tb.dut.split109_merge215_wstrb [8] = 00000000     // split109_merge215_wstrb
net:   tb.dut.split109_merge215_wready [1] = 1     // split109_merge215_wready
net:   tb.dut.split109_merge215_wlast [1] = 0     // split109_merge215_wlast
net:   tb.dut.split109_merge215_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge215_wdata
net:   tb.dut.split109_merge215_rvalid [1] = 0     // split109_merge215_rvalid
net:   tb.dut.split109_merge215_rresp [2] = 00     // split109_merge215_rresp
net:   tb.dut.split109_merge215_rready [1] = 1     // split109_merge215_rready
net:   tb.dut.split109_merge215_rlast [1] = 0     // split109_merge215_rlast
net:   tb.dut.split109_merge215_rid [4] = 0000     // split109_merge215_rid
net:   tb.dut.split109_merge215_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge215_rdata
net:   tb.dut.split109_merge215_bvalid [1] = 0     // split109_merge215_bvalid
net:   tb.dut.split109_merge215_bresp [2] = xx     // split109_merge215_bresp
net:   tb.dut.split109_merge215_bready [1] = 1     // split109_merge215_bready
net:   tb.dut.split109_merge215_bid [4] = 0000     // split109_merge215_bid
net:   tb.dut.split109_merge215_awvalid [1] = 0     // split109_merge215_awvalid
net:   tb.dut.split109_merge215_awready [1] = 1     // split109_merge215_awready
net:   tb.dut.split109_merge215_awlen [8] = 00000000     // split109_merge215_awlen
net:   tb.dut.split109_merge215_awid [4] = 0000     // split109_merge215_awid
net:   tb.dut.split109_merge215_awextras [8] = 00000000     // split109_merge215_awextras
net:   tb.dut.split109_merge215_awburst [2] = 00     // split109_merge215_awburst
net:   tb.dut.split109_merge215_awaddr [32] = 00000000000000000000000000000000     // split109_merge215_awaddr
net:   tb.dut.split109_merge215_arvalid [1] = 0     // split109_merge215_arvalid
net:   tb.dut.split109_merge215_arready [1] = 1     // split109_merge215_arready
net:   tb.dut.split109_merge215_arlen [8] = 00000000     // split109_merge215_arlen
net:   tb.dut.split109_merge215_arid [4] = 0000     // split109_merge215_arid
net:   tb.dut.split109_merge215_arextras [8] = 00000000     // split109_merge215_arextras
net:   tb.dut.split109_merge215_arburst [2] = 00     // split109_merge215_arburst
net:   tb.dut.split109_merge215_araddr [32] = 00000000000000000000000000000000     // split109_merge215_araddr
net:   tb.dut.split109_merge209_wvalid [1] = 0     // split109_merge209_wvalid
net:   tb.dut.split109_merge209_wstrb [8] = 00000000     // split109_merge209_wstrb
net:   tb.dut.split109_merge209_wready [1] = 1     // split109_merge209_wready
net:   tb.dut.split109_merge209_wlast [1] = 0     // split109_merge209_wlast
net:   tb.dut.split109_merge209_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge209_wdata
net:   tb.dut.split109_merge209_rvalid [1] = 0     // split109_merge209_rvalid
net:   tb.dut.split109_merge209_rresp [2] = 00     // split109_merge209_rresp
net:   tb.dut.split109_merge209_rready [1] = 1     // split109_merge209_rready
net:   tb.dut.split109_merge209_rlast [1] = 0     // split109_merge209_rlast
net:   tb.dut.split109_merge209_rid [4] = 0000     // split109_merge209_rid
net:   tb.dut.split109_merge209_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge209_rdata
net:   tb.dut.split109_merge209_bvalid [1] = 0     // split109_merge209_bvalid
net:   tb.dut.split109_merge209_bresp [2] = xx     // split109_merge209_bresp
net:   tb.dut.split109_merge209_bready [1] = 1     // split109_merge209_bready
net:   tb.dut.split109_merge209_bid [4] = 0000     // split109_merge209_bid
net:   tb.dut.split109_merge209_awvalid [1] = 0     // split109_merge209_awvalid
net:   tb.dut.split109_merge209_awready [1] = 1     // split109_merge209_awready
net:   tb.dut.split109_merge209_awlen [8] = 00000000     // split109_merge209_awlen
net:   tb.dut.split109_merge209_awid [4] = 0000     // split109_merge209_awid
net:   tb.dut.split109_merge209_awextras [8] = 00000000     // split109_merge209_awextras
net:   tb.dut.split109_merge209_awburst [2] = 00     // split109_merge209_awburst
net:   tb.dut.split109_merge209_awaddr [32] = 00000000000000000000000000000000     // split109_merge209_awaddr
net:   tb.dut.split109_merge209_arvalid [1] = 0     // split109_merge209_arvalid
net:   tb.dut.split109_merge209_arready [1] = 1     // split109_merge209_arready
net:   tb.dut.split109_merge209_arlen [8] = 00000000     // split109_merge209_arlen
net:   tb.dut.split109_merge209_arid [4] = 0000     // split109_merge209_arid
net:   tb.dut.split109_merge209_arextras [8] = 00000000     // split109_merge209_arextras
net:   tb.dut.split109_merge209_arburst [2] = 00     // split109_merge209_arburst
net:   tb.dut.split109_merge209_araddr [32] = 00000000000000000000000000000000     // split109_merge209_araddr
net:   tb.dut.split109_merge204_wvalid [1] = 0     // split109_merge204_wvalid
net:   tb.dut.split109_merge204_wstrb [8] = 00000000     // split109_merge204_wstrb
net:   tb.dut.split109_merge204_wready [1] = 1     // split109_merge204_wready
net:   tb.dut.split109_merge204_wlast [1] = 0     // split109_merge204_wlast
net:   tb.dut.split109_merge204_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge204_wdata
net:   tb.dut.split109_merge204_rvalid [1] = 0     // split109_merge204_rvalid
net:   tb.dut.split109_merge204_rresp [2] = 00     // split109_merge204_rresp
net:   tb.dut.split109_merge204_rready [1] = 1     // split109_merge204_rready
net:   tb.dut.split109_merge204_rlast [1] = 0     // split109_merge204_rlast
net:   tb.dut.split109_merge204_rid [4] = 0000     // split109_merge204_rid
net:   tb.dut.split109_merge204_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge204_rdata
net:   tb.dut.split109_merge204_bvalid [1] = 0     // split109_merge204_bvalid
net:   tb.dut.split109_merge204_bresp [2] = xx     // split109_merge204_bresp
net:   tb.dut.split109_merge204_bready [1] = 1     // split109_merge204_bready
net:   tb.dut.split109_merge204_bid [4] = 0000     // split109_merge204_bid
net:   tb.dut.split109_merge204_awvalid [1] = 0     // split109_merge204_awvalid
net:   tb.dut.split109_merge204_awready [1] = 1     // split109_merge204_awready
net:   tb.dut.split109_merge204_awlen [8] = 00000000     // split109_merge204_awlen
net:   tb.dut.split109_merge204_awid [4] = 0000     // split109_merge204_awid
net:   tb.dut.split109_merge204_awextras [8] = 00000000     // split109_merge204_awextras
net:   tb.dut.split109_merge204_awburst [2] = 00     // split109_merge204_awburst
net:   tb.dut.split109_merge204_awaddr [32] = 00000000000000000000000000000000     // split109_merge204_awaddr
net:   tb.dut.split109_merge204_arvalid [1] = 0     // split109_merge204_arvalid
net:   tb.dut.split109_merge204_arready [1] = 1     // split109_merge204_arready
net:   tb.dut.split109_merge204_arlen [8] = 00000000     // split109_merge204_arlen
net:   tb.dut.split109_merge204_arid [4] = 0000     // split109_merge204_arid
net:   tb.dut.split109_merge204_arextras [8] = 00000000     // split109_merge204_arextras
net:   tb.dut.split109_merge204_arburst [2] = 00     // split109_merge204_arburst
net:   tb.dut.split109_merge204_araddr [32] = 00000000000000000000000000000000     // split109_merge204_araddr
net:   tb.dut.split109_merge203_wvalid [1] = 0     // split109_merge203_wvalid
net:   tb.dut.split109_merge203_wstrb [8] = 00000000     // split109_merge203_wstrb
net:   tb.dut.split109_merge203_wready [1] = 1     // split109_merge203_wready
net:   tb.dut.split109_merge203_wlast [1] = 0     // split109_merge203_wlast
net:   tb.dut.split109_merge203_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge203_wdata
net:   tb.dut.split109_merge203_rvalid [1] = 0     // split109_merge203_rvalid
net:   tb.dut.split109_merge203_rresp [2] = 00     // split109_merge203_rresp
net:   tb.dut.split109_merge203_rready [1] = 1     // split109_merge203_rready
net:   tb.dut.split109_merge203_rlast [1] = 0     // split109_merge203_rlast
net:   tb.dut.split109_merge203_rid [4] = 0000     // split109_merge203_rid
net:   tb.dut.split109_merge203_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split109_merge203_rdata
net:   tb.dut.split109_merge203_bvalid [1] = 0     // split109_merge203_bvalid
net:   tb.dut.split109_merge203_bresp [2] = xx     // split109_merge203_bresp
net:   tb.dut.split109_merge203_bready [1] = 1     // split109_merge203_bready
net:   tb.dut.split109_merge203_bid [4] = 0000     // split109_merge203_bid
net:   tb.dut.split109_merge203_awvalid [1] = 0     // split109_merge203_awvalid
net:   tb.dut.split109_merge203_awready [1] = 1     // split109_merge203_awready
net:   tb.dut.split109_merge203_awlen [8] = 00000000     // split109_merge203_awlen
net:   tb.dut.split109_merge203_awid [4] = 0000     // split109_merge203_awid
net:   tb.dut.split109_merge203_awextras [8] = 00000000     // split109_merge203_awextras
net:   tb.dut.split109_merge203_awburst [2] = 00     // split109_merge203_awburst
net:   tb.dut.split109_merge203_awaddr [32] = 00000000000000000000000000000000     // split109_merge203_awaddr
net:   tb.dut.split109_merge203_arvalid [1] = 0     // split109_merge203_arvalid
net:   tb.dut.split109_merge203_arready [1] = 1     // split109_merge203_arready
net:   tb.dut.split109_merge203_arlen [8] = 00000000     // split109_merge203_arlen
net:   tb.dut.split109_merge203_arid [4] = 0000     // split109_merge203_arid
net:   tb.dut.split109_merge203_arextras [8] = 00000000     // split109_merge203_arextras
net:   tb.dut.split109_merge203_arburst [2] = 00     // split109_merge203_arburst
net:   tb.dut.split109_merge203_araddr [32] = 00000000000000000000000000000000     // split109_merge203_araddr
net:   tb.dut.split108_merge211_wvalid [1] = 0     // split108_merge211_wvalid
net:   tb.dut.split108_merge211_wstrb [8] = 00000000     // split108_merge211_wstrb
net:   tb.dut.split108_merge211_wready [1] = 1     // split108_merge211_wready
net:   tb.dut.split108_merge211_wlast [1] = 0     // split108_merge211_wlast
net:   tb.dut.split108_merge211_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge211_wdata
net:   tb.dut.split108_merge211_rvalid [1] = 0     // split108_merge211_rvalid
net:   tb.dut.split108_merge211_rresp [2] = 00     // split108_merge211_rresp
net:   tb.dut.split108_merge211_rready [1] = 1     // split108_merge211_rready
net:   tb.dut.split108_merge211_rlast [1] = 0     // split108_merge211_rlast
net:   tb.dut.split108_merge211_rid [4] = 0000     // split108_merge211_rid
net:   tb.dut.split108_merge211_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge211_rdata
net:   tb.dut.split108_merge211_bvalid [1] = 0     // split108_merge211_bvalid
net:   tb.dut.split108_merge211_bresp [2] = xx     // split108_merge211_bresp
net:   tb.dut.split108_merge211_bready [1] = 1     // split108_merge211_bready
net:   tb.dut.split108_merge211_bid [4] = 0000     // split108_merge211_bid
net:   tb.dut.split108_merge211_awvalid [1] = 0     // split108_merge211_awvalid
net:   tb.dut.split108_merge211_awready [1] = 1     // split108_merge211_awready
net:   tb.dut.split108_merge211_awlen [8] = 00000000     // split108_merge211_awlen
net:   tb.dut.split108_merge211_awid [4] = 0000     // split108_merge211_awid
net:   tb.dut.split108_merge211_awextras [8] = 00000000     // split108_merge211_awextras
net:   tb.dut.split108_merge211_awburst [2] = 00     // split108_merge211_awburst
net:   tb.dut.split108_merge211_awaddr [32] = 00000000000000000000000000000000     // split108_merge211_awaddr
net:   tb.dut.split108_merge211_arvalid [1] = 0     // split108_merge211_arvalid
net:   tb.dut.split108_merge211_arready [1] = 1     // split108_merge211_arready
net:   tb.dut.split108_merge211_arlen [8] = 00000000     // split108_merge211_arlen
net:   tb.dut.split108_merge211_arid [4] = 0000     // split108_merge211_arid
net:   tb.dut.split108_merge211_arextras [8] = 00000000     // split108_merge211_arextras
net:   tb.dut.split108_merge211_arburst [2] = 00     // split108_merge211_arburst
net:   tb.dut.split108_merge211_araddr [32] = 00000000000000000000000000000000     // split108_merge211_araddr
net:   tb.dut.split108_merge205_wvalid [1] = 0     // split108_merge205_wvalid
net:   tb.dut.split108_merge205_wstrb [8] = 00000000     // split108_merge205_wstrb
net:   tb.dut.split108_merge205_wready [1] = 1     // split108_merge205_wready
net:   tb.dut.split108_merge205_wlast [1] = 0     // split108_merge205_wlast
net:   tb.dut.split108_merge205_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge205_wdata
net:   tb.dut.split108_merge205_rvalid [1] = 0     // split108_merge205_rvalid
net:   tb.dut.split108_merge205_rresp [2] = 00     // split108_merge205_rresp
net:   tb.dut.split108_merge205_rready [1] = 1     // split108_merge205_rready
net:   tb.dut.split108_merge205_rlast [1] = 0     // split108_merge205_rlast
net:   tb.dut.split108_merge205_rid [4] = 0000     // split108_merge205_rid
net:   tb.dut.split108_merge205_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge205_rdata
net:   tb.dut.split108_merge205_bvalid [1] = 0     // split108_merge205_bvalid
net:   tb.dut.split108_merge205_bresp [2] = xx     // split108_merge205_bresp
net:   tb.dut.split108_merge205_bready [1] = 1     // split108_merge205_bready
net:   tb.dut.split108_merge205_bid [4] = 0000     // split108_merge205_bid
net:   tb.dut.split108_merge205_awvalid [1] = 0     // split108_merge205_awvalid
net:   tb.dut.split108_merge205_awready [1] = 1     // split108_merge205_awready
net:   tb.dut.split108_merge205_awlen [8] = 00000000     // split108_merge205_awlen
net:   tb.dut.split108_merge205_awid [4] = 0000     // split108_merge205_awid
net:   tb.dut.split108_merge205_awextras [8] = 00000000     // split108_merge205_awextras
net:   tb.dut.split108_merge205_awburst [2] = 00     // split108_merge205_awburst
net:   tb.dut.split108_merge205_awaddr [32] = 00000000000000000000000000000000     // split108_merge205_awaddr
net:   tb.dut.split108_merge205_arvalid [1] = 0     // split108_merge205_arvalid
net:   tb.dut.split108_merge205_arready [1] = 1     // split108_merge205_arready
net:   tb.dut.split108_merge205_arlen [8] = 00000000     // split108_merge205_arlen
net:   tb.dut.split108_merge205_arid [4] = 0000     // split108_merge205_arid
net:   tb.dut.split108_merge205_arextras [8] = 00000000     // split108_merge205_arextras
net:   tb.dut.split108_merge205_arburst [2] = 00     // split108_merge205_arburst
net:   tb.dut.split108_merge205_araddr [32] = 00000000000000000000000000000000     // split108_merge205_araddr
net:   tb.dut.split108_merge202_wvalid [1] = 0     // split108_merge202_wvalid
net:   tb.dut.split108_merge202_wstrb [8] = 00000000     // split108_merge202_wstrb
net:   tb.dut.split108_merge202_wready [1] = 1     // split108_merge202_wready
net:   tb.dut.split108_merge202_wlast [1] = 0     // split108_merge202_wlast
net:   tb.dut.split108_merge202_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge202_wdata
net:   tb.dut.split108_merge202_rvalid [1] = 0     // split108_merge202_rvalid
net:   tb.dut.split108_merge202_rresp [2] = 00     // split108_merge202_rresp
net:   tb.dut.split108_merge202_rready [1] = 1     // split108_merge202_rready
net:   tb.dut.split108_merge202_rlast [1] = 0     // split108_merge202_rlast
net:   tb.dut.split108_merge202_rid [4] = 0000     // split108_merge202_rid
net:   tb.dut.split108_merge202_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge202_rdata
net:   tb.dut.split108_merge202_bvalid [1] = 0     // split108_merge202_bvalid
net:   tb.dut.split108_merge202_bresp [2] = xx     // split108_merge202_bresp
net:   tb.dut.split108_merge202_bready [1] = 1     // split108_merge202_bready
net:   tb.dut.split108_merge202_bid [4] = 0000     // split108_merge202_bid
net:   tb.dut.split108_merge202_awvalid [1] = 0     // split108_merge202_awvalid
net:   tb.dut.split108_merge202_awready [1] = 1     // split108_merge202_awready
net:   tb.dut.split108_merge202_awlen [8] = 00000000     // split108_merge202_awlen
net:   tb.dut.split108_merge202_awid [4] = 0000     // split108_merge202_awid
net:   tb.dut.split108_merge202_awextras [8] = 00000000     // split108_merge202_awextras
net:   tb.dut.split108_merge202_awburst [2] = 00     // split108_merge202_awburst
net:   tb.dut.split108_merge202_awaddr [32] = 00000000000000000000000000000000     // split108_merge202_awaddr
net:   tb.dut.split108_merge202_arvalid [1] = 0     // split108_merge202_arvalid
net:   tb.dut.split108_merge202_arready [1] = 1     // split108_merge202_arready
net:   tb.dut.split108_merge202_arlen [8] = 00000000     // split108_merge202_arlen
net:   tb.dut.split108_merge202_arid [4] = 0000     // split108_merge202_arid
net:   tb.dut.split108_merge202_arextras [8] = 00000000     // split108_merge202_arextras
net:   tb.dut.split108_merge202_arburst [2] = 00     // split108_merge202_arburst
net:   tb.dut.split108_merge202_araddr [32] = 00000000000000000000000000000000     // split108_merge202_araddr
net:   tb.dut.split108_merge200_wvalid [1] = 0     // split108_merge200_wvalid
net:   tb.dut.split108_merge200_wstrb [8] = 00000000     // split108_merge200_wstrb
net:   tb.dut.split108_merge200_wready [1] = 1     // split108_merge200_wready
net:   tb.dut.split108_merge200_wlast [1] = 0     // split108_merge200_wlast
net:   tb.dut.split108_merge200_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge200_wdata
net:   tb.dut.split108_merge200_rvalid [1] = 0     // split108_merge200_rvalid
net:   tb.dut.split108_merge200_rresp [2] = 00     // split108_merge200_rresp
net:   tb.dut.split108_merge200_rready [1] = 1     // split108_merge200_rready
net:   tb.dut.split108_merge200_rlast [1] = 0     // split108_merge200_rlast
net:   tb.dut.split108_merge200_rid [4] = 0000     // split108_merge200_rid
net:   tb.dut.split108_merge200_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split108_merge200_rdata
net:   tb.dut.split108_merge200_bvalid [1] = 0     // split108_merge200_bvalid
net:   tb.dut.split108_merge200_bresp [2] = xx     // split108_merge200_bresp
net:   tb.dut.split108_merge200_bready [1] = 1     // split108_merge200_bready
net:   tb.dut.split108_merge200_bid [4] = 0000     // split108_merge200_bid
net:   tb.dut.split108_merge200_awvalid [1] = 0     // split108_merge200_awvalid
net:   tb.dut.split108_merge200_awready [1] = 1     // split108_merge200_awready
net:   tb.dut.split108_merge200_awlen [8] = 00000000     // split108_merge200_awlen
net:   tb.dut.split108_merge200_awid [4] = 0000     // split108_merge200_awid
net:   tb.dut.split108_merge200_awextras [8] = 00000000     // split108_merge200_awextras
net:   tb.dut.split108_merge200_awburst [2] = 00     // split108_merge200_awburst
net:   tb.dut.split108_merge200_awaddr [32] = 00000000000000000000000000000000     // split108_merge200_awaddr
net:   tb.dut.split108_merge200_arvalid [1] = 0     // split108_merge200_arvalid
net:   tb.dut.split108_merge200_arready [1] = 1     // split108_merge200_arready
net:   tb.dut.split108_merge200_arlen [8] = 00000000     // split108_merge200_arlen
net:   tb.dut.split108_merge200_arid [4] = 0000     // split108_merge200_arid
net:   tb.dut.split108_merge200_arextras [8] = 00000000     // split108_merge200_arextras
net:   tb.dut.split108_merge200_arburst [2] = 00     // split108_merge200_arburst
net:   tb.dut.split108_merge200_araddr [32] = 00000000000000000000000000000000     // split108_merge200_araddr
net:   tb.dut.split107_merge211_wvalid [1] = 0     // split107_merge211_wvalid
net:   tb.dut.split107_merge211_wstrb [8] = 00000000     // split107_merge211_wstrb
net:   tb.dut.split107_merge211_wready [1] = 1     // split107_merge211_wready
net:   tb.dut.split107_merge211_wlast [1] = 0     // split107_merge211_wlast
net:   tb.dut.split107_merge211_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge211_wdata
net:   tb.dut.split107_merge211_rvalid [1] = 0     // split107_merge211_rvalid
net:   tb.dut.split107_merge211_rresp [2] = 00     // split107_merge211_rresp
net:   tb.dut.split107_merge211_rready [1] = 1     // split107_merge211_rready
net:   tb.dut.split107_merge211_rlast [1] = 0     // split107_merge211_rlast
net:   tb.dut.split107_merge211_rid [4] = 0000     // split107_merge211_rid
net:   tb.dut.split107_merge211_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge211_rdata
net:   tb.dut.split107_merge211_bvalid [1] = 0     // split107_merge211_bvalid
net:   tb.dut.split107_merge211_bresp [2] = xx     // split107_merge211_bresp
net:   tb.dut.split107_merge211_bready [1] = 1     // split107_merge211_bready
net:   tb.dut.split107_merge211_bid [4] = 0000     // split107_merge211_bid
net:   tb.dut.split107_merge211_awvalid [1] = 0     // split107_merge211_awvalid
net:   tb.dut.split107_merge211_awready [1] = 1     // split107_merge211_awready
net:   tb.dut.split107_merge211_awlen [8] = 00000000     // split107_merge211_awlen
net:   tb.dut.split107_merge211_awid [4] = 0000     // split107_merge211_awid
net:   tb.dut.split107_merge211_awextras [8] = 00000000     // split107_merge211_awextras
net:   tb.dut.split107_merge211_awburst [2] = 00     // split107_merge211_awburst
net:   tb.dut.split107_merge211_awaddr [32] = 00000000000000000000000000000000     // split107_merge211_awaddr
net:   tb.dut.split107_merge211_arvalid [1] = 0     // split107_merge211_arvalid
net:   tb.dut.split107_merge211_arready [1] = 1     // split107_merge211_arready
net:   tb.dut.split107_merge211_arlen [8] = 00000000     // split107_merge211_arlen
net:   tb.dut.split107_merge211_arid [4] = 0000     // split107_merge211_arid
net:   tb.dut.split107_merge211_arextras [8] = 00000000     // split107_merge211_arextras
net:   tb.dut.split107_merge211_arburst [2] = 00     // split107_merge211_arburst
net:   tb.dut.split107_merge211_araddr [32] = 00000000000000000000000000000000     // split107_merge211_araddr
net:   tb.dut.split107_merge210_wvalid [1] = 0     // split107_merge210_wvalid
net:   tb.dut.split107_merge210_wstrb [8] = 00000000     // split107_merge210_wstrb
net:   tb.dut.split107_merge210_wready [1] = 1     // split107_merge210_wready
net:   tb.dut.split107_merge210_wlast [1] = 0     // split107_merge210_wlast
net:   tb.dut.split107_merge210_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge210_wdata
net:   tb.dut.split107_merge210_rvalid [1] = 0     // split107_merge210_rvalid
net:   tb.dut.split107_merge210_rresp [2] = 00     // split107_merge210_rresp
net:   tb.dut.split107_merge210_rready [1] = 1     // split107_merge210_rready
net:   tb.dut.split107_merge210_rlast [1] = 0     // split107_merge210_rlast
net:   tb.dut.split107_merge210_rid [4] = 0000     // split107_merge210_rid
net:   tb.dut.split107_merge210_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge210_rdata
net:   tb.dut.split107_merge210_bvalid [1] = 0     // split107_merge210_bvalid
net:   tb.dut.split107_merge210_bresp [2] = xx     // split107_merge210_bresp
net:   tb.dut.split107_merge210_bready [1] = 1     // split107_merge210_bready
net:   tb.dut.split107_merge210_bid [4] = 0000     // split107_merge210_bid
net:   tb.dut.split107_merge210_awvalid [1] = 0     // split107_merge210_awvalid
net:   tb.dut.split107_merge210_awready [1] = 1     // split107_merge210_awready
net:   tb.dut.split107_merge210_awlen [8] = 00000000     // split107_merge210_awlen
net:   tb.dut.split107_merge210_awid [4] = 0000     // split107_merge210_awid
net:   tb.dut.split107_merge210_awextras [8] = 00000000     // split107_merge210_awextras
net:   tb.dut.split107_merge210_awburst [2] = 00     // split107_merge210_awburst
net:   tb.dut.split107_merge210_awaddr [32] = 00000000000000000000000000000000     // split107_merge210_awaddr
net:   tb.dut.split107_merge210_arvalid [1] = 0     // split107_merge210_arvalid
net:   tb.dut.split107_merge210_arready [1] = 1     // split107_merge210_arready
net:   tb.dut.split107_merge210_arlen [8] = 00000000     // split107_merge210_arlen
net:   tb.dut.split107_merge210_arid [4] = 0000     // split107_merge210_arid
net:   tb.dut.split107_merge210_arextras [8] = 00000000     // split107_merge210_arextras
net:   tb.dut.split107_merge210_arburst [2] = 00     // split107_merge210_arburst
net:   tb.dut.split107_merge210_araddr [32] = 00000000000000000000000000000000     // split107_merge210_araddr
net:   tb.dut.split107_merge207_wvalid [1] = 0     // split107_merge207_wvalid
net:   tb.dut.split107_merge207_wstrb [8] = 00000000     // split107_merge207_wstrb
net:   tb.dut.split107_merge207_wready [1] = 1     // split107_merge207_wready
net:   tb.dut.split107_merge207_wlast [1] = 0     // split107_merge207_wlast
net:   tb.dut.split107_merge207_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge207_wdata
net:   tb.dut.split107_merge207_rvalid [1] = 0     // split107_merge207_rvalid
net:   tb.dut.split107_merge207_rresp [2] = 00     // split107_merge207_rresp
net:   tb.dut.split107_merge207_rready [1] = 1     // split107_merge207_rready
net:   tb.dut.split107_merge207_rlast [1] = 0     // split107_merge207_rlast
net:   tb.dut.split107_merge207_rid [4] = 0000     // split107_merge207_rid
net:   tb.dut.split107_merge207_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge207_rdata
net:   tb.dut.split107_merge207_bvalid [1] = 0     // split107_merge207_bvalid
net:   tb.dut.split107_merge207_bresp [2] = xx     // split107_merge207_bresp
net:   tb.dut.split107_merge207_bready [1] = 1     // split107_merge207_bready
net:   tb.dut.split107_merge207_bid [4] = 0000     // split107_merge207_bid
net:   tb.dut.split107_merge207_awvalid [1] = 0     // split107_merge207_awvalid
net:   tb.dut.split107_merge207_awready [1] = 1     // split107_merge207_awready
net:   tb.dut.split107_merge207_awlen [8] = 00000000     // split107_merge207_awlen
net:   tb.dut.split107_merge207_awid [4] = 0000     // split107_merge207_awid
net:   tb.dut.split107_merge207_awextras [8] = 00000000     // split107_merge207_awextras
net:   tb.dut.split107_merge207_awburst [2] = 00     // split107_merge207_awburst
net:   tb.dut.split107_merge207_awaddr [32] = 00000000000000000000000000000000     // split107_merge207_awaddr
net:   tb.dut.split107_merge207_arvalid [1] = 0     // split107_merge207_arvalid
net:   tb.dut.split107_merge207_arready [1] = 1     // split107_merge207_arready
net:   tb.dut.split107_merge207_arlen [8] = 00000000     // split107_merge207_arlen
net:   tb.dut.split107_merge207_arid [4] = 0000     // split107_merge207_arid
net:   tb.dut.split107_merge207_arextras [8] = 00000000     // split107_merge207_arextras
net:   tb.dut.split107_merge207_arburst [2] = 00     // split107_merge207_arburst
net:   tb.dut.split107_merge207_araddr [32] = 00000000000000000000000000000000     // split107_merge207_araddr
net:   tb.dut.split107_merge202_wvalid [1] = 0     // split107_merge202_wvalid
net:   tb.dut.split107_merge202_wstrb [8] = 00000000     // split107_merge202_wstrb
net:   tb.dut.split107_merge202_wready [1] = 1     // split107_merge202_wready
net:   tb.dut.split107_merge202_wlast [1] = 0     // split107_merge202_wlast
net:   tb.dut.split107_merge202_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge202_wdata
net:   tb.dut.split107_merge202_rvalid [1] = 0     // split107_merge202_rvalid
net:   tb.dut.split107_merge202_rresp [2] = 00     // split107_merge202_rresp
net:   tb.dut.split107_merge202_rready [1] = 1     // split107_merge202_rready
net:   tb.dut.split107_merge202_rlast [1] = 0     // split107_merge202_rlast
net:   tb.dut.split107_merge202_rid [4] = 0000     // split107_merge202_rid
net:   tb.dut.split107_merge202_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split107_merge202_rdata
net:   tb.dut.split107_merge202_bvalid [1] = 0     // split107_merge202_bvalid
net:   tb.dut.split107_merge202_bresp [2] = xx     // split107_merge202_bresp
net:   tb.dut.split107_merge202_bready [1] = 1     // split107_merge202_bready
net:   tb.dut.split107_merge202_bid [4] = 0000     // split107_merge202_bid
net:   tb.dut.split107_merge202_awvalid [1] = 0     // split107_merge202_awvalid
net:   tb.dut.split107_merge202_awready [1] = 1     // split107_merge202_awready
net:   tb.dut.split107_merge202_awlen [8] = 00000000     // split107_merge202_awlen
net:   tb.dut.split107_merge202_awid [4] = 0000     // split107_merge202_awid
net:   tb.dut.split107_merge202_awextras [8] = 00000000     // split107_merge202_awextras
net:   tb.dut.split107_merge202_awburst [2] = 00     // split107_merge202_awburst
net:   tb.dut.split107_merge202_awaddr [32] = 00000000000000000000000000000000     // split107_merge202_awaddr
net:   tb.dut.split107_merge202_arvalid [1] = 0     // split107_merge202_arvalid
net:   tb.dut.split107_merge202_arready [1] = 1     // split107_merge202_arready
net:   tb.dut.split107_merge202_arlen [8] = 00000000     // split107_merge202_arlen
net:   tb.dut.split107_merge202_arid [4] = 0000     // split107_merge202_arid
net:   tb.dut.split107_merge202_arextras [8] = 00000000     // split107_merge202_arextras
net:   tb.dut.split107_merge202_arburst [2] = 00     // split107_merge202_arburst
net:   tb.dut.split107_merge202_araddr [32] = 00000000000000000000000000000000     // split107_merge202_araddr
net:   tb.dut.split106_merge213_wvalid [1] = 0     // split106_merge213_wvalid
net:   tb.dut.split106_merge213_wstrb [8] = 00000000     // split106_merge213_wstrb
net:   tb.dut.split106_merge213_wready [1] = 1     // split106_merge213_wready
net:   tb.dut.split106_merge213_wlast [1] = 0     // split106_merge213_wlast
net:   tb.dut.split106_merge213_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge213_wdata
net:   tb.dut.split106_merge213_rvalid [1] = 0     // split106_merge213_rvalid
net:   tb.dut.split106_merge213_rresp [2] = 00     // split106_merge213_rresp
net:   tb.dut.split106_merge213_rready [1] = 1     // split106_merge213_rready
net:   tb.dut.split106_merge213_rlast [1] = 0     // split106_merge213_rlast
net:   tb.dut.split106_merge213_rid [4] = 0000     // split106_merge213_rid
net:   tb.dut.split106_merge213_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge213_rdata
net:   tb.dut.split106_merge213_bvalid [1] = 0     // split106_merge213_bvalid
net:   tb.dut.split106_merge213_bresp [2] = xx     // split106_merge213_bresp
net:   tb.dut.split106_merge213_bready [1] = 1     // split106_merge213_bready
net:   tb.dut.split106_merge213_bid [4] = 0000     // split106_merge213_bid
net:   tb.dut.split106_merge213_awvalid [1] = 0     // split106_merge213_awvalid
net:   tb.dut.split106_merge213_awready [1] = 1     // split106_merge213_awready
net:   tb.dut.split106_merge213_awlen [8] = 00000000     // split106_merge213_awlen
net:   tb.dut.split106_merge213_awid [4] = 0000     // split106_merge213_awid
net:   tb.dut.split106_merge213_awextras [8] = 00000000     // split106_merge213_awextras
net:   tb.dut.split106_merge213_awburst [2] = 00     // split106_merge213_awburst
net:   tb.dut.split106_merge213_awaddr [32] = 00000000000000000000000000000000     // split106_merge213_awaddr
net:   tb.dut.split106_merge213_arvalid [1] = 0     // split106_merge213_arvalid
net:   tb.dut.split106_merge213_arready [1] = 1     // split106_merge213_arready
net:   tb.dut.split106_merge213_arlen [8] = 00000000     // split106_merge213_arlen
net:   tb.dut.split106_merge213_arid [4] = 0000     // split106_merge213_arid
net:   tb.dut.split106_merge213_arextras [8] = 00000000     // split106_merge213_arextras
net:   tb.dut.split106_merge213_arburst [2] = 00     // split106_merge213_arburst
net:   tb.dut.split106_merge213_araddr [32] = 00000000000000000000000000000000     // split106_merge213_araddr
net:   tb.dut.split106_merge211_wvalid [1] = 0     // split106_merge211_wvalid
net:   tb.dut.split106_merge211_wstrb [8] = 00000000     // split106_merge211_wstrb
net:   tb.dut.split106_merge211_wready [1] = 1     // split106_merge211_wready
net:   tb.dut.split106_merge211_wlast [1] = 0     // split106_merge211_wlast
net:   tb.dut.split106_merge211_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge211_wdata
net:   tb.dut.split106_merge211_rvalid [1] = 0     // split106_merge211_rvalid
net:   tb.dut.split106_merge211_rresp [2] = 00     // split106_merge211_rresp
net:   tb.dut.split106_merge211_rready [1] = 1     // split106_merge211_rready
net:   tb.dut.split106_merge211_rlast [1] = 0     // split106_merge211_rlast
net:   tb.dut.split106_merge211_rid [4] = 0000     // split106_merge211_rid
net:   tb.dut.split106_merge211_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge211_rdata
net:   tb.dut.split106_merge211_bvalid [1] = 0     // split106_merge211_bvalid
net:   tb.dut.split106_merge211_bresp [2] = xx     // split106_merge211_bresp
net:   tb.dut.split106_merge211_bready [1] = 1     // split106_merge211_bready
net:   tb.dut.split106_merge211_bid [4] = 0000     // split106_merge211_bid
net:   tb.dut.split106_merge211_awvalid [1] = 0     // split106_merge211_awvalid
net:   tb.dut.split106_merge211_awready [1] = 1     // split106_merge211_awready
net:   tb.dut.split106_merge211_awlen [8] = 00000000     // split106_merge211_awlen
net:   tb.dut.split106_merge211_awid [4] = 0000     // split106_merge211_awid
net:   tb.dut.split106_merge211_awextras [8] = 00000000     // split106_merge211_awextras
net:   tb.dut.split106_merge211_awburst [2] = 00     // split106_merge211_awburst
net:   tb.dut.split106_merge211_awaddr [32] = 00000000000000000000000000000000     // split106_merge211_awaddr
net:   tb.dut.split106_merge211_arvalid [1] = 0     // split106_merge211_arvalid
net:   tb.dut.split106_merge211_arready [1] = 1     // split106_merge211_arready
net:   tb.dut.split106_merge211_arlen [8] = 00000000     // split106_merge211_arlen
net:   tb.dut.split106_merge211_arid [4] = 0000     // split106_merge211_arid
net:   tb.dut.split106_merge211_arextras [8] = 00000000     // split106_merge211_arextras
net:   tb.dut.split106_merge211_arburst [2] = 00     // split106_merge211_arburst
net:   tb.dut.split106_merge211_araddr [32] = 00000000000000000000000000000000     // split106_merge211_araddr
net:   tb.dut.split106_merge205_wvalid [1] = 0     // split106_merge205_wvalid
net:   tb.dut.split106_merge205_wstrb [8] = 00000000     // split106_merge205_wstrb
net:   tb.dut.split106_merge205_wready [1] = 1     // split106_merge205_wready
net:   tb.dut.split106_merge205_wlast [1] = 0     // split106_merge205_wlast
net:   tb.dut.split106_merge205_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge205_wdata
net:   tb.dut.split106_merge205_rvalid [1] = 0     // split106_merge205_rvalid
net:   tb.dut.split106_merge205_rresp [2] = 00     // split106_merge205_rresp
net:   tb.dut.split106_merge205_rready [1] = 1     // split106_merge205_rready
net:   tb.dut.split106_merge205_rlast [1] = 0     // split106_merge205_rlast
net:   tb.dut.split106_merge205_rid [4] = 0000     // split106_merge205_rid
net:   tb.dut.split106_merge205_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge205_rdata
net:   tb.dut.split106_merge205_bvalid [1] = 0     // split106_merge205_bvalid
net:   tb.dut.split106_merge205_bresp [2] = xx     // split106_merge205_bresp
net:   tb.dut.split106_merge205_bready [1] = 1     // split106_merge205_bready
net:   tb.dut.split106_merge205_bid [4] = 0000     // split106_merge205_bid
net:   tb.dut.split106_merge205_awvalid [1] = 0     // split106_merge205_awvalid
net:   tb.dut.split106_merge205_awready [1] = 1     // split106_merge205_awready
net:   tb.dut.split106_merge205_awlen [8] = 00000000     // split106_merge205_awlen
net:   tb.dut.split106_merge205_awid [4] = 0000     // split106_merge205_awid
net:   tb.dut.split106_merge205_awextras [8] = 00000000     // split106_merge205_awextras
net:   tb.dut.split106_merge205_awburst [2] = 00     // split106_merge205_awburst
net:   tb.dut.split106_merge205_awaddr [32] = 00000000000000000000000000000000     // split106_merge205_awaddr
net:   tb.dut.split106_merge205_arvalid [1] = 0     // split106_merge205_arvalid
net:   tb.dut.split106_merge205_arready [1] = 1     // split106_merge205_arready
net:   tb.dut.split106_merge205_arlen [8] = 00000000     // split106_merge205_arlen
net:   tb.dut.split106_merge205_arid [4] = 0000     // split106_merge205_arid
net:   tb.dut.split106_merge205_arextras [8] = 00000000     // split106_merge205_arextras
net:   tb.dut.split106_merge205_arburst [2] = 00     // split106_merge205_arburst
net:   tb.dut.split106_merge205_araddr [32] = 00000000000000000000000000000000     // split106_merge205_araddr
net:   tb.dut.split106_merge204_wvalid [1] = 0     // split106_merge204_wvalid
net:   tb.dut.split106_merge204_wstrb [8] = 00000000     // split106_merge204_wstrb
net:   tb.dut.split106_merge204_wready [1] = 1     // split106_merge204_wready
net:   tb.dut.split106_merge204_wlast [1] = 0     // split106_merge204_wlast
net:   tb.dut.split106_merge204_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge204_wdata
net:   tb.dut.split106_merge204_rvalid [1] = 0     // split106_merge204_rvalid
net:   tb.dut.split106_merge204_rresp [2] = 00     // split106_merge204_rresp
net:   tb.dut.split106_merge204_rready [1] = 1     // split106_merge204_rready
net:   tb.dut.split106_merge204_rlast [1] = 0     // split106_merge204_rlast
net:   tb.dut.split106_merge204_rid [4] = 0000     // split106_merge204_rid
net:   tb.dut.split106_merge204_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split106_merge204_rdata
net:   tb.dut.split106_merge204_bvalid [1] = 0     // split106_merge204_bvalid
net:   tb.dut.split106_merge204_bresp [2] = xx     // split106_merge204_bresp
net:   tb.dut.split106_merge204_bready [1] = 1     // split106_merge204_bready
net:   tb.dut.split106_merge204_bid [4] = 0000     // split106_merge204_bid
net:   tb.dut.split106_merge204_awvalid [1] = 0     // split106_merge204_awvalid
net:   tb.dut.split106_merge204_awready [1] = 1     // split106_merge204_awready
net:   tb.dut.split106_merge204_awlen [8] = 00000000     // split106_merge204_awlen
net:   tb.dut.split106_merge204_awid [4] = 0000     // split106_merge204_awid
net:   tb.dut.split106_merge204_awextras [8] = 00000000     // split106_merge204_awextras
net:   tb.dut.split106_merge204_awburst [2] = 00     // split106_merge204_awburst
net:   tb.dut.split106_merge204_awaddr [32] = 00000000000000000000000000000000     // split106_merge204_awaddr
net:   tb.dut.split106_merge204_arvalid [1] = 0     // split106_merge204_arvalid
net:   tb.dut.split106_merge204_arready [1] = 1     // split106_merge204_arready
net:   tb.dut.split106_merge204_arlen [8] = 00000000     // split106_merge204_arlen
net:   tb.dut.split106_merge204_arid [4] = 0000     // split106_merge204_arid
net:   tb.dut.split106_merge204_arextras [8] = 00000000     // split106_merge204_arextras
net:   tb.dut.split106_merge204_arburst [2] = 00     // split106_merge204_arburst
net:   tb.dut.split106_merge204_araddr [32] = 00000000000000000000000000000000     // split106_merge204_araddr
net:   tb.dut.split105_merge213_wvalid [1] = 0     // split105_merge213_wvalid
net:   tb.dut.split105_merge213_wstrb [8] = 00000000     // split105_merge213_wstrb
net:   tb.dut.split105_merge213_wready [1] = 1     // split105_merge213_wready
net:   tb.dut.split105_merge213_wlast [1] = 0     // split105_merge213_wlast
net:   tb.dut.split105_merge213_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge213_wdata
net:   tb.dut.split105_merge213_rvalid [1] = 0     // split105_merge213_rvalid
net:   tb.dut.split105_merge213_rresp [2] = 00     // split105_merge213_rresp
net:   tb.dut.split105_merge213_rready [1] = 1     // split105_merge213_rready
net:   tb.dut.split105_merge213_rlast [1] = 0     // split105_merge213_rlast
net:   tb.dut.split105_merge213_rid [4] = 0000     // split105_merge213_rid
net:   tb.dut.split105_merge213_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge213_rdata
net:   tb.dut.split105_merge213_bvalid [1] = 0     // split105_merge213_bvalid
net:   tb.dut.split105_merge213_bresp [2] = xx     // split105_merge213_bresp
net:   tb.dut.split105_merge213_bready [1] = 1     // split105_merge213_bready
net:   tb.dut.split105_merge213_bid [4] = 0000     // split105_merge213_bid
net:   tb.dut.split105_merge213_awvalid [1] = 0     // split105_merge213_awvalid
net:   tb.dut.split105_merge213_awready [1] = 1     // split105_merge213_awready
net:   tb.dut.split105_merge213_awlen [8] = 00000000     // split105_merge213_awlen
net:   tb.dut.split105_merge213_awid [4] = 0000     // split105_merge213_awid
net:   tb.dut.split105_merge213_awextras [8] = 00000000     // split105_merge213_awextras
net:   tb.dut.split105_merge213_awburst [2] = 00     // split105_merge213_awburst
net:   tb.dut.split105_merge213_awaddr [32] = 00000000000000000000000000000000     // split105_merge213_awaddr
net:   tb.dut.split105_merge213_arvalid [1] = 0     // split105_merge213_arvalid
net:   tb.dut.split105_merge213_arready [1] = 1     // split105_merge213_arready
net:   tb.dut.split105_merge213_arlen [8] = 00000000     // split105_merge213_arlen
net:   tb.dut.split105_merge213_arid [4] = 0000     // split105_merge213_arid
net:   tb.dut.split105_merge213_arextras [8] = 00000000     // split105_merge213_arextras
net:   tb.dut.split105_merge213_arburst [2] = 00     // split105_merge213_arburst
net:   tb.dut.split105_merge213_araddr [32] = 00000000000000000000000000000000     // split105_merge213_araddr
net:   tb.dut.split105_merge212_wvalid [1] = 0     // split105_merge212_wvalid
net:   tb.dut.split105_merge212_wstrb [8] = 00000000     // split105_merge212_wstrb
net:   tb.dut.split105_merge212_wready [1] = 1     // split105_merge212_wready
net:   tb.dut.split105_merge212_wlast [1] = 0     // split105_merge212_wlast
net:   tb.dut.split105_merge212_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge212_wdata
net:   tb.dut.split105_merge212_rvalid [1] = 0     // split105_merge212_rvalid
net:   tb.dut.split105_merge212_rresp [2] = 00     // split105_merge212_rresp
net:   tb.dut.split105_merge212_rready [1] = 1     // split105_merge212_rready
net:   tb.dut.split105_merge212_rlast [1] = 0     // split105_merge212_rlast
net:   tb.dut.split105_merge212_rid [4] = 0000     // split105_merge212_rid
net:   tb.dut.split105_merge212_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge212_rdata
net:   tb.dut.split105_merge212_bvalid [1] = 0     // split105_merge212_bvalid
net:   tb.dut.split105_merge212_bresp [2] = xx     // split105_merge212_bresp
net:   tb.dut.split105_merge212_bready [1] = 1     // split105_merge212_bready
net:   tb.dut.split105_merge212_bid [4] = 0000     // split105_merge212_bid
net:   tb.dut.split105_merge212_awvalid [1] = 0     // split105_merge212_awvalid
net:   tb.dut.split105_merge212_awready [1] = 1     // split105_merge212_awready
net:   tb.dut.split105_merge212_awlen [8] = 00000000     // split105_merge212_awlen
net:   tb.dut.split105_merge212_awid [4] = 0000     // split105_merge212_awid
net:   tb.dut.split105_merge212_awextras [8] = 00000000     // split105_merge212_awextras
net:   tb.dut.split105_merge212_awburst [2] = 00     // split105_merge212_awburst
net:   tb.dut.split105_merge212_awaddr [32] = 00000000000000000000000000000000     // split105_merge212_awaddr
net:   tb.dut.split105_merge212_arvalid [1] = 0     // split105_merge212_arvalid
net:   tb.dut.split105_merge212_arready [1] = 1     // split105_merge212_arready
net:   tb.dut.split105_merge212_arlen [8] = 00000000     // split105_merge212_arlen
net:   tb.dut.split105_merge212_arid [4] = 0000     // split105_merge212_arid
net:   tb.dut.split105_merge212_arextras [8] = 00000000     // split105_merge212_arextras
net:   tb.dut.split105_merge212_arburst [2] = 00     // split105_merge212_arburst
net:   tb.dut.split105_merge212_araddr [32] = 00000000000000000000000000000000     // split105_merge212_araddr
net:   tb.dut.split105_merge208_wvalid [1] = 0     // split105_merge208_wvalid
net:   tb.dut.split105_merge208_wstrb [8] = 00000000     // split105_merge208_wstrb
net:   tb.dut.split105_merge208_wready [1] = 1     // split105_merge208_wready
net:   tb.dut.split105_merge208_wlast [1] = 0     // split105_merge208_wlast
net:   tb.dut.split105_merge208_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge208_wdata
net:   tb.dut.split105_merge208_rvalid [1] = 0     // split105_merge208_rvalid
net:   tb.dut.split105_merge208_rresp [2] = 00     // split105_merge208_rresp
net:   tb.dut.split105_merge208_rready [1] = 1     // split105_merge208_rready
net:   tb.dut.split105_merge208_rlast [1] = 0     // split105_merge208_rlast
net:   tb.dut.split105_merge208_rid [4] = 0000     // split105_merge208_rid
net:   tb.dut.split105_merge208_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge208_rdata
net:   tb.dut.split105_merge208_bvalid [1] = 0     // split105_merge208_bvalid
net:   tb.dut.split105_merge208_bresp [2] = xx     // split105_merge208_bresp
net:   tb.dut.split105_merge208_bready [1] = 1     // split105_merge208_bready
net:   tb.dut.split105_merge208_bid [4] = 0000     // split105_merge208_bid
net:   tb.dut.split105_merge208_awvalid [1] = 0     // split105_merge208_awvalid
net:   tb.dut.split105_merge208_awready [1] = 1     // split105_merge208_awready
net:   tb.dut.split105_merge208_awlen [8] = 00000000     // split105_merge208_awlen
net:   tb.dut.split105_merge208_awid [4] = 0000     // split105_merge208_awid
net:   tb.dut.split105_merge208_awextras [8] = 00000000     // split105_merge208_awextras
net:   tb.dut.split105_merge208_awburst [2] = 00     // split105_merge208_awburst
net:   tb.dut.split105_merge208_awaddr [32] = 00000000000000000000000000000000     // split105_merge208_awaddr
net:   tb.dut.split105_merge208_arvalid [1] = 0     // split105_merge208_arvalid
net:   tb.dut.split105_merge208_arready [1] = 1     // split105_merge208_arready
net:   tb.dut.split105_merge208_arlen [8] = 00000000     // split105_merge208_arlen
net:   tb.dut.split105_merge208_arid [4] = 0000     // split105_merge208_arid
net:   tb.dut.split105_merge208_arextras [8] = 00000000     // split105_merge208_arextras
net:   tb.dut.split105_merge208_arburst [2] = 00     // split105_merge208_arburst
net:   tb.dut.split105_merge208_araddr [32] = 00000000000000000000000000000000     // split105_merge208_araddr
net:   tb.dut.split105_merge204_wvalid [1] = 0     // split105_merge204_wvalid
net:   tb.dut.split105_merge204_wstrb [8] = 00000000     // split105_merge204_wstrb
net:   tb.dut.split105_merge204_wready [1] = 1     // split105_merge204_wready
net:   tb.dut.split105_merge204_wlast [1] = 0     // split105_merge204_wlast
net:   tb.dut.split105_merge204_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge204_wdata
net:   tb.dut.split105_merge204_rvalid [1] = 0     // split105_merge204_rvalid
net:   tb.dut.split105_merge204_rresp [2] = 00     // split105_merge204_rresp
net:   tb.dut.split105_merge204_rready [1] = 1     // split105_merge204_rready
net:   tb.dut.split105_merge204_rlast [1] = 0     // split105_merge204_rlast
net:   tb.dut.split105_merge204_rid [4] = 0000     // split105_merge204_rid
net:   tb.dut.split105_merge204_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split105_merge204_rdata
net:   tb.dut.split105_merge204_bvalid [1] = 0     // split105_merge204_bvalid
net:   tb.dut.split105_merge204_bresp [2] = xx     // split105_merge204_bresp
net:   tb.dut.split105_merge204_bready [1] = 1     // split105_merge204_bready
net:   tb.dut.split105_merge204_bid [4] = 0000     // split105_merge204_bid
net:   tb.dut.split105_merge204_awvalid [1] = 0     // split105_merge204_awvalid
net:   tb.dut.split105_merge204_awready [1] = 1     // split105_merge204_awready
net:   tb.dut.split105_merge204_awlen [8] = 00000000     // split105_merge204_awlen
net:   tb.dut.split105_merge204_awid [4] = 0000     // split105_merge204_awid
net:   tb.dut.split105_merge204_awextras [8] = 00000000     // split105_merge204_awextras
net:   tb.dut.split105_merge204_awburst [2] = 00     // split105_merge204_awburst
net:   tb.dut.split105_merge204_awaddr [32] = 00000000000000000000000000000000     // split105_merge204_awaddr
net:   tb.dut.split105_merge204_arvalid [1] = 0     // split105_merge204_arvalid
net:   tb.dut.split105_merge204_arready [1] = 1     // split105_merge204_arready
net:   tb.dut.split105_merge204_arlen [8] = 00000000     // split105_merge204_arlen
net:   tb.dut.split105_merge204_arid [4] = 0000     // split105_merge204_arid
net:   tb.dut.split105_merge204_arextras [8] = 00000000     // split105_merge204_arextras
net:   tb.dut.split105_merge204_arburst [2] = 00     // split105_merge204_arburst
net:   tb.dut.split105_merge204_araddr [32] = 00000000000000000000000000000000     // split105_merge204_araddr
net:   tb.dut.split104_merge214_wvalid [1] = 0     // split104_merge214_wvalid
net:   tb.dut.split104_merge214_wstrb [8] = 00000000     // split104_merge214_wstrb
net:   tb.dut.split104_merge214_wready [1] = 1     // split104_merge214_wready
net:   tb.dut.split104_merge214_wlast [1] = 0     // split104_merge214_wlast
net:   tb.dut.split104_merge214_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge214_wdata
net:   tb.dut.split104_merge214_rvalid [1] = 0     // split104_merge214_rvalid
net:   tb.dut.split104_merge214_rresp [2] = 00     // split104_merge214_rresp
net:   tb.dut.split104_merge214_rready [1] = 1     // split104_merge214_rready
net:   tb.dut.split104_merge214_rlast [1] = 0     // split104_merge214_rlast
net:   tb.dut.split104_merge214_rid [4] = 0000     // split104_merge214_rid
net:   tb.dut.split104_merge214_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge214_rdata
net:   tb.dut.split104_merge214_bvalid [1] = 0     // split104_merge214_bvalid
net:   tb.dut.split104_merge214_bresp [2] = xx     // split104_merge214_bresp
net:   tb.dut.split104_merge214_bready [1] = 1     // split104_merge214_bready
net:   tb.dut.split104_merge214_bid [4] = 0000     // split104_merge214_bid
net:   tb.dut.split104_merge214_awvalid [1] = 0     // split104_merge214_awvalid
net:   tb.dut.split104_merge214_awready [1] = 1     // split104_merge214_awready
net:   tb.dut.split104_merge214_awlen [8] = 00000000     // split104_merge214_awlen
net:   tb.dut.split104_merge214_awid [4] = 0000     // split104_merge214_awid
net:   tb.dut.split104_merge214_awextras [8] = 00000000     // split104_merge214_awextras
net:   tb.dut.split104_merge214_awburst [2] = 00     // split104_merge214_awburst
net:   tb.dut.split104_merge214_awaddr [32] = 00000000000000000000000000000000     // split104_merge214_awaddr
net:   tb.dut.split104_merge214_arvalid [1] = 0     // split104_merge214_arvalid
net:   tb.dut.split104_merge214_arready [1] = 1     // split104_merge214_arready
net:   tb.dut.split104_merge214_arlen [8] = 00000000     // split104_merge214_arlen
net:   tb.dut.split104_merge214_arid [4] = 0000     // split104_merge214_arid
net:   tb.dut.split104_merge214_arextras [8] = 00000000     // split104_merge214_arextras
net:   tb.dut.split104_merge214_arburst [2] = 00     // split104_merge214_arburst
net:   tb.dut.split104_merge214_araddr [32] = 00000000000000000000000000000000     // split104_merge214_araddr
net:   tb.dut.split104_merge213_wvalid [1] = 0     // split104_merge213_wvalid
net:   tb.dut.split104_merge213_wstrb [8] = 00000000     // split104_merge213_wstrb
net:   tb.dut.split104_merge213_wready [1] = 1     // split104_merge213_wready
net:   tb.dut.split104_merge213_wlast [1] = 0     // split104_merge213_wlast
net:   tb.dut.split104_merge213_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge213_wdata
net:   tb.dut.split104_merge213_rvalid [1] = 0     // split104_merge213_rvalid
net:   tb.dut.split104_merge213_rresp [2] = 00     // split104_merge213_rresp
net:   tb.dut.split104_merge213_rready [1] = 1     // split104_merge213_rready
net:   tb.dut.split104_merge213_rlast [1] = 0     // split104_merge213_rlast
net:   tb.dut.split104_merge213_rid [4] = 0000     // split104_merge213_rid
net:   tb.dut.split104_merge213_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge213_rdata
net:   tb.dut.split104_merge213_bvalid [1] = 0     // split104_merge213_bvalid
net:   tb.dut.split104_merge213_bresp [2] = xx     // split104_merge213_bresp
net:   tb.dut.split104_merge213_bready [1] = 1     // split104_merge213_bready
net:   tb.dut.split104_merge213_bid [4] = 0000     // split104_merge213_bid
net:   tb.dut.split104_merge213_awvalid [1] = 0     // split104_merge213_awvalid
net:   tb.dut.split104_merge213_awready [1] = 1     // split104_merge213_awready
net:   tb.dut.split104_merge213_awlen [8] = 00000000     // split104_merge213_awlen
net:   tb.dut.split104_merge213_awid [4] = 0000     // split104_merge213_awid
net:   tb.dut.split104_merge213_awextras [8] = 00000000     // split104_merge213_awextras
net:   tb.dut.split104_merge213_awburst [2] = 00     // split104_merge213_awburst
net:   tb.dut.split104_merge213_awaddr [32] = 00000000000000000000000000000000     // split104_merge213_awaddr
net:   tb.dut.split104_merge213_arvalid [1] = 0     // split104_merge213_arvalid
net:   tb.dut.split104_merge213_arready [1] = 1     // split104_merge213_arready
net:   tb.dut.split104_merge213_arlen [8] = 00000000     // split104_merge213_arlen
net:   tb.dut.split104_merge213_arid [4] = 0000     // split104_merge213_arid
net:   tb.dut.split104_merge213_arextras [8] = 00000000     // split104_merge213_arextras
net:   tb.dut.split104_merge213_arburst [2] = 00     // split104_merge213_arburst
net:   tb.dut.split104_merge213_araddr [32] = 00000000000000000000000000000000     // split104_merge213_araddr
net:   tb.dut.split104_merge209_wvalid [1] = 0     // split104_merge209_wvalid
net:   tb.dut.split104_merge209_wstrb [8] = 00000000     // split104_merge209_wstrb
net:   tb.dut.split104_merge209_wready [1] = 1     // split104_merge209_wready
net:   tb.dut.split104_merge209_wlast [1] = 0     // split104_merge209_wlast
net:   tb.dut.split104_merge209_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge209_wdata
net:   tb.dut.split104_merge209_rvalid [1] = 0     // split104_merge209_rvalid
net:   tb.dut.split104_merge209_rresp [2] = 00     // split104_merge209_rresp
net:   tb.dut.split104_merge209_rready [1] = 1     // split104_merge209_rready
net:   tb.dut.split104_merge209_rlast [1] = 0     // split104_merge209_rlast
net:   tb.dut.split104_merge209_rid [4] = 0000     // split104_merge209_rid
net:   tb.dut.split104_merge209_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge209_rdata
net:   tb.dut.split104_merge209_bvalid [1] = 0     // split104_merge209_bvalid
net:   tb.dut.split104_merge209_bresp [2] = xx     // split104_merge209_bresp
net:   tb.dut.split104_merge209_bready [1] = 1     // split104_merge209_bready
net:   tb.dut.split104_merge209_bid [4] = 0000     // split104_merge209_bid
net:   tb.dut.split104_merge209_awvalid [1] = 0     // split104_merge209_awvalid
net:   tb.dut.split104_merge209_awready [1] = 1     // split104_merge209_awready
net:   tb.dut.split104_merge209_awlen [8] = 00000000     // split104_merge209_awlen
net:   tb.dut.split104_merge209_awid [4] = 0000     // split104_merge209_awid
net:   tb.dut.split104_merge209_awextras [8] = 00000000     // split104_merge209_awextras
net:   tb.dut.split104_merge209_awburst [2] = 00     // split104_merge209_awburst
net:   tb.dut.split104_merge209_awaddr [32] = 00000000000000000000000000000000     // split104_merge209_awaddr
net:   tb.dut.split104_merge209_arvalid [1] = 0     // split104_merge209_arvalid
net:   tb.dut.split104_merge209_arready [1] = 1     // split104_merge209_arready
net:   tb.dut.split104_merge209_arlen [8] = 00000000     // split104_merge209_arlen
net:   tb.dut.split104_merge209_arid [4] = 0000     // split104_merge209_arid
net:   tb.dut.split104_merge209_arextras [8] = 00000000     // split104_merge209_arextras
net:   tb.dut.split104_merge209_arburst [2] = 00     // split104_merge209_arburst
net:   tb.dut.split104_merge209_araddr [32] = 00000000000000000000000000000000     // split104_merge209_araddr
net:   tb.dut.split104_merge206_wvalid [1] = 0     // split104_merge206_wvalid
net:   tb.dut.split104_merge206_wstrb [8] = 00000000     // split104_merge206_wstrb
net:   tb.dut.split104_merge206_wready [1] = 1     // split104_merge206_wready
net:   tb.dut.split104_merge206_wlast [1] = 0     // split104_merge206_wlast
net:   tb.dut.split104_merge206_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge206_wdata
net:   tb.dut.split104_merge206_rvalid [1] = 0     // split104_merge206_rvalid
net:   tb.dut.split104_merge206_rresp [2] = 00     // split104_merge206_rresp
net:   tb.dut.split104_merge206_rready [1] = 1     // split104_merge206_rready
net:   tb.dut.split104_merge206_rlast [1] = 0     // split104_merge206_rlast
net:   tb.dut.split104_merge206_rid [4] = 0000     // split104_merge206_rid
net:   tb.dut.split104_merge206_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split104_merge206_rdata
net:   tb.dut.split104_merge206_bvalid [1] = 0     // split104_merge206_bvalid
net:   tb.dut.split104_merge206_bresp [2] = xx     // split104_merge206_bresp
net:   tb.dut.split104_merge206_bready [1] = 1     // split104_merge206_bready
net:   tb.dut.split104_merge206_bid [4] = 0000     // split104_merge206_bid
net:   tb.dut.split104_merge206_awvalid [1] = 0     // split104_merge206_awvalid
net:   tb.dut.split104_merge206_awready [1] = 1     // split104_merge206_awready
net:   tb.dut.split104_merge206_awlen [8] = 00000000     // split104_merge206_awlen
net:   tb.dut.split104_merge206_awid [4] = 0000     // split104_merge206_awid
net:   tb.dut.split104_merge206_awextras [8] = 00000000     // split104_merge206_awextras
net:   tb.dut.split104_merge206_awburst [2] = 00     // split104_merge206_awburst
net:   tb.dut.split104_merge206_awaddr [32] = 00000000000000000000000000000000     // split104_merge206_awaddr
net:   tb.dut.split104_merge206_arvalid [1] = 0     // split104_merge206_arvalid
net:   tb.dut.split104_merge206_arready [1] = 1     // split104_merge206_arready
net:   tb.dut.split104_merge206_arlen [8] = 00000000     // split104_merge206_arlen
net:   tb.dut.split104_merge206_arid [4] = 0000     // split104_merge206_arid
net:   tb.dut.split104_merge206_arextras [8] = 00000000     // split104_merge206_arextras
net:   tb.dut.split104_merge206_arburst [2] = 00     // split104_merge206_arburst
net:   tb.dut.split104_merge206_araddr [32] = 00000000000000000000000000000000     // split104_merge206_araddr
net:   tb.dut.split103_merge207_wvalid [1] = 0     // split103_merge207_wvalid
net:   tb.dut.split103_merge207_wstrb [8] = 00000000     // split103_merge207_wstrb
net:   tb.dut.split103_merge207_wready [1] = 1     // split103_merge207_wready
net:   tb.dut.split103_merge207_wlast [1] = 0     // split103_merge207_wlast
net:   tb.dut.split103_merge207_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge207_wdata
net:   tb.dut.split103_merge207_rvalid [1] = 0     // split103_merge207_rvalid
net:   tb.dut.split103_merge207_rresp [2] = 00     // split103_merge207_rresp
net:   tb.dut.split103_merge207_rready [1] = 1     // split103_merge207_rready
net:   tb.dut.split103_merge207_rlast [1] = 0     // split103_merge207_rlast
net:   tb.dut.split103_merge207_rid [4] = 0000     // split103_merge207_rid
net:   tb.dut.split103_merge207_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge207_rdata
net:   tb.dut.split103_merge207_bvalid [1] = 0     // split103_merge207_bvalid
net:   tb.dut.split103_merge207_bresp [2] = xx     // split103_merge207_bresp
net:   tb.dut.split103_merge207_bready [1] = 1     // split103_merge207_bready
net:   tb.dut.split103_merge207_bid [4] = 0000     // split103_merge207_bid
net:   tb.dut.split103_merge207_awvalid [1] = 0     // split103_merge207_awvalid
net:   tb.dut.split103_merge207_awready [1] = 1     // split103_merge207_awready
net:   tb.dut.split103_merge207_awlen [8] = 00000000     // split103_merge207_awlen
net:   tb.dut.split103_merge207_awid [4] = 0000     // split103_merge207_awid
net:   tb.dut.split103_merge207_awextras [8] = 00000000     // split103_merge207_awextras
net:   tb.dut.split103_merge207_awburst [2] = 00     // split103_merge207_awburst
net:   tb.dut.split103_merge207_awaddr [32] = 00000000000000000000000000000000     // split103_merge207_awaddr
net:   tb.dut.split103_merge207_arvalid [1] = 0     // split103_merge207_arvalid
net:   tb.dut.split103_merge207_arready [1] = 1     // split103_merge207_arready
net:   tb.dut.split103_merge207_arlen [8] = 00000000     // split103_merge207_arlen
net:   tb.dut.split103_merge207_arid [4] = 0000     // split103_merge207_arid
net:   tb.dut.split103_merge207_arextras [8] = 00000000     // split103_merge207_arextras
net:   tb.dut.split103_merge207_arburst [2] = 00     // split103_merge207_arburst
net:   tb.dut.split103_merge207_araddr [32] = 00000000000000000000000000000000     // split103_merge207_araddr
net:   tb.dut.split103_merge206_wvalid [1] = 0     // split103_merge206_wvalid
net:   tb.dut.split103_merge206_wstrb [8] = 00000000     // split103_merge206_wstrb
net:   tb.dut.split103_merge206_wready [1] = 1     // split103_merge206_wready
net:   tb.dut.split103_merge206_wlast [1] = 0     // split103_merge206_wlast
net:   tb.dut.split103_merge206_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge206_wdata
net:   tb.dut.split103_merge206_rvalid [1] = 0     // split103_merge206_rvalid
net:   tb.dut.split103_merge206_rresp [2] = 00     // split103_merge206_rresp
net:   tb.dut.split103_merge206_rready [1] = 1     // split103_merge206_rready
net:   tb.dut.split103_merge206_rlast [1] = 0     // split103_merge206_rlast
net:   tb.dut.split103_merge206_rid [4] = 0000     // split103_merge206_rid
net:   tb.dut.split103_merge206_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge206_rdata
net:   tb.dut.split103_merge206_bvalid [1] = 0     // split103_merge206_bvalid
net:   tb.dut.split103_merge206_bresp [2] = xx     // split103_merge206_bresp
net:   tb.dut.split103_merge206_bready [1] = 1     // split103_merge206_bready
net:   tb.dut.split103_merge206_bid [4] = 0000     // split103_merge206_bid
net:   tb.dut.split103_merge206_awvalid [1] = 0     // split103_merge206_awvalid
net:   tb.dut.split103_merge206_awready [1] = 1     // split103_merge206_awready
net:   tb.dut.split103_merge206_awlen [8] = 00000000     // split103_merge206_awlen
net:   tb.dut.split103_merge206_awid [4] = 0000     // split103_merge206_awid
net:   tb.dut.split103_merge206_awextras [8] = 00000000     // split103_merge206_awextras
net:   tb.dut.split103_merge206_awburst [2] = 00     // split103_merge206_awburst
net:   tb.dut.split103_merge206_awaddr [32] = 00000000000000000000000000000000     // split103_merge206_awaddr
net:   tb.dut.split103_merge206_arvalid [1] = 0     // split103_merge206_arvalid
net:   tb.dut.split103_merge206_arready [1] = 1     // split103_merge206_arready
net:   tb.dut.split103_merge206_arlen [8] = 00000000     // split103_merge206_arlen
net:   tb.dut.split103_merge206_arid [4] = 0000     // split103_merge206_arid
net:   tb.dut.split103_merge206_arextras [8] = 00000000     // split103_merge206_arextras
net:   tb.dut.split103_merge206_arburst [2] = 00     // split103_merge206_arburst
net:   tb.dut.split103_merge206_araddr [32] = 00000000000000000000000000000000     // split103_merge206_araddr
net:   tb.dut.split103_merge203_wvalid [1] = 0     // split103_merge203_wvalid
net:   tb.dut.split103_merge203_wstrb [8] = 00000000     // split103_merge203_wstrb
net:   tb.dut.split103_merge203_wready [1] = 1     // split103_merge203_wready
net:   tb.dut.split103_merge203_wlast [1] = 0     // split103_merge203_wlast
net:   tb.dut.split103_merge203_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge203_wdata
net:   tb.dut.split103_merge203_rvalid [1] = 0     // split103_merge203_rvalid
net:   tb.dut.split103_merge203_rresp [2] = 00     // split103_merge203_rresp
net:   tb.dut.split103_merge203_rready [1] = 1     // split103_merge203_rready
net:   tb.dut.split103_merge203_rlast [1] = 0     // split103_merge203_rlast
net:   tb.dut.split103_merge203_rid [4] = 0000     // split103_merge203_rid
net:   tb.dut.split103_merge203_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge203_rdata
net:   tb.dut.split103_merge203_bvalid [1] = 0     // split103_merge203_bvalid
net:   tb.dut.split103_merge203_bresp [2] = xx     // split103_merge203_bresp
net:   tb.dut.split103_merge203_bready [1] = 1     // split103_merge203_bready
net:   tb.dut.split103_merge203_bid [4] = 0000     // split103_merge203_bid
net:   tb.dut.split103_merge203_awvalid [1] = 0     // split103_merge203_awvalid
net:   tb.dut.split103_merge203_awready [1] = 1     // split103_merge203_awready
net:   tb.dut.split103_merge203_awlen [8] = 00000000     // split103_merge203_awlen
net:   tb.dut.split103_merge203_awid [4] = 0000     // split103_merge203_awid
net:   tb.dut.split103_merge203_awextras [8] = 00000000     // split103_merge203_awextras
net:   tb.dut.split103_merge203_awburst [2] = 00     // split103_merge203_awburst
net:   tb.dut.split103_merge203_awaddr [32] = 00000000000000000000000000000000     // split103_merge203_awaddr
net:   tb.dut.split103_merge203_arvalid [1] = 0     // split103_merge203_arvalid
net:   tb.dut.split103_merge203_arready [1] = 1     // split103_merge203_arready
net:   tb.dut.split103_merge203_arlen [8] = 00000000     // split103_merge203_arlen
net:   tb.dut.split103_merge203_arid [4] = 0000     // split103_merge203_arid
net:   tb.dut.split103_merge203_arextras [8] = 00000000     // split103_merge203_arextras
net:   tb.dut.split103_merge203_arburst [2] = 00     // split103_merge203_arburst
net:   tb.dut.split103_merge203_araddr [32] = 00000000000000000000000000000000     // split103_merge203_araddr
net:   tb.dut.split103_merge200_wvalid [1] = 0     // split103_merge200_wvalid
net:   tb.dut.split103_merge200_wstrb [8] = 00000000     // split103_merge200_wstrb
net:   tb.dut.split103_merge200_wready [1] = 1     // split103_merge200_wready
net:   tb.dut.split103_merge200_wlast [1] = 0     // split103_merge200_wlast
net:   tb.dut.split103_merge200_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge200_wdata
net:   tb.dut.split103_merge200_rvalid [1] = 0     // split103_merge200_rvalid
net:   tb.dut.split103_merge200_rresp [2] = 00     // split103_merge200_rresp
net:   tb.dut.split103_merge200_rready [1] = 1     // split103_merge200_rready
net:   tb.dut.split103_merge200_rlast [1] = 0     // split103_merge200_rlast
net:   tb.dut.split103_merge200_rid [4] = 0000     // split103_merge200_rid
net:   tb.dut.split103_merge200_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split103_merge200_rdata
net:   tb.dut.split103_merge200_bvalid [1] = 0     // split103_merge200_bvalid
net:   tb.dut.split103_merge200_bresp [2] = xx     // split103_merge200_bresp
net:   tb.dut.split103_merge200_bready [1] = 1     // split103_merge200_bready
net:   tb.dut.split103_merge200_bid [4] = 0000     // split103_merge200_bid
net:   tb.dut.split103_merge200_awvalid [1] = 0     // split103_merge200_awvalid
net:   tb.dut.split103_merge200_awready [1] = 1     // split103_merge200_awready
net:   tb.dut.split103_merge200_awlen [8] = 00000000     // split103_merge200_awlen
net:   tb.dut.split103_merge200_awid [4] = 0000     // split103_merge200_awid
net:   tb.dut.split103_merge200_awextras [8] = 00000000     // split103_merge200_awextras
net:   tb.dut.split103_merge200_awburst [2] = 00     // split103_merge200_awburst
net:   tb.dut.split103_merge200_awaddr [32] = 00000000000000000000000000000000     // split103_merge200_awaddr
net:   tb.dut.split103_merge200_arvalid [1] = 0     // split103_merge200_arvalid
net:   tb.dut.split103_merge200_arready [1] = 1     // split103_merge200_arready
net:   tb.dut.split103_merge200_arlen [8] = 00000000     // split103_merge200_arlen
net:   tb.dut.split103_merge200_arid [4] = 0000     // split103_merge200_arid
net:   tb.dut.split103_merge200_arextras [8] = 00000000     // split103_merge200_arextras
net:   tb.dut.split103_merge200_arburst [2] = 00     // split103_merge200_arburst
net:   tb.dut.split103_merge200_araddr [32] = 00000000000000000000000000000000     // split103_merge200_araddr
net:   tb.dut.split102_merge207_wvalid [1] = 0     // split102_merge207_wvalid
net:   tb.dut.split102_merge207_wstrb [8] = 00000000     // split102_merge207_wstrb
net:   tb.dut.split102_merge207_wready [1] = 1     // split102_merge207_wready
net:   tb.dut.split102_merge207_wlast [1] = 0     // split102_merge207_wlast
net:   tb.dut.split102_merge207_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge207_wdata
net:   tb.dut.split102_merge207_rvalid [1] = 0     // split102_merge207_rvalid
net:   tb.dut.split102_merge207_rresp [2] = 00     // split102_merge207_rresp
net:   tb.dut.split102_merge207_rready [1] = 1     // split102_merge207_rready
net:   tb.dut.split102_merge207_rlast [1] = 0     // split102_merge207_rlast
net:   tb.dut.split102_merge207_rid [4] = 0000     // split102_merge207_rid
net:   tb.dut.split102_merge207_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge207_rdata
net:   tb.dut.split102_merge207_bvalid [1] = 0     // split102_merge207_bvalid
net:   tb.dut.split102_merge207_bresp [2] = xx     // split102_merge207_bresp
net:   tb.dut.split102_merge207_bready [1] = 1     // split102_merge207_bready
net:   tb.dut.split102_merge207_bid [4] = 0000     // split102_merge207_bid
net:   tb.dut.split102_merge207_awvalid [1] = 0     // split102_merge207_awvalid
net:   tb.dut.split102_merge207_awready [1] = 1     // split102_merge207_awready
net:   tb.dut.split102_merge207_awlen [8] = 00000000     // split102_merge207_awlen
net:   tb.dut.split102_merge207_awid [4] = 0000     // split102_merge207_awid
net:   tb.dut.split102_merge207_awextras [8] = 00000000     // split102_merge207_awextras
net:   tb.dut.split102_merge207_awburst [2] = 00     // split102_merge207_awburst
net:   tb.dut.split102_merge207_awaddr [32] = 00000000000000000000000000000000     // split102_merge207_awaddr
net:   tb.dut.split102_merge207_arvalid [1] = 0     // split102_merge207_arvalid
net:   tb.dut.split102_merge207_arready [1] = 1     // split102_merge207_arready
net:   tb.dut.split102_merge207_arlen [8] = 00000000     // split102_merge207_arlen
net:   tb.dut.split102_merge207_arid [4] = 0000     // split102_merge207_arid
net:   tb.dut.split102_merge207_arextras [8] = 00000000     // split102_merge207_arextras
net:   tb.dut.split102_merge207_arburst [2] = 00     // split102_merge207_arburst
net:   tb.dut.split102_merge207_araddr [32] = 00000000000000000000000000000000     // split102_merge207_araddr
net:   tb.dut.split102_merge205_wvalid [1] = 0     // split102_merge205_wvalid
net:   tb.dut.split102_merge205_wstrb [8] = 00000000     // split102_merge205_wstrb
net:   tb.dut.split102_merge205_wready [1] = 1     // split102_merge205_wready
net:   tb.dut.split102_merge205_wlast [1] = 0     // split102_merge205_wlast
net:   tb.dut.split102_merge205_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge205_wdata
net:   tb.dut.split102_merge205_rvalid [1] = 0     // split102_merge205_rvalid
net:   tb.dut.split102_merge205_rresp [2] = 00     // split102_merge205_rresp
net:   tb.dut.split102_merge205_rready [1] = 1     // split102_merge205_rready
net:   tb.dut.split102_merge205_rlast [1] = 0     // split102_merge205_rlast
net:   tb.dut.split102_merge205_rid [4] = 0000     // split102_merge205_rid
net:   tb.dut.split102_merge205_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge205_rdata
net:   tb.dut.split102_merge205_bvalid [1] = 0     // split102_merge205_bvalid
net:   tb.dut.split102_merge205_bresp [2] = xx     // split102_merge205_bresp
net:   tb.dut.split102_merge205_bready [1] = 1     // split102_merge205_bready
net:   tb.dut.split102_merge205_bid [4] = 0000     // split102_merge205_bid
net:   tb.dut.split102_merge205_awvalid [1] = 0     // split102_merge205_awvalid
net:   tb.dut.split102_merge205_awready [1] = 1     // split102_merge205_awready
net:   tb.dut.split102_merge205_awlen [8] = 00000000     // split102_merge205_awlen
net:   tb.dut.split102_merge205_awid [4] = 0000     // split102_merge205_awid
net:   tb.dut.split102_merge205_awextras [8] = 00000000     // split102_merge205_awextras
net:   tb.dut.split102_merge205_awburst [2] = 00     // split102_merge205_awburst
net:   tb.dut.split102_merge205_awaddr [32] = 00000000000000000000000000000000     // split102_merge205_awaddr
net:   tb.dut.split102_merge205_arvalid [1] = 0     // split102_merge205_arvalid
net:   tb.dut.split102_merge205_arready [1] = 1     // split102_merge205_arready
net:   tb.dut.split102_merge205_arlen [8] = 00000000     // split102_merge205_arlen
net:   tb.dut.split102_merge205_arid [4] = 0000     // split102_merge205_arid
net:   tb.dut.split102_merge205_arextras [8] = 00000000     // split102_merge205_arextras
net:   tb.dut.split102_merge205_arburst [2] = 00     // split102_merge205_arburst
net:   tb.dut.split102_merge205_araddr [32] = 00000000000000000000000000000000     // split102_merge205_araddr
net:   tb.dut.split102_merge201_wvalid [1] = 0     // split102_merge201_wvalid
net:   tb.dut.split102_merge201_wstrb [8] = 00000000     // split102_merge201_wstrb
net:   tb.dut.split102_merge201_wready [1] = 1     // split102_merge201_wready
net:   tb.dut.split102_merge201_wlast [1] = 0     // split102_merge201_wlast
net:   tb.dut.split102_merge201_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge201_wdata
net:   tb.dut.split102_merge201_rvalid [1] = 0     // split102_merge201_rvalid
net:   tb.dut.split102_merge201_rresp [2] = 00     // split102_merge201_rresp
net:   tb.dut.split102_merge201_rready [1] = 1     // split102_merge201_rready
net:   tb.dut.split102_merge201_rlast [1] = 0     // split102_merge201_rlast
net:   tb.dut.split102_merge201_rid [4] = 0000     // split102_merge201_rid
net:   tb.dut.split102_merge201_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge201_rdata
net:   tb.dut.split102_merge201_bvalid [1] = 0     // split102_merge201_bvalid
net:   tb.dut.split102_merge201_bresp [2] = xx     // split102_merge201_bresp
net:   tb.dut.split102_merge201_bready [1] = 1     // split102_merge201_bready
net:   tb.dut.split102_merge201_bid [4] = 0000     // split102_merge201_bid
net:   tb.dut.split102_merge201_awvalid [1] = 0     // split102_merge201_awvalid
net:   tb.dut.split102_merge201_awready [1] = 1     // split102_merge201_awready
net:   tb.dut.split102_merge201_awlen [8] = 00000000     // split102_merge201_awlen
net:   tb.dut.split102_merge201_awid [4] = 0000     // split102_merge201_awid
net:   tb.dut.split102_merge201_awextras [8] = 00000000     // split102_merge201_awextras
net:   tb.dut.split102_merge201_awburst [2] = 00     // split102_merge201_awburst
net:   tb.dut.split102_merge201_awaddr [32] = 00000000000000000000000000000000     // split102_merge201_awaddr
net:   tb.dut.split102_merge201_arvalid [1] = 0     // split102_merge201_arvalid
net:   tb.dut.split102_merge201_arready [1] = 1     // split102_merge201_arready
net:   tb.dut.split102_merge201_arlen [8] = 00000000     // split102_merge201_arlen
net:   tb.dut.split102_merge201_arid [4] = 0000     // split102_merge201_arid
net:   tb.dut.split102_merge201_arextras [8] = 00000000     // split102_merge201_arextras
net:   tb.dut.split102_merge201_arburst [2] = 00     // split102_merge201_arburst
net:   tb.dut.split102_merge201_araddr [32] = 00000000000000000000000000000000     // split102_merge201_araddr
net:   tb.dut.split102_merge200_wvalid [1] = 0     // split102_merge200_wvalid
net:   tb.dut.split102_merge200_wstrb [8] = 00000000     // split102_merge200_wstrb
net:   tb.dut.split102_merge200_wready [1] = 1     // split102_merge200_wready
net:   tb.dut.split102_merge200_wlast [1] = 0     // split102_merge200_wlast
net:   tb.dut.split102_merge200_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge200_wdata
net:   tb.dut.split102_merge200_rvalid [1] = 0     // split102_merge200_rvalid
net:   tb.dut.split102_merge200_rresp [2] = 00     // split102_merge200_rresp
net:   tb.dut.split102_merge200_rready [1] = 1     // split102_merge200_rready
net:   tb.dut.split102_merge200_rlast [1] = 0     // split102_merge200_rlast
net:   tb.dut.split102_merge200_rid [4] = 0000     // split102_merge200_rid
net:   tb.dut.split102_merge200_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split102_merge200_rdata
net:   tb.dut.split102_merge200_bvalid [1] = 0     // split102_merge200_bvalid
net:   tb.dut.split102_merge200_bresp [2] = xx     // split102_merge200_bresp
net:   tb.dut.split102_merge200_bready [1] = 1     // split102_merge200_bready
net:   tb.dut.split102_merge200_bid [4] = 0000     // split102_merge200_bid
net:   tb.dut.split102_merge200_awvalid [1] = 0     // split102_merge200_awvalid
net:   tb.dut.split102_merge200_awready [1] = 1     // split102_merge200_awready
net:   tb.dut.split102_merge200_awlen [8] = 00000000     // split102_merge200_awlen
net:   tb.dut.split102_merge200_awid [4] = 0000     // split102_merge200_awid
net:   tb.dut.split102_merge200_awextras [8] = 00000000     // split102_merge200_awextras
net:   tb.dut.split102_merge200_awburst [2] = 00     // split102_merge200_awburst
net:   tb.dut.split102_merge200_awaddr [32] = 00000000000000000000000000000000     // split102_merge200_awaddr
net:   tb.dut.split102_merge200_arvalid [1] = 0     // split102_merge200_arvalid
net:   tb.dut.split102_merge200_arready [1] = 1     // split102_merge200_arready
net:   tb.dut.split102_merge200_arlen [8] = 00000000     // split102_merge200_arlen
net:   tb.dut.split102_merge200_arid [4] = 0000     // split102_merge200_arid
net:   tb.dut.split102_merge200_arextras [8] = 00000000     // split102_merge200_arextras
net:   tb.dut.split102_merge200_arburst [2] = 00     // split102_merge200_arburst
net:   tb.dut.split102_merge200_araddr [32] = 00000000000000000000000000000000     // split102_merge200_araddr
net:   tb.dut.split101_merge212_wvalid [1] = 0     // split101_merge212_wvalid
net:   tb.dut.split101_merge212_wstrb [8] = 00000000     // split101_merge212_wstrb
net:   tb.dut.split101_merge212_wready [1] = 1     // split101_merge212_wready
net:   tb.dut.split101_merge212_wlast [1] = 0     // split101_merge212_wlast
net:   tb.dut.split101_merge212_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge212_wdata
net:   tb.dut.split101_merge212_rvalid [1] = 0     // split101_merge212_rvalid
net:   tb.dut.split101_merge212_rresp [2] = 00     // split101_merge212_rresp
net:   tb.dut.split101_merge212_rready [1] = 1     // split101_merge212_rready
net:   tb.dut.split101_merge212_rlast [1] = 0     // split101_merge212_rlast
net:   tb.dut.split101_merge212_rid [4] = 0000     // split101_merge212_rid
net:   tb.dut.split101_merge212_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge212_rdata
net:   tb.dut.split101_merge212_bvalid [1] = 0     // split101_merge212_bvalid
net:   tb.dut.split101_merge212_bresp [2] = xx     // split101_merge212_bresp
net:   tb.dut.split101_merge212_bready [1] = 1     // split101_merge212_bready
net:   tb.dut.split101_merge212_bid [4] = 0000     // split101_merge212_bid
net:   tb.dut.split101_merge212_awvalid [1] = 0     // split101_merge212_awvalid
net:   tb.dut.split101_merge212_awready [1] = 1     // split101_merge212_awready
net:   tb.dut.split101_merge212_awlen [8] = 00000000     // split101_merge212_awlen
net:   tb.dut.split101_merge212_awid [4] = 0000     // split101_merge212_awid
net:   tb.dut.split101_merge212_awextras [8] = 00000000     // split101_merge212_awextras
net:   tb.dut.split101_merge212_awburst [2] = 00     // split101_merge212_awburst
net:   tb.dut.split101_merge212_awaddr [32] = 00000000000000000000000000000000     // split101_merge212_awaddr
net:   tb.dut.split101_merge212_arvalid [1] = 0     // split101_merge212_arvalid
net:   tb.dut.split101_merge212_arready [1] = 1     // split101_merge212_arready
net:   tb.dut.split101_merge212_arlen [8] = 00000000     // split101_merge212_arlen
net:   tb.dut.split101_merge212_arid [4] = 0000     // split101_merge212_arid
net:   tb.dut.split101_merge212_arextras [8] = 00000000     // split101_merge212_arextras
net:   tb.dut.split101_merge212_arburst [2] = 00     // split101_merge212_arburst
net:   tb.dut.split101_merge212_araddr [32] = 00000000000000000000000000000000     // split101_merge212_araddr
net:   tb.dut.split101_merge209_wvalid [1] = 0     // split101_merge209_wvalid
net:   tb.dut.split101_merge209_wstrb [8] = 00000000     // split101_merge209_wstrb
net:   tb.dut.split101_merge209_wready [1] = 1     // split101_merge209_wready
net:   tb.dut.split101_merge209_wlast [1] = 0     // split101_merge209_wlast
net:   tb.dut.split101_merge209_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge209_wdata
net:   tb.dut.split101_merge209_rvalid [1] = 0     // split101_merge209_rvalid
net:   tb.dut.split101_merge209_rresp [2] = 00     // split101_merge209_rresp
net:   tb.dut.split101_merge209_rready [1] = 1     // split101_merge209_rready
net:   tb.dut.split101_merge209_rlast [1] = 0     // split101_merge209_rlast
net:   tb.dut.split101_merge209_rid [4] = 0000     // split101_merge209_rid
net:   tb.dut.split101_merge209_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge209_rdata
net:   tb.dut.split101_merge209_bvalid [1] = 0     // split101_merge209_bvalid
net:   tb.dut.split101_merge209_bresp [2] = xx     // split101_merge209_bresp
net:   tb.dut.split101_merge209_bready [1] = 1     // split101_merge209_bready
net:   tb.dut.split101_merge209_bid [4] = 0000     // split101_merge209_bid
net:   tb.dut.split101_merge209_awvalid [1] = 0     // split101_merge209_awvalid
net:   tb.dut.split101_merge209_awready [1] = 1     // split101_merge209_awready
net:   tb.dut.split101_merge209_awlen [8] = 00000000     // split101_merge209_awlen
net:   tb.dut.split101_merge209_awid [4] = 0000     // split101_merge209_awid
net:   tb.dut.split101_merge209_awextras [8] = 00000000     // split101_merge209_awextras
net:   tb.dut.split101_merge209_awburst [2] = 00     // split101_merge209_awburst
net:   tb.dut.split101_merge209_awaddr [32] = 00000000000000000000000000000000     // split101_merge209_awaddr
net:   tb.dut.split101_merge209_arvalid [1] = 0     // split101_merge209_arvalid
net:   tb.dut.split101_merge209_arready [1] = 1     // split101_merge209_arready
net:   tb.dut.split101_merge209_arlen [8] = 00000000     // split101_merge209_arlen
net:   tb.dut.split101_merge209_arid [4] = 0000     // split101_merge209_arid
net:   tb.dut.split101_merge209_arextras [8] = 00000000     // split101_merge209_arextras
net:   tb.dut.split101_merge209_arburst [2] = 00     // split101_merge209_arburst
net:   tb.dut.split101_merge209_araddr [32] = 00000000000000000000000000000000     // split101_merge209_araddr
net:   tb.dut.split101_merge203_wvalid [1] = 0     // split101_merge203_wvalid
net:   tb.dut.split101_merge203_wstrb [8] = 00000000     // split101_merge203_wstrb
net:   tb.dut.split101_merge203_wready [1] = 1     // split101_merge203_wready
net:   tb.dut.split101_merge203_wlast [1] = 0     // split101_merge203_wlast
net:   tb.dut.split101_merge203_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge203_wdata
net:   tb.dut.split101_merge203_rvalid [1] = 0     // split101_merge203_rvalid
net:   tb.dut.split101_merge203_rresp [2] = 00     // split101_merge203_rresp
net:   tb.dut.split101_merge203_rready [1] = 1     // split101_merge203_rready
net:   tb.dut.split101_merge203_rlast [1] = 0     // split101_merge203_rlast
net:   tb.dut.split101_merge203_rid [4] = 0000     // split101_merge203_rid
net:   tb.dut.split101_merge203_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge203_rdata
net:   tb.dut.split101_merge203_bvalid [1] = 0     // split101_merge203_bvalid
net:   tb.dut.split101_merge203_bresp [2] = xx     // split101_merge203_bresp
net:   tb.dut.split101_merge203_bready [1] = 1     // split101_merge203_bready
net:   tb.dut.split101_merge203_bid [4] = 0000     // split101_merge203_bid
net:   tb.dut.split101_merge203_awvalid [1] = 0     // split101_merge203_awvalid
net:   tb.dut.split101_merge203_awready [1] = 1     // split101_merge203_awready
net:   tb.dut.split101_merge203_awlen [8] = 00000000     // split101_merge203_awlen
net:   tb.dut.split101_merge203_awid [4] = 0000     // split101_merge203_awid
net:   tb.dut.split101_merge203_awextras [8] = 00000000     // split101_merge203_awextras
net:   tb.dut.split101_merge203_awburst [2] = 00     // split101_merge203_awburst
net:   tb.dut.split101_merge203_awaddr [32] = 00000000000000000000000000000000     // split101_merge203_awaddr
net:   tb.dut.split101_merge203_arvalid [1] = 0     // split101_merge203_arvalid
net:   tb.dut.split101_merge203_arready [1] = 1     // split101_merge203_arready
net:   tb.dut.split101_merge203_arlen [8] = 00000000     // split101_merge203_arlen
net:   tb.dut.split101_merge203_arid [4] = 0000     // split101_merge203_arid
net:   tb.dut.split101_merge203_arextras [8] = 00000000     // split101_merge203_arextras
net:   tb.dut.split101_merge203_arburst [2] = 00     // split101_merge203_arburst
net:   tb.dut.split101_merge203_araddr [32] = 00000000000000000000000000000000     // split101_merge203_araddr
net:   tb.dut.split101_merge201_wvalid [1] = 0     // split101_merge201_wvalid
net:   tb.dut.split101_merge201_wstrb [8] = 00000000     // split101_merge201_wstrb
net:   tb.dut.split101_merge201_wready [1] = 1     // split101_merge201_wready
net:   tb.dut.split101_merge201_wlast [1] = 0     // split101_merge201_wlast
net:   tb.dut.split101_merge201_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge201_wdata
net:   tb.dut.split101_merge201_rvalid [1] = 0     // split101_merge201_rvalid
net:   tb.dut.split101_merge201_rresp [2] = 00     // split101_merge201_rresp
net:   tb.dut.split101_merge201_rready [1] = 1     // split101_merge201_rready
net:   tb.dut.split101_merge201_rlast [1] = 0     // split101_merge201_rlast
net:   tb.dut.split101_merge201_rid [4] = 0000     // split101_merge201_rid
net:   tb.dut.split101_merge201_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split101_merge201_rdata
net:   tb.dut.split101_merge201_bvalid [1] = 0     // split101_merge201_bvalid
net:   tb.dut.split101_merge201_bresp [2] = xx     // split101_merge201_bresp
net:   tb.dut.split101_merge201_bready [1] = 1     // split101_merge201_bready
net:   tb.dut.split101_merge201_bid [4] = 0000     // split101_merge201_bid
net:   tb.dut.split101_merge201_awvalid [1] = 0     // split101_merge201_awvalid
net:   tb.dut.split101_merge201_awready [1] = 1     // split101_merge201_awready
net:   tb.dut.split101_merge201_awlen [8] = 00000000     // split101_merge201_awlen
net:   tb.dut.split101_merge201_awid [4] = 0000     // split101_merge201_awid
net:   tb.dut.split101_merge201_awextras [8] = 00000000     // split101_merge201_awextras
net:   tb.dut.split101_merge201_awburst [2] = 00     // split101_merge201_awburst
net:   tb.dut.split101_merge201_awaddr [32] = 00000000000000000000000000000000     // split101_merge201_awaddr
net:   tb.dut.split101_merge201_arvalid [1] = 0     // split101_merge201_arvalid
net:   tb.dut.split101_merge201_arready [1] = 1     // split101_merge201_arready
net:   tb.dut.split101_merge201_arlen [8] = 00000000     // split101_merge201_arlen
net:   tb.dut.split101_merge201_arid [4] = 0000     // split101_merge201_arid
net:   tb.dut.split101_merge201_arextras [8] = 00000000     // split101_merge201_arextras
net:   tb.dut.split101_merge201_arburst [2] = 00     // split101_merge201_arburst
net:   tb.dut.split101_merge201_araddr [32] = 00000000000000000000000000000000     // split101_merge201_araddr
net:   tb.dut.split100_merge212_wvalid [1] = 0     // split100_merge212_wvalid
net:   tb.dut.split100_merge212_wstrb [8] = 00000000     // split100_merge212_wstrb
net:   tb.dut.split100_merge212_wready [1] = 1     // split100_merge212_wready
net:   tb.dut.split100_merge212_wlast [1] = 0     // split100_merge212_wlast
net:   tb.dut.split100_merge212_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge212_wdata
net:   tb.dut.split100_merge212_rvalid [1] = 0     // split100_merge212_rvalid
net:   tb.dut.split100_merge212_rresp [2] = 00     // split100_merge212_rresp
net:   tb.dut.split100_merge212_rready [1] = 1     // split100_merge212_rready
net:   tb.dut.split100_merge212_rlast [1] = 0     // split100_merge212_rlast
net:   tb.dut.split100_merge212_rid [4] = 0000     // split100_merge212_rid
net:   tb.dut.split100_merge212_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge212_rdata
net:   tb.dut.split100_merge212_bvalid [1] = 0     // split100_merge212_bvalid
net:   tb.dut.split100_merge212_bresp [2] = xx     // split100_merge212_bresp
net:   tb.dut.split100_merge212_bready [1] = 1     // split100_merge212_bready
net:   tb.dut.split100_merge212_bid [4] = 0000     // split100_merge212_bid
net:   tb.dut.split100_merge212_awvalid [1] = 0     // split100_merge212_awvalid
net:   tb.dut.split100_merge212_awready [1] = 1     // split100_merge212_awready
net:   tb.dut.split100_merge212_awlen [8] = 00000000     // split100_merge212_awlen
net:   tb.dut.split100_merge212_awid [4] = 0000     // split100_merge212_awid
net:   tb.dut.split100_merge212_awextras [8] = 00000000     // split100_merge212_awextras
net:   tb.dut.split100_merge212_awburst [2] = 00     // split100_merge212_awburst
net:   tb.dut.split100_merge212_awaddr [32] = 00000000000000000000000000000000     // split100_merge212_awaddr
net:   tb.dut.split100_merge212_arvalid [1] = 0     // split100_merge212_arvalid
net:   tb.dut.split100_merge212_arready [1] = 1     // split100_merge212_arready
net:   tb.dut.split100_merge212_arlen [8] = 00000000     // split100_merge212_arlen
net:   tb.dut.split100_merge212_arid [4] = 0000     // split100_merge212_arid
net:   tb.dut.split100_merge212_arextras [8] = 00000000     // split100_merge212_arextras
net:   tb.dut.split100_merge212_arburst [2] = 00     // split100_merge212_arburst
net:   tb.dut.split100_merge212_araddr [32] = 00000000000000000000000000000000     // split100_merge212_araddr
net:   tb.dut.split100_merge211_wvalid [1] = 0     // split100_merge211_wvalid
net:   tb.dut.split100_merge211_wstrb [8] = 00000000     // split100_merge211_wstrb
net:   tb.dut.split100_merge211_wready [1] = 1     // split100_merge211_wready
net:   tb.dut.split100_merge211_wlast [1] = 0     // split100_merge211_wlast
net:   tb.dut.split100_merge211_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge211_wdata
net:   tb.dut.split100_merge211_rvalid [1] = 0     // split100_merge211_rvalid
net:   tb.dut.split100_merge211_rresp [2] = 00     // split100_merge211_rresp
net:   tb.dut.split100_merge211_rready [1] = 1     // split100_merge211_rready
net:   tb.dut.split100_merge211_rlast [1] = 0     // split100_merge211_rlast
net:   tb.dut.split100_merge211_rid [4] = 0000     // split100_merge211_rid
net:   tb.dut.split100_merge211_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge211_rdata
net:   tb.dut.split100_merge211_bvalid [1] = 0     // split100_merge211_bvalid
net:   tb.dut.split100_merge211_bresp [2] = xx     // split100_merge211_bresp
net:   tb.dut.split100_merge211_bready [1] = 1     // split100_merge211_bready
net:   tb.dut.split100_merge211_bid [4] = 0000     // split100_merge211_bid
net:   tb.dut.split100_merge211_awvalid [1] = 0     // split100_merge211_awvalid
net:   tb.dut.split100_merge211_awready [1] = 1     // split100_merge211_awready
net:   tb.dut.split100_merge211_awlen [8] = 00000000     // split100_merge211_awlen
net:   tb.dut.split100_merge211_awid [4] = 0000     // split100_merge211_awid
net:   tb.dut.split100_merge211_awextras [8] = 00000000     // split100_merge211_awextras
net:   tb.dut.split100_merge211_awburst [2] = 00     // split100_merge211_awburst
net:   tb.dut.split100_merge211_awaddr [32] = 00000000000000000000000000000000     // split100_merge211_awaddr
net:   tb.dut.split100_merge211_arvalid [1] = 0     // split100_merge211_arvalid
net:   tb.dut.split100_merge211_arready [1] = 1     // split100_merge211_arready
net:   tb.dut.split100_merge211_arlen [8] = 00000000     // split100_merge211_arlen
net:   tb.dut.split100_merge211_arid [4] = 0000     // split100_merge211_arid
net:   tb.dut.split100_merge211_arextras [8] = 00000000     // split100_merge211_arextras
net:   tb.dut.split100_merge211_arburst [2] = 00     // split100_merge211_arburst
net:   tb.dut.split100_merge211_araddr [32] = 00000000000000000000000000000000     // split100_merge211_araddr
net:   tb.dut.split100_merge208_wvalid [1] = 0     // split100_merge208_wvalid
net:   tb.dut.split100_merge208_wstrb [8] = 00000000     // split100_merge208_wstrb
net:   tb.dut.split100_merge208_wready [1] = 1     // split100_merge208_wready
net:   tb.dut.split100_merge208_wlast [1] = 0     // split100_merge208_wlast
net:   tb.dut.split100_merge208_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge208_wdata
net:   tb.dut.split100_merge208_rvalid [1] = 0     // split100_merge208_rvalid
net:   tb.dut.split100_merge208_rresp [2] = 00     // split100_merge208_rresp
net:   tb.dut.split100_merge208_rready [1] = 1     // split100_merge208_rready
net:   tb.dut.split100_merge208_rlast [1] = 0     // split100_merge208_rlast
net:   tb.dut.split100_merge208_rid [4] = 0000     // split100_merge208_rid
net:   tb.dut.split100_merge208_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge208_rdata
net:   tb.dut.split100_merge208_bvalid [1] = 0     // split100_merge208_bvalid
net:   tb.dut.split100_merge208_bresp [2] = xx     // split100_merge208_bresp
net:   tb.dut.split100_merge208_bready [1] = 1     // split100_merge208_bready
net:   tb.dut.split100_merge208_bid [4] = 0000     // split100_merge208_bid
net:   tb.dut.split100_merge208_awvalid [1] = 0     // split100_merge208_awvalid
net:   tb.dut.split100_merge208_awready [1] = 1     // split100_merge208_awready
net:   tb.dut.split100_merge208_awlen [8] = 00000000     // split100_merge208_awlen
net:   tb.dut.split100_merge208_awid [4] = 0000     // split100_merge208_awid
net:   tb.dut.split100_merge208_awextras [8] = 00000000     // split100_merge208_awextras
net:   tb.dut.split100_merge208_awburst [2] = 00     // split100_merge208_awburst
net:   tb.dut.split100_merge208_awaddr [32] = 00000000000000000000000000000000     // split100_merge208_awaddr
net:   tb.dut.split100_merge208_arvalid [1] = 0     // split100_merge208_arvalid
net:   tb.dut.split100_merge208_arready [1] = 1     // split100_merge208_arready
net:   tb.dut.split100_merge208_arlen [8] = 00000000     // split100_merge208_arlen
net:   tb.dut.split100_merge208_arid [4] = 0000     // split100_merge208_arid
net:   tb.dut.split100_merge208_arextras [8] = 00000000     // split100_merge208_arextras
net:   tb.dut.split100_merge208_arburst [2] = 00     // split100_merge208_arburst
net:   tb.dut.split100_merge208_araddr [32] = 00000000000000000000000000000000     // split100_merge208_araddr
net:   tb.dut.split100_merge206_wvalid [1] = 0     // split100_merge206_wvalid
net:   tb.dut.split100_merge206_wstrb [8] = 00000000     // split100_merge206_wstrb
net:   tb.dut.split100_merge206_wready [1] = 1     // split100_merge206_wready
net:   tb.dut.split100_merge206_wlast [1] = 0     // split100_merge206_wlast
net:   tb.dut.split100_merge206_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge206_wdata
net:   tb.dut.split100_merge206_rvalid [1] = 0     // split100_merge206_rvalid
net:   tb.dut.split100_merge206_rresp [2] = 00     // split100_merge206_rresp
net:   tb.dut.split100_merge206_rready [1] = 1     // split100_merge206_rready
net:   tb.dut.split100_merge206_rlast [1] = 0     // split100_merge206_rlast
net:   tb.dut.split100_merge206_rid [4] = 0000     // split100_merge206_rid
net:   tb.dut.split100_merge206_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split100_merge206_rdata
net:   tb.dut.split100_merge206_bvalid [1] = 0     // split100_merge206_bvalid
net:   tb.dut.split100_merge206_bresp [2] = xx     // split100_merge206_bresp
net:   tb.dut.split100_merge206_bready [1] = 1     // split100_merge206_bready
net:   tb.dut.split100_merge206_bid [4] = 0000     // split100_merge206_bid
net:   tb.dut.split100_merge206_awvalid [1] = 0     // split100_merge206_awvalid
net:   tb.dut.split100_merge206_awready [1] = 1     // split100_merge206_awready
net:   tb.dut.split100_merge206_awlen [8] = 00000000     // split100_merge206_awlen
net:   tb.dut.split100_merge206_awid [4] = 0000     // split100_merge206_awid
net:   tb.dut.split100_merge206_awextras [8] = 00000000     // split100_merge206_awextras
net:   tb.dut.split100_merge206_awburst [2] = 00     // split100_merge206_awburst
net:   tb.dut.split100_merge206_awaddr [32] = 00000000000000000000000000000000     // split100_merge206_awaddr
net:   tb.dut.split100_merge206_arvalid [1] = 0     // split100_merge206_arvalid
net:   tb.dut.split100_merge206_arready [1] = 1     // split100_merge206_arready
net:   tb.dut.split100_merge206_arlen [8] = 00000000     // split100_merge206_arlen
net:   tb.dut.split100_merge206_arid [4] = 0000     // split100_merge206_arid
net:   tb.dut.split100_merge206_arextras [8] = 00000000     // split100_merge206_arextras
net:   tb.dut.split100_merge206_arburst [2] = 00     // split100_merge206_arburst
net:   tb.dut.split100_merge206_araddr [32] = 00000000000000000000000000000000     // split100_merge206_araddr
net:   tb.dut.split0_merge3_wvalid [1] = 0     // split0_merge3_wvalid
net:   tb.dut.split0_merge3_wstrb [8] = 00000000     // split0_merge3_wstrb
net:   tb.dut.split0_merge3_wready [1] = 1     // split0_merge3_wready
net:   tb.dut.split0_merge3_wlast [1] = 0     // split0_merge3_wlast
net:   tb.dut.split0_merge3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge3_wdata
net:   tb.dut.split0_merge3_rvalid [1] = 0     // split0_merge3_rvalid
net:   tb.dut.split0_merge3_rresp [2] = 00     // split0_merge3_rresp
net:   tb.dut.split0_merge3_rready [1] = 1     // split0_merge3_rready
net:   tb.dut.split0_merge3_rlast [1] = 0     // split0_merge3_rlast
net:   tb.dut.split0_merge3_rid [4] = 0000     // split0_merge3_rid
net:   tb.dut.split0_merge3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge3_rdata
net:   tb.dut.split0_merge3_bvalid [1] = 0     // split0_merge3_bvalid
net:   tb.dut.split0_merge3_bresp [2] = 00     // split0_merge3_bresp
net:   tb.dut.split0_merge3_bready [1] = 1     // split0_merge3_bready
net:   tb.dut.split0_merge3_bid [4] = 0000     // split0_merge3_bid
net:   tb.dut.split0_merge3_awvalid [1] = 0     // split0_merge3_awvalid
net:   tb.dut.split0_merge3_awready [1] = 1     // split0_merge3_awready
net:   tb.dut.split0_merge3_awlen [8] = 00000000     // split0_merge3_awlen
net:   tb.dut.split0_merge3_awid [4] = 0000     // split0_merge3_awid
net:   tb.dut.split0_merge3_awextras [8] = 00000000     // split0_merge3_awextras
net:   tb.dut.split0_merge3_awburst [2] = 00     // split0_merge3_awburst
net:   tb.dut.split0_merge3_awaddr [32] = 00000000000000000000000000000000     // split0_merge3_awaddr
net:   tb.dut.split0_merge3_arvalid [1] = 0     // split0_merge3_arvalid
net:   tb.dut.split0_merge3_arready [1] = 1     // split0_merge3_arready
net:   tb.dut.split0_merge3_arlen [8] = 00000000     // split0_merge3_arlen
net:   tb.dut.split0_merge3_arid [4] = 0000     // split0_merge3_arid
net:   tb.dut.split0_merge3_arextras [8] = 00000000     // split0_merge3_arextras
net:   tb.dut.split0_merge3_arburst [2] = 00     // split0_merge3_arburst
net:   tb.dut.split0_merge3_araddr [32] = 00000000000000000000000000000000     // split0_merge3_araddr
net:   tb.dut.split0_merge2_wvalid [1] = 0     // split0_merge2_wvalid
net:   tb.dut.split0_merge2_wstrb [8] = 00000000     // split0_merge2_wstrb
net:   tb.dut.split0_merge2_wready [1] = 1     // split0_merge2_wready
net:   tb.dut.split0_merge2_wlast [1] = 0     // split0_merge2_wlast
net:   tb.dut.split0_merge2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge2_wdata
net:   tb.dut.split0_merge2_rvalid [1] = 0     // split0_merge2_rvalid
net:   tb.dut.split0_merge2_rresp [2] = 00     // split0_merge2_rresp
net:   tb.dut.split0_merge2_rready [1] = 1     // split0_merge2_rready
net:   tb.dut.split0_merge2_rlast [1] = 0     // split0_merge2_rlast
net:   tb.dut.split0_merge2_rid [4] = 0000     // split0_merge2_rid
net:   tb.dut.split0_merge2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge2_rdata
net:   tb.dut.split0_merge2_bvalid [1] = 0     // split0_merge2_bvalid
net:   tb.dut.split0_merge2_bresp [2] = 00     // split0_merge2_bresp
net:   tb.dut.split0_merge2_bready [1] = 1     // split0_merge2_bready
net:   tb.dut.split0_merge2_bid [4] = 0000     // split0_merge2_bid
net:   tb.dut.split0_merge2_awvalid [1] = 0     // split0_merge2_awvalid
net:   tb.dut.split0_merge2_awready [1] = 1     // split0_merge2_awready
net:   tb.dut.split0_merge2_awlen [8] = 00000000     // split0_merge2_awlen
net:   tb.dut.split0_merge2_awid [4] = 0000     // split0_merge2_awid
net:   tb.dut.split0_merge2_awextras [8] = 00000000     // split0_merge2_awextras
net:   tb.dut.split0_merge2_awburst [2] = 00     // split0_merge2_awburst
net:   tb.dut.split0_merge2_awaddr [32] = 00000000000000000000000000000000     // split0_merge2_awaddr
net:   tb.dut.split0_merge2_arvalid [1] = 0     // split0_merge2_arvalid
net:   tb.dut.split0_merge2_arready [1] = 1     // split0_merge2_arready
net:   tb.dut.split0_merge2_arlen [8] = 00000000     // split0_merge2_arlen
net:   tb.dut.split0_merge2_arid [4] = 0000     // split0_merge2_arid
net:   tb.dut.split0_merge2_arextras [8] = 00000000     // split0_merge2_arextras
net:   tb.dut.split0_merge2_arburst [2] = 00     // split0_merge2_arburst
net:   tb.dut.split0_merge2_araddr [32] = 00000000000000000000000000000000     // split0_merge2_araddr
net:   tb.dut.split0_merge1_wvalid [1] = 0     // split0_merge1_wvalid
net:   tb.dut.split0_merge1_wstrb [8] = 00000000     // split0_merge1_wstrb
net:   tb.dut.split0_merge1_wready [1] = 1     // split0_merge1_wready
net:   tb.dut.split0_merge1_wlast [1] = 0     // split0_merge1_wlast
net:   tb.dut.split0_merge1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge1_wdata
net:   tb.dut.split0_merge1_rvalid [1] = 0     // split0_merge1_rvalid
net:   tb.dut.split0_merge1_rresp [2] = 00     // split0_merge1_rresp
net:   tb.dut.split0_merge1_rready [1] = 1     // split0_merge1_rready
net:   tb.dut.split0_merge1_rlast [1] = 0     // split0_merge1_rlast
net:   tb.dut.split0_merge1_rid [4] = 0000     // split0_merge1_rid
net:   tb.dut.split0_merge1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge1_rdata
net:   tb.dut.split0_merge1_bvalid [1] = 0     // split0_merge1_bvalid
net:   tb.dut.split0_merge1_bresp [2] = 00     // split0_merge1_bresp
net:   tb.dut.split0_merge1_bready [1] = 1     // split0_merge1_bready
net:   tb.dut.split0_merge1_bid [4] = 0000     // split0_merge1_bid
net:   tb.dut.split0_merge1_awvalid [1] = 0     // split0_merge1_awvalid
net:   tb.dut.split0_merge1_awready [1] = 1     // split0_merge1_awready
net:   tb.dut.split0_merge1_awlen [8] = 00000000     // split0_merge1_awlen
net:   tb.dut.split0_merge1_awid [4] = 0000     // split0_merge1_awid
net:   tb.dut.split0_merge1_awextras [8] = 00000000     // split0_merge1_awextras
net:   tb.dut.split0_merge1_awburst [2] = 00     // split0_merge1_awburst
net:   tb.dut.split0_merge1_awaddr [32] = 00000000000000000000000000000000     // split0_merge1_awaddr
net:   tb.dut.split0_merge1_arvalid [1] = 0     // split0_merge1_arvalid
net:   tb.dut.split0_merge1_arready [1] = 1     // split0_merge1_arready
net:   tb.dut.split0_merge1_arlen [8] = 00000000     // split0_merge1_arlen
net:   tb.dut.split0_merge1_arid [4] = 0000     // split0_merge1_arid
net:   tb.dut.split0_merge1_arextras [8] = 00000000     // split0_merge1_arextras
net:   tb.dut.split0_merge1_arburst [2] = 00     // split0_merge1_arburst
net:   tb.dut.split0_merge1_araddr [32] = 00000000000000000000000000000000     // split0_merge1_araddr
net:   tb.dut.split0_merge0_wvalid [1] = 0     // split0_merge0_wvalid
net:   tb.dut.split0_merge0_wstrb [8] = 00000000     // split0_merge0_wstrb
net:   tb.dut.split0_merge0_wready [1] = 1     // split0_merge0_wready
net:   tb.dut.split0_merge0_wlast [1] = 0     // split0_merge0_wlast
net:   tb.dut.split0_merge0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge0_wdata
net:   tb.dut.split0_merge0_rvalid [1] = 0     // split0_merge0_rvalid
net:   tb.dut.split0_merge0_rresp [2] = 00     // split0_merge0_rresp
net:   tb.dut.split0_merge0_rready [1] = 1     // split0_merge0_rready
net:   tb.dut.split0_merge0_rlast [1] = 0     // split0_merge0_rlast
net:   tb.dut.split0_merge0_rid [4] = 0000     // split0_merge0_rid
net:   tb.dut.split0_merge0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // split0_merge0_rdata
net:   tb.dut.split0_merge0_bvalid [1] = 0     // split0_merge0_bvalid
net:   tb.dut.split0_merge0_bresp [2] = 00     // split0_merge0_bresp
net:   tb.dut.split0_merge0_bready [1] = 1     // split0_merge0_bready
net:   tb.dut.split0_merge0_bid [4] = 0000     // split0_merge0_bid
net:   tb.dut.split0_merge0_awvalid [1] = 0     // split0_merge0_awvalid
net:   tb.dut.split0_merge0_awready [1] = 1     // split0_merge0_awready
net:   tb.dut.split0_merge0_awlen [8] = 00000000     // split0_merge0_awlen
net:   tb.dut.split0_merge0_awid [4] = 0000     // split0_merge0_awid
net:   tb.dut.split0_merge0_awextras [8] = 00000000     // split0_merge0_awextras
net:   tb.dut.split0_merge0_awburst [2] = 00     // split0_merge0_awburst
net:   tb.dut.split0_merge0_awaddr [32] = 00000000000000000000000000000000     // split0_merge0_awaddr
net:   tb.dut.split0_merge0_arvalid [1] = 0     // split0_merge0_arvalid
net:   tb.dut.split0_merge0_arready [1] = 1     // split0_merge0_arready
net:   tb.dut.split0_merge0_arlen [8] = 00000000     // split0_merge0_arlen
net:   tb.dut.split0_merge0_arid [4] = 0000     // split0_merge0_arid
net:   tb.dut.split0_merge0_arextras [8] = 00000000     // split0_merge0_arextras
net:   tb.dut.split0_merge0_arburst [2] = 00     // split0_merge0_arburst
net:   tb.dut.split0_merge0_araddr [32] = 00000000000000000000000000000000     // split0_merge0_araddr
net:   tb.dut.slv9_wvalid [1] = 0     // slv9_wvalid
net:   tb.dut.slv9_wstrb [8] = 00000000     // slv9_wstrb
net:   tb.dut.slv9_wlast [1] = 0     // slv9_wlast
net:   tb.dut.slv9_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv9_wdata
net:   tb.dut.slv9_rready [1] = 1     // slv9_rready
net:   tb.dut.slv9_bready [1] = 1     // slv9_bready
net:   tb.dut.slv9_awvalid [1] = 0     // slv9_awvalid
net:   tb.dut.slv9_awlen [8] = 00000000     // slv9_awlen
net:   tb.dut.slv9_awid [4] = 0000     // slv9_awid
net:   tb.dut.slv9_awextras [8] = 00000000     // slv9_awextras
net:   tb.dut.slv9_awburst [2] = 00     // slv9_awburst
net:   tb.dut.slv9_awaddr [32] = 00000000000000000000000000000000     // slv9_awaddr
net:   tb.dut.slv9_arvalid [1] = 0     // slv9_arvalid
net:   tb.dut.slv9_arlen [8] = 00000000     // slv9_arlen
net:   tb.dut.slv9_arid [4] = 0000     // slv9_arid
net:   tb.dut.slv9_arextras [8] = 00000000     // slv9_arextras
net:   tb.dut.slv9_arburst [2] = 00     // slv9_arburst
net:   tb.dut.slv9_araddr [32] = 00000000000000000000000000000000     // slv9_araddr
net:   tb.dut.slv8_wvalid [1] = 0     // slv8_wvalid
net:   tb.dut.slv8_wstrb [8] = 00000000     // slv8_wstrb
net:   tb.dut.slv8_wlast [1] = 0     // slv8_wlast
net:   tb.dut.slv8_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv8_wdata
net:   tb.dut.slv8_rready [1] = 1     // slv8_rready
net:   tb.dut.slv8_bready [1] = 1     // slv8_bready
net:   tb.dut.slv8_awvalid [1] = 0     // slv8_awvalid
net:   tb.dut.slv8_awlen [8] = 00000000     // slv8_awlen
net:   tb.dut.slv8_awid [4] = 0000     // slv8_awid
net:   tb.dut.slv8_awextras [8] = 00000000     // slv8_awextras
net:   tb.dut.slv8_awburst [2] = 00     // slv8_awburst
net:   tb.dut.slv8_awaddr [32] = 00000000000000000000000000000000     // slv8_awaddr
net:   tb.dut.slv8_arvalid [1] = 0     // slv8_arvalid
net:   tb.dut.slv8_arlen [8] = 00000000     // slv8_arlen
net:   tb.dut.slv8_arid [4] = 0000     // slv8_arid
net:   tb.dut.slv8_arextras [8] = 00000000     // slv8_arextras
net:   tb.dut.slv8_arburst [2] = 00     // slv8_arburst
net:   tb.dut.slv8_araddr [32] = 00000000000000000000000000000000     // slv8_araddr
net:   tb.dut.slv7_wvalid [1] = 0     // slv7_wvalid
net:   tb.dut.slv7_wstrb [8] = 00000000     // slv7_wstrb
net:   tb.dut.slv7_wlast [1] = 0     // slv7_wlast
net:   tb.dut.slv7_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv7_wdata
net:   tb.dut.slv7_rready [1] = 1     // slv7_rready
net:   tb.dut.slv7_bready [1] = 1     // slv7_bready
net:   tb.dut.slv7_awvalid [1] = 0     // slv7_awvalid
net:   tb.dut.slv7_awlen [8] = 00000000     // slv7_awlen
net:   tb.dut.slv7_awid [4] = 0000     // slv7_awid
net:   tb.dut.slv7_awextras [8] = 00000000     // slv7_awextras
net:   tb.dut.slv7_awburst [2] = 00     // slv7_awburst
net:   tb.dut.slv7_awaddr [32] = 00000000000000000000000000000000     // slv7_awaddr
net:   tb.dut.slv7_arvalid [1] = 0     // slv7_arvalid
net:   tb.dut.slv7_arlen [8] = 00000000     // slv7_arlen
net:   tb.dut.slv7_arid [4] = 0000     // slv7_arid
net:   tb.dut.slv7_arextras [8] = 00000000     // slv7_arextras
net:   tb.dut.slv7_arburst [2] = 00     // slv7_arburst
net:   tb.dut.slv7_araddr [32] = 00000000000000000000000000000000     // slv7_araddr
net:   tb.dut.slv6_wvalid [1] = 0     // slv6_wvalid
net:   tb.dut.slv6_wstrb [8] = 00000000     // slv6_wstrb
net:   tb.dut.slv6_wlast [1] = 0     // slv6_wlast
net:   tb.dut.slv6_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv6_wdata
net:   tb.dut.slv6_rready [1] = 1     // slv6_rready
net:   tb.dut.slv6_bready [1] = 1     // slv6_bready
net:   tb.dut.slv6_awvalid [1] = 0     // slv6_awvalid
net:   tb.dut.slv6_awlen [8] = 00000000     // slv6_awlen
net:   tb.dut.slv6_awid [4] = 0000     // slv6_awid
net:   tb.dut.slv6_awextras [8] = 00000000     // slv6_awextras
net:   tb.dut.slv6_awburst [2] = 00     // slv6_awburst
net:   tb.dut.slv6_awaddr [32] = 00000000000000000000000000000000     // slv6_awaddr
net:   tb.dut.slv6_arvalid [1] = 0     // slv6_arvalid
net:   tb.dut.slv6_arlen [8] = 00000000     // slv6_arlen
net:   tb.dut.slv6_arid [4] = 0000     // slv6_arid
net:   tb.dut.slv6_arextras [8] = 00000000     // slv6_arextras
net:   tb.dut.slv6_arburst [2] = 00     // slv6_arburst
net:   tb.dut.slv6_araddr [32] = 00000000000000000000000000000000     // slv6_araddr
net:   tb.dut.slv5_wvalid [1] = 0     // slv5_wvalid
net:   tb.dut.slv5_wstrb [8] = 00000000     // slv5_wstrb
net:   tb.dut.slv5_wlast [1] = 0     // slv5_wlast
net:   tb.dut.slv5_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv5_wdata
net:   tb.dut.slv5_rready [1] = 1     // slv5_rready
net:   tb.dut.slv5_bready [1] = 1     // slv5_bready
net:   tb.dut.slv5_awvalid [1] = 0     // slv5_awvalid
net:   tb.dut.slv5_awlen [8] = 00000000     // slv5_awlen
net:   tb.dut.slv5_awid [4] = 0000     // slv5_awid
net:   tb.dut.slv5_awextras [8] = 00000000     // slv5_awextras
net:   tb.dut.slv5_awburst [2] = 00     // slv5_awburst
net:   tb.dut.slv5_awaddr [32] = 00000000000000000000000000000000     // slv5_awaddr
net:   tb.dut.slv5_arvalid [1] = 0     // slv5_arvalid
net:   tb.dut.slv5_arlen [8] = 00000000     // slv5_arlen
net:   tb.dut.slv5_arid [4] = 0000     // slv5_arid
net:   tb.dut.slv5_arextras [8] = 00000000     // slv5_arextras
net:   tb.dut.slv5_arburst [2] = 00     // slv5_arburst
net:   tb.dut.slv5_araddr [32] = 00000000000000000000000000000000     // slv5_araddr
net:   tb.dut.slv4_wvalid [1] = 0     // slv4_wvalid
net:   tb.dut.slv4_wstrb [8] = 00000000     // slv4_wstrb
net:   tb.dut.slv4_wlast [1] = 0     // slv4_wlast
net:   tb.dut.slv4_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv4_wdata
net:   tb.dut.slv4_rready [1] = 1     // slv4_rready
net:   tb.dut.slv4_bready [1] = 1     // slv4_bready
net:   tb.dut.slv4_awvalid [1] = 0     // slv4_awvalid
net:   tb.dut.slv4_awlen [8] = 00000000     // slv4_awlen
net:   tb.dut.slv4_awid [4] = 0000     // slv4_awid
net:   tb.dut.slv4_awextras [8] = 00000000     // slv4_awextras
net:   tb.dut.slv4_awburst [2] = 00     // slv4_awburst
net:   tb.dut.slv4_awaddr [32] = 00000000000000000000000000000000     // slv4_awaddr
net:   tb.dut.slv4_arvalid [1] = 0     // slv4_arvalid
net:   tb.dut.slv4_arlen [8] = 00000000     // slv4_arlen
net:   tb.dut.slv4_arid [4] = 0000     // slv4_arid
net:   tb.dut.slv4_arextras [8] = 00000000     // slv4_arextras
net:   tb.dut.slv4_arburst [2] = 00     // slv4_arburst
net:   tb.dut.slv4_araddr [32] = 00000000000000000000000000000000     // slv4_araddr
net:   tb.dut.slv3_wvalid [1] = 0     // slv3_wvalid
net:   tb.dut.slv3_wstrb [8] = 00000000     // slv3_wstrb
net:   tb.dut.slv3_wlast [1] = 0     // slv3_wlast
net:   tb.dut.slv3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv3_wdata
net:   tb.dut.slv3_rready [1] = 1     // slv3_rready
net:   tb.dut.slv3_bready [1] = 1     // slv3_bready
net:   tb.dut.slv3_awvalid [1] = 0     // slv3_awvalid
net:   tb.dut.slv3_awlen [8] = 00000000     // slv3_awlen
net:   tb.dut.slv3_awid [4] = 0000     // slv3_awid
net:   tb.dut.slv3_awextras [8] = 00000000     // slv3_awextras
net:   tb.dut.slv3_awburst [2] = 00     // slv3_awburst
net:   tb.dut.slv3_awaddr [32] = 00000000000000000000000000000000     // slv3_awaddr
net:   tb.dut.slv3_arvalid [1] = 0     // slv3_arvalid
net:   tb.dut.slv3_arlen [8] = 00000000     // slv3_arlen
net:   tb.dut.slv3_arid [4] = 0000     // slv3_arid
net:   tb.dut.slv3_arextras [8] = 00000000     // slv3_arextras
net:   tb.dut.slv3_arburst [2] = 00     // slv3_arburst
net:   tb.dut.slv3_araddr [32] = 00000000000000000000000000000000     // slv3_araddr
net:   tb.dut.slv2_wvalid [1] = 0     // slv2_wvalid
net:   tb.dut.slv2_wstrb [8] = 00000000     // slv2_wstrb
net:   tb.dut.slv2_wlast [1] = 0     // slv2_wlast
net:   tb.dut.slv2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv2_wdata
net:   tb.dut.slv2_rready [1] = 1     // slv2_rready
net:   tb.dut.slv2_bready [1] = 1     // slv2_bready
net:   tb.dut.slv2_awvalid [1] = 0     // slv2_awvalid
net:   tb.dut.slv2_awlen [8] = 00000000     // slv2_awlen
net:   tb.dut.slv2_awid [4] = 0000     // slv2_awid
net:   tb.dut.slv2_awextras [8] = 00000000     // slv2_awextras
net:   tb.dut.slv2_awburst [2] = 00     // slv2_awburst
net:   tb.dut.slv2_awaddr [32] = 00000000000000000000000000000000     // slv2_awaddr
net:   tb.dut.slv2_arvalid [1] = 0     // slv2_arvalid
net:   tb.dut.slv2_arlen [8] = 00000000     // slv2_arlen
net:   tb.dut.slv2_arid [4] = 0000     // slv2_arid
net:   tb.dut.slv2_arextras [8] = 00000000     // slv2_arextras
net:   tb.dut.slv2_arburst [2] = 00     // slv2_arburst
net:   tb.dut.slv2_araddr [32] = 00000000000000000000000000000000     // slv2_araddr
net:   tb.dut.slv1_wvalid [1] = 0     // slv1_wvalid
net:   tb.dut.slv1_wstrb [8] = 00000000     // slv1_wstrb
net:   tb.dut.slv1_wlast [1] = 0     // slv1_wlast
net:   tb.dut.slv1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv1_wdata
net:   tb.dut.slv1_rready [1] = 1     // slv1_rready
net:   tb.dut.slv1_bready [1] = 1     // slv1_bready
net:   tb.dut.slv1_awvalid [1] = 0     // slv1_awvalid
net:   tb.dut.slv1_awlen [8] = 00000000     // slv1_awlen
net:   tb.dut.slv1_awid [4] = 0000     // slv1_awid
net:   tb.dut.slv1_awextras [8] = 00000000     // slv1_awextras
net:   tb.dut.slv1_awburst [2] = 00     // slv1_awburst
net:   tb.dut.slv1_awaddr [32] = 00000000000000000000000000000000     // slv1_awaddr
net:   tb.dut.slv1_arvalid [1] = 0     // slv1_arvalid
net:   tb.dut.slv1_arlen [8] = 00000000     // slv1_arlen
net:   tb.dut.slv1_arid [4] = 0000     // slv1_arid
net:   tb.dut.slv1_arextras [8] = 00000000     // slv1_arextras
net:   tb.dut.slv1_arburst [2] = 00     // slv1_arburst
net:   tb.dut.slv1_araddr [32] = 00000000000000000000000000000000     // slv1_araddr
net:   tb.dut.slv15_wvalid [1] = 0     // slv15_wvalid
net:   tb.dut.slv15_wstrb [8] = 00000000     // slv15_wstrb
net:   tb.dut.slv15_wlast [1] = 0     // slv15_wlast
net:   tb.dut.slv15_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv15_wdata
net:   tb.dut.slv15_rready [1] = 1     // slv15_rready
net:   tb.dut.slv15_bready [1] = 1     // slv15_bready
net:   tb.dut.slv15_awvalid [1] = 0     // slv15_awvalid
net:   tb.dut.slv15_awlen [8] = 00000000     // slv15_awlen
net:   tb.dut.slv15_awid [4] = 0000     // slv15_awid
net:   tb.dut.slv15_awextras [8] = 00000000     // slv15_awextras
net:   tb.dut.slv15_awburst [2] = 00     // slv15_awburst
net:   tb.dut.slv15_awaddr [32] = 00000000000000000000000000000000     // slv15_awaddr
net:   tb.dut.slv15_arvalid [1] = 0     // slv15_arvalid
net:   tb.dut.slv15_arlen [8] = 00000000     // slv15_arlen
net:   tb.dut.slv15_arid [4] = 0000     // slv15_arid
net:   tb.dut.slv15_arextras [8] = 00000000     // slv15_arextras
net:   tb.dut.slv15_arburst [2] = 00     // slv15_arburst
net:   tb.dut.slv15_araddr [32] = 00000000000000000000000000000000     // slv15_araddr
net:   tb.dut.slv14_wvalid [1] = 0     // slv14_wvalid
net:   tb.dut.slv14_wstrb [8] = 00000000     // slv14_wstrb
net:   tb.dut.slv14_wlast [1] = 0     // slv14_wlast
net:   tb.dut.slv14_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv14_wdata
net:   tb.dut.slv14_rready [1] = 1     // slv14_rready
net:   tb.dut.slv14_bready [1] = 1     // slv14_bready
net:   tb.dut.slv14_awvalid [1] = 0     // slv14_awvalid
net:   tb.dut.slv14_awlen [8] = 00000000     // slv14_awlen
net:   tb.dut.slv14_awid [4] = 0000     // slv14_awid
net:   tb.dut.slv14_awextras [8] = 00000000     // slv14_awextras
net:   tb.dut.slv14_awburst [2] = 00     // slv14_awburst
net:   tb.dut.slv14_awaddr [32] = 00000000000000000000000000000000     // slv14_awaddr
net:   tb.dut.slv14_arvalid [1] = 0     // slv14_arvalid
net:   tb.dut.slv14_arlen [8] = 00000000     // slv14_arlen
net:   tb.dut.slv14_arid [4] = 0000     // slv14_arid
net:   tb.dut.slv14_arextras [8] = 00000000     // slv14_arextras
net:   tb.dut.slv14_arburst [2] = 00     // slv14_arburst
net:   tb.dut.slv14_araddr [32] = 00000000000000000000000000000000     // slv14_araddr
net:   tb.dut.slv13_wvalid [1] = 0     // slv13_wvalid
net:   tb.dut.slv13_wstrb [8] = 00000000     // slv13_wstrb
net:   tb.dut.slv13_wlast [1] = 0     // slv13_wlast
net:   tb.dut.slv13_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv13_wdata
net:   tb.dut.slv13_rready [1] = 1     // slv13_rready
net:   tb.dut.slv13_bready [1] = 1     // slv13_bready
net:   tb.dut.slv13_awvalid [1] = 0     // slv13_awvalid
net:   tb.dut.slv13_awlen [8] = 00000000     // slv13_awlen
net:   tb.dut.slv13_awid [4] = 0000     // slv13_awid
net:   tb.dut.slv13_awextras [8] = 00000000     // slv13_awextras
net:   tb.dut.slv13_awburst [2] = 00     // slv13_awburst
net:   tb.dut.slv13_awaddr [32] = 00000000000000000000000000000000     // slv13_awaddr
net:   tb.dut.slv13_arvalid [1] = 0     // slv13_arvalid
net:   tb.dut.slv13_arlen [8] = 00000000     // slv13_arlen
net:   tb.dut.slv13_arid [4] = 0000     // slv13_arid
net:   tb.dut.slv13_arextras [8] = 00000000     // slv13_arextras
net:   tb.dut.slv13_arburst [2] = 00     // slv13_arburst
net:   tb.dut.slv13_araddr [32] = 00000000000000000000000000000000     // slv13_araddr
net:   tb.dut.slv12_wvalid [1] = 0     // slv12_wvalid
net:   tb.dut.slv12_wstrb [8] = 00000000     // slv12_wstrb
net:   tb.dut.slv12_wlast [1] = 0     // slv12_wlast
net:   tb.dut.slv12_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv12_wdata
net:   tb.dut.slv12_rready [1] = 1     // slv12_rready
net:   tb.dut.slv12_bready [1] = 1     // slv12_bready
net:   tb.dut.slv12_awvalid [1] = 0     // slv12_awvalid
net:   tb.dut.slv12_awlen [8] = 00000000     // slv12_awlen
net:   tb.dut.slv12_awid [4] = 0000     // slv12_awid
net:   tb.dut.slv12_awextras [8] = 00000000     // slv12_awextras
net:   tb.dut.slv12_awburst [2] = 00     // slv12_awburst
net:   tb.dut.slv12_awaddr [32] = 00000000000000000000000000000000     // slv12_awaddr
net:   tb.dut.slv12_arvalid [1] = 0     // slv12_arvalid
net:   tb.dut.slv12_arlen [8] = 00000000     // slv12_arlen
net:   tb.dut.slv12_arid [4] = 0000     // slv12_arid
net:   tb.dut.slv12_arextras [8] = 00000000     // slv12_arextras
net:   tb.dut.slv12_arburst [2] = 00     // slv12_arburst
net:   tb.dut.slv12_araddr [32] = 00000000000000000000000000000000     // slv12_araddr
net:   tb.dut.slv11_wvalid [1] = 0     // slv11_wvalid
net:   tb.dut.slv11_wstrb [8] = 00000000     // slv11_wstrb
net:   tb.dut.slv11_wlast [1] = 0     // slv11_wlast
net:   tb.dut.slv11_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv11_wdata
net:   tb.dut.slv11_rready [1] = 1     // slv11_rready
net:   tb.dut.slv11_bready [1] = 1     // slv11_bready
net:   tb.dut.slv11_awvalid [1] = 0     // slv11_awvalid
net:   tb.dut.slv11_awlen [8] = 00000000     // slv11_awlen
net:   tb.dut.slv11_awid [4] = 0000     // slv11_awid
net:   tb.dut.slv11_awextras [8] = 00000000     // slv11_awextras
net:   tb.dut.slv11_awburst [2] = 00     // slv11_awburst
net:   tb.dut.slv11_awaddr [32] = 00000000000000000000000000000000     // slv11_awaddr
net:   tb.dut.slv11_arvalid [1] = 0     // slv11_arvalid
net:   tb.dut.slv11_arlen [8] = 00000000     // slv11_arlen
net:   tb.dut.slv11_arid [4] = 0000     // slv11_arid
net:   tb.dut.slv11_arextras [8] = 00000000     // slv11_arextras
net:   tb.dut.slv11_arburst [2] = 00     // slv11_arburst
net:   tb.dut.slv11_araddr [32] = 00000000000000000000000000000000     // slv11_araddr
net:   tb.dut.slv10_wvalid [1] = 0     // slv10_wvalid
net:   tb.dut.slv10_wstrb [8] = 00000000     // slv10_wstrb
net:   tb.dut.slv10_wlast [1] = 0     // slv10_wlast
net:   tb.dut.slv10_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv10_wdata
net:   tb.dut.slv10_rready [1] = 1     // slv10_rready
net:   tb.dut.slv10_bready [1] = 1     // slv10_bready
net:   tb.dut.slv10_awvalid [1] = 0     // slv10_awvalid
net:   tb.dut.slv10_awlen [8] = 00000000     // slv10_awlen
net:   tb.dut.slv10_awid [4] = 0000     // slv10_awid
net:   tb.dut.slv10_awextras [8] = 00000000     // slv10_awextras
net:   tb.dut.slv10_awburst [2] = 00     // slv10_awburst
net:   tb.dut.slv10_awaddr [32] = 00000000000000000000000000000000     // slv10_awaddr
net:   tb.dut.slv10_arvalid [1] = 0     // slv10_arvalid
net:   tb.dut.slv10_arlen [8] = 00000000     // slv10_arlen
net:   tb.dut.slv10_arid [4] = 0000     // slv10_arid
net:   tb.dut.slv10_arextras [8] = 00000000     // slv10_arextras
net:   tb.dut.slv10_arburst [2] = 00     // slv10_arburst
net:   tb.dut.slv10_araddr [32] = 00000000000000000000000000000000     // slv10_araddr
net:   tb.dut.slv0_wvalid [1] = 0     // slv0_wvalid
net:   tb.dut.slv0_wstrb [8] = 00000000     // slv0_wstrb
net:   tb.dut.slv0_wlast [1] = 0     // slv0_wlast
net:   tb.dut.slv0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv0_wdata
net:   tb.dut.slv0_rready [1] = 1     // slv0_rready
net:   tb.dut.slv0_bready [1] = 1     // slv0_bready
net:   tb.dut.slv0_awvalid [1] = 0     // slv0_awvalid
net:   tb.dut.slv0_awlen [8] = 00000000     // slv0_awlen
net:   tb.dut.slv0_awid [4] = 0000     // slv0_awid
net:   tb.dut.slv0_awextras [8] = 00000000     // slv0_awextras
net:   tb.dut.slv0_awburst [2] = 00     // slv0_awburst
net:   tb.dut.slv0_awaddr [32] = 00000000000000000000000000000000     // slv0_awaddr
net:   tb.dut.slv0_arvalid [1] = 0     // slv0_arvalid
net:   tb.dut.slv0_arlen [8] = 00000000     // slv0_arlen
net:   tb.dut.slv0_arid [4] = 0000     // slv0_arid
net:   tb.dut.slv0_arextras [8] = 00000000     // slv0_arextras
net:   tb.dut.slv0_arburst [2] = 00     // slv0_arburst
net:   tb.dut.slv0_araddr [32] = 00000000000000000000000000000000     // slv0_araddr
net:   tb.dut.mst9_rvalid [1] = 0     // mst9_rvalid
net:   tb.dut.mst9_rresp [2] = 00     // mst9_rresp
net:   tb.dut.mst9_rlast [1] = 0     // mst9_rlast
net:   tb.dut.mst9_rid [4] = 0000     // mst9_rid
net:   tb.dut.mst9_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst9_rdata
net:   tb.dut.mst9_bvalid [1] = 0     // mst9_bvalid
net:   tb.dut.mst9_bresp [2] = 00     // mst9_bresp
net:   tb.dut.mst9_bid [4] = 0000     // mst9_bid
net:   tb.dut.mst9_awready [1] = 1     // mst9_awready
net:   tb.dut.mst9_arready [1] = 1     // mst9_arready
net:   tb.dut.mst8_rvalid [1] = 0     // mst8_rvalid
net:   tb.dut.mst8_rresp [2] = 00     // mst8_rresp
net:   tb.dut.mst8_rlast [1] = 0     // mst8_rlast
net:   tb.dut.mst8_rid [4] = 0000     // mst8_rid
net:   tb.dut.mst8_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst8_rdata
net:   tb.dut.mst8_bvalid [1] = 0     // mst8_bvalid
net:   tb.dut.mst8_bresp [2] = 00     // mst8_bresp
net:   tb.dut.mst8_bid [4] = 0000     // mst8_bid
net:   tb.dut.mst8_awready [1] = 1     // mst8_awready
net:   tb.dut.mst8_arready [1] = 1     // mst8_arready
net:   tb.dut.mst7_rvalid [1] = 0     // mst7_rvalid
net:   tb.dut.mst7_rresp [2] = 00     // mst7_rresp
net:   tb.dut.mst7_rlast [1] = 0     // mst7_rlast
net:   tb.dut.mst7_rid [4] = 0000     // mst7_rid
net:   tb.dut.mst7_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst7_rdata
net:   tb.dut.mst7_bvalid [1] = 0     // mst7_bvalid
net:   tb.dut.mst7_bresp [2] = 00     // mst7_bresp
net:   tb.dut.mst7_bid [4] = 0000     // mst7_bid
net:   tb.dut.mst7_awready [1] = 1     // mst7_awready
net:   tb.dut.mst7_arready [1] = 1     // mst7_arready
net:   tb.dut.mst6_rvalid [1] = 0     // mst6_rvalid
net:   tb.dut.mst6_rresp [2] = 00     // mst6_rresp
net:   tb.dut.mst6_rlast [1] = 0     // mst6_rlast
net:   tb.dut.mst6_rid [4] = 0000     // mst6_rid
net:   tb.dut.mst6_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst6_rdata
net:   tb.dut.mst6_bvalid [1] = 0     // mst6_bvalid
net:   tb.dut.mst6_bresp [2] = 00     // mst6_bresp
net:   tb.dut.mst6_bid [4] = 0000     // mst6_bid
net:   tb.dut.mst6_awready [1] = 1     // mst6_awready
net:   tb.dut.mst6_arready [1] = 1     // mst6_arready
net:   tb.dut.mst5_rvalid [1] = 0     // mst5_rvalid
net:   tb.dut.mst5_rresp [2] = 00     // mst5_rresp
net:   tb.dut.mst5_rlast [1] = 0     // mst5_rlast
net:   tb.dut.mst5_rid [4] = 0000     // mst5_rid
net:   tb.dut.mst5_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst5_rdata
net:   tb.dut.mst5_bvalid [1] = 0     // mst5_bvalid
net:   tb.dut.mst5_bresp [2] = 00     // mst5_bresp
net:   tb.dut.mst5_bid [4] = 0000     // mst5_bid
net:   tb.dut.mst5_awready [1] = 1     // mst5_awready
net:   tb.dut.mst5_arready [1] = 1     // mst5_arready
net:   tb.dut.mst4_rvalid [1] = 0     // mst4_rvalid
net:   tb.dut.mst4_rresp [2] = 00     // mst4_rresp
net:   tb.dut.mst4_rlast [1] = 0     // mst4_rlast
net:   tb.dut.mst4_rid [4] = 0000     // mst4_rid
net:   tb.dut.mst4_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst4_rdata
net:   tb.dut.mst4_bvalid [1] = 0     // mst4_bvalid
net:   tb.dut.mst4_bresp [2] = 00     // mst4_bresp
net:   tb.dut.mst4_bid [4] = 0000     // mst4_bid
net:   tb.dut.mst4_awready [1] = 1     // mst4_awready
net:   tb.dut.mst4_arready [1] = 1     // mst4_arready
net:   tb.dut.mst3_rvalid [1] = 0     // mst3_rvalid
net:   tb.dut.mst3_rresp [2] = 00     // mst3_rresp
net:   tb.dut.mst3_rlast [1] = 0     // mst3_rlast
net:   tb.dut.mst3_rid [4] = 0000     // mst3_rid
net:   tb.dut.mst3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst3_rdata
net:   tb.dut.mst3_bvalid [1] = 0     // mst3_bvalid
net:   tb.dut.mst3_bresp [2] = 00     // mst3_bresp
net:   tb.dut.mst3_bid [4] = 0000     // mst3_bid
net:   tb.dut.mst3_awready [1] = 1     // mst3_awready
net:   tb.dut.mst3_arready [1] = 1     // mst3_arready
net:   tb.dut.mst2_rvalid [1] = 0     // mst2_rvalid
net:   tb.dut.mst2_rresp [2] = 00     // mst2_rresp
net:   tb.dut.mst2_rlast [1] = 0     // mst2_rlast
net:   tb.dut.mst2_rid [4] = 0000     // mst2_rid
net:   tb.dut.mst2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst2_rdata
net:   tb.dut.mst2_bvalid [1] = 0     // mst2_bvalid
net:   tb.dut.mst2_bresp [2] = 00     // mst2_bresp
net:   tb.dut.mst2_bid [4] = 0000     // mst2_bid
net:   tb.dut.mst2_awready [1] = 1     // mst2_awready
net:   tb.dut.mst2_arready [1] = 1     // mst2_arready
net:   tb.dut.mst1_rvalid [1] = 0     // mst1_rvalid
net:   tb.dut.mst1_rresp [2] = 00     // mst1_rresp
net:   tb.dut.mst1_rlast [1] = 0     // mst1_rlast
net:   tb.dut.mst1_rid [4] = 0000     // mst1_rid
net:   tb.dut.mst1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst1_rdata
net:   tb.dut.mst1_bvalid [1] = 0     // mst1_bvalid
net:   tb.dut.mst1_bresp [2] = 00     // mst1_bresp
net:   tb.dut.mst1_bid [4] = 0000     // mst1_bid
net:   tb.dut.mst1_awready [1] = 1     // mst1_awready
net:   tb.dut.mst1_arready [1] = 1     // mst1_arready
net:   tb.dut.mst15_rvalid [1] = 0     // mst15_rvalid
net:   tb.dut.mst15_rresp [2] = 00     // mst15_rresp
net:   tb.dut.mst15_rlast [1] = 0     // mst15_rlast
net:   tb.dut.mst15_rid [4] = 0000     // mst15_rid
net:   tb.dut.mst15_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst15_rdata
net:   tb.dut.mst15_bvalid [1] = 0     // mst15_bvalid
net:   tb.dut.mst15_bresp [2] = 00     // mst15_bresp
net:   tb.dut.mst15_bid [4] = 0000     // mst15_bid
net:   tb.dut.mst15_awready [1] = 1     // mst15_awready
net:   tb.dut.mst15_arready [1] = 1     // mst15_arready
net:   tb.dut.mst14_rvalid [1] = 0     // mst14_rvalid
net:   tb.dut.mst14_rresp [2] = 00     // mst14_rresp
net:   tb.dut.mst14_rlast [1] = 0     // mst14_rlast
net:   tb.dut.mst14_rid [4] = 0000     // mst14_rid
net:   tb.dut.mst14_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst14_rdata
net:   tb.dut.mst14_bvalid [1] = 0     // mst14_bvalid
net:   tb.dut.mst14_bresp [2] = 00     // mst14_bresp
net:   tb.dut.mst14_bid [4] = 0000     // mst14_bid
net:   tb.dut.mst14_awready [1] = 1     // mst14_awready
net:   tb.dut.mst14_arready [1] = 1     // mst14_arready
net:   tb.dut.mst13_rvalid [1] = 0     // mst13_rvalid
net:   tb.dut.mst13_rresp [2] = 00     // mst13_rresp
net:   tb.dut.mst13_rlast [1] = 0     // mst13_rlast
net:   tb.dut.mst13_rid [4] = 0000     // mst13_rid
net:   tb.dut.mst13_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst13_rdata
net:   tb.dut.mst13_bvalid [1] = 0     // mst13_bvalid
net:   tb.dut.mst13_bresp [2] = 00     // mst13_bresp
net:   tb.dut.mst13_bid [4] = 0000     // mst13_bid
net:   tb.dut.mst13_awready [1] = 1     // mst13_awready
net:   tb.dut.mst13_arready [1] = 1     // mst13_arready
net:   tb.dut.mst12_rvalid [1] = 0     // mst12_rvalid
net:   tb.dut.mst12_rresp [2] = 00     // mst12_rresp
net:   tb.dut.mst12_rlast [1] = 0     // mst12_rlast
net:   tb.dut.mst12_rid [4] = 0000     // mst12_rid
net:   tb.dut.mst12_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst12_rdata
net:   tb.dut.mst12_bvalid [1] = 0     // mst12_bvalid
net:   tb.dut.mst12_bresp [2] = 00     // mst12_bresp
net:   tb.dut.mst12_bid [4] = 0000     // mst12_bid
net:   tb.dut.mst12_awready [1] = 1     // mst12_awready
net:   tb.dut.mst12_arready [1] = 1     // mst12_arready
net:   tb.dut.mst11_rvalid [1] = 0     // mst11_rvalid
net:   tb.dut.mst11_rresp [2] = 00     // mst11_rresp
net:   tb.dut.mst11_rlast [1] = 0     // mst11_rlast
net:   tb.dut.mst11_rid [4] = 0000     // mst11_rid
net:   tb.dut.mst11_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst11_rdata
net:   tb.dut.mst11_bvalid [1] = 0     // mst11_bvalid
net:   tb.dut.mst11_bresp [2] = 00     // mst11_bresp
net:   tb.dut.mst11_bid [4] = 0000     // mst11_bid
net:   tb.dut.mst11_awready [1] = 1     // mst11_awready
net:   tb.dut.mst11_arready [1] = 1     // mst11_arready
net:   tb.dut.mst10_rvalid [1] = 0     // mst10_rvalid
net:   tb.dut.mst10_rresp [2] = 00     // mst10_rresp
net:   tb.dut.mst10_rlast [1] = 0     // mst10_rlast
net:   tb.dut.mst10_rid [4] = 0000     // mst10_rid
net:   tb.dut.mst10_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst10_rdata
net:   tb.dut.mst10_bvalid [1] = 0     // mst10_bvalid
net:   tb.dut.mst10_bresp [2] = 00     // mst10_bresp
net:   tb.dut.mst10_bid [4] = 0000     // mst10_bid
net:   tb.dut.mst10_awready [1] = 1     // mst10_awready
net:   tb.dut.mst10_arready [1] = 1     // mst10_arready
net:   tb.dut.mst0_rvalid [1] = 0     // mst0_rvalid
net:   tb.dut.mst0_rresp [2] = 00     // mst0_rresp
net:   tb.dut.mst0_rlast [1] = 0     // mst0_rlast
net:   tb.dut.mst0_rid [4] = 0000     // mst0_rid
net:   tb.dut.mst0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst0_rdata
net:   tb.dut.mst0_bvalid [1] = 0     // mst0_bvalid
net:   tb.dut.mst0_bresp [2] = 00     // mst0_bresp
net:   tb.dut.mst0_bid [4] = 0000     // mst0_bid
net:   tb.dut.mst0_awready [1] = 1     // mst0_awready
net:   tb.dut.mst0_arready [1] = 1     // mst0_arready
net:   tb.dut.merge9_split109_wvalid [1] = 0     // merge9_split109_wvalid
net:   tb.dut.merge9_split109_wstrb [8] = 00000000     // merge9_split109_wstrb
net:   tb.dut.merge9_split109_wlast [1] = 0     // merge9_split109_wlast
net:   tb.dut.merge9_split109_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge9_split109_wdata
net:   tb.dut.merge9_split109_rvalid [1] = 0     // merge9_split109_rvalid
net:   tb.dut.merge9_split109_rresp [2] = 00     // merge9_split109_rresp
net:   tb.dut.merge9_split109_rready [1] = 1     // merge9_split109_rready
net:   tb.dut.merge9_split109_rlast [1] = 0     // merge9_split109_rlast
net:   tb.dut.merge9_split109_rid [4] = 0000     // merge9_split109_rid
net:   tb.dut.merge9_split109_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge9_split109_rdata
net:   tb.dut.merge9_split109_bvalid [1] = 0     // merge9_split109_bvalid
net:   tb.dut.merge9_split109_bresp [2] = 00     // merge9_split109_bresp
net:   tb.dut.merge9_split109_bready [1] = 1     // merge9_split109_bready
net:   tb.dut.merge9_split109_bid [4] = 0000     // merge9_split109_bid
net:   tb.dut.merge9_split109_awvalid [1] = 0     // merge9_split109_awvalid
net:   tb.dut.merge9_split109_awready [1] = 1     // merge9_split109_awready
net:   tb.dut.merge9_split109_awlen [8] = 00000000     // merge9_split109_awlen
net:   tb.dut.merge9_split109_awid [4] = 0000     // merge9_split109_awid
net:   tb.dut.merge9_split109_awextras [8] = 00000000     // merge9_split109_awextras
net:   tb.dut.merge9_split109_awburst [2] = 00     // merge9_split109_awburst
net:   tb.dut.merge9_split109_awaddr [32] = 00000000000000000000000000000000     // merge9_split109_awaddr
net:   tb.dut.merge9_split109_arvalid [1] = 0     // merge9_split109_arvalid
net:   tb.dut.merge9_split109_arready [1] = 1     // merge9_split109_arready
net:   tb.dut.merge9_split109_arlen [8] = 00000000     // merge9_split109_arlen
net:   tb.dut.merge9_split109_arid [4] = 0000     // merge9_split109_arid
net:   tb.dut.merge9_split109_arextras [8] = 00000000     // merge9_split109_arextras
net:   tb.dut.merge9_split109_arburst [2] = 00     // merge9_split109_arburst
net:   tb.dut.merge9_split109_araddr [32] = 00000000000000000000000000000000     // merge9_split109_araddr
net:   tb.dut.merge8_split108_wvalid [1] = 0     // merge8_split108_wvalid
net:   tb.dut.merge8_split108_wstrb [8] = 00000000     // merge8_split108_wstrb
net:   tb.dut.merge8_split108_wlast [1] = 0     // merge8_split108_wlast
net:   tb.dut.merge8_split108_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge8_split108_wdata
net:   tb.dut.merge8_split108_rvalid [1] = 0     // merge8_split108_rvalid
net:   tb.dut.merge8_split108_rresp [2] = 00     // merge8_split108_rresp
net:   tb.dut.merge8_split108_rready [1] = 1     // merge8_split108_rready
net:   tb.dut.merge8_split108_rlast [1] = 0     // merge8_split108_rlast
net:   tb.dut.merge8_split108_rid [4] = 0000     // merge8_split108_rid
net:   tb.dut.merge8_split108_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge8_split108_rdata
net:   tb.dut.merge8_split108_bvalid [1] = 0     // merge8_split108_bvalid
net:   tb.dut.merge8_split108_bresp [2] = 00     // merge8_split108_bresp
net:   tb.dut.merge8_split108_bready [1] = 1     // merge8_split108_bready
net:   tb.dut.merge8_split108_bid [4] = 0000     // merge8_split108_bid
net:   tb.dut.merge8_split108_awvalid [1] = 0     // merge8_split108_awvalid
net:   tb.dut.merge8_split108_awready [1] = 1     // merge8_split108_awready
net:   tb.dut.merge8_split108_awlen [8] = 00000000     // merge8_split108_awlen
net:   tb.dut.merge8_split108_awid [4] = 0000     // merge8_split108_awid
net:   tb.dut.merge8_split108_awextras [8] = 00000000     // merge8_split108_awextras
net:   tb.dut.merge8_split108_awburst [2] = 00     // merge8_split108_awburst
net:   tb.dut.merge8_split108_awaddr [32] = 00000000000000000000000000000000     // merge8_split108_awaddr
net:   tb.dut.merge8_split108_arvalid [1] = 0     // merge8_split108_arvalid
net:   tb.dut.merge8_split108_arready [1] = 1     // merge8_split108_arready
net:   tb.dut.merge8_split108_arlen [8] = 00000000     // merge8_split108_arlen
net:   tb.dut.merge8_split108_arid [4] = 0000     // merge8_split108_arid
net:   tb.dut.merge8_split108_arextras [8] = 00000000     // merge8_split108_arextras
net:   tb.dut.merge8_split108_arburst [2] = 00     // merge8_split108_arburst
net:   tb.dut.merge8_split108_araddr [32] = 00000000000000000000000000000000     // merge8_split108_araddr
net:   tb.dut.merge7_split107_wvalid [1] = 0     // merge7_split107_wvalid
net:   tb.dut.merge7_split107_wstrb [8] = 00000000     // merge7_split107_wstrb
net:   tb.dut.merge7_split107_wlast [1] = 0     // merge7_split107_wlast
net:   tb.dut.merge7_split107_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge7_split107_wdata
net:   tb.dut.merge7_split107_rvalid [1] = 0     // merge7_split107_rvalid
net:   tb.dut.merge7_split107_rresp [2] = 00     // merge7_split107_rresp
net:   tb.dut.merge7_split107_rready [1] = 1     // merge7_split107_rready
net:   tb.dut.merge7_split107_rlast [1] = 0     // merge7_split107_rlast
net:   tb.dut.merge7_split107_rid [4] = 0000     // merge7_split107_rid
net:   tb.dut.merge7_split107_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge7_split107_rdata
net:   tb.dut.merge7_split107_bvalid [1] = 0     // merge7_split107_bvalid
net:   tb.dut.merge7_split107_bresp [2] = 00     // merge7_split107_bresp
net:   tb.dut.merge7_split107_bready [1] = 1     // merge7_split107_bready
net:   tb.dut.merge7_split107_bid [4] = 0000     // merge7_split107_bid
net:   tb.dut.merge7_split107_awvalid [1] = 0     // merge7_split107_awvalid
net:   tb.dut.merge7_split107_awready [1] = 1     // merge7_split107_awready
net:   tb.dut.merge7_split107_awlen [8] = 00000000     // merge7_split107_awlen
net:   tb.dut.merge7_split107_awid [4] = 0000     // merge7_split107_awid
net:   tb.dut.merge7_split107_awextras [8] = 00000000     // merge7_split107_awextras
net:   tb.dut.merge7_split107_awburst [2] = 00     // merge7_split107_awburst
net:   tb.dut.merge7_split107_awaddr [32] = 00000000000000000000000000000000     // merge7_split107_awaddr
net:   tb.dut.merge7_split107_arvalid [1] = 0     // merge7_split107_arvalid
net:   tb.dut.merge7_split107_arready [1] = 1     // merge7_split107_arready
net:   tb.dut.merge7_split107_arlen [8] = 00000000     // merge7_split107_arlen
net:   tb.dut.merge7_split107_arid [4] = 0000     // merge7_split107_arid
net:   tb.dut.merge7_split107_arextras [8] = 00000000     // merge7_split107_arextras
net:   tb.dut.merge7_split107_arburst [2] = 00     // merge7_split107_arburst
net:   tb.dut.merge7_split107_araddr [32] = 00000000000000000000000000000000     // merge7_split107_araddr
net:   tb.dut.merge6_split106_wvalid [1] = 0     // merge6_split106_wvalid
net:   tb.dut.merge6_split106_wstrb [8] = 00000000     // merge6_split106_wstrb
net:   tb.dut.merge6_split106_wlast [1] = 0     // merge6_split106_wlast
net:   tb.dut.merge6_split106_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge6_split106_wdata
net:   tb.dut.merge6_split106_rvalid [1] = 0     // merge6_split106_rvalid
net:   tb.dut.merge6_split106_rresp [2] = 00     // merge6_split106_rresp
net:   tb.dut.merge6_split106_rready [1] = 1     // merge6_split106_rready
net:   tb.dut.merge6_split106_rlast [1] = 0     // merge6_split106_rlast
net:   tb.dut.merge6_split106_rid [4] = 0000     // merge6_split106_rid
net:   tb.dut.merge6_split106_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge6_split106_rdata
net:   tb.dut.merge6_split106_bvalid [1] = 0     // merge6_split106_bvalid
net:   tb.dut.merge6_split106_bresp [2] = 00     // merge6_split106_bresp
net:   tb.dut.merge6_split106_bready [1] = 1     // merge6_split106_bready
net:   tb.dut.merge6_split106_bid [4] = 0000     // merge6_split106_bid
net:   tb.dut.merge6_split106_awvalid [1] = 0     // merge6_split106_awvalid
net:   tb.dut.merge6_split106_awready [1] = 1     // merge6_split106_awready
net:   tb.dut.merge6_split106_awlen [8] = 00000000     // merge6_split106_awlen
net:   tb.dut.merge6_split106_awid [4] = 0000     // merge6_split106_awid
net:   tb.dut.merge6_split106_awextras [8] = 00000000     // merge6_split106_awextras
net:   tb.dut.merge6_split106_awburst [2] = 00     // merge6_split106_awburst
net:   tb.dut.merge6_split106_awaddr [32] = 00000000000000000000000000000000     // merge6_split106_awaddr
net:   tb.dut.merge6_split106_arvalid [1] = 0     // merge6_split106_arvalid
net:   tb.dut.merge6_split106_arready [1] = 1     // merge6_split106_arready
net:   tb.dut.merge6_split106_arlen [8] = 00000000     // merge6_split106_arlen
net:   tb.dut.merge6_split106_arid [4] = 0000     // merge6_split106_arid
net:   tb.dut.merge6_split106_arextras [8] = 00000000     // merge6_split106_arextras
net:   tb.dut.merge6_split106_arburst [2] = 00     // merge6_split106_arburst
net:   tb.dut.merge6_split106_araddr [32] = 00000000000000000000000000000000     // merge6_split106_araddr
net:   tb.dut.merge5_split105_wvalid [1] = 0     // merge5_split105_wvalid
net:   tb.dut.merge5_split105_wstrb [8] = 00000000     // merge5_split105_wstrb
net:   tb.dut.merge5_split105_wlast [1] = 0     // merge5_split105_wlast
net:   tb.dut.merge5_split105_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge5_split105_wdata
net:   tb.dut.merge5_split105_rvalid [1] = 0     // merge5_split105_rvalid
net:   tb.dut.merge5_split105_rresp [2] = 00     // merge5_split105_rresp
net:   tb.dut.merge5_split105_rready [1] = 1     // merge5_split105_rready
net:   tb.dut.merge5_split105_rlast [1] = 0     // merge5_split105_rlast
net:   tb.dut.merge5_split105_rid [4] = 0000     // merge5_split105_rid
net:   tb.dut.merge5_split105_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge5_split105_rdata
net:   tb.dut.merge5_split105_bvalid [1] = 0     // merge5_split105_bvalid
net:   tb.dut.merge5_split105_bresp [2] = 00     // merge5_split105_bresp
net:   tb.dut.merge5_split105_bready [1] = 1     // merge5_split105_bready
net:   tb.dut.merge5_split105_bid [4] = 0000     // merge5_split105_bid
net:   tb.dut.merge5_split105_awvalid [1] = 0     // merge5_split105_awvalid
net:   tb.dut.merge5_split105_awready [1] = 1     // merge5_split105_awready
net:   tb.dut.merge5_split105_awlen [8] = 00000000     // merge5_split105_awlen
net:   tb.dut.merge5_split105_awid [4] = 0000     // merge5_split105_awid
net:   tb.dut.merge5_split105_awextras [8] = 00000000     // merge5_split105_awextras
net:   tb.dut.merge5_split105_awburst [2] = 00     // merge5_split105_awburst
net:   tb.dut.merge5_split105_awaddr [32] = 00000000000000000000000000000000     // merge5_split105_awaddr
net:   tb.dut.merge5_split105_arvalid [1] = 0     // merge5_split105_arvalid
net:   tb.dut.merge5_split105_arready [1] = 1     // merge5_split105_arready
net:   tb.dut.merge5_split105_arlen [8] = 00000000     // merge5_split105_arlen
net:   tb.dut.merge5_split105_arid [4] = 0000     // merge5_split105_arid
net:   tb.dut.merge5_split105_arextras [8] = 00000000     // merge5_split105_arextras
net:   tb.dut.merge5_split105_arburst [2] = 00     // merge5_split105_arburst
net:   tb.dut.merge5_split105_araddr [32] = 00000000000000000000000000000000     // merge5_split105_araddr
net:   tb.dut.merge4_split104_wvalid [1] = 0     // merge4_split104_wvalid
net:   tb.dut.merge4_split104_wstrb [8] = 00000000     // merge4_split104_wstrb
net:   tb.dut.merge4_split104_wlast [1] = 0     // merge4_split104_wlast
net:   tb.dut.merge4_split104_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge4_split104_wdata
net:   tb.dut.merge4_split104_rvalid [1] = 0     // merge4_split104_rvalid
net:   tb.dut.merge4_split104_rresp [2] = 00     // merge4_split104_rresp
net:   tb.dut.merge4_split104_rready [1] = 1     // merge4_split104_rready
net:   tb.dut.merge4_split104_rlast [1] = 0     // merge4_split104_rlast
net:   tb.dut.merge4_split104_rid [4] = 0000     // merge4_split104_rid
net:   tb.dut.merge4_split104_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge4_split104_rdata
net:   tb.dut.merge4_split104_bvalid [1] = 0     // merge4_split104_bvalid
net:   tb.dut.merge4_split104_bresp [2] = 00     // merge4_split104_bresp
net:   tb.dut.merge4_split104_bready [1] = 1     // merge4_split104_bready
net:   tb.dut.merge4_split104_bid [4] = 0000     // merge4_split104_bid
net:   tb.dut.merge4_split104_awvalid [1] = 0     // merge4_split104_awvalid
net:   tb.dut.merge4_split104_awready [1] = 1     // merge4_split104_awready
net:   tb.dut.merge4_split104_awlen [8] = 00000000     // merge4_split104_awlen
net:   tb.dut.merge4_split104_awid [4] = 0000     // merge4_split104_awid
net:   tb.dut.merge4_split104_awextras [8] = 00000000     // merge4_split104_awextras
net:   tb.dut.merge4_split104_awburst [2] = 00     // merge4_split104_awburst
net:   tb.dut.merge4_split104_awaddr [32] = 00000000000000000000000000000000     // merge4_split104_awaddr
net:   tb.dut.merge4_split104_arvalid [1] = 0     // merge4_split104_arvalid
net:   tb.dut.merge4_split104_arready [1] = 1     // merge4_split104_arready
net:   tb.dut.merge4_split104_arlen [8] = 00000000     // merge4_split104_arlen
net:   tb.dut.merge4_split104_arid [4] = 0000     // merge4_split104_arid
net:   tb.dut.merge4_split104_arextras [8] = 00000000     // merge4_split104_arextras
net:   tb.dut.merge4_split104_arburst [2] = 00     // merge4_split104_arburst
net:   tb.dut.merge4_split104_araddr [32] = 00000000000000000000000000000000     // merge4_split104_araddr
net:   tb.dut.merge3_split103_wvalid [1] = 0     // merge3_split103_wvalid
net:   tb.dut.merge3_split103_wstrb [8] = 00000000     // merge3_split103_wstrb
net:   tb.dut.merge3_split103_wlast [1] = 0     // merge3_split103_wlast
net:   tb.dut.merge3_split103_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge3_split103_wdata
net:   tb.dut.merge3_split103_rvalid [1] = 0     // merge3_split103_rvalid
net:   tb.dut.merge3_split103_rresp [2] = 00     // merge3_split103_rresp
net:   tb.dut.merge3_split103_rready [1] = 1     // merge3_split103_rready
net:   tb.dut.merge3_split103_rlast [1] = 0     // merge3_split103_rlast
net:   tb.dut.merge3_split103_rid [4] = 0000     // merge3_split103_rid
net:   tb.dut.merge3_split103_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge3_split103_rdata
net:   tb.dut.merge3_split103_bvalid [1] = 0     // merge3_split103_bvalid
net:   tb.dut.merge3_split103_bresp [2] = 00     // merge3_split103_bresp
net:   tb.dut.merge3_split103_bready [1] = 1     // merge3_split103_bready
net:   tb.dut.merge3_split103_bid [4] = 0000     // merge3_split103_bid
net:   tb.dut.merge3_split103_awvalid [1] = 0     // merge3_split103_awvalid
net:   tb.dut.merge3_split103_awready [1] = 1     // merge3_split103_awready
net:   tb.dut.merge3_split103_awlen [8] = 00000000     // merge3_split103_awlen
net:   tb.dut.merge3_split103_awid [4] = 0000     // merge3_split103_awid
net:   tb.dut.merge3_split103_awextras [8] = 00000000     // merge3_split103_awextras
net:   tb.dut.merge3_split103_awburst [2] = 00     // merge3_split103_awburst
net:   tb.dut.merge3_split103_awaddr [32] = 00000000000000000000000000000000     // merge3_split103_awaddr
net:   tb.dut.merge3_split103_arvalid [1] = 0     // merge3_split103_arvalid
net:   tb.dut.merge3_split103_arready [1] = 1     // merge3_split103_arready
net:   tb.dut.merge3_split103_arlen [8] = 00000000     // merge3_split103_arlen
net:   tb.dut.merge3_split103_arid [4] = 0000     // merge3_split103_arid
net:   tb.dut.merge3_split103_arextras [8] = 00000000     // merge3_split103_arextras
net:   tb.dut.merge3_split103_arburst [2] = 00     // merge3_split103_arburst
net:   tb.dut.merge3_split103_araddr [32] = 00000000000000000000000000000000     // merge3_split103_araddr
net:   tb.dut.merge2_split102_wvalid [1] = 0     // merge2_split102_wvalid
net:   tb.dut.merge2_split102_wstrb [8] = 00000000     // merge2_split102_wstrb
net:   tb.dut.merge2_split102_wlast [1] = 0     // merge2_split102_wlast
net:   tb.dut.merge2_split102_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge2_split102_wdata
net:   tb.dut.merge2_split102_rvalid [1] = 0     // merge2_split102_rvalid
net:   tb.dut.merge2_split102_rresp [2] = 00     // merge2_split102_rresp
net:   tb.dut.merge2_split102_rready [1] = 1     // merge2_split102_rready
net:   tb.dut.merge2_split102_rlast [1] = 0     // merge2_split102_rlast
net:   tb.dut.merge2_split102_rid [4] = 0000     // merge2_split102_rid
net:   tb.dut.merge2_split102_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge2_split102_rdata
net:   tb.dut.merge2_split102_bvalid [1] = 0     // merge2_split102_bvalid
net:   tb.dut.merge2_split102_bresp [2] = 00     // merge2_split102_bresp
net:   tb.dut.merge2_split102_bready [1] = 1     // merge2_split102_bready
net:   tb.dut.merge2_split102_bid [4] = 0000     // merge2_split102_bid
net:   tb.dut.merge2_split102_awvalid [1] = 0     // merge2_split102_awvalid
net:   tb.dut.merge2_split102_awready [1] = 1     // merge2_split102_awready
net:   tb.dut.merge2_split102_awlen [8] = 00000000     // merge2_split102_awlen
net:   tb.dut.merge2_split102_awid [4] = 0000     // merge2_split102_awid
net:   tb.dut.merge2_split102_awextras [8] = 00000000     // merge2_split102_awextras
net:   tb.dut.merge2_split102_awburst [2] = 00     // merge2_split102_awburst
net:   tb.dut.merge2_split102_awaddr [32] = 00000000000000000000000000000000     // merge2_split102_awaddr
net:   tb.dut.merge2_split102_arvalid [1] = 0     // merge2_split102_arvalid
net:   tb.dut.merge2_split102_arready [1] = 1     // merge2_split102_arready
net:   tb.dut.merge2_split102_arlen [8] = 00000000     // merge2_split102_arlen
net:   tb.dut.merge2_split102_arid [4] = 0000     // merge2_split102_arid
net:   tb.dut.merge2_split102_arextras [8] = 00000000     // merge2_split102_arextras
net:   tb.dut.merge2_split102_arburst [2] = 00     // merge2_split102_arburst
net:   tb.dut.merge2_split102_araddr [32] = 00000000000000000000000000000000     // merge2_split102_araddr
net:   tb.dut.merge1_split101_wvalid [1] = 0     // merge1_split101_wvalid
net:   tb.dut.merge1_split101_wstrb [8] = 00000000     // merge1_split101_wstrb
net:   tb.dut.merge1_split101_wlast [1] = 0     // merge1_split101_wlast
net:   tb.dut.merge1_split101_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge1_split101_wdata
net:   tb.dut.merge1_split101_rvalid [1] = 0     // merge1_split101_rvalid
net:   tb.dut.merge1_split101_rresp [2] = 00     // merge1_split101_rresp
net:   tb.dut.merge1_split101_rready [1] = 1     // merge1_split101_rready
net:   tb.dut.merge1_split101_rlast [1] = 0     // merge1_split101_rlast
net:   tb.dut.merge1_split101_rid [4] = 0000     // merge1_split101_rid
net:   tb.dut.merge1_split101_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge1_split101_rdata
net:   tb.dut.merge1_split101_bvalid [1] = 0     // merge1_split101_bvalid
net:   tb.dut.merge1_split101_bresp [2] = 00     // merge1_split101_bresp
net:   tb.dut.merge1_split101_bready [1] = 1     // merge1_split101_bready
net:   tb.dut.merge1_split101_bid [4] = 0000     // merge1_split101_bid
net:   tb.dut.merge1_split101_awvalid [1] = 0     // merge1_split101_awvalid
net:   tb.dut.merge1_split101_awready [1] = 1     // merge1_split101_awready
net:   tb.dut.merge1_split101_awlen [8] = 00000000     // merge1_split101_awlen
net:   tb.dut.merge1_split101_awid [4] = 0000     // merge1_split101_awid
net:   tb.dut.merge1_split101_awextras [8] = 00000000     // merge1_split101_awextras
net:   tb.dut.merge1_split101_awburst [2] = 00     // merge1_split101_awburst
net:   tb.dut.merge1_split101_awaddr [32] = 00000000000000000000000000000000     // merge1_split101_awaddr
net:   tb.dut.merge1_split101_arvalid [1] = 0     // merge1_split101_arvalid
net:   tb.dut.merge1_split101_arready [1] = 1     // merge1_split101_arready
net:   tb.dut.merge1_split101_arlen [8] = 00000000     // merge1_split101_arlen
net:   tb.dut.merge1_split101_arid [4] = 0000     // merge1_split101_arid
net:   tb.dut.merge1_split101_arextras [8] = 00000000     // merge1_split101_arextras
net:   tb.dut.merge1_split101_arburst [2] = 00     // merge1_split101_arburst
net:   tb.dut.merge1_split101_araddr [32] = 00000000000000000000000000000000     // merge1_split101_araddr
net:   tb.dut.merge15_split115_wvalid [1] = 0     // merge15_split115_wvalid
net:   tb.dut.merge15_split115_wstrb [8] = 00000000     // merge15_split115_wstrb
net:   tb.dut.merge15_split115_wlast [1] = 0     // merge15_split115_wlast
net:   tb.dut.merge15_split115_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge15_split115_wdata
net:   tb.dut.merge15_split115_rvalid [1] = 0     // merge15_split115_rvalid
net:   tb.dut.merge15_split115_rresp [2] = 00     // merge15_split115_rresp
net:   tb.dut.merge15_split115_rready [1] = 1     // merge15_split115_rready
net:   tb.dut.merge15_split115_rlast [1] = 0     // merge15_split115_rlast
net:   tb.dut.merge15_split115_rid [4] = 0000     // merge15_split115_rid
net:   tb.dut.merge15_split115_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge15_split115_rdata
net:   tb.dut.merge15_split115_bvalid [1] = 0     // merge15_split115_bvalid
net:   tb.dut.merge15_split115_bresp [2] = 00     // merge15_split115_bresp
net:   tb.dut.merge15_split115_bready [1] = 1     // merge15_split115_bready
net:   tb.dut.merge15_split115_bid [4] = 0000     // merge15_split115_bid
net:   tb.dut.merge15_split115_awvalid [1] = 0     // merge15_split115_awvalid
net:   tb.dut.merge15_split115_awready [1] = 1     // merge15_split115_awready
net:   tb.dut.merge15_split115_awlen [8] = 00000000     // merge15_split115_awlen
net:   tb.dut.merge15_split115_awid [4] = 0000     // merge15_split115_awid
net:   tb.dut.merge15_split115_awextras [8] = 00000000     // merge15_split115_awextras
net:   tb.dut.merge15_split115_awburst [2] = 00     // merge15_split115_awburst
net:   tb.dut.merge15_split115_awaddr [32] = 00000000000000000000000000000000     // merge15_split115_awaddr
net:   tb.dut.merge15_split115_arvalid [1] = 0     // merge15_split115_arvalid
net:   tb.dut.merge15_split115_arready [1] = 1     // merge15_split115_arready
net:   tb.dut.merge15_split115_arlen [8] = 00000000     // merge15_split115_arlen
net:   tb.dut.merge15_split115_arid [4] = 0000     // merge15_split115_arid
net:   tb.dut.merge15_split115_arextras [8] = 00000000     // merge15_split115_arextras
net:   tb.dut.merge15_split115_arburst [2] = 00     // merge15_split115_arburst
net:   tb.dut.merge15_split115_araddr [32] = 00000000000000000000000000000000     // merge15_split115_araddr
net:   tb.dut.merge14_split114_wvalid [1] = 0     // merge14_split114_wvalid
net:   tb.dut.merge14_split114_wstrb [8] = 00000000     // merge14_split114_wstrb
net:   tb.dut.merge14_split114_wlast [1] = 0     // merge14_split114_wlast
net:   tb.dut.merge14_split114_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge14_split114_wdata
net:   tb.dut.merge14_split114_rvalid [1] = 0     // merge14_split114_rvalid
net:   tb.dut.merge14_split114_rresp [2] = 00     // merge14_split114_rresp
net:   tb.dut.merge14_split114_rready [1] = 1     // merge14_split114_rready
net:   tb.dut.merge14_split114_rlast [1] = 0     // merge14_split114_rlast
net:   tb.dut.merge14_split114_rid [4] = 0000     // merge14_split114_rid
net:   tb.dut.merge14_split114_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge14_split114_rdata
net:   tb.dut.merge14_split114_bvalid [1] = 0     // merge14_split114_bvalid
net:   tb.dut.merge14_split114_bresp [2] = 00     // merge14_split114_bresp
net:   tb.dut.merge14_split114_bready [1] = 1     // merge14_split114_bready
net:   tb.dut.merge14_split114_bid [4] = 0000     // merge14_split114_bid
net:   tb.dut.merge14_split114_awvalid [1] = 0     // merge14_split114_awvalid
net:   tb.dut.merge14_split114_awready [1] = 1     // merge14_split114_awready
net:   tb.dut.merge14_split114_awlen [8] = 00000000     // merge14_split114_awlen
net:   tb.dut.merge14_split114_awid [4] = 0000     // merge14_split114_awid
net:   tb.dut.merge14_split114_awextras [8] = 00000000     // merge14_split114_awextras
net:   tb.dut.merge14_split114_awburst [2] = 00     // merge14_split114_awburst
net:   tb.dut.merge14_split114_awaddr [32] = 00000000000000000000000000000000     // merge14_split114_awaddr
net:   tb.dut.merge14_split114_arvalid [1] = 0     // merge14_split114_arvalid
net:   tb.dut.merge14_split114_arready [1] = 1     // merge14_split114_arready
net:   tb.dut.merge14_split114_arlen [8] = 00000000     // merge14_split114_arlen
net:   tb.dut.merge14_split114_arid [4] = 0000     // merge14_split114_arid
net:   tb.dut.merge14_split114_arextras [8] = 00000000     // merge14_split114_arextras
net:   tb.dut.merge14_split114_arburst [2] = 00     // merge14_split114_arburst
net:   tb.dut.merge14_split114_araddr [32] = 00000000000000000000000000000000     // merge14_split114_araddr
net:   tb.dut.merge13_split113_wvalid [1] = 0     // merge13_split113_wvalid
net:   tb.dut.merge13_split113_wstrb [8] = 00000000     // merge13_split113_wstrb
net:   tb.dut.merge13_split113_wlast [1] = 0     // merge13_split113_wlast
net:   tb.dut.merge13_split113_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge13_split113_wdata
net:   tb.dut.merge13_split113_rvalid [1] = 0     // merge13_split113_rvalid
net:   tb.dut.merge13_split113_rresp [2] = 00     // merge13_split113_rresp
net:   tb.dut.merge13_split113_rready [1] = 1     // merge13_split113_rready
net:   tb.dut.merge13_split113_rlast [1] = 0     // merge13_split113_rlast
net:   tb.dut.merge13_split113_rid [4] = 0000     // merge13_split113_rid
net:   tb.dut.merge13_split113_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge13_split113_rdata
net:   tb.dut.merge13_split113_bvalid [1] = 0     // merge13_split113_bvalid
net:   tb.dut.merge13_split113_bresp [2] = 00     // merge13_split113_bresp
net:   tb.dut.merge13_split113_bready [1] = 1     // merge13_split113_bready
net:   tb.dut.merge13_split113_bid [4] = 0000     // merge13_split113_bid
net:   tb.dut.merge13_split113_awvalid [1] = 0     // merge13_split113_awvalid
net:   tb.dut.merge13_split113_awready [1] = 1     // merge13_split113_awready
net:   tb.dut.merge13_split113_awlen [8] = 00000000     // merge13_split113_awlen
net:   tb.dut.merge13_split113_awid [4] = 0000     // merge13_split113_awid
net:   tb.dut.merge13_split113_awextras [8] = 00000000     // merge13_split113_awextras
net:   tb.dut.merge13_split113_awburst [2] = 00     // merge13_split113_awburst
net:   tb.dut.merge13_split113_awaddr [32] = 00000000000000000000000000000000     // merge13_split113_awaddr
net:   tb.dut.merge13_split113_arvalid [1] = 0     // merge13_split113_arvalid
net:   tb.dut.merge13_split113_arready [1] = 1     // merge13_split113_arready
net:   tb.dut.merge13_split113_arlen [8] = 00000000     // merge13_split113_arlen
net:   tb.dut.merge13_split113_arid [4] = 0000     // merge13_split113_arid
net:   tb.dut.merge13_split113_arextras [8] = 00000000     // merge13_split113_arextras
net:   tb.dut.merge13_split113_arburst [2] = 00     // merge13_split113_arburst
net:   tb.dut.merge13_split113_araddr [32] = 00000000000000000000000000000000     // merge13_split113_araddr
net:   tb.dut.merge12_split112_wvalid [1] = 0     // merge12_split112_wvalid
net:   tb.dut.merge12_split112_wstrb [8] = 00000000     // merge12_split112_wstrb
net:   tb.dut.merge12_split112_wlast [1] = 0     // merge12_split112_wlast
net:   tb.dut.merge12_split112_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge12_split112_wdata
net:   tb.dut.merge12_split112_rvalid [1] = 0     // merge12_split112_rvalid
net:   tb.dut.merge12_split112_rresp [2] = 00     // merge12_split112_rresp
net:   tb.dut.merge12_split112_rready [1] = 1     // merge12_split112_rready
net:   tb.dut.merge12_split112_rlast [1] = 0     // merge12_split112_rlast
net:   tb.dut.merge12_split112_rid [4] = 0000     // merge12_split112_rid
net:   tb.dut.merge12_split112_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge12_split112_rdata
net:   tb.dut.merge12_split112_bvalid [1] = 0     // merge12_split112_bvalid
net:   tb.dut.merge12_split112_bresp [2] = 00     // merge12_split112_bresp
net:   tb.dut.merge12_split112_bready [1] = 1     // merge12_split112_bready
net:   tb.dut.merge12_split112_bid [4] = 0000     // merge12_split112_bid
net:   tb.dut.merge12_split112_awvalid [1] = 0     // merge12_split112_awvalid
net:   tb.dut.merge12_split112_awready [1] = 1     // merge12_split112_awready
net:   tb.dut.merge12_split112_awlen [8] = 00000000     // merge12_split112_awlen
net:   tb.dut.merge12_split112_awid [4] = 0000     // merge12_split112_awid
net:   tb.dut.merge12_split112_awextras [8] = 00000000     // merge12_split112_awextras
net:   tb.dut.merge12_split112_awburst [2] = 00     // merge12_split112_awburst
net:   tb.dut.merge12_split112_awaddr [32] = 00000000000000000000000000000000     // merge12_split112_awaddr
net:   tb.dut.merge12_split112_arvalid [1] = 0     // merge12_split112_arvalid
net:   tb.dut.merge12_split112_arready [1] = 1     // merge12_split112_arready
net:   tb.dut.merge12_split112_arlen [8] = 00000000     // merge12_split112_arlen
net:   tb.dut.merge12_split112_arid [4] = 0000     // merge12_split112_arid
net:   tb.dut.merge12_split112_arextras [8] = 00000000     // merge12_split112_arextras
net:   tb.dut.merge12_split112_arburst [2] = 00     // merge12_split112_arburst
net:   tb.dut.merge12_split112_araddr [32] = 00000000000000000000000000000000     // merge12_split112_araddr
net:   tb.dut.merge11_split111_wvalid [1] = 0     // merge11_split111_wvalid
net:   tb.dut.merge11_split111_wstrb [8] = 00000000     // merge11_split111_wstrb
net:   tb.dut.merge11_split111_wlast [1] = 0     // merge11_split111_wlast
net:   tb.dut.merge11_split111_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge11_split111_wdata
net:   tb.dut.merge11_split111_rvalid [1] = 0     // merge11_split111_rvalid
net:   tb.dut.merge11_split111_rresp [2] = 00     // merge11_split111_rresp
net:   tb.dut.merge11_split111_rready [1] = 1     // merge11_split111_rready
net:   tb.dut.merge11_split111_rlast [1] = 0     // merge11_split111_rlast
net:   tb.dut.merge11_split111_rid [4] = 0000     // merge11_split111_rid
net:   tb.dut.merge11_split111_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge11_split111_rdata
net:   tb.dut.merge11_split111_bvalid [1] = 0     // merge11_split111_bvalid
net:   tb.dut.merge11_split111_bresp [2] = 00     // merge11_split111_bresp
net:   tb.dut.merge11_split111_bready [1] = 1     // merge11_split111_bready
net:   tb.dut.merge11_split111_bid [4] = 0000     // merge11_split111_bid
net:   tb.dut.merge11_split111_awvalid [1] = 0     // merge11_split111_awvalid
net:   tb.dut.merge11_split111_awready [1] = 1     // merge11_split111_awready
net:   tb.dut.merge11_split111_awlen [8] = 00000000     // merge11_split111_awlen
net:   tb.dut.merge11_split111_awid [4] = 0000     // merge11_split111_awid
net:   tb.dut.merge11_split111_awextras [8] = 00000000     // merge11_split111_awextras
net:   tb.dut.merge11_split111_awburst [2] = 00     // merge11_split111_awburst
net:   tb.dut.merge11_split111_awaddr [32] = 00000000000000000000000000000000     // merge11_split111_awaddr
net:   tb.dut.merge11_split111_arvalid [1] = 0     // merge11_split111_arvalid
net:   tb.dut.merge11_split111_arready [1] = 1     // merge11_split111_arready
net:   tb.dut.merge11_split111_arlen [8] = 00000000     // merge11_split111_arlen
net:   tb.dut.merge11_split111_arid [4] = 0000     // merge11_split111_arid
net:   tb.dut.merge11_split111_arextras [8] = 00000000     // merge11_split111_arextras
net:   tb.dut.merge11_split111_arburst [2] = 00     // merge11_split111_arburst
net:   tb.dut.merge11_split111_araddr [32] = 00000000000000000000000000000000     // merge11_split111_araddr
net:   tb.dut.merge10_split110_wvalid [1] = 0     // merge10_split110_wvalid
net:   tb.dut.merge10_split110_wstrb [8] = 00000000     // merge10_split110_wstrb
net:   tb.dut.merge10_split110_wlast [1] = 0     // merge10_split110_wlast
net:   tb.dut.merge10_split110_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge10_split110_wdata
net:   tb.dut.merge10_split110_rvalid [1] = 0     // merge10_split110_rvalid
net:   tb.dut.merge10_split110_rresp [2] = 00     // merge10_split110_rresp
net:   tb.dut.merge10_split110_rready [1] = 1     // merge10_split110_rready
net:   tb.dut.merge10_split110_rlast [1] = 0     // merge10_split110_rlast
net:   tb.dut.merge10_split110_rid [4] = 0000     // merge10_split110_rid
net:   tb.dut.merge10_split110_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge10_split110_rdata
net:   tb.dut.merge10_split110_bvalid [1] = 0     // merge10_split110_bvalid
net:   tb.dut.merge10_split110_bresp [2] = 00     // merge10_split110_bresp
net:   tb.dut.merge10_split110_bready [1] = 1     // merge10_split110_bready
net:   tb.dut.merge10_split110_bid [4] = 0000     // merge10_split110_bid
net:   tb.dut.merge10_split110_awvalid [1] = 0     // merge10_split110_awvalid
net:   tb.dut.merge10_split110_awready [1] = 1     // merge10_split110_awready
net:   tb.dut.merge10_split110_awlen [8] = 00000000     // merge10_split110_awlen
net:   tb.dut.merge10_split110_awid [4] = 0000     // merge10_split110_awid
net:   tb.dut.merge10_split110_awextras [8] = 00000000     // merge10_split110_awextras
net:   tb.dut.merge10_split110_awburst [2] = 00     // merge10_split110_awburst
net:   tb.dut.merge10_split110_awaddr [32] = 00000000000000000000000000000000     // merge10_split110_awaddr
net:   tb.dut.merge10_split110_arvalid [1] = 0     // merge10_split110_arvalid
net:   tb.dut.merge10_split110_arready [1] = 1     // merge10_split110_arready
net:   tb.dut.merge10_split110_arlen [8] = 00000000     // merge10_split110_arlen
net:   tb.dut.merge10_split110_arid [4] = 0000     // merge10_split110_arid
net:   tb.dut.merge10_split110_arextras [8] = 00000000     // merge10_split110_arextras
net:   tb.dut.merge10_split110_arburst [2] = 00     // merge10_split110_arburst
net:   tb.dut.merge10_split110_araddr [32] = 00000000000000000000000000000000     // merge10_split110_araddr
net:   tb.dut.merge0_split100_wvalid [1] = 0     // merge0_split100_wvalid
net:   tb.dut.merge0_split100_wstrb [8] = 00000000     // merge0_split100_wstrb
net:   tb.dut.merge0_split100_wlast [1] = 0     // merge0_split100_wlast
net:   tb.dut.merge0_split100_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge0_split100_wdata
net:   tb.dut.merge0_split100_rvalid [1] = 0     // merge0_split100_rvalid
net:   tb.dut.merge0_split100_rresp [2] = 00     // merge0_split100_rresp
net:   tb.dut.merge0_split100_rready [1] = 1     // merge0_split100_rready
net:   tb.dut.merge0_split100_rlast [1] = 0     // merge0_split100_rlast
net:   tb.dut.merge0_split100_rid [4] = 0000     // merge0_split100_rid
net:   tb.dut.merge0_split100_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // merge0_split100_rdata
net:   tb.dut.merge0_split100_bvalid [1] = 0     // merge0_split100_bvalid
net:   tb.dut.merge0_split100_bresp [2] = 00     // merge0_split100_bresp
net:   tb.dut.merge0_split100_bready [1] = 1     // merge0_split100_bready
net:   tb.dut.merge0_split100_bid [4] = 0000     // merge0_split100_bid
net:   tb.dut.merge0_split100_awvalid [1] = 0     // merge0_split100_awvalid
net:   tb.dut.merge0_split100_awready [1] = 1     // merge0_split100_awready
net:   tb.dut.merge0_split100_awlen [8] = 00000000     // merge0_split100_awlen
net:   tb.dut.merge0_split100_awid [4] = 0000     // merge0_split100_awid
net:   tb.dut.merge0_split100_awextras [8] = 00000000     // merge0_split100_awextras
net:   tb.dut.merge0_split100_awburst [2] = 00     // merge0_split100_awburst
net:   tb.dut.merge0_split100_awaddr [32] = 00000000000000000000000000000000     // merge0_split100_awaddr
net:   tb.dut.merge0_split100_arvalid [1] = 0     // merge0_split100_arvalid
net:   tb.dut.merge0_split100_arready [1] = 1     // merge0_split100_arready
net:   tb.dut.merge0_split100_arlen [8] = 00000000     // merge0_split100_arlen
net:   tb.dut.merge0_split100_arid [4] = 0000     // merge0_split100_arid
net:   tb.dut.merge0_split100_arextras [8] = 00000000     // merge0_split100_arextras
net:   tb.dut.merge0_split100_arburst [2] = 00     // merge0_split100_arburst
net:   tb.dut.merge0_split100_araddr [32] = 00000000000000000000000000000000     // merge0_split100_araddr
reg:   testnametestname
son:   tb.dut.merge0
son:   tb.dut.merge1
son:   tb.dut.merge10
son:   tb.dut.merge11
son:   tb.dut.merge12
son:   tb.dut.merge13
son:   tb.dut.merge14
son:   tb.dut.merge15
son:   tb.dut.merge2
son:   tb.dut.merge200
son:   tb.dut.merge201
son:   tb.dut.merge202
son:   tb.dut.merge203
son:   tb.dut.merge204
son:   tb.dut.merge205
son:   tb.dut.merge206
son:   tb.dut.merge207
son:   tb.dut.merge208
son:   tb.dut.merge209
son:   tb.dut.merge210
son:   tb.dut.merge211
son:   tb.dut.merge212
son:   tb.dut.merge213
son:   tb.dut.merge214
son:   tb.dut.merge215
son:   tb.dut.merge3
son:   tb.dut.merge4
son:   tb.dut.merge5
son:   tb.dut.merge6
son:   tb.dut.merge7
son:   tb.dut.merge8
son:   tb.dut.merge9
son:   tb.dut.split0
son:   tb.dut.split1
son:   tb.dut.split10
son:   tb.dut.split100
son:   tb.dut.split101
son:   tb.dut.split102
son:   tb.dut.split103
son:   tb.dut.split104
son:   tb.dut.split105
son:   tb.dut.split106
son:   tb.dut.split107
son:   tb.dut.split108
son:   tb.dut.split109
son:   tb.dut.split11
son:   tb.dut.split110
son:   tb.dut.split111
son:   tb.dut.split112
son:   tb.dut.split113
son:   tb.dut.split114
son:   tb.dut.split115
son:   tb.dut.split12
son:   tb.dut.split13
son:   tb.dut.split14
son:   tb.dut.split15
son:   tb.dut.split2
son:   tb.dut.split3
son:   tb.dut.split4
son:   tb.dut.split5
son:   tb.dut.split6
son:   tb.dut.split7
son:   tb.dut.split8
son:   tb.dut.split9
module: axi_4_merger tb.dut.merge0
net:   tb.dut.merge0.clk [1] = 1     // clk
net:   tb.dut.merge0.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.wready [1] = 1     // wready
net:   tb.dut.merge0.wvalid [1] = 0     // wvalid
net:   tb.dut.merge0.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge0.wlast [1] = 0     // wlast
net:   tb.dut.merge0.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge0.rvalid [1] = 0     // rvalid
net:   tb.dut.merge0.rresp [2] = 00     // rresp
net:   tb.dut.merge0.rready [1] = 1     // rready
net:   tb.dut.merge0.rlast [1] = 0     // rlast
net:   tb.dut.merge0.rid [4] = 0000     // rid
net:   tb.dut.merge0.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge0.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge0.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge0.d_wready [1] = 1     // d_wready
net:   tb.dut.merge0.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge0.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge0.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge0.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge0.d_rready [1] = 1     // d_rready
net:   tb.dut.merge0.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge0.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge0.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge0.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge0.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge0.d_bready [1] = 1     // d_bready
net:   tb.dut.merge0.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge0.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge0.d_awready [1] = 1     // d_awready
net:   tb.dut.merge0.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge0.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge0.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge0.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge0.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge0.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge0.d_arready [1] = 1     // d_arready
net:   tb.dut.merge0.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge0.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge0.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge0.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge0.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge0.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge0.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge0.c_wready [1] = 1     // c_wready
net:   tb.dut.merge0.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge0.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge0.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge0.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge0.c_rready [1] = 1     // c_rready
net:   tb.dut.merge0.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge0.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge0.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge0.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge0.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge0.c_bready [1] = 1     // c_bready
net:   tb.dut.merge0.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge0.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge0.c_awready [1] = 1     // c_awready
net:   tb.dut.merge0.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge0.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge0.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge0.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge0.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge0.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge0.c_arready [1] = 1     // c_arready
net:   tb.dut.merge0.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge0.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge0.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge0.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge0.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge0.bvalid [1] = 0     // bvalid
net:   tb.dut.merge0.bresp [2] = 00     // bresp
net:   tb.dut.merge0.bready [1] = 1     // bready
net:   tb.dut.merge0.bid [4] = 0000     // bid
net:   tb.dut.merge0.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge0.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge0.b_wready [1] = 1     // b_wready
net:   tb.dut.merge0.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge0.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge0.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge0.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge0.b_rready [1] = 1     // b_rready
net:   tb.dut.merge0.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge0.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge0.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge0.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge0.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge0.b_bready [1] = 1     // b_bready
net:   tb.dut.merge0.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge0.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge0.b_awready [1] = 1     // b_awready
net:   tb.dut.merge0.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge0.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge0.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge0.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge0.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge0.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge0.b_arready [1] = 1     // b_arready
net:   tb.dut.merge0.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge0.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge0.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge0.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge0.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge0.awvalid [1] = 0     // awvalid
net:   tb.dut.merge0.awready [1] = 1     // awready
net:   tb.dut.merge0.awlen [8] = 00000000     // awlen
net:   tb.dut.merge0.awid [4] = 0000     // awid
net:   tb.dut.merge0.awextras [8] = 00000000     // awextras
net:   tb.dut.merge0.awburst [2] = 00     // awburst
net:   tb.dut.merge0.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge0.arvalid [1] = 0     // arvalid
net:   tb.dut.merge0.arready [1] = 1     // arready
net:   tb.dut.merge0.arlen [8] = 00000000     // arlen
net:   tb.dut.merge0.arid [4] = 0000     // arid
net:   tb.dut.merge0.arextras [8] = 00000000     // arextras
net:   tb.dut.merge0.arburst [2] = 00     // arburst
net:   tb.dut.merge0.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge0.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge0.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge0.a_wready [1] = 1     // a_wready
net:   tb.dut.merge0.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge0.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge0.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge0.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge0.a_rready [1] = 1     // a_rready
net:   tb.dut.merge0.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge0.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge0.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge0.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge0.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge0.a_bready [1] = 1     // a_bready
net:   tb.dut.merge0.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge0.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge0.a_awready [1] = 1     // a_awready
net:   tb.dut.merge0.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge0.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge0.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge0.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge0.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge0.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge0.a_arready [1] = 1     // a_arready
net:   tb.dut.merge0.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge0.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge0.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge0.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge0.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge0.axi_rd_4_merger
son:   tb.dut.merge0.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge0.axi_rd_4_merger
net:   tb.dut.merge0.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge0.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge0.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge0.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge0.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge0.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge0.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge0.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge0.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge0.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge0.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge0.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge0.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge0.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge0.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge0.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge0.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge0.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge0.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge0.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge0.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge0.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge0.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge0.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge0.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge0.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge0.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge0.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge0.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge0.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge0.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge0.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge0.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge0.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge0.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge0.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge0.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge0.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge0.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge0.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge0.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge0.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge0.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge0.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge0.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge0.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge0.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge0.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge0.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge0.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge0.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge0.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge0.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge0.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge0.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge0.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge0.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge0.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge0.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge0.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge0.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge0.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge0.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge0.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge0.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge0.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge0.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge0.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge0.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge0.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge0.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge0.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge0.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge0.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge0.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge0.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge0.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge0.axi_wr_4_merger
net:   tb.dut.merge0.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge0.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge0.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge0.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge0.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge0.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge0.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge0.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge0.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge0.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge0.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge0.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge0.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge0.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge0.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge0.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge0.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge0.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge0.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge0.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge0.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge0.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge0.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge0.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge0.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge0.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge0.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge0.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge0.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge0.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge0.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge0.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge0.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge0.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge0.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge0.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge0.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge0.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge0.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge0.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge0.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge0.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge0.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge0.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge0.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge0.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge0.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge0.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge0.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge0.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge0.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge0.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge0.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge0.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge0.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge0.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge0.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge0.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge0.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge0.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge0.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge0.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge0.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge0.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge0.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge0.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge0.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge0.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge0.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge0.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge0.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge0.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge0.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge0.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge0.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge0.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge0.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge0.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge0.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge0.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge0.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge0.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge0.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge0.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge0.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge0.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge0.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge0.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge0.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge0.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge0.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge0.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge0.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge0.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge0.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge0.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge0.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge0.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge0.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge0.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge0.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge0.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge0.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge0.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge0.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge0.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge0.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge0.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge0.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge0.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge0.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge0.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge0.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge0.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge0.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge0.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge0.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge0.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge0.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge0.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge0.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge0.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge0.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge0.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge0.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge0.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge0.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge0.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge0.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge0.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge0.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge1
net:   tb.dut.merge1.clk [1] = 1     // clk
net:   tb.dut.merge1.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.wready [1] = 1     // wready
net:   tb.dut.merge1.wvalid [1] = 0     // wvalid
net:   tb.dut.merge1.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge1.wlast [1] = 0     // wlast
net:   tb.dut.merge1.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge1.rvalid [1] = 0     // rvalid
net:   tb.dut.merge1.rresp [2] = 00     // rresp
net:   tb.dut.merge1.rready [1] = 1     // rready
net:   tb.dut.merge1.rlast [1] = 0     // rlast
net:   tb.dut.merge1.rid [4] = 0000     // rid
net:   tb.dut.merge1.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge1.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge1.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge1.d_wready [1] = 1     // d_wready
net:   tb.dut.merge1.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge1.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge1.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge1.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge1.d_rready [1] = 1     // d_rready
net:   tb.dut.merge1.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge1.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge1.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge1.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge1.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge1.d_bready [1] = 1     // d_bready
net:   tb.dut.merge1.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge1.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge1.d_awready [1] = 1     // d_awready
net:   tb.dut.merge1.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge1.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge1.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge1.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge1.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge1.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge1.d_arready [1] = 1     // d_arready
net:   tb.dut.merge1.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge1.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge1.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge1.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge1.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge1.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge1.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge1.c_wready [1] = 1     // c_wready
net:   tb.dut.merge1.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge1.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge1.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge1.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge1.c_rready [1] = 1     // c_rready
net:   tb.dut.merge1.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge1.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge1.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge1.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge1.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge1.c_bready [1] = 1     // c_bready
net:   tb.dut.merge1.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge1.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge1.c_awready [1] = 1     // c_awready
net:   tb.dut.merge1.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge1.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge1.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge1.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge1.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge1.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge1.c_arready [1] = 1     // c_arready
net:   tb.dut.merge1.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge1.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge1.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge1.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge1.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge1.bvalid [1] = 0     // bvalid
net:   tb.dut.merge1.bresp [2] = 00     // bresp
net:   tb.dut.merge1.bready [1] = 1     // bready
net:   tb.dut.merge1.bid [4] = 0000     // bid
net:   tb.dut.merge1.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge1.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge1.b_wready [1] = 1     // b_wready
net:   tb.dut.merge1.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge1.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge1.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge1.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge1.b_rready [1] = 1     // b_rready
net:   tb.dut.merge1.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge1.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge1.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge1.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge1.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge1.b_bready [1] = 1     // b_bready
net:   tb.dut.merge1.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge1.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge1.b_awready [1] = 1     // b_awready
net:   tb.dut.merge1.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge1.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge1.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge1.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge1.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge1.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge1.b_arready [1] = 1     // b_arready
net:   tb.dut.merge1.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge1.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge1.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge1.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge1.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge1.awvalid [1] = 0     // awvalid
net:   tb.dut.merge1.awready [1] = 1     // awready
net:   tb.dut.merge1.awlen [8] = 00000000     // awlen
net:   tb.dut.merge1.awid [4] = 0000     // awid
net:   tb.dut.merge1.awextras [8] = 00000000     // awextras
net:   tb.dut.merge1.awburst [2] = 00     // awburst
net:   tb.dut.merge1.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge1.arvalid [1] = 0     // arvalid
net:   tb.dut.merge1.arready [1] = 1     // arready
net:   tb.dut.merge1.arlen [8] = 00000000     // arlen
net:   tb.dut.merge1.arid [4] = 0000     // arid
net:   tb.dut.merge1.arextras [8] = 00000000     // arextras
net:   tb.dut.merge1.arburst [2] = 00     // arburst
net:   tb.dut.merge1.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge1.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge1.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge1.a_wready [1] = 1     // a_wready
net:   tb.dut.merge1.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge1.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge1.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge1.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge1.a_rready [1] = 1     // a_rready
net:   tb.dut.merge1.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge1.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge1.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge1.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge1.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge1.a_bready [1] = 1     // a_bready
net:   tb.dut.merge1.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge1.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge1.a_awready [1] = 1     // a_awready
net:   tb.dut.merge1.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge1.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge1.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge1.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge1.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge1.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge1.a_arready [1] = 1     // a_arready
net:   tb.dut.merge1.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge1.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge1.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge1.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge1.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge1.axi_rd_4_merger
son:   tb.dut.merge1.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge1.axi_rd_4_merger
net:   tb.dut.merge1.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge1.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge1.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge1.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge1.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge1.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge1.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge1.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge1.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge1.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge1.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge1.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge1.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge1.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge1.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge1.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge1.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge1.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge1.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge1.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge1.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge1.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge1.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge1.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge1.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge1.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge1.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge1.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge1.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge1.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge1.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge1.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge1.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge1.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge1.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge1.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge1.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge1.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge1.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge1.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge1.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge1.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge1.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge1.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge1.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge1.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge1.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge1.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge1.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge1.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge1.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge1.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge1.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge1.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge1.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge1.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge1.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge1.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge1.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge1.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge1.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge1.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge1.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge1.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge1.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge1.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge1.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge1.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge1.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge1.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge1.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge1.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge1.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge1.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge1.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge1.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge1.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge1.axi_wr_4_merger
net:   tb.dut.merge1.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge1.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge1.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge1.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge1.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge1.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge1.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge1.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge1.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge1.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge1.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge1.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge1.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge1.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge1.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge1.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge1.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge1.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge1.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge1.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge1.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge1.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge1.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge1.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge1.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge1.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge1.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge1.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge1.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge1.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge1.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge1.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge1.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge1.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge1.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge1.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge1.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge1.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge1.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge1.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge1.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge1.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge1.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge1.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge1.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge1.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge1.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge1.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge1.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge1.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge1.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge1.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge1.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge1.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge1.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge1.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge1.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge1.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge1.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge1.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge1.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge1.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge1.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge1.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge1.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge1.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge1.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge1.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge1.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge1.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge1.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge1.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge1.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge1.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge1.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge1.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge1.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge1.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge1.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge1.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge1.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge1.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge1.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge1.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge1.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge1.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge1.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge1.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge1.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge1.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge1.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge1.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge1.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge1.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge1.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge1.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge1.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge1.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge1.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge1.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge1.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge1.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge1.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge1.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge1.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge1.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge1.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge1.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge1.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge1.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge1.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge1.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge1.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge1.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge1.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge1.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge1.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge1.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge1.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge1.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge1.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge1.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge1.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge1.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge1.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge1.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge1.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge1.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge1.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge1.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge1.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge10
net:   tb.dut.merge10.clk [1] = 1     // clk
net:   tb.dut.merge10.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.wready [1] = 1     // wready
net:   tb.dut.merge10.wvalid [1] = 0     // wvalid
net:   tb.dut.merge10.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge10.wlast [1] = 0     // wlast
net:   tb.dut.merge10.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge10.rvalid [1] = 0     // rvalid
net:   tb.dut.merge10.rresp [2] = 00     // rresp
net:   tb.dut.merge10.rready [1] = 1     // rready
net:   tb.dut.merge10.rlast [1] = 0     // rlast
net:   tb.dut.merge10.rid [4] = 0000     // rid
net:   tb.dut.merge10.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge10.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge10.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge10.d_wready [1] = 1     // d_wready
net:   tb.dut.merge10.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge10.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge10.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge10.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge10.d_rready [1] = 1     // d_rready
net:   tb.dut.merge10.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge10.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge10.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge10.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge10.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge10.d_bready [1] = 1     // d_bready
net:   tb.dut.merge10.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge10.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge10.d_awready [1] = 1     // d_awready
net:   tb.dut.merge10.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge10.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge10.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge10.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge10.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge10.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge10.d_arready [1] = 1     // d_arready
net:   tb.dut.merge10.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge10.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge10.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge10.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge10.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge10.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge10.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge10.c_wready [1] = 1     // c_wready
net:   tb.dut.merge10.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge10.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge10.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge10.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge10.c_rready [1] = 1     // c_rready
net:   tb.dut.merge10.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge10.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge10.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge10.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge10.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge10.c_bready [1] = 1     // c_bready
net:   tb.dut.merge10.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge10.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge10.c_awready [1] = 1     // c_awready
net:   tb.dut.merge10.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge10.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge10.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge10.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge10.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge10.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge10.c_arready [1] = 1     // c_arready
net:   tb.dut.merge10.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge10.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge10.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge10.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge10.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge10.bvalid [1] = 0     // bvalid
net:   tb.dut.merge10.bresp [2] = 00     // bresp
net:   tb.dut.merge10.bready [1] = 1     // bready
net:   tb.dut.merge10.bid [4] = 0000     // bid
net:   tb.dut.merge10.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge10.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge10.b_wready [1] = 1     // b_wready
net:   tb.dut.merge10.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge10.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge10.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge10.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge10.b_rready [1] = 1     // b_rready
net:   tb.dut.merge10.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge10.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge10.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge10.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge10.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge10.b_bready [1] = 1     // b_bready
net:   tb.dut.merge10.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge10.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge10.b_awready [1] = 1     // b_awready
net:   tb.dut.merge10.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge10.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge10.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge10.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge10.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge10.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge10.b_arready [1] = 1     // b_arready
net:   tb.dut.merge10.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge10.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge10.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge10.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge10.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge10.awvalid [1] = 0     // awvalid
net:   tb.dut.merge10.awready [1] = 1     // awready
net:   tb.dut.merge10.awlen [8] = 00000000     // awlen
net:   tb.dut.merge10.awid [4] = 0000     // awid
net:   tb.dut.merge10.awextras [8] = 00000000     // awextras
net:   tb.dut.merge10.awburst [2] = 00     // awburst
net:   tb.dut.merge10.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge10.arvalid [1] = 0     // arvalid
net:   tb.dut.merge10.arready [1] = 1     // arready
net:   tb.dut.merge10.arlen [8] = 00000000     // arlen
net:   tb.dut.merge10.arid [4] = 0000     // arid
net:   tb.dut.merge10.arextras [8] = 00000000     // arextras
net:   tb.dut.merge10.arburst [2] = 00     // arburst
net:   tb.dut.merge10.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge10.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge10.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge10.a_wready [1] = 1     // a_wready
net:   tb.dut.merge10.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge10.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge10.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge10.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge10.a_rready [1] = 1     // a_rready
net:   tb.dut.merge10.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge10.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge10.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge10.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge10.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge10.a_bready [1] = 1     // a_bready
net:   tb.dut.merge10.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge10.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge10.a_awready [1] = 1     // a_awready
net:   tb.dut.merge10.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge10.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge10.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge10.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge10.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge10.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge10.a_arready [1] = 1     // a_arready
net:   tb.dut.merge10.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge10.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge10.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge10.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge10.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge10.axi_rd_4_merger
son:   tb.dut.merge10.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge10.axi_rd_4_merger
net:   tb.dut.merge10.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge10.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge10.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge10.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge10.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge10.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge10.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge10.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge10.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge10.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge10.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge10.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge10.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge10.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge10.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge10.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge10.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge10.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge10.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge10.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge10.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge10.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge10.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge10.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge10.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge10.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge10.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge10.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge10.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge10.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge10.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge10.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge10.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge10.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge10.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge10.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge10.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge10.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge10.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge10.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge10.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge10.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge10.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge10.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge10.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge10.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge10.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge10.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge10.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge10.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge10.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge10.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge10.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge10.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge10.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge10.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge10.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge10.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge10.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge10.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge10.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge10.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge10.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge10.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge10.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge10.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge10.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge10.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge10.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge10.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge10.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge10.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge10.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge10.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge10.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge10.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge10.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge10.axi_wr_4_merger
net:   tb.dut.merge10.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge10.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge10.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge10.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge10.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge10.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge10.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge10.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge10.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge10.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge10.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge10.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge10.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge10.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge10.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge10.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge10.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge10.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge10.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge10.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge10.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge10.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge10.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge10.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge10.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge10.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge10.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge10.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge10.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge10.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge10.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge10.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge10.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge10.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge10.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge10.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge10.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge10.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge10.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge10.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge10.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge10.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge10.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge10.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge10.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge10.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge10.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge10.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge10.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge10.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge10.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge10.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge10.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge10.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge10.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge10.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge10.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge10.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge10.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge10.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge10.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge10.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge10.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge10.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge10.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge10.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge10.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge10.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge10.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge10.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge10.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge10.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge10.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge10.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge10.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge10.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge10.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge10.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge10.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge10.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge10.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge10.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge10.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge10.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge10.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge10.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge10.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge10.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge10.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge10.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge10.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge10.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge10.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge10.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge10.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge10.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge10.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge10.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge10.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge10.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge10.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge10.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge10.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge10.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge10.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge10.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge10.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge10.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge10.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge10.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge10.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge10.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge10.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge10.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge10.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge10.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge10.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge10.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge10.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge10.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge10.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge10.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge10.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge10.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge10.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge10.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge10.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge10.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge10.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge10.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge10.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge11
net:   tb.dut.merge11.clk [1] = 1     // clk
net:   tb.dut.merge11.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.wready [1] = 1     // wready
net:   tb.dut.merge11.wvalid [1] = 0     // wvalid
net:   tb.dut.merge11.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge11.wlast [1] = 0     // wlast
net:   tb.dut.merge11.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge11.rvalid [1] = 0     // rvalid
net:   tb.dut.merge11.rresp [2] = 00     // rresp
net:   tb.dut.merge11.rready [1] = 1     // rready
net:   tb.dut.merge11.rlast [1] = 0     // rlast
net:   tb.dut.merge11.rid [4] = 0000     // rid
net:   tb.dut.merge11.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge11.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge11.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge11.d_wready [1] = 1     // d_wready
net:   tb.dut.merge11.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge11.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge11.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge11.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge11.d_rready [1] = 1     // d_rready
net:   tb.dut.merge11.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge11.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge11.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge11.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge11.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge11.d_bready [1] = 1     // d_bready
net:   tb.dut.merge11.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge11.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge11.d_awready [1] = 1     // d_awready
net:   tb.dut.merge11.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge11.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge11.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge11.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge11.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge11.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge11.d_arready [1] = 1     // d_arready
net:   tb.dut.merge11.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge11.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge11.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge11.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge11.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge11.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge11.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge11.c_wready [1] = 1     // c_wready
net:   tb.dut.merge11.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge11.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge11.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge11.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge11.c_rready [1] = 1     // c_rready
net:   tb.dut.merge11.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge11.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge11.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge11.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge11.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge11.c_bready [1] = 1     // c_bready
net:   tb.dut.merge11.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge11.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge11.c_awready [1] = 1     // c_awready
net:   tb.dut.merge11.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge11.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge11.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge11.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge11.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge11.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge11.c_arready [1] = 1     // c_arready
net:   tb.dut.merge11.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge11.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge11.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge11.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge11.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge11.bvalid [1] = 0     // bvalid
net:   tb.dut.merge11.bresp [2] = 00     // bresp
net:   tb.dut.merge11.bready [1] = 1     // bready
net:   tb.dut.merge11.bid [4] = 0000     // bid
net:   tb.dut.merge11.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge11.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge11.b_wready [1] = 1     // b_wready
net:   tb.dut.merge11.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge11.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge11.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge11.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge11.b_rready [1] = 1     // b_rready
net:   tb.dut.merge11.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge11.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge11.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge11.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge11.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge11.b_bready [1] = 1     // b_bready
net:   tb.dut.merge11.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge11.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge11.b_awready [1] = 1     // b_awready
net:   tb.dut.merge11.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge11.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge11.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge11.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge11.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge11.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge11.b_arready [1] = 1     // b_arready
net:   tb.dut.merge11.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge11.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge11.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge11.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge11.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge11.awvalid [1] = 0     // awvalid
net:   tb.dut.merge11.awready [1] = 1     // awready
net:   tb.dut.merge11.awlen [8] = 00000000     // awlen
net:   tb.dut.merge11.awid [4] = 0000     // awid
net:   tb.dut.merge11.awextras [8] = 00000000     // awextras
net:   tb.dut.merge11.awburst [2] = 00     // awburst
net:   tb.dut.merge11.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge11.arvalid [1] = 0     // arvalid
net:   tb.dut.merge11.arready [1] = 1     // arready
net:   tb.dut.merge11.arlen [8] = 00000000     // arlen
net:   tb.dut.merge11.arid [4] = 0000     // arid
net:   tb.dut.merge11.arextras [8] = 00000000     // arextras
net:   tb.dut.merge11.arburst [2] = 00     // arburst
net:   tb.dut.merge11.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge11.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge11.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge11.a_wready [1] = 1     // a_wready
net:   tb.dut.merge11.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge11.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge11.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge11.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge11.a_rready [1] = 1     // a_rready
net:   tb.dut.merge11.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge11.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge11.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge11.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge11.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge11.a_bready [1] = 1     // a_bready
net:   tb.dut.merge11.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge11.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge11.a_awready [1] = 1     // a_awready
net:   tb.dut.merge11.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge11.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge11.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge11.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge11.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge11.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge11.a_arready [1] = 1     // a_arready
net:   tb.dut.merge11.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge11.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge11.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge11.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge11.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge11.axi_rd_4_merger
son:   tb.dut.merge11.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge11.axi_rd_4_merger
net:   tb.dut.merge11.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge11.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge11.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge11.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge11.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge11.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge11.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge11.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge11.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge11.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge11.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge11.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge11.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge11.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge11.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge11.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge11.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge11.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge11.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge11.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge11.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge11.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge11.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge11.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge11.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge11.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge11.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge11.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge11.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge11.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge11.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge11.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge11.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge11.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge11.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge11.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge11.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge11.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge11.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge11.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge11.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge11.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge11.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge11.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge11.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge11.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge11.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge11.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge11.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge11.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge11.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge11.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge11.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge11.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge11.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge11.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge11.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge11.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge11.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge11.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge11.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge11.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge11.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge11.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge11.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge11.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge11.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge11.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge11.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge11.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge11.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge11.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge11.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge11.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge11.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge11.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge11.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge11.axi_wr_4_merger
net:   tb.dut.merge11.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge11.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge11.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge11.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge11.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge11.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge11.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge11.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge11.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge11.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge11.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge11.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge11.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge11.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge11.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge11.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge11.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge11.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge11.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge11.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge11.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge11.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge11.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge11.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge11.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge11.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge11.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge11.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge11.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge11.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge11.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge11.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge11.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge11.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge11.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge11.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge11.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge11.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge11.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge11.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge11.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge11.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge11.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge11.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge11.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge11.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge11.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge11.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge11.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge11.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge11.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge11.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge11.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge11.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge11.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge11.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge11.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge11.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge11.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge11.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge11.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge11.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge11.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge11.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge11.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge11.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge11.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge11.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge11.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge11.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge11.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge11.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge11.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge11.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge11.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge11.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge11.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge11.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge11.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge11.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge11.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge11.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge11.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge11.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge11.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge11.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge11.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge11.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge11.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge11.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge11.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge11.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge11.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge11.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge11.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge11.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge11.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge11.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge11.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge11.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge11.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge11.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge11.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge11.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge11.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge11.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge11.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge11.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge11.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge11.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge11.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge11.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge11.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge11.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge11.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge11.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge11.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge11.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge11.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge11.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge11.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge11.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge11.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge11.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge11.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge11.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge11.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge11.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge11.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge11.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge11.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge12
net:   tb.dut.merge12.clk [1] = 1     // clk
net:   tb.dut.merge12.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.wready [1] = 1     // wready
net:   tb.dut.merge12.wvalid [1] = 0     // wvalid
net:   tb.dut.merge12.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge12.wlast [1] = 0     // wlast
net:   tb.dut.merge12.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge12.rvalid [1] = 0     // rvalid
net:   tb.dut.merge12.rresp [2] = 00     // rresp
net:   tb.dut.merge12.rready [1] = 1     // rready
net:   tb.dut.merge12.rlast [1] = 0     // rlast
net:   tb.dut.merge12.rid [4] = 0000     // rid
net:   tb.dut.merge12.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge12.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge12.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge12.d_wready [1] = 1     // d_wready
net:   tb.dut.merge12.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge12.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge12.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge12.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge12.d_rready [1] = 1     // d_rready
net:   tb.dut.merge12.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge12.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge12.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge12.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge12.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge12.d_bready [1] = 1     // d_bready
net:   tb.dut.merge12.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge12.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge12.d_awready [1] = 1     // d_awready
net:   tb.dut.merge12.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge12.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge12.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge12.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge12.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge12.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge12.d_arready [1] = 1     // d_arready
net:   tb.dut.merge12.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge12.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge12.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge12.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge12.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge12.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge12.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge12.c_wready [1] = 1     // c_wready
net:   tb.dut.merge12.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge12.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge12.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge12.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge12.c_rready [1] = 1     // c_rready
net:   tb.dut.merge12.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge12.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge12.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge12.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge12.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge12.c_bready [1] = 1     // c_bready
net:   tb.dut.merge12.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge12.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge12.c_awready [1] = 1     // c_awready
net:   tb.dut.merge12.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge12.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge12.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge12.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge12.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge12.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge12.c_arready [1] = 1     // c_arready
net:   tb.dut.merge12.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge12.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge12.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge12.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge12.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge12.bvalid [1] = 0     // bvalid
net:   tb.dut.merge12.bresp [2] = 00     // bresp
net:   tb.dut.merge12.bready [1] = 1     // bready
net:   tb.dut.merge12.bid [4] = 0000     // bid
net:   tb.dut.merge12.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge12.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge12.b_wready [1] = 1     // b_wready
net:   tb.dut.merge12.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge12.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge12.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge12.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge12.b_rready [1] = 1     // b_rready
net:   tb.dut.merge12.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge12.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge12.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge12.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge12.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge12.b_bready [1] = 1     // b_bready
net:   tb.dut.merge12.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge12.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge12.b_awready [1] = 1     // b_awready
net:   tb.dut.merge12.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge12.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge12.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge12.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge12.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge12.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge12.b_arready [1] = 1     // b_arready
net:   tb.dut.merge12.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge12.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge12.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge12.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge12.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge12.awvalid [1] = 0     // awvalid
net:   tb.dut.merge12.awready [1] = 1     // awready
net:   tb.dut.merge12.awlen [8] = 00000000     // awlen
net:   tb.dut.merge12.awid [4] = 0000     // awid
net:   tb.dut.merge12.awextras [8] = 00000000     // awextras
net:   tb.dut.merge12.awburst [2] = 00     // awburst
net:   tb.dut.merge12.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge12.arvalid [1] = 0     // arvalid
net:   tb.dut.merge12.arready [1] = 1     // arready
net:   tb.dut.merge12.arlen [8] = 00000000     // arlen
net:   tb.dut.merge12.arid [4] = 0000     // arid
net:   tb.dut.merge12.arextras [8] = 00000000     // arextras
net:   tb.dut.merge12.arburst [2] = 00     // arburst
net:   tb.dut.merge12.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge12.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge12.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge12.a_wready [1] = 1     // a_wready
net:   tb.dut.merge12.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge12.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge12.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge12.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge12.a_rready [1] = 1     // a_rready
net:   tb.dut.merge12.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge12.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge12.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge12.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge12.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge12.a_bready [1] = 1     // a_bready
net:   tb.dut.merge12.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge12.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge12.a_awready [1] = 1     // a_awready
net:   tb.dut.merge12.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge12.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge12.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge12.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge12.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge12.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge12.a_arready [1] = 1     // a_arready
net:   tb.dut.merge12.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge12.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge12.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge12.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge12.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge12.axi_rd_4_merger
son:   tb.dut.merge12.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge12.axi_rd_4_merger
net:   tb.dut.merge12.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge12.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge12.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge12.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge12.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge12.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge12.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge12.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge12.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge12.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge12.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge12.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge12.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge12.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge12.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge12.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge12.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge12.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge12.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge12.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge12.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge12.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge12.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge12.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge12.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge12.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge12.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge12.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge12.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge12.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge12.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge12.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge12.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge12.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge12.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge12.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge12.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge12.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge12.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge12.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge12.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge12.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge12.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge12.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge12.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge12.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge12.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge12.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge12.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge12.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge12.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge12.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge12.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge12.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge12.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge12.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge12.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge12.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge12.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge12.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge12.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge12.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge12.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge12.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge12.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge12.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge12.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge12.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge12.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge12.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge12.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge12.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge12.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge12.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge12.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge12.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge12.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge12.axi_wr_4_merger
net:   tb.dut.merge12.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge12.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge12.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge12.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge12.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge12.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge12.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge12.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge12.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge12.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge12.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge12.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge12.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge12.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge12.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge12.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge12.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge12.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge12.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge12.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge12.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge12.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge12.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge12.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge12.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge12.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge12.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge12.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge12.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge12.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge12.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge12.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge12.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge12.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge12.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge12.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge12.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge12.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge12.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge12.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge12.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge12.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge12.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge12.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge12.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge12.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge12.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge12.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge12.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge12.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge12.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge12.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge12.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge12.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge12.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge12.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge12.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge12.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge12.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge12.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge12.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge12.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge12.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge12.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge12.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge12.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge12.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge12.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge12.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge12.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge12.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge12.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge12.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge12.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge12.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge12.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge12.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge12.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge12.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge12.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge12.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge12.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge12.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge12.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge12.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge12.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge12.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge12.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge12.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge12.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge12.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge12.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge12.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge12.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge12.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge12.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge12.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge12.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge12.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge12.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge12.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge12.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge12.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge12.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge12.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge12.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge12.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge12.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge12.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge12.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge12.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge12.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge12.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge12.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge12.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge12.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge12.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge12.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge12.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge12.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge12.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge12.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge12.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge12.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge12.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge12.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge12.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge12.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge12.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge12.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge12.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge13
net:   tb.dut.merge13.clk [1] = 1     // clk
net:   tb.dut.merge13.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.wready [1] = 1     // wready
net:   tb.dut.merge13.wvalid [1] = 0     // wvalid
net:   tb.dut.merge13.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge13.wlast [1] = 0     // wlast
net:   tb.dut.merge13.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge13.rvalid [1] = 0     // rvalid
net:   tb.dut.merge13.rresp [2] = 00     // rresp
net:   tb.dut.merge13.rready [1] = 1     // rready
net:   tb.dut.merge13.rlast [1] = 0     // rlast
net:   tb.dut.merge13.rid [4] = 0000     // rid
net:   tb.dut.merge13.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge13.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge13.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge13.d_wready [1] = 1     // d_wready
net:   tb.dut.merge13.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge13.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge13.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge13.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge13.d_rready [1] = 1     // d_rready
net:   tb.dut.merge13.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge13.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge13.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge13.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge13.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge13.d_bready [1] = 1     // d_bready
net:   tb.dut.merge13.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge13.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge13.d_awready [1] = 1     // d_awready
net:   tb.dut.merge13.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge13.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge13.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge13.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge13.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge13.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge13.d_arready [1] = 1     // d_arready
net:   tb.dut.merge13.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge13.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge13.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge13.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge13.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge13.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge13.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge13.c_wready [1] = 1     // c_wready
net:   tb.dut.merge13.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge13.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge13.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge13.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge13.c_rready [1] = 1     // c_rready
net:   tb.dut.merge13.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge13.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge13.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge13.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge13.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge13.c_bready [1] = 1     // c_bready
net:   tb.dut.merge13.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge13.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge13.c_awready [1] = 1     // c_awready
net:   tb.dut.merge13.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge13.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge13.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge13.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge13.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge13.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge13.c_arready [1] = 1     // c_arready
net:   tb.dut.merge13.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge13.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge13.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge13.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge13.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge13.bvalid [1] = 0     // bvalid
net:   tb.dut.merge13.bresp [2] = 00     // bresp
net:   tb.dut.merge13.bready [1] = 1     // bready
net:   tb.dut.merge13.bid [4] = 0000     // bid
net:   tb.dut.merge13.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge13.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge13.b_wready [1] = 1     // b_wready
net:   tb.dut.merge13.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge13.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge13.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge13.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge13.b_rready [1] = 1     // b_rready
net:   tb.dut.merge13.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge13.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge13.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge13.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge13.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge13.b_bready [1] = 1     // b_bready
net:   tb.dut.merge13.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge13.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge13.b_awready [1] = 1     // b_awready
net:   tb.dut.merge13.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge13.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge13.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge13.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge13.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge13.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge13.b_arready [1] = 1     // b_arready
net:   tb.dut.merge13.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge13.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge13.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge13.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge13.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge13.awvalid [1] = 0     // awvalid
net:   tb.dut.merge13.awready [1] = 1     // awready
net:   tb.dut.merge13.awlen [8] = 00000000     // awlen
net:   tb.dut.merge13.awid [4] = 0000     // awid
net:   tb.dut.merge13.awextras [8] = 00000000     // awextras
net:   tb.dut.merge13.awburst [2] = 00     // awburst
net:   tb.dut.merge13.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge13.arvalid [1] = 0     // arvalid
net:   tb.dut.merge13.arready [1] = 1     // arready
net:   tb.dut.merge13.arlen [8] = 00000000     // arlen
net:   tb.dut.merge13.arid [4] = 0000     // arid
net:   tb.dut.merge13.arextras [8] = 00000000     // arextras
net:   tb.dut.merge13.arburst [2] = 00     // arburst
net:   tb.dut.merge13.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge13.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge13.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge13.a_wready [1] = 1     // a_wready
net:   tb.dut.merge13.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge13.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge13.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge13.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge13.a_rready [1] = 1     // a_rready
net:   tb.dut.merge13.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge13.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge13.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge13.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge13.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge13.a_bready [1] = 1     // a_bready
net:   tb.dut.merge13.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge13.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge13.a_awready [1] = 1     // a_awready
net:   tb.dut.merge13.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge13.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge13.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge13.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge13.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge13.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge13.a_arready [1] = 1     // a_arready
net:   tb.dut.merge13.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge13.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge13.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge13.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge13.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge13.axi_rd_4_merger
son:   tb.dut.merge13.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge13.axi_rd_4_merger
net:   tb.dut.merge13.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge13.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge13.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge13.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge13.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge13.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge13.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge13.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge13.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge13.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge13.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge13.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge13.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge13.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge13.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge13.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge13.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge13.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge13.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge13.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge13.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge13.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge13.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge13.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge13.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge13.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge13.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge13.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge13.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge13.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge13.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge13.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge13.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge13.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge13.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge13.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge13.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge13.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge13.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge13.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge13.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge13.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge13.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge13.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge13.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge13.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge13.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge13.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge13.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge13.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge13.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge13.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge13.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge13.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge13.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge13.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge13.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge13.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge13.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge13.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge13.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge13.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge13.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge13.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge13.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge13.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge13.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge13.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge13.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge13.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge13.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge13.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge13.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge13.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge13.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge13.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge13.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge13.axi_wr_4_merger
net:   tb.dut.merge13.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge13.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge13.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge13.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge13.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge13.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge13.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge13.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge13.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge13.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge13.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge13.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge13.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge13.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge13.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge13.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge13.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge13.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge13.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge13.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge13.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge13.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge13.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge13.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge13.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge13.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge13.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge13.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge13.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge13.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge13.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge13.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge13.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge13.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge13.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge13.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge13.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge13.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge13.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge13.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge13.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge13.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge13.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge13.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge13.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge13.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge13.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge13.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge13.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge13.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge13.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge13.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge13.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge13.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge13.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge13.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge13.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge13.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge13.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge13.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge13.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge13.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge13.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge13.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge13.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge13.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge13.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge13.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge13.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge13.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge13.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge13.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge13.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge13.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge13.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge13.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge13.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge13.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge13.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge13.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge13.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge13.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge13.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge13.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge13.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge13.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge13.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge13.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge13.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge13.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge13.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge13.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge13.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge13.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge13.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge13.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge13.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge13.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge13.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge13.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge13.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge13.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge13.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge13.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge13.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge13.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge13.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge13.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge13.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge13.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge13.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge13.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge13.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge13.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge13.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge13.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge13.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge13.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge13.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge13.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge13.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge13.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge13.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge13.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge13.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge13.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge13.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge13.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge13.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge13.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge13.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge14
net:   tb.dut.merge14.clk [1] = 1     // clk
net:   tb.dut.merge14.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.wready [1] = 1     // wready
net:   tb.dut.merge14.wvalid [1] = 0     // wvalid
net:   tb.dut.merge14.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge14.wlast [1] = 0     // wlast
net:   tb.dut.merge14.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge14.rvalid [1] = 0     // rvalid
net:   tb.dut.merge14.rresp [2] = 00     // rresp
net:   tb.dut.merge14.rready [1] = 1     // rready
net:   tb.dut.merge14.rlast [1] = 0     // rlast
net:   tb.dut.merge14.rid [4] = 0000     // rid
net:   tb.dut.merge14.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge14.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge14.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge14.d_wready [1] = 1     // d_wready
net:   tb.dut.merge14.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge14.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge14.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge14.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge14.d_rready [1] = 1     // d_rready
net:   tb.dut.merge14.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge14.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge14.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge14.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge14.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge14.d_bready [1] = 1     // d_bready
net:   tb.dut.merge14.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge14.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge14.d_awready [1] = 1     // d_awready
net:   tb.dut.merge14.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge14.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge14.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge14.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge14.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge14.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge14.d_arready [1] = 1     // d_arready
net:   tb.dut.merge14.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge14.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge14.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge14.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge14.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge14.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge14.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge14.c_wready [1] = 1     // c_wready
net:   tb.dut.merge14.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge14.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge14.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge14.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge14.c_rready [1] = 1     // c_rready
net:   tb.dut.merge14.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge14.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge14.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge14.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge14.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge14.c_bready [1] = 1     // c_bready
net:   tb.dut.merge14.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge14.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge14.c_awready [1] = 1     // c_awready
net:   tb.dut.merge14.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge14.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge14.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge14.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge14.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge14.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge14.c_arready [1] = 1     // c_arready
net:   tb.dut.merge14.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge14.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge14.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge14.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge14.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge14.bvalid [1] = 0     // bvalid
net:   tb.dut.merge14.bresp [2] = 00     // bresp
net:   tb.dut.merge14.bready [1] = 1     // bready
net:   tb.dut.merge14.bid [4] = 0000     // bid
net:   tb.dut.merge14.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge14.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge14.b_wready [1] = 1     // b_wready
net:   tb.dut.merge14.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge14.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge14.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge14.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge14.b_rready [1] = 1     // b_rready
net:   tb.dut.merge14.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge14.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge14.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge14.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge14.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge14.b_bready [1] = 1     // b_bready
net:   tb.dut.merge14.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge14.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge14.b_awready [1] = 1     // b_awready
net:   tb.dut.merge14.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge14.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge14.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge14.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge14.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge14.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge14.b_arready [1] = 1     // b_arready
net:   tb.dut.merge14.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge14.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge14.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge14.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge14.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge14.awvalid [1] = 0     // awvalid
net:   tb.dut.merge14.awready [1] = 1     // awready
net:   tb.dut.merge14.awlen [8] = 00000000     // awlen
net:   tb.dut.merge14.awid [4] = 0000     // awid
net:   tb.dut.merge14.awextras [8] = 00000000     // awextras
net:   tb.dut.merge14.awburst [2] = 00     // awburst
net:   tb.dut.merge14.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge14.arvalid [1] = 0     // arvalid
net:   tb.dut.merge14.arready [1] = 1     // arready
net:   tb.dut.merge14.arlen [8] = 00000000     // arlen
net:   tb.dut.merge14.arid [4] = 0000     // arid
net:   tb.dut.merge14.arextras [8] = 00000000     // arextras
net:   tb.dut.merge14.arburst [2] = 00     // arburst
net:   tb.dut.merge14.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge14.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge14.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge14.a_wready [1] = 1     // a_wready
net:   tb.dut.merge14.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge14.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge14.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge14.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge14.a_rready [1] = 1     // a_rready
net:   tb.dut.merge14.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge14.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge14.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge14.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge14.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge14.a_bready [1] = 1     // a_bready
net:   tb.dut.merge14.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge14.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge14.a_awready [1] = 1     // a_awready
net:   tb.dut.merge14.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge14.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge14.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge14.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge14.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge14.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge14.a_arready [1] = 1     // a_arready
net:   tb.dut.merge14.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge14.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge14.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge14.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge14.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge14.axi_rd_4_merger
son:   tb.dut.merge14.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge14.axi_rd_4_merger
net:   tb.dut.merge14.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge14.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge14.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge14.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge14.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge14.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge14.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge14.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge14.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge14.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge14.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge14.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge14.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge14.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge14.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge14.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge14.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge14.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge14.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge14.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge14.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge14.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge14.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge14.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge14.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge14.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge14.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge14.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge14.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge14.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge14.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge14.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge14.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge14.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge14.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge14.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge14.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge14.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge14.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge14.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge14.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge14.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge14.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge14.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge14.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge14.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge14.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge14.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge14.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge14.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge14.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge14.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge14.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge14.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge14.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge14.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge14.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge14.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge14.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge14.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge14.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge14.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge14.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge14.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge14.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge14.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge14.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge14.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge14.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge14.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge14.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge14.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge14.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge14.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge14.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge14.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge14.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge14.axi_wr_4_merger
net:   tb.dut.merge14.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge14.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge14.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge14.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge14.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge14.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge14.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge14.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge14.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge14.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge14.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge14.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge14.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge14.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge14.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge14.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge14.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge14.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge14.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge14.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge14.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge14.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge14.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge14.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge14.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge14.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge14.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge14.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge14.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge14.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge14.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge14.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge14.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge14.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge14.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge14.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge14.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge14.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge14.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge14.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge14.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge14.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge14.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge14.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge14.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge14.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge14.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge14.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge14.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge14.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge14.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge14.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge14.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge14.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge14.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge14.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge14.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge14.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge14.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge14.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge14.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge14.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge14.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge14.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge14.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge14.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge14.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge14.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge14.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge14.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge14.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge14.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge14.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge14.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge14.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge14.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge14.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge14.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge14.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge14.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge14.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge14.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge14.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge14.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge14.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge14.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge14.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge14.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge14.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge14.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge14.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge14.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge14.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge14.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge14.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge14.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge14.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge14.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge14.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge14.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge14.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge14.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge14.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge14.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge14.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge14.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge14.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge14.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge14.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge14.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge14.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge14.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge14.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge14.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge14.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge14.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge14.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge14.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge14.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge14.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge14.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge14.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge14.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge14.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge14.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge14.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge14.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge14.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge14.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge14.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge14.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge15
net:   tb.dut.merge15.clk [1] = 1     // clk
net:   tb.dut.merge15.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.wready [1] = 1     // wready
net:   tb.dut.merge15.wvalid [1] = 0     // wvalid
net:   tb.dut.merge15.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge15.wlast [1] = 0     // wlast
net:   tb.dut.merge15.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge15.rvalid [1] = 0     // rvalid
net:   tb.dut.merge15.rresp [2] = 00     // rresp
net:   tb.dut.merge15.rready [1] = 1     // rready
net:   tb.dut.merge15.rlast [1] = 0     // rlast
net:   tb.dut.merge15.rid [4] = 0000     // rid
net:   tb.dut.merge15.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge15.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge15.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge15.d_wready [1] = 1     // d_wready
net:   tb.dut.merge15.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge15.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge15.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge15.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge15.d_rready [1] = 1     // d_rready
net:   tb.dut.merge15.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge15.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge15.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge15.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge15.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge15.d_bready [1] = 1     // d_bready
net:   tb.dut.merge15.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge15.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge15.d_awready [1] = 1     // d_awready
net:   tb.dut.merge15.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge15.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge15.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge15.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge15.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge15.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge15.d_arready [1] = 1     // d_arready
net:   tb.dut.merge15.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge15.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge15.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge15.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge15.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge15.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge15.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge15.c_wready [1] = 1     // c_wready
net:   tb.dut.merge15.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge15.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge15.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge15.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge15.c_rready [1] = 1     // c_rready
net:   tb.dut.merge15.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge15.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge15.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge15.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge15.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge15.c_bready [1] = 1     // c_bready
net:   tb.dut.merge15.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge15.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge15.c_awready [1] = 1     // c_awready
net:   tb.dut.merge15.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge15.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge15.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge15.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge15.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge15.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge15.c_arready [1] = 1     // c_arready
net:   tb.dut.merge15.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge15.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge15.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge15.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge15.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge15.bvalid [1] = 0     // bvalid
net:   tb.dut.merge15.bresp [2] = 00     // bresp
net:   tb.dut.merge15.bready [1] = 1     // bready
net:   tb.dut.merge15.bid [4] = 0000     // bid
net:   tb.dut.merge15.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge15.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge15.b_wready [1] = 1     // b_wready
net:   tb.dut.merge15.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge15.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge15.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge15.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge15.b_rready [1] = 1     // b_rready
net:   tb.dut.merge15.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge15.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge15.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge15.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge15.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge15.b_bready [1] = 1     // b_bready
net:   tb.dut.merge15.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge15.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge15.b_awready [1] = 1     // b_awready
net:   tb.dut.merge15.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge15.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge15.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge15.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge15.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge15.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge15.b_arready [1] = 1     // b_arready
net:   tb.dut.merge15.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge15.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge15.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge15.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge15.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge15.awvalid [1] = 0     // awvalid
net:   tb.dut.merge15.awready [1] = 1     // awready
net:   tb.dut.merge15.awlen [8] = 00000000     // awlen
net:   tb.dut.merge15.awid [4] = 0000     // awid
net:   tb.dut.merge15.awextras [8] = 00000000     // awextras
net:   tb.dut.merge15.awburst [2] = 00     // awburst
net:   tb.dut.merge15.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge15.arvalid [1] = 0     // arvalid
net:   tb.dut.merge15.arready [1] = 1     // arready
net:   tb.dut.merge15.arlen [8] = 00000000     // arlen
net:   tb.dut.merge15.arid [4] = 0000     // arid
net:   tb.dut.merge15.arextras [8] = 00000000     // arextras
net:   tb.dut.merge15.arburst [2] = 00     // arburst
net:   tb.dut.merge15.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge15.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge15.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge15.a_wready [1] = 1     // a_wready
net:   tb.dut.merge15.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge15.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge15.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge15.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge15.a_rready [1] = 1     // a_rready
net:   tb.dut.merge15.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge15.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge15.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge15.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge15.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge15.a_bready [1] = 1     // a_bready
net:   tb.dut.merge15.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge15.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge15.a_awready [1] = 1     // a_awready
net:   tb.dut.merge15.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge15.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge15.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge15.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge15.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge15.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge15.a_arready [1] = 1     // a_arready
net:   tb.dut.merge15.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge15.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge15.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge15.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge15.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge15.axi_rd_4_merger
son:   tb.dut.merge15.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge15.axi_rd_4_merger
net:   tb.dut.merge15.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge15.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge15.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge15.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge15.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge15.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge15.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge15.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge15.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge15.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge15.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge15.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge15.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge15.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge15.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge15.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge15.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge15.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge15.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge15.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge15.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge15.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge15.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge15.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge15.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge15.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge15.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge15.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge15.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge15.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge15.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge15.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge15.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge15.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge15.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge15.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge15.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge15.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge15.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge15.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge15.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge15.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge15.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge15.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge15.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge15.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge15.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge15.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge15.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge15.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge15.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge15.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge15.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge15.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge15.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge15.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge15.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge15.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge15.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge15.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge15.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge15.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge15.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge15.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge15.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge15.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge15.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge15.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge15.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge15.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge15.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge15.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge15.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge15.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge15.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge15.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge15.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge15.axi_wr_4_merger
net:   tb.dut.merge15.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge15.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge15.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge15.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge15.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge15.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge15.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge15.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge15.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge15.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge15.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge15.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge15.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge15.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge15.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge15.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge15.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge15.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge15.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge15.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge15.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge15.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge15.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge15.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge15.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge15.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge15.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge15.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge15.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge15.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge15.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge15.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge15.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge15.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge15.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge15.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge15.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge15.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge15.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge15.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge15.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge15.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge15.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge15.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge15.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge15.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge15.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge15.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge15.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge15.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge15.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge15.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge15.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge15.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge15.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge15.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge15.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge15.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge15.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge15.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge15.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge15.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge15.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge15.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge15.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge15.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge15.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge15.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge15.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge15.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge15.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge15.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge15.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge15.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge15.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge15.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge15.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge15.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge15.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge15.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge15.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge15.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge15.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge15.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge15.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge15.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge15.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge15.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge15.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge15.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge15.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge15.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge15.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge15.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge15.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge15.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge15.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge15.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge15.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge15.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge15.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge15.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge15.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge15.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge15.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge15.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge15.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge15.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge15.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge15.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge15.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge15.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge15.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge15.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge15.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge15.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge15.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge15.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge15.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge15.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge15.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge15.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge15.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge15.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge15.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge15.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge15.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge15.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge15.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge15.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge15.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge2
net:   tb.dut.merge2.clk [1] = 1     // clk
net:   tb.dut.merge2.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.wready [1] = 1     // wready
net:   tb.dut.merge2.wvalid [1] = 0     // wvalid
net:   tb.dut.merge2.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge2.wlast [1] = 0     // wlast
net:   tb.dut.merge2.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge2.rvalid [1] = 0     // rvalid
net:   tb.dut.merge2.rresp [2] = 00     // rresp
net:   tb.dut.merge2.rready [1] = 1     // rready
net:   tb.dut.merge2.rlast [1] = 0     // rlast
net:   tb.dut.merge2.rid [4] = 0000     // rid
net:   tb.dut.merge2.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge2.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge2.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge2.d_wready [1] = 1     // d_wready
net:   tb.dut.merge2.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge2.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge2.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge2.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge2.d_rready [1] = 1     // d_rready
net:   tb.dut.merge2.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge2.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge2.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge2.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge2.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge2.d_bready [1] = 1     // d_bready
net:   tb.dut.merge2.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge2.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge2.d_awready [1] = 1     // d_awready
net:   tb.dut.merge2.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge2.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge2.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge2.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge2.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge2.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge2.d_arready [1] = 1     // d_arready
net:   tb.dut.merge2.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge2.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge2.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge2.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge2.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge2.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge2.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge2.c_wready [1] = 1     // c_wready
net:   tb.dut.merge2.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge2.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge2.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge2.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge2.c_rready [1] = 1     // c_rready
net:   tb.dut.merge2.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge2.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge2.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge2.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge2.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge2.c_bready [1] = 1     // c_bready
net:   tb.dut.merge2.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge2.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge2.c_awready [1] = 1     // c_awready
net:   tb.dut.merge2.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge2.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge2.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge2.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge2.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge2.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge2.c_arready [1] = 1     // c_arready
net:   tb.dut.merge2.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge2.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge2.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge2.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge2.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge2.bvalid [1] = 0     // bvalid
net:   tb.dut.merge2.bresp [2] = 00     // bresp
net:   tb.dut.merge2.bready [1] = 1     // bready
net:   tb.dut.merge2.bid [4] = 0000     // bid
net:   tb.dut.merge2.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge2.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge2.b_wready [1] = 1     // b_wready
net:   tb.dut.merge2.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge2.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge2.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge2.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge2.b_rready [1] = 1     // b_rready
net:   tb.dut.merge2.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge2.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge2.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge2.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge2.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge2.b_bready [1] = 1     // b_bready
net:   tb.dut.merge2.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge2.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge2.b_awready [1] = 1     // b_awready
net:   tb.dut.merge2.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge2.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge2.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge2.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge2.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge2.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge2.b_arready [1] = 1     // b_arready
net:   tb.dut.merge2.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge2.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge2.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge2.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge2.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge2.awvalid [1] = 0     // awvalid
net:   tb.dut.merge2.awready [1] = 1     // awready
net:   tb.dut.merge2.awlen [8] = 00000000     // awlen
net:   tb.dut.merge2.awid [4] = 0000     // awid
net:   tb.dut.merge2.awextras [8] = 00000000     // awextras
net:   tb.dut.merge2.awburst [2] = 00     // awburst
net:   tb.dut.merge2.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge2.arvalid [1] = 0     // arvalid
net:   tb.dut.merge2.arready [1] = 1     // arready
net:   tb.dut.merge2.arlen [8] = 00000000     // arlen
net:   tb.dut.merge2.arid [4] = 0000     // arid
net:   tb.dut.merge2.arextras [8] = 00000000     // arextras
net:   tb.dut.merge2.arburst [2] = 00     // arburst
net:   tb.dut.merge2.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge2.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge2.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge2.a_wready [1] = 1     // a_wready
net:   tb.dut.merge2.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge2.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge2.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge2.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge2.a_rready [1] = 1     // a_rready
net:   tb.dut.merge2.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge2.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge2.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge2.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge2.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge2.a_bready [1] = 1     // a_bready
net:   tb.dut.merge2.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge2.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge2.a_awready [1] = 1     // a_awready
net:   tb.dut.merge2.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge2.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge2.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge2.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge2.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge2.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge2.a_arready [1] = 1     // a_arready
net:   tb.dut.merge2.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge2.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge2.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge2.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge2.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge2.axi_rd_4_merger
son:   tb.dut.merge2.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge2.axi_rd_4_merger
net:   tb.dut.merge2.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge2.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge2.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge2.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge2.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge2.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge2.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge2.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge2.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge2.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge2.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge2.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge2.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge2.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge2.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge2.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge2.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge2.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge2.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge2.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge2.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge2.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge2.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge2.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge2.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge2.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge2.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge2.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge2.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge2.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge2.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge2.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge2.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge2.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge2.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge2.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge2.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge2.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge2.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge2.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge2.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge2.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge2.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge2.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge2.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge2.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge2.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge2.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge2.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge2.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge2.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge2.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge2.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge2.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge2.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge2.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge2.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge2.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge2.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge2.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge2.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge2.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge2.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge2.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge2.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge2.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge2.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge2.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge2.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge2.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge2.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge2.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge2.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge2.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge2.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge2.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge2.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge2.axi_wr_4_merger
net:   tb.dut.merge2.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge2.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge2.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge2.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge2.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge2.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge2.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge2.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge2.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge2.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge2.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge2.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge2.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge2.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge2.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge2.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge2.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge2.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge2.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge2.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge2.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge2.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge2.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge2.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge2.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge2.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge2.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge2.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge2.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge2.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge2.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge2.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge2.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge2.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge2.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge2.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge2.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge2.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge2.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge2.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge2.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge2.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge2.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge2.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge2.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge2.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge2.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge2.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge2.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge2.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge2.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge2.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge2.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge2.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge2.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge2.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge2.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge2.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge2.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge2.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge2.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge2.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge2.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge2.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge2.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge2.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge2.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge2.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge2.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge2.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge2.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge2.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge2.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge2.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge2.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge2.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge2.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge2.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge2.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge2.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge2.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge2.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge2.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge2.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge2.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge2.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge2.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge2.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge2.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge2.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge2.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge2.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge2.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge2.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge2.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge2.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge2.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge2.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge2.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge2.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge2.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge2.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge2.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge2.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge2.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge2.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge2.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge2.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge2.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge2.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge2.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge2.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge2.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge2.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge2.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge2.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge2.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge2.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge2.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge2.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge2.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge2.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge2.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge2.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge2.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge2.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge2.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge2.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge2.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge2.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge2.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge200
net:   tb.dut.merge200.arready [1] = 0     // arready
net:   tb.dut.merge200.awready [1] = 0     // awready
net:   tb.dut.merge200.bid [4] = xxxx     // bid
net:   tb.dut.merge200.bresp [2] = xx     // bresp
net:   tb.dut.merge200.bvalid [1] = 0     // bvalid
net:   tb.dut.merge200.clk [1] = 1     // clk
net:   tb.dut.merge200.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge200.rid [4] = xxxx     // rid
net:   tb.dut.merge200.rlast [1] = x     // rlast
net:   tb.dut.merge200.rresp [2] = xx     // rresp
net:   tb.dut.merge200.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.rvalid [1] = 0     // rvalid
net:   tb.dut.merge200.wready [1] = x     // wready
net:   tb.dut.merge200.wvalid [1] = 0     // wvalid
net:   tb.dut.merge200.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge200.wlast [1] = 0     // wlast
net:   tb.dut.merge200.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge200.rready [1] = 1     // rready
net:   tb.dut.merge200.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge200.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge200.d_wready [1] = 1     // d_wready
net:   tb.dut.merge200.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge200.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge200.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge200.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge200.d_rready [1] = 1     // d_rready
net:   tb.dut.merge200.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge200.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge200.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge200.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge200.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge200.d_bready [1] = 1     // d_bready
net:   tb.dut.merge200.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge200.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge200.d_awready [1] = 1     // d_awready
net:   tb.dut.merge200.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge200.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge200.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge200.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge200.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge200.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge200.d_arready [1] = 1     // d_arready
net:   tb.dut.merge200.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge200.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge200.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge200.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge200.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge200.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge200.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge200.c_wready [1] = 1     // c_wready
net:   tb.dut.merge200.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge200.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge200.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge200.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge200.c_rready [1] = 1     // c_rready
net:   tb.dut.merge200.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge200.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge200.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge200.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge200.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge200.c_bready [1] = 1     // c_bready
net:   tb.dut.merge200.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge200.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge200.c_awready [1] = 1     // c_awready
net:   tb.dut.merge200.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge200.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge200.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge200.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge200.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge200.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge200.c_arready [1] = 1     // c_arready
net:   tb.dut.merge200.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge200.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge200.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge200.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge200.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge200.bready [1] = 1     // bready
net:   tb.dut.merge200.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge200.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge200.b_wready [1] = 1     // b_wready
net:   tb.dut.merge200.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge200.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge200.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge200.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge200.b_rready [1] = 1     // b_rready
net:   tb.dut.merge200.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge200.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge200.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge200.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge200.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge200.b_bready [1] = 1     // b_bready
net:   tb.dut.merge200.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge200.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge200.b_awready [1] = 1     // b_awready
net:   tb.dut.merge200.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge200.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge200.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge200.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge200.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge200.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge200.b_arready [1] = 1     // b_arready
net:   tb.dut.merge200.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge200.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge200.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge200.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge200.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge200.awvalid [1] = 0     // awvalid
net:   tb.dut.merge200.awlen [8] = 00000000     // awlen
net:   tb.dut.merge200.awid [4] = 0000     // awid
net:   tb.dut.merge200.awextras [8] = 00000000     // awextras
net:   tb.dut.merge200.awburst [2] = 00     // awburst
net:   tb.dut.merge200.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge200.arvalid [1] = 0     // arvalid
net:   tb.dut.merge200.arlen [8] = 00000000     // arlen
net:   tb.dut.merge200.arid [4] = 0000     // arid
net:   tb.dut.merge200.arextras [8] = 00000000     // arextras
net:   tb.dut.merge200.arburst [2] = 00     // arburst
net:   tb.dut.merge200.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge200.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge200.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge200.a_wready [1] = 1     // a_wready
net:   tb.dut.merge200.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge200.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge200.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge200.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge200.a_rready [1] = 1     // a_rready
net:   tb.dut.merge200.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge200.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge200.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge200.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge200.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge200.a_bready [1] = 1     // a_bready
net:   tb.dut.merge200.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge200.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge200.a_awready [1] = 1     // a_awready
net:   tb.dut.merge200.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge200.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge200.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge200.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge200.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge200.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge200.a_arready [1] = 1     // a_arready
net:   tb.dut.merge200.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge200.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge200.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge200.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge200.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge200.axi_rd_4_merger
son:   tb.dut.merge200.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge200.axi_rd_4_merger
net:   tb.dut.merge200.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge200.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge200.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge200.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge200.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge200.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge200.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge200.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge200.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge200.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge200.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge200.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge200.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge200.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge200.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge200.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge200.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge200.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge200.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge200.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge200.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge200.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge200.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge200.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge200.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge200.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge200.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge200.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge200.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge200.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge200.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge200.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge200.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge200.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge200.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge200.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge200.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge200.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge200.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge200.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge200.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge200.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge200.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge200.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge200.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge200.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge200.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge200.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge200.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge200.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge200.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge200.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge200.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge200.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge200.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge200.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge200.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge200.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge200.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge200.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge200.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge200.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge200.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge200.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge200.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge200.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge200.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge200.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge200.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge200.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge200.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge200.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge200.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge200.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge200.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge200.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge200.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge200.axi_wr_4_merger
net:   tb.dut.merge200.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge200.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge200.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge200.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge200.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge200.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge200.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge200.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge200.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge200.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge200.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge200.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge200.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge200.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge200.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge200.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge200.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge200.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge200.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge200.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge200.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge200.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge200.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge200.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge200.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge200.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge200.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge200.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge200.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge200.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge200.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge200.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge200.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge200.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge200.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge200.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge200.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge200.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge200.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge200.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge200.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge200.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge200.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge200.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge200.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge200.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge200.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge200.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge200.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge200.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge200.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge200.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge200.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge200.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge200.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge200.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge200.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge200.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge200.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge200.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge200.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge200.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge200.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge200.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge200.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge200.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge200.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge200.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge200.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge200.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge200.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge200.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge200.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge200.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge200.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge200.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge200.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge200.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge200.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge200.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge200.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge200.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge200.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge200.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge200.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge200.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge200.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge200.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge200.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge200.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge200.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge200.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge200.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge200.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge200.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge200.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge200.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge200.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge200.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge200.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge200.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge200.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge200.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge200.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge200.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge200.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge200.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge200.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge200.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge200.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge200.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge200.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge200.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge200.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge200.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge200.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge200.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge200.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge200.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge200.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge200.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge200.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge200.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge200.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge200.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge200.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge200.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge200.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge200.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge200.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge200.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge201
net:   tb.dut.merge201.arready [1] = 0     // arready
net:   tb.dut.merge201.awready [1] = 0     // awready
net:   tb.dut.merge201.bid [4] = xxxx     // bid
net:   tb.dut.merge201.bresp [2] = xx     // bresp
net:   tb.dut.merge201.bvalid [1] = 0     // bvalid
net:   tb.dut.merge201.clk [1] = 1     // clk
net:   tb.dut.merge201.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge201.rid [4] = xxxx     // rid
net:   tb.dut.merge201.rlast [1] = x     // rlast
net:   tb.dut.merge201.rresp [2] = xx     // rresp
net:   tb.dut.merge201.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.rvalid [1] = 0     // rvalid
net:   tb.dut.merge201.wready [1] = x     // wready
net:   tb.dut.merge201.wvalid [1] = 0     // wvalid
net:   tb.dut.merge201.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge201.wlast [1] = 0     // wlast
net:   tb.dut.merge201.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge201.rready [1] = 1     // rready
net:   tb.dut.merge201.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge201.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge201.d_wready [1] = 1     // d_wready
net:   tb.dut.merge201.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge201.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge201.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge201.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge201.d_rready [1] = 1     // d_rready
net:   tb.dut.merge201.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge201.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge201.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge201.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge201.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge201.d_bready [1] = 1     // d_bready
net:   tb.dut.merge201.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge201.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge201.d_awready [1] = 1     // d_awready
net:   tb.dut.merge201.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge201.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge201.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge201.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge201.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge201.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge201.d_arready [1] = 1     // d_arready
net:   tb.dut.merge201.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge201.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge201.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge201.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge201.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge201.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge201.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge201.c_wready [1] = 1     // c_wready
net:   tb.dut.merge201.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge201.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge201.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge201.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge201.c_rready [1] = 1     // c_rready
net:   tb.dut.merge201.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge201.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge201.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge201.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge201.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge201.c_bready [1] = 1     // c_bready
net:   tb.dut.merge201.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge201.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge201.c_awready [1] = 1     // c_awready
net:   tb.dut.merge201.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge201.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge201.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge201.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge201.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge201.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge201.c_arready [1] = 1     // c_arready
net:   tb.dut.merge201.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge201.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge201.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge201.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge201.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge201.bready [1] = 1     // bready
net:   tb.dut.merge201.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge201.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge201.b_wready [1] = 1     // b_wready
net:   tb.dut.merge201.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge201.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge201.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge201.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge201.b_rready [1] = 1     // b_rready
net:   tb.dut.merge201.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge201.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge201.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge201.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge201.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge201.b_bready [1] = 1     // b_bready
net:   tb.dut.merge201.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge201.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge201.b_awready [1] = 1     // b_awready
net:   tb.dut.merge201.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge201.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge201.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge201.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge201.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge201.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge201.b_arready [1] = 1     // b_arready
net:   tb.dut.merge201.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge201.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge201.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge201.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge201.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge201.awvalid [1] = 0     // awvalid
net:   tb.dut.merge201.awlen [8] = 00000000     // awlen
net:   tb.dut.merge201.awid [4] = 0000     // awid
net:   tb.dut.merge201.awextras [8] = 00000000     // awextras
net:   tb.dut.merge201.awburst [2] = 00     // awburst
net:   tb.dut.merge201.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge201.arvalid [1] = 0     // arvalid
net:   tb.dut.merge201.arlen [8] = 00000000     // arlen
net:   tb.dut.merge201.arid [4] = 0000     // arid
net:   tb.dut.merge201.arextras [8] = 00000000     // arextras
net:   tb.dut.merge201.arburst [2] = 00     // arburst
net:   tb.dut.merge201.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge201.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge201.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge201.a_wready [1] = 1     // a_wready
net:   tb.dut.merge201.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge201.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge201.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge201.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge201.a_rready [1] = 1     // a_rready
net:   tb.dut.merge201.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge201.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge201.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge201.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge201.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge201.a_bready [1] = 1     // a_bready
net:   tb.dut.merge201.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge201.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge201.a_awready [1] = 1     // a_awready
net:   tb.dut.merge201.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge201.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge201.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge201.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge201.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge201.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge201.a_arready [1] = 1     // a_arready
net:   tb.dut.merge201.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge201.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge201.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge201.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge201.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge201.axi_rd_4_merger
son:   tb.dut.merge201.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge201.axi_rd_4_merger
net:   tb.dut.merge201.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge201.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge201.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge201.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge201.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge201.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge201.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge201.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge201.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge201.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge201.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge201.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge201.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge201.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge201.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge201.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge201.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge201.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge201.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge201.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge201.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge201.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge201.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge201.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge201.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge201.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge201.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge201.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge201.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge201.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge201.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge201.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge201.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge201.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge201.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge201.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge201.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge201.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge201.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge201.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge201.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge201.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge201.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge201.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge201.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge201.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge201.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge201.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge201.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge201.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge201.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge201.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge201.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge201.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge201.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge201.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge201.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge201.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge201.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge201.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge201.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge201.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge201.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge201.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge201.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge201.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge201.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge201.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge201.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge201.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge201.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge201.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge201.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge201.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge201.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge201.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge201.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge201.axi_wr_4_merger
net:   tb.dut.merge201.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge201.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge201.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge201.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge201.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge201.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge201.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge201.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge201.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge201.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge201.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge201.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge201.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge201.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge201.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge201.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge201.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge201.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge201.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge201.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge201.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge201.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge201.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge201.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge201.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge201.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge201.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge201.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge201.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge201.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge201.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge201.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge201.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge201.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge201.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge201.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge201.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge201.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge201.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge201.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge201.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge201.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge201.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge201.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge201.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge201.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge201.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge201.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge201.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge201.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge201.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge201.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge201.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge201.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge201.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge201.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge201.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge201.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge201.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge201.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge201.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge201.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge201.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge201.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge201.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge201.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge201.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge201.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge201.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge201.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge201.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge201.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge201.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge201.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge201.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge201.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge201.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge201.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge201.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge201.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge201.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge201.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge201.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge201.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge201.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge201.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge201.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge201.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge201.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge201.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge201.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge201.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge201.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge201.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge201.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge201.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge201.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge201.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge201.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge201.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge201.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge201.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge201.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge201.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge201.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge201.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge201.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge201.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge201.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge201.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge201.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge201.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge201.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge201.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge201.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge201.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge201.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge201.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge201.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge201.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge201.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge201.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge201.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge201.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge201.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge201.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge201.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge201.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge201.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge201.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge201.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge202
net:   tb.dut.merge202.arready [1] = 0     // arready
net:   tb.dut.merge202.awready [1] = 0     // awready
net:   tb.dut.merge202.bid [4] = xxxx     // bid
net:   tb.dut.merge202.bresp [2] = xx     // bresp
net:   tb.dut.merge202.bvalid [1] = 0     // bvalid
net:   tb.dut.merge202.clk [1] = 1     // clk
net:   tb.dut.merge202.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge202.rid [4] = xxxx     // rid
net:   tb.dut.merge202.rlast [1] = x     // rlast
net:   tb.dut.merge202.rresp [2] = xx     // rresp
net:   tb.dut.merge202.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.rvalid [1] = 0     // rvalid
net:   tb.dut.merge202.wready [1] = x     // wready
net:   tb.dut.merge202.wvalid [1] = 0     // wvalid
net:   tb.dut.merge202.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge202.wlast [1] = 0     // wlast
net:   tb.dut.merge202.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge202.rready [1] = 1     // rready
net:   tb.dut.merge202.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge202.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge202.d_wready [1] = 1     // d_wready
net:   tb.dut.merge202.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge202.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge202.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge202.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge202.d_rready [1] = 1     // d_rready
net:   tb.dut.merge202.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge202.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge202.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge202.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge202.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge202.d_bready [1] = 1     // d_bready
net:   tb.dut.merge202.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge202.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge202.d_awready [1] = 1     // d_awready
net:   tb.dut.merge202.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge202.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge202.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge202.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge202.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge202.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge202.d_arready [1] = 1     // d_arready
net:   tb.dut.merge202.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge202.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge202.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge202.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge202.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge202.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge202.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge202.c_wready [1] = 1     // c_wready
net:   tb.dut.merge202.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge202.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge202.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge202.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge202.c_rready [1] = 1     // c_rready
net:   tb.dut.merge202.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge202.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge202.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge202.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge202.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge202.c_bready [1] = 1     // c_bready
net:   tb.dut.merge202.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge202.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge202.c_awready [1] = 1     // c_awready
net:   tb.dut.merge202.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge202.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge202.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge202.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge202.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge202.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge202.c_arready [1] = 1     // c_arready
net:   tb.dut.merge202.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge202.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge202.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge202.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge202.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge202.bready [1] = 1     // bready
net:   tb.dut.merge202.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge202.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge202.b_wready [1] = 1     // b_wready
net:   tb.dut.merge202.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge202.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge202.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge202.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge202.b_rready [1] = 1     // b_rready
net:   tb.dut.merge202.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge202.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge202.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge202.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge202.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge202.b_bready [1] = 1     // b_bready
net:   tb.dut.merge202.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge202.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge202.b_awready [1] = 1     // b_awready
net:   tb.dut.merge202.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge202.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge202.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge202.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge202.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge202.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge202.b_arready [1] = 1     // b_arready
net:   tb.dut.merge202.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge202.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge202.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge202.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge202.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge202.awvalid [1] = 0     // awvalid
net:   tb.dut.merge202.awlen [8] = 00000000     // awlen
net:   tb.dut.merge202.awid [4] = 0000     // awid
net:   tb.dut.merge202.awextras [8] = 00000000     // awextras
net:   tb.dut.merge202.awburst [2] = 00     // awburst
net:   tb.dut.merge202.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge202.arvalid [1] = 0     // arvalid
net:   tb.dut.merge202.arlen [8] = 00000000     // arlen
net:   tb.dut.merge202.arid [4] = 0000     // arid
net:   tb.dut.merge202.arextras [8] = 00000000     // arextras
net:   tb.dut.merge202.arburst [2] = 00     // arburst
net:   tb.dut.merge202.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge202.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge202.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge202.a_wready [1] = 1     // a_wready
net:   tb.dut.merge202.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge202.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge202.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge202.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge202.a_rready [1] = 1     // a_rready
net:   tb.dut.merge202.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge202.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge202.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge202.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge202.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge202.a_bready [1] = 1     // a_bready
net:   tb.dut.merge202.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge202.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge202.a_awready [1] = 1     // a_awready
net:   tb.dut.merge202.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge202.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge202.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge202.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge202.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge202.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge202.a_arready [1] = 1     // a_arready
net:   tb.dut.merge202.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge202.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge202.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge202.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge202.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge202.axi_rd_4_merger
son:   tb.dut.merge202.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge202.axi_rd_4_merger
net:   tb.dut.merge202.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge202.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge202.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge202.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge202.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge202.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge202.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge202.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge202.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge202.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge202.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge202.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge202.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge202.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge202.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge202.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge202.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge202.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge202.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge202.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge202.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge202.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge202.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge202.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge202.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge202.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge202.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge202.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge202.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge202.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge202.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge202.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge202.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge202.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge202.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge202.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge202.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge202.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge202.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge202.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge202.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge202.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge202.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge202.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge202.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge202.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge202.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge202.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge202.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge202.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge202.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge202.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge202.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge202.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge202.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge202.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge202.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge202.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge202.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge202.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge202.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge202.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge202.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge202.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge202.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge202.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge202.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge202.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge202.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge202.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge202.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge202.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge202.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge202.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge202.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge202.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge202.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge202.axi_wr_4_merger
net:   tb.dut.merge202.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge202.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge202.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge202.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge202.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge202.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge202.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge202.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge202.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge202.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge202.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge202.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge202.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge202.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge202.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge202.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge202.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge202.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge202.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge202.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge202.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge202.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge202.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge202.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge202.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge202.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge202.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge202.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge202.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge202.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge202.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge202.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge202.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge202.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge202.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge202.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge202.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge202.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge202.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge202.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge202.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge202.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge202.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge202.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge202.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge202.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge202.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge202.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge202.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge202.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge202.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge202.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge202.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge202.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge202.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge202.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge202.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge202.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge202.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge202.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge202.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge202.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge202.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge202.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge202.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge202.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge202.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge202.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge202.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge202.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge202.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge202.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge202.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge202.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge202.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge202.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge202.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge202.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge202.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge202.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge202.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge202.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge202.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge202.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge202.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge202.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge202.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge202.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge202.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge202.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge202.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge202.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge202.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge202.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge202.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge202.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge202.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge202.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge202.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge202.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge202.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge202.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge202.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge202.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge202.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge202.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge202.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge202.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge202.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge202.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge202.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge202.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge202.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge202.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge202.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge202.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge202.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge202.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge202.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge202.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge202.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge202.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge202.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge202.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge202.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge202.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge202.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge202.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge202.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge202.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge202.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge203
net:   tb.dut.merge203.arready [1] = 0     // arready
net:   tb.dut.merge203.awready [1] = 0     // awready
net:   tb.dut.merge203.bid [4] = xxxx     // bid
net:   tb.dut.merge203.bresp [2] = xx     // bresp
net:   tb.dut.merge203.bvalid [1] = 0     // bvalid
net:   tb.dut.merge203.clk [1] = 1     // clk
net:   tb.dut.merge203.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge203.rid [4] = xxxx     // rid
net:   tb.dut.merge203.rlast [1] = x     // rlast
net:   tb.dut.merge203.rresp [2] = xx     // rresp
net:   tb.dut.merge203.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.rvalid [1] = 0     // rvalid
net:   tb.dut.merge203.wready [1] = x     // wready
net:   tb.dut.merge203.wvalid [1] = 0     // wvalid
net:   tb.dut.merge203.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge203.wlast [1] = 0     // wlast
net:   tb.dut.merge203.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge203.rready [1] = 1     // rready
net:   tb.dut.merge203.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge203.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge203.d_wready [1] = 1     // d_wready
net:   tb.dut.merge203.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge203.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge203.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge203.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge203.d_rready [1] = 1     // d_rready
net:   tb.dut.merge203.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge203.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge203.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge203.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge203.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge203.d_bready [1] = 1     // d_bready
net:   tb.dut.merge203.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge203.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge203.d_awready [1] = 1     // d_awready
net:   tb.dut.merge203.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge203.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge203.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge203.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge203.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge203.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge203.d_arready [1] = 1     // d_arready
net:   tb.dut.merge203.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge203.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge203.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge203.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge203.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge203.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge203.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge203.c_wready [1] = 1     // c_wready
net:   tb.dut.merge203.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge203.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge203.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge203.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge203.c_rready [1] = 1     // c_rready
net:   tb.dut.merge203.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge203.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge203.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge203.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge203.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge203.c_bready [1] = 1     // c_bready
net:   tb.dut.merge203.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge203.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge203.c_awready [1] = 1     // c_awready
net:   tb.dut.merge203.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge203.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge203.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge203.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge203.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge203.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge203.c_arready [1] = 1     // c_arready
net:   tb.dut.merge203.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge203.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge203.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge203.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge203.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge203.bready [1] = 1     // bready
net:   tb.dut.merge203.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge203.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge203.b_wready [1] = 1     // b_wready
net:   tb.dut.merge203.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge203.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge203.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge203.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge203.b_rready [1] = 1     // b_rready
net:   tb.dut.merge203.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge203.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge203.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge203.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge203.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge203.b_bready [1] = 1     // b_bready
net:   tb.dut.merge203.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge203.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge203.b_awready [1] = 1     // b_awready
net:   tb.dut.merge203.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge203.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge203.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge203.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge203.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge203.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge203.b_arready [1] = 1     // b_arready
net:   tb.dut.merge203.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge203.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge203.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge203.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge203.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge203.awvalid [1] = 0     // awvalid
net:   tb.dut.merge203.awlen [8] = 00000000     // awlen
net:   tb.dut.merge203.awid [4] = 0000     // awid
net:   tb.dut.merge203.awextras [8] = 00000000     // awextras
net:   tb.dut.merge203.awburst [2] = 00     // awburst
net:   tb.dut.merge203.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge203.arvalid [1] = 0     // arvalid
net:   tb.dut.merge203.arlen [8] = 00000000     // arlen
net:   tb.dut.merge203.arid [4] = 0000     // arid
net:   tb.dut.merge203.arextras [8] = 00000000     // arextras
net:   tb.dut.merge203.arburst [2] = 00     // arburst
net:   tb.dut.merge203.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge203.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge203.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge203.a_wready [1] = 1     // a_wready
net:   tb.dut.merge203.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge203.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge203.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge203.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge203.a_rready [1] = 1     // a_rready
net:   tb.dut.merge203.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge203.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge203.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge203.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge203.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge203.a_bready [1] = 1     // a_bready
net:   tb.dut.merge203.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge203.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge203.a_awready [1] = 1     // a_awready
net:   tb.dut.merge203.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge203.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge203.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge203.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge203.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge203.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge203.a_arready [1] = 1     // a_arready
net:   tb.dut.merge203.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge203.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge203.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge203.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge203.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge203.axi_rd_4_merger
son:   tb.dut.merge203.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge203.axi_rd_4_merger
net:   tb.dut.merge203.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge203.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge203.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge203.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge203.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge203.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge203.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge203.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge203.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge203.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge203.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge203.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge203.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge203.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge203.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge203.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge203.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge203.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge203.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge203.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge203.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge203.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge203.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge203.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge203.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge203.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge203.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge203.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge203.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge203.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge203.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge203.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge203.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge203.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge203.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge203.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge203.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge203.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge203.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge203.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge203.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge203.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge203.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge203.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge203.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge203.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge203.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge203.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge203.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge203.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge203.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge203.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge203.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge203.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge203.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge203.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge203.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge203.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge203.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge203.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge203.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge203.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge203.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge203.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge203.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge203.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge203.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge203.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge203.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge203.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge203.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge203.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge203.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge203.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge203.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge203.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge203.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge203.axi_wr_4_merger
net:   tb.dut.merge203.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge203.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge203.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge203.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge203.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge203.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge203.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge203.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge203.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge203.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge203.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge203.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge203.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge203.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge203.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge203.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge203.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge203.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge203.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge203.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge203.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge203.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge203.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge203.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge203.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge203.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge203.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge203.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge203.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge203.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge203.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge203.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge203.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge203.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge203.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge203.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge203.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge203.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge203.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge203.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge203.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge203.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge203.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge203.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge203.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge203.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge203.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge203.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge203.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge203.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge203.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge203.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge203.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge203.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge203.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge203.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge203.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge203.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge203.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge203.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge203.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge203.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge203.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge203.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge203.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge203.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge203.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge203.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge203.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge203.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge203.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge203.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge203.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge203.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge203.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge203.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge203.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge203.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge203.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge203.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge203.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge203.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge203.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge203.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge203.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge203.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge203.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge203.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge203.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge203.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge203.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge203.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge203.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge203.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge203.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge203.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge203.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge203.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge203.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge203.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge203.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge203.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge203.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge203.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge203.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge203.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge203.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge203.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge203.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge203.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge203.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge203.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge203.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge203.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge203.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge203.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge203.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge203.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge203.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge203.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge203.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge203.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge203.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge203.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge203.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge203.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge203.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge203.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge203.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge203.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge203.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge204
net:   tb.dut.merge204.arready [1] = 0     // arready
net:   tb.dut.merge204.awready [1] = 0     // awready
net:   tb.dut.merge204.bid [4] = xxxx     // bid
net:   tb.dut.merge204.bresp [2] = xx     // bresp
net:   tb.dut.merge204.bvalid [1] = 0     // bvalid
net:   tb.dut.merge204.clk [1] = 1     // clk
net:   tb.dut.merge204.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge204.rid [4] = xxxx     // rid
net:   tb.dut.merge204.rlast [1] = x     // rlast
net:   tb.dut.merge204.rresp [2] = xx     // rresp
net:   tb.dut.merge204.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.rvalid [1] = 0     // rvalid
net:   tb.dut.merge204.wready [1] = x     // wready
net:   tb.dut.merge204.wvalid [1] = 0     // wvalid
net:   tb.dut.merge204.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge204.wlast [1] = 0     // wlast
net:   tb.dut.merge204.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge204.rready [1] = 1     // rready
net:   tb.dut.merge204.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge204.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge204.d_wready [1] = 1     // d_wready
net:   tb.dut.merge204.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge204.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge204.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge204.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge204.d_rready [1] = 1     // d_rready
net:   tb.dut.merge204.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge204.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge204.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge204.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge204.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge204.d_bready [1] = 1     // d_bready
net:   tb.dut.merge204.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge204.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge204.d_awready [1] = 1     // d_awready
net:   tb.dut.merge204.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge204.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge204.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge204.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge204.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge204.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge204.d_arready [1] = 1     // d_arready
net:   tb.dut.merge204.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge204.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge204.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge204.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge204.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge204.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge204.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge204.c_wready [1] = 1     // c_wready
net:   tb.dut.merge204.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge204.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge204.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge204.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge204.c_rready [1] = 1     // c_rready
net:   tb.dut.merge204.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge204.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge204.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge204.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge204.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge204.c_bready [1] = 1     // c_bready
net:   tb.dut.merge204.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge204.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge204.c_awready [1] = 1     // c_awready
net:   tb.dut.merge204.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge204.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge204.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge204.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge204.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge204.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge204.c_arready [1] = 1     // c_arready
net:   tb.dut.merge204.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge204.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge204.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge204.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge204.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge204.bready [1] = 1     // bready
net:   tb.dut.merge204.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge204.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge204.b_wready [1] = 1     // b_wready
net:   tb.dut.merge204.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge204.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge204.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge204.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge204.b_rready [1] = 1     // b_rready
net:   tb.dut.merge204.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge204.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge204.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge204.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge204.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge204.b_bready [1] = 1     // b_bready
net:   tb.dut.merge204.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge204.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge204.b_awready [1] = 1     // b_awready
net:   tb.dut.merge204.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge204.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge204.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge204.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge204.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge204.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge204.b_arready [1] = 1     // b_arready
net:   tb.dut.merge204.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge204.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge204.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge204.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge204.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge204.awvalid [1] = 0     // awvalid
net:   tb.dut.merge204.awlen [8] = 00000000     // awlen
net:   tb.dut.merge204.awid [4] = 0000     // awid
net:   tb.dut.merge204.awextras [8] = 00000000     // awextras
net:   tb.dut.merge204.awburst [2] = 00     // awburst
net:   tb.dut.merge204.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge204.arvalid [1] = 0     // arvalid
net:   tb.dut.merge204.arlen [8] = 00000000     // arlen
net:   tb.dut.merge204.arid [4] = 0000     // arid
net:   tb.dut.merge204.arextras [8] = 00000000     // arextras
net:   tb.dut.merge204.arburst [2] = 00     // arburst
net:   tb.dut.merge204.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge204.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge204.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge204.a_wready [1] = 1     // a_wready
net:   tb.dut.merge204.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge204.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge204.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge204.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge204.a_rready [1] = 1     // a_rready
net:   tb.dut.merge204.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge204.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge204.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge204.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge204.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge204.a_bready [1] = 1     // a_bready
net:   tb.dut.merge204.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge204.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge204.a_awready [1] = 1     // a_awready
net:   tb.dut.merge204.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge204.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge204.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge204.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge204.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge204.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge204.a_arready [1] = 1     // a_arready
net:   tb.dut.merge204.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge204.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge204.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge204.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge204.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge204.axi_rd_4_merger
son:   tb.dut.merge204.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge204.axi_rd_4_merger
net:   tb.dut.merge204.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge204.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge204.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge204.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge204.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge204.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge204.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge204.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge204.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge204.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge204.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge204.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge204.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge204.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge204.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge204.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge204.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge204.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge204.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge204.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge204.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge204.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge204.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge204.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge204.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge204.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge204.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge204.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge204.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge204.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge204.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge204.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge204.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge204.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge204.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge204.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge204.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge204.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge204.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge204.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge204.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge204.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge204.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge204.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge204.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge204.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge204.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge204.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge204.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge204.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge204.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge204.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge204.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge204.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge204.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge204.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge204.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge204.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge204.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge204.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge204.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge204.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge204.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge204.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge204.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge204.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge204.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge204.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge204.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge204.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge204.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge204.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge204.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge204.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge204.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge204.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge204.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge204.axi_wr_4_merger
net:   tb.dut.merge204.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge204.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge204.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge204.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge204.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge204.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge204.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge204.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge204.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge204.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge204.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge204.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge204.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge204.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge204.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge204.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge204.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge204.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge204.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge204.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge204.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge204.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge204.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge204.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge204.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge204.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge204.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge204.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge204.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge204.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge204.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge204.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge204.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge204.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge204.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge204.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge204.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge204.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge204.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge204.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge204.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge204.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge204.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge204.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge204.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge204.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge204.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge204.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge204.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge204.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge204.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge204.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge204.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge204.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge204.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge204.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge204.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge204.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge204.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge204.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge204.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge204.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge204.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge204.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge204.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge204.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge204.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge204.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge204.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge204.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge204.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge204.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge204.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge204.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge204.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge204.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge204.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge204.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge204.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge204.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge204.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge204.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge204.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge204.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge204.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge204.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge204.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge204.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge204.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge204.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge204.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge204.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge204.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge204.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge204.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge204.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge204.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge204.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge204.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge204.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge204.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge204.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge204.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge204.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge204.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge204.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge204.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge204.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge204.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge204.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge204.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge204.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge204.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge204.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge204.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge204.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge204.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge204.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge204.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge204.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge204.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge204.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge204.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge204.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge204.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge204.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge204.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge204.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge204.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge204.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge204.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge205
net:   tb.dut.merge205.arready [1] = 0     // arready
net:   tb.dut.merge205.awready [1] = 0     // awready
net:   tb.dut.merge205.bid [4] = xxxx     // bid
net:   tb.dut.merge205.bresp [2] = xx     // bresp
net:   tb.dut.merge205.bvalid [1] = 0     // bvalid
net:   tb.dut.merge205.clk [1] = 1     // clk
net:   tb.dut.merge205.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge205.rid [4] = xxxx     // rid
net:   tb.dut.merge205.rlast [1] = x     // rlast
net:   tb.dut.merge205.rresp [2] = xx     // rresp
net:   tb.dut.merge205.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.rvalid [1] = 0     // rvalid
net:   tb.dut.merge205.wready [1] = x     // wready
net:   tb.dut.merge205.wvalid [1] = 0     // wvalid
net:   tb.dut.merge205.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge205.wlast [1] = 0     // wlast
net:   tb.dut.merge205.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge205.rready [1] = 1     // rready
net:   tb.dut.merge205.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge205.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge205.d_wready [1] = 1     // d_wready
net:   tb.dut.merge205.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge205.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge205.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge205.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge205.d_rready [1] = 1     // d_rready
net:   tb.dut.merge205.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge205.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge205.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge205.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge205.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge205.d_bready [1] = 1     // d_bready
net:   tb.dut.merge205.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge205.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge205.d_awready [1] = 1     // d_awready
net:   tb.dut.merge205.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge205.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge205.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge205.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge205.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge205.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge205.d_arready [1] = 1     // d_arready
net:   tb.dut.merge205.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge205.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge205.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge205.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge205.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge205.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge205.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge205.c_wready [1] = 1     // c_wready
net:   tb.dut.merge205.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge205.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge205.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge205.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge205.c_rready [1] = 1     // c_rready
net:   tb.dut.merge205.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge205.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge205.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge205.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge205.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge205.c_bready [1] = 1     // c_bready
net:   tb.dut.merge205.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge205.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge205.c_awready [1] = 1     // c_awready
net:   tb.dut.merge205.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge205.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge205.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge205.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge205.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge205.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge205.c_arready [1] = 1     // c_arready
net:   tb.dut.merge205.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge205.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge205.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge205.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge205.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge205.bready [1] = 1     // bready
net:   tb.dut.merge205.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge205.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge205.b_wready [1] = 1     // b_wready
net:   tb.dut.merge205.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge205.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge205.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge205.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge205.b_rready [1] = 1     // b_rready
net:   tb.dut.merge205.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge205.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge205.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge205.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge205.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge205.b_bready [1] = 1     // b_bready
net:   tb.dut.merge205.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge205.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge205.b_awready [1] = 1     // b_awready
net:   tb.dut.merge205.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge205.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge205.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge205.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge205.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge205.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge205.b_arready [1] = 1     // b_arready
net:   tb.dut.merge205.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge205.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge205.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge205.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge205.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge205.awvalid [1] = 0     // awvalid
net:   tb.dut.merge205.awlen [8] = 00000000     // awlen
net:   tb.dut.merge205.awid [4] = 0000     // awid
net:   tb.dut.merge205.awextras [8] = 00000000     // awextras
net:   tb.dut.merge205.awburst [2] = 00     // awburst
net:   tb.dut.merge205.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge205.arvalid [1] = 0     // arvalid
net:   tb.dut.merge205.arlen [8] = 00000000     // arlen
net:   tb.dut.merge205.arid [4] = 0000     // arid
net:   tb.dut.merge205.arextras [8] = 00000000     // arextras
net:   tb.dut.merge205.arburst [2] = 00     // arburst
net:   tb.dut.merge205.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge205.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge205.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge205.a_wready [1] = 1     // a_wready
net:   tb.dut.merge205.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge205.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge205.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge205.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge205.a_rready [1] = 1     // a_rready
net:   tb.dut.merge205.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge205.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge205.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge205.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge205.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge205.a_bready [1] = 1     // a_bready
net:   tb.dut.merge205.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge205.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge205.a_awready [1] = 1     // a_awready
net:   tb.dut.merge205.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge205.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge205.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge205.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge205.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge205.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge205.a_arready [1] = 1     // a_arready
net:   tb.dut.merge205.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge205.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge205.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge205.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge205.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge205.axi_rd_4_merger
son:   tb.dut.merge205.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge205.axi_rd_4_merger
net:   tb.dut.merge205.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge205.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge205.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge205.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge205.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge205.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge205.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge205.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge205.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge205.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge205.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge205.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge205.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge205.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge205.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge205.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge205.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge205.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge205.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge205.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge205.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge205.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge205.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge205.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge205.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge205.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge205.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge205.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge205.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge205.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge205.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge205.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge205.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge205.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge205.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge205.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge205.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge205.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge205.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge205.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge205.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge205.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge205.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge205.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge205.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge205.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge205.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge205.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge205.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge205.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge205.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge205.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge205.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge205.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge205.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge205.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge205.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge205.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge205.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge205.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge205.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge205.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge205.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge205.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge205.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge205.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge205.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge205.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge205.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge205.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge205.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge205.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge205.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge205.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge205.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge205.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge205.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge205.axi_wr_4_merger
net:   tb.dut.merge205.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge205.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge205.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge205.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge205.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge205.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge205.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge205.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge205.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge205.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge205.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge205.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge205.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge205.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge205.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge205.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge205.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge205.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge205.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge205.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge205.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge205.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge205.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge205.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge205.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge205.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge205.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge205.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge205.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge205.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge205.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge205.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge205.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge205.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge205.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge205.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge205.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge205.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge205.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge205.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge205.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge205.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge205.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge205.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge205.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge205.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge205.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge205.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge205.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge205.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge205.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge205.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge205.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge205.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge205.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge205.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge205.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge205.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge205.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge205.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge205.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge205.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge205.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge205.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge205.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge205.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge205.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge205.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge205.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge205.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge205.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge205.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge205.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge205.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge205.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge205.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge205.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge205.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge205.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge205.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge205.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge205.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge205.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge205.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge205.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge205.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge205.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge205.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge205.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge205.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge205.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge205.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge205.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge205.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge205.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge205.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge205.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge205.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge205.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge205.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge205.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge205.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge205.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge205.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge205.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge205.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge205.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge205.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge205.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge205.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge205.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge205.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge205.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge205.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge205.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge205.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge205.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge205.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge205.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge205.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge205.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge205.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge205.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge205.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge205.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge205.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge205.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge205.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge205.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge205.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge205.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge206
net:   tb.dut.merge206.arready [1] = 0     // arready
net:   tb.dut.merge206.awready [1] = 0     // awready
net:   tb.dut.merge206.bid [4] = xxxx     // bid
net:   tb.dut.merge206.bresp [2] = xx     // bresp
net:   tb.dut.merge206.bvalid [1] = 0     // bvalid
net:   tb.dut.merge206.clk [1] = 1     // clk
net:   tb.dut.merge206.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge206.rid [4] = xxxx     // rid
net:   tb.dut.merge206.rlast [1] = x     // rlast
net:   tb.dut.merge206.rresp [2] = xx     // rresp
net:   tb.dut.merge206.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.rvalid [1] = 0     // rvalid
net:   tb.dut.merge206.wready [1] = x     // wready
net:   tb.dut.merge206.wvalid [1] = 0     // wvalid
net:   tb.dut.merge206.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge206.wlast [1] = 0     // wlast
net:   tb.dut.merge206.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge206.rready [1] = 1     // rready
net:   tb.dut.merge206.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge206.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge206.d_wready [1] = 1     // d_wready
net:   tb.dut.merge206.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge206.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge206.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge206.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge206.d_rready [1] = 1     // d_rready
net:   tb.dut.merge206.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge206.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge206.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge206.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge206.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge206.d_bready [1] = 1     // d_bready
net:   tb.dut.merge206.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge206.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge206.d_awready [1] = 1     // d_awready
net:   tb.dut.merge206.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge206.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge206.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge206.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge206.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge206.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge206.d_arready [1] = 1     // d_arready
net:   tb.dut.merge206.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge206.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge206.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge206.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge206.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge206.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge206.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge206.c_wready [1] = 1     // c_wready
net:   tb.dut.merge206.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge206.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge206.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge206.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge206.c_rready [1] = 1     // c_rready
net:   tb.dut.merge206.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge206.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge206.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge206.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge206.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge206.c_bready [1] = 1     // c_bready
net:   tb.dut.merge206.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge206.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge206.c_awready [1] = 1     // c_awready
net:   tb.dut.merge206.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge206.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge206.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge206.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge206.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge206.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge206.c_arready [1] = 1     // c_arready
net:   tb.dut.merge206.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge206.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge206.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge206.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge206.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge206.bready [1] = 1     // bready
net:   tb.dut.merge206.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge206.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge206.b_wready [1] = 1     // b_wready
net:   tb.dut.merge206.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge206.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge206.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge206.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge206.b_rready [1] = 1     // b_rready
net:   tb.dut.merge206.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge206.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge206.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge206.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge206.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge206.b_bready [1] = 1     // b_bready
net:   tb.dut.merge206.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge206.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge206.b_awready [1] = 1     // b_awready
net:   tb.dut.merge206.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge206.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge206.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge206.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge206.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge206.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge206.b_arready [1] = 1     // b_arready
net:   tb.dut.merge206.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge206.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge206.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge206.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge206.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge206.awvalid [1] = 0     // awvalid
net:   tb.dut.merge206.awlen [8] = 00000000     // awlen
net:   tb.dut.merge206.awid [4] = 0000     // awid
net:   tb.dut.merge206.awextras [8] = 00000000     // awextras
net:   tb.dut.merge206.awburst [2] = 00     // awburst
net:   tb.dut.merge206.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge206.arvalid [1] = 0     // arvalid
net:   tb.dut.merge206.arlen [8] = 00000000     // arlen
net:   tb.dut.merge206.arid [4] = 0000     // arid
net:   tb.dut.merge206.arextras [8] = 00000000     // arextras
net:   tb.dut.merge206.arburst [2] = 00     // arburst
net:   tb.dut.merge206.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge206.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge206.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge206.a_wready [1] = 1     // a_wready
net:   tb.dut.merge206.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge206.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge206.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge206.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge206.a_rready [1] = 1     // a_rready
net:   tb.dut.merge206.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge206.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge206.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge206.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge206.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge206.a_bready [1] = 1     // a_bready
net:   tb.dut.merge206.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge206.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge206.a_awready [1] = 1     // a_awready
net:   tb.dut.merge206.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge206.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge206.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge206.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge206.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge206.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge206.a_arready [1] = 1     // a_arready
net:   tb.dut.merge206.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge206.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge206.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge206.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge206.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge206.axi_rd_4_merger
son:   tb.dut.merge206.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge206.axi_rd_4_merger
net:   tb.dut.merge206.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge206.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge206.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge206.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge206.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge206.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge206.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge206.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge206.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge206.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge206.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge206.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge206.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge206.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge206.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge206.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge206.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge206.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge206.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge206.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge206.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge206.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge206.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge206.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge206.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge206.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge206.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge206.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge206.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge206.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge206.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge206.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge206.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge206.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge206.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge206.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge206.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge206.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge206.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge206.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge206.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge206.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge206.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge206.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge206.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge206.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge206.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge206.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge206.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge206.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge206.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge206.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge206.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge206.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge206.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge206.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge206.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge206.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge206.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge206.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge206.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge206.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge206.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge206.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge206.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge206.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge206.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge206.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge206.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge206.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge206.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge206.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge206.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge206.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge206.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge206.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge206.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge206.axi_wr_4_merger
net:   tb.dut.merge206.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge206.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge206.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge206.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge206.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge206.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge206.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge206.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge206.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge206.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge206.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge206.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge206.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge206.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge206.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge206.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge206.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge206.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge206.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge206.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge206.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge206.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge206.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge206.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge206.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge206.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge206.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge206.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge206.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge206.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge206.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge206.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge206.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge206.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge206.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge206.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge206.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge206.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge206.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge206.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge206.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge206.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge206.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge206.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge206.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge206.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge206.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge206.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge206.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge206.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge206.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge206.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge206.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge206.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge206.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge206.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge206.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge206.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge206.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge206.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge206.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge206.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge206.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge206.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge206.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge206.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge206.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge206.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge206.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge206.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge206.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge206.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge206.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge206.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge206.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge206.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge206.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge206.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge206.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge206.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge206.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge206.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge206.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge206.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge206.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge206.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge206.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge206.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge206.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge206.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge206.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge206.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge206.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge206.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge206.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge206.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge206.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge206.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge206.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge206.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge206.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge206.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge206.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge206.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge206.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge206.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge206.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge206.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge206.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge206.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge206.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge206.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge206.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge206.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge206.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge206.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge206.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge206.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge206.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge206.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge206.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge206.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge206.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge206.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge206.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge206.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge206.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge206.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge206.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge206.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge206.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge207
net:   tb.dut.merge207.arready [1] = 0     // arready
net:   tb.dut.merge207.awready [1] = 0     // awready
net:   tb.dut.merge207.bid [4] = xxxx     // bid
net:   tb.dut.merge207.bresp [2] = xx     // bresp
net:   tb.dut.merge207.bvalid [1] = 0     // bvalid
net:   tb.dut.merge207.clk [1] = 1     // clk
net:   tb.dut.merge207.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge207.rid [4] = xxxx     // rid
net:   tb.dut.merge207.rlast [1] = x     // rlast
net:   tb.dut.merge207.rresp [2] = xx     // rresp
net:   tb.dut.merge207.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.rvalid [1] = 0     // rvalid
net:   tb.dut.merge207.wready [1] = x     // wready
net:   tb.dut.merge207.wvalid [1] = 0     // wvalid
net:   tb.dut.merge207.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge207.wlast [1] = 0     // wlast
net:   tb.dut.merge207.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge207.rready [1] = 1     // rready
net:   tb.dut.merge207.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge207.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge207.d_wready [1] = 1     // d_wready
net:   tb.dut.merge207.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge207.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge207.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge207.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge207.d_rready [1] = 1     // d_rready
net:   tb.dut.merge207.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge207.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge207.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge207.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge207.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge207.d_bready [1] = 1     // d_bready
net:   tb.dut.merge207.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge207.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge207.d_awready [1] = 1     // d_awready
net:   tb.dut.merge207.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge207.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge207.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge207.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge207.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge207.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge207.d_arready [1] = 1     // d_arready
net:   tb.dut.merge207.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge207.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge207.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge207.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge207.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge207.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge207.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge207.c_wready [1] = 1     // c_wready
net:   tb.dut.merge207.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge207.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge207.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge207.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge207.c_rready [1] = 1     // c_rready
net:   tb.dut.merge207.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge207.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge207.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge207.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge207.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge207.c_bready [1] = 1     // c_bready
net:   tb.dut.merge207.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge207.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge207.c_awready [1] = 1     // c_awready
net:   tb.dut.merge207.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge207.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge207.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge207.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge207.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge207.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge207.c_arready [1] = 1     // c_arready
net:   tb.dut.merge207.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge207.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge207.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge207.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge207.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge207.bready [1] = 1     // bready
net:   tb.dut.merge207.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge207.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge207.b_wready [1] = 1     // b_wready
net:   tb.dut.merge207.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge207.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge207.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge207.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge207.b_rready [1] = 1     // b_rready
net:   tb.dut.merge207.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge207.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge207.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge207.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge207.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge207.b_bready [1] = 1     // b_bready
net:   tb.dut.merge207.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge207.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge207.b_awready [1] = 1     // b_awready
net:   tb.dut.merge207.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge207.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge207.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge207.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge207.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge207.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge207.b_arready [1] = 1     // b_arready
net:   tb.dut.merge207.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge207.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge207.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge207.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge207.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge207.awvalid [1] = 0     // awvalid
net:   tb.dut.merge207.awlen [8] = 00000000     // awlen
net:   tb.dut.merge207.awid [4] = 0000     // awid
net:   tb.dut.merge207.awextras [8] = 00000000     // awextras
net:   tb.dut.merge207.awburst [2] = 00     // awburst
net:   tb.dut.merge207.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge207.arvalid [1] = 0     // arvalid
net:   tb.dut.merge207.arlen [8] = 00000000     // arlen
net:   tb.dut.merge207.arid [4] = 0000     // arid
net:   tb.dut.merge207.arextras [8] = 00000000     // arextras
net:   tb.dut.merge207.arburst [2] = 00     // arburst
net:   tb.dut.merge207.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge207.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge207.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge207.a_wready [1] = 1     // a_wready
net:   tb.dut.merge207.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge207.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge207.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge207.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge207.a_rready [1] = 1     // a_rready
net:   tb.dut.merge207.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge207.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge207.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge207.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge207.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge207.a_bready [1] = 1     // a_bready
net:   tb.dut.merge207.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge207.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge207.a_awready [1] = 1     // a_awready
net:   tb.dut.merge207.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge207.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge207.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge207.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge207.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge207.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge207.a_arready [1] = 1     // a_arready
net:   tb.dut.merge207.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge207.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge207.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge207.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge207.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge207.axi_rd_4_merger
son:   tb.dut.merge207.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge207.axi_rd_4_merger
net:   tb.dut.merge207.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge207.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge207.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge207.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge207.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge207.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge207.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge207.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge207.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge207.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge207.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge207.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge207.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge207.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge207.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge207.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge207.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge207.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge207.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge207.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge207.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge207.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge207.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge207.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge207.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge207.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge207.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge207.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge207.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge207.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge207.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge207.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge207.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge207.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge207.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge207.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge207.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge207.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge207.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge207.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge207.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge207.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge207.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge207.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge207.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge207.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge207.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge207.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge207.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge207.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge207.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge207.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge207.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge207.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge207.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge207.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge207.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge207.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge207.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge207.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge207.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge207.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge207.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge207.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge207.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge207.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge207.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge207.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge207.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge207.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge207.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge207.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge207.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge207.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge207.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge207.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge207.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge207.axi_wr_4_merger
net:   tb.dut.merge207.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge207.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge207.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge207.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge207.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge207.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge207.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge207.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge207.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge207.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge207.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge207.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge207.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge207.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge207.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge207.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge207.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge207.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge207.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge207.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge207.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge207.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge207.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge207.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge207.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge207.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge207.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge207.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge207.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge207.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge207.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge207.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge207.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge207.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge207.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge207.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge207.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge207.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge207.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge207.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge207.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge207.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge207.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge207.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge207.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge207.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge207.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge207.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge207.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge207.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge207.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge207.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge207.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge207.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge207.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge207.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge207.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge207.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge207.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge207.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge207.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge207.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge207.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge207.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge207.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge207.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge207.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge207.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge207.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge207.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge207.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge207.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge207.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge207.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge207.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge207.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge207.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge207.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge207.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge207.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge207.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge207.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge207.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge207.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge207.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge207.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge207.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge207.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge207.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge207.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge207.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge207.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge207.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge207.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge207.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge207.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge207.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge207.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge207.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge207.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge207.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge207.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge207.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge207.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge207.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge207.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge207.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge207.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge207.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge207.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge207.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge207.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge207.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge207.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge207.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge207.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge207.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge207.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge207.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge207.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge207.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge207.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge207.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge207.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge207.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge207.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge207.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge207.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge207.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge207.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge207.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge208
net:   tb.dut.merge208.arready [1] = 0     // arready
net:   tb.dut.merge208.awready [1] = 0     // awready
net:   tb.dut.merge208.bid [4] = xxxx     // bid
net:   tb.dut.merge208.bresp [2] = xx     // bresp
net:   tb.dut.merge208.bvalid [1] = 0     // bvalid
net:   tb.dut.merge208.clk [1] = 1     // clk
net:   tb.dut.merge208.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge208.rid [4] = xxxx     // rid
net:   tb.dut.merge208.rlast [1] = x     // rlast
net:   tb.dut.merge208.rresp [2] = xx     // rresp
net:   tb.dut.merge208.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.rvalid [1] = 0     // rvalid
net:   tb.dut.merge208.wready [1] = x     // wready
net:   tb.dut.merge208.wvalid [1] = 0     // wvalid
net:   tb.dut.merge208.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge208.wlast [1] = 0     // wlast
net:   tb.dut.merge208.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge208.rready [1] = 1     // rready
net:   tb.dut.merge208.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge208.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge208.d_wready [1] = 1     // d_wready
net:   tb.dut.merge208.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge208.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge208.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge208.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge208.d_rready [1] = 1     // d_rready
net:   tb.dut.merge208.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge208.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge208.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge208.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge208.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge208.d_bready [1] = 1     // d_bready
net:   tb.dut.merge208.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge208.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge208.d_awready [1] = 1     // d_awready
net:   tb.dut.merge208.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge208.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge208.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge208.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge208.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge208.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge208.d_arready [1] = 1     // d_arready
net:   tb.dut.merge208.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge208.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge208.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge208.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge208.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge208.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge208.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge208.c_wready [1] = 1     // c_wready
net:   tb.dut.merge208.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge208.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge208.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge208.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge208.c_rready [1] = 1     // c_rready
net:   tb.dut.merge208.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge208.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge208.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge208.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge208.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge208.c_bready [1] = 1     // c_bready
net:   tb.dut.merge208.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge208.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge208.c_awready [1] = 1     // c_awready
net:   tb.dut.merge208.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge208.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge208.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge208.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge208.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge208.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge208.c_arready [1] = 1     // c_arready
net:   tb.dut.merge208.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge208.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge208.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge208.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge208.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge208.bready [1] = 1     // bready
net:   tb.dut.merge208.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge208.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge208.b_wready [1] = 1     // b_wready
net:   tb.dut.merge208.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge208.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge208.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge208.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge208.b_rready [1] = 1     // b_rready
net:   tb.dut.merge208.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge208.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge208.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge208.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge208.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge208.b_bready [1] = 1     // b_bready
net:   tb.dut.merge208.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge208.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge208.b_awready [1] = 1     // b_awready
net:   tb.dut.merge208.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge208.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge208.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge208.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge208.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge208.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge208.b_arready [1] = 1     // b_arready
net:   tb.dut.merge208.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge208.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge208.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge208.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge208.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge208.awvalid [1] = 0     // awvalid
net:   tb.dut.merge208.awlen [8] = 00000000     // awlen
net:   tb.dut.merge208.awid [4] = 0000     // awid
net:   tb.dut.merge208.awextras [8] = 00000000     // awextras
net:   tb.dut.merge208.awburst [2] = 00     // awburst
net:   tb.dut.merge208.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge208.arvalid [1] = 0     // arvalid
net:   tb.dut.merge208.arlen [8] = 00000000     // arlen
net:   tb.dut.merge208.arid [4] = 0000     // arid
net:   tb.dut.merge208.arextras [8] = 00000000     // arextras
net:   tb.dut.merge208.arburst [2] = 00     // arburst
net:   tb.dut.merge208.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge208.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge208.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge208.a_wready [1] = 1     // a_wready
net:   tb.dut.merge208.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge208.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge208.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge208.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge208.a_rready [1] = 1     // a_rready
net:   tb.dut.merge208.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge208.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge208.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge208.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge208.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge208.a_bready [1] = 1     // a_bready
net:   tb.dut.merge208.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge208.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge208.a_awready [1] = 1     // a_awready
net:   tb.dut.merge208.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge208.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge208.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge208.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge208.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge208.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge208.a_arready [1] = 1     // a_arready
net:   tb.dut.merge208.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge208.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge208.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge208.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge208.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge208.axi_rd_4_merger
son:   tb.dut.merge208.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge208.axi_rd_4_merger
net:   tb.dut.merge208.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge208.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge208.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge208.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge208.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge208.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge208.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge208.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge208.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge208.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge208.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge208.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge208.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge208.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge208.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge208.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge208.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge208.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge208.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge208.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge208.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge208.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge208.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge208.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge208.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge208.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge208.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge208.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge208.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge208.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge208.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge208.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge208.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge208.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge208.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge208.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge208.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge208.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge208.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge208.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge208.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge208.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge208.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge208.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge208.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge208.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge208.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge208.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge208.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge208.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge208.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge208.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge208.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge208.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge208.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge208.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge208.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge208.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge208.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge208.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge208.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge208.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge208.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge208.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge208.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge208.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge208.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge208.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge208.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge208.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge208.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge208.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge208.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge208.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge208.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge208.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge208.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge208.axi_wr_4_merger
net:   tb.dut.merge208.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge208.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge208.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge208.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge208.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge208.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge208.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge208.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge208.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge208.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge208.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge208.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge208.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge208.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge208.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge208.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge208.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge208.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge208.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge208.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge208.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge208.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge208.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge208.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge208.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge208.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge208.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge208.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge208.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge208.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge208.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge208.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge208.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge208.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge208.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge208.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge208.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge208.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge208.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge208.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge208.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge208.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge208.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge208.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge208.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge208.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge208.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge208.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge208.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge208.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge208.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge208.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge208.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge208.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge208.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge208.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge208.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge208.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge208.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge208.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge208.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge208.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge208.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge208.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge208.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge208.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge208.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge208.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge208.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge208.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge208.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge208.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge208.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge208.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge208.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge208.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge208.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge208.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge208.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge208.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge208.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge208.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge208.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge208.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge208.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge208.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge208.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge208.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge208.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge208.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge208.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge208.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge208.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge208.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge208.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge208.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge208.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge208.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge208.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge208.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge208.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge208.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge208.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge208.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge208.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge208.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge208.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge208.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge208.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge208.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge208.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge208.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge208.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge208.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge208.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge208.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge208.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge208.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge208.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge208.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge208.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge208.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge208.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge208.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge208.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge208.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge208.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge208.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge208.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge208.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge208.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge209
net:   tb.dut.merge209.arready [1] = 0     // arready
net:   tb.dut.merge209.awready [1] = 0     // awready
net:   tb.dut.merge209.bid [4] = xxxx     // bid
net:   tb.dut.merge209.bresp [2] = xx     // bresp
net:   tb.dut.merge209.bvalid [1] = 0     // bvalid
net:   tb.dut.merge209.clk [1] = 1     // clk
net:   tb.dut.merge209.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge209.rid [4] = xxxx     // rid
net:   tb.dut.merge209.rlast [1] = x     // rlast
net:   tb.dut.merge209.rresp [2] = xx     // rresp
net:   tb.dut.merge209.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.rvalid [1] = 0     // rvalid
net:   tb.dut.merge209.wready [1] = x     // wready
net:   tb.dut.merge209.wvalid [1] = 0     // wvalid
net:   tb.dut.merge209.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge209.wlast [1] = 0     // wlast
net:   tb.dut.merge209.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge209.rready [1] = 1     // rready
net:   tb.dut.merge209.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge209.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge209.d_wready [1] = 1     // d_wready
net:   tb.dut.merge209.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge209.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge209.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge209.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge209.d_rready [1] = 1     // d_rready
net:   tb.dut.merge209.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge209.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge209.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge209.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge209.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge209.d_bready [1] = 1     // d_bready
net:   tb.dut.merge209.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge209.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge209.d_awready [1] = 1     // d_awready
net:   tb.dut.merge209.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge209.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge209.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge209.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge209.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge209.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge209.d_arready [1] = 1     // d_arready
net:   tb.dut.merge209.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge209.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge209.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge209.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge209.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge209.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge209.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge209.c_wready [1] = 1     // c_wready
net:   tb.dut.merge209.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge209.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge209.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge209.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge209.c_rready [1] = 1     // c_rready
net:   tb.dut.merge209.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge209.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge209.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge209.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge209.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge209.c_bready [1] = 1     // c_bready
net:   tb.dut.merge209.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge209.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge209.c_awready [1] = 1     // c_awready
net:   tb.dut.merge209.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge209.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge209.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge209.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge209.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge209.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge209.c_arready [1] = 1     // c_arready
net:   tb.dut.merge209.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge209.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge209.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge209.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge209.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge209.bready [1] = 1     // bready
net:   tb.dut.merge209.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge209.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge209.b_wready [1] = 1     // b_wready
net:   tb.dut.merge209.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge209.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge209.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge209.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge209.b_rready [1] = 1     // b_rready
net:   tb.dut.merge209.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge209.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge209.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge209.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge209.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge209.b_bready [1] = 1     // b_bready
net:   tb.dut.merge209.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge209.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge209.b_awready [1] = 1     // b_awready
net:   tb.dut.merge209.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge209.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge209.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge209.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge209.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge209.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge209.b_arready [1] = 1     // b_arready
net:   tb.dut.merge209.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge209.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge209.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge209.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge209.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge209.awvalid [1] = 0     // awvalid
net:   tb.dut.merge209.awlen [8] = 00000000     // awlen
net:   tb.dut.merge209.awid [4] = 0000     // awid
net:   tb.dut.merge209.awextras [8] = 00000000     // awextras
net:   tb.dut.merge209.awburst [2] = 00     // awburst
net:   tb.dut.merge209.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge209.arvalid [1] = 0     // arvalid
net:   tb.dut.merge209.arlen [8] = 00000000     // arlen
net:   tb.dut.merge209.arid [4] = 0000     // arid
net:   tb.dut.merge209.arextras [8] = 00000000     // arextras
net:   tb.dut.merge209.arburst [2] = 00     // arburst
net:   tb.dut.merge209.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge209.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge209.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge209.a_wready [1] = 1     // a_wready
net:   tb.dut.merge209.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge209.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge209.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge209.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge209.a_rready [1] = 1     // a_rready
net:   tb.dut.merge209.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge209.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge209.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge209.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge209.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge209.a_bready [1] = 1     // a_bready
net:   tb.dut.merge209.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge209.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge209.a_awready [1] = 1     // a_awready
net:   tb.dut.merge209.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge209.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge209.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge209.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge209.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge209.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge209.a_arready [1] = 1     // a_arready
net:   tb.dut.merge209.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge209.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge209.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge209.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge209.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge209.axi_rd_4_merger
son:   tb.dut.merge209.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge209.axi_rd_4_merger
net:   tb.dut.merge209.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge209.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge209.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge209.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge209.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge209.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge209.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge209.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge209.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge209.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge209.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge209.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge209.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge209.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge209.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge209.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge209.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge209.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge209.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge209.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge209.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge209.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge209.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge209.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge209.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge209.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge209.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge209.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge209.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge209.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge209.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge209.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge209.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge209.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge209.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge209.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge209.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge209.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge209.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge209.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge209.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge209.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge209.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge209.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge209.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge209.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge209.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge209.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge209.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge209.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge209.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge209.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge209.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge209.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge209.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge209.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge209.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge209.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge209.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge209.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge209.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge209.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge209.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge209.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge209.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge209.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge209.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge209.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge209.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge209.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge209.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge209.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge209.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge209.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge209.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge209.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge209.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge209.axi_wr_4_merger
net:   tb.dut.merge209.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge209.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge209.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge209.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge209.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge209.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge209.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge209.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge209.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge209.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge209.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge209.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge209.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge209.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge209.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge209.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge209.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge209.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge209.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge209.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge209.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge209.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge209.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge209.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge209.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge209.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge209.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge209.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge209.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge209.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge209.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge209.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge209.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge209.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge209.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge209.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge209.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge209.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge209.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge209.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge209.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge209.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge209.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge209.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge209.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge209.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge209.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge209.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge209.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge209.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge209.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge209.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge209.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge209.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge209.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge209.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge209.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge209.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge209.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge209.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge209.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge209.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge209.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge209.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge209.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge209.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge209.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge209.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge209.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge209.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge209.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge209.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge209.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge209.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge209.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge209.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge209.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge209.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge209.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge209.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge209.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge209.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge209.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge209.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge209.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge209.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge209.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge209.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge209.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge209.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge209.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge209.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge209.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge209.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge209.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge209.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge209.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge209.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge209.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge209.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge209.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge209.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge209.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge209.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge209.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge209.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge209.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge209.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge209.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge209.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge209.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge209.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge209.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge209.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge209.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge209.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge209.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge209.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge209.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge209.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge209.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge209.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge209.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge209.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge209.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge209.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge209.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge209.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge209.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge209.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge209.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge210
net:   tb.dut.merge210.arready [1] = 0     // arready
net:   tb.dut.merge210.awready [1] = 0     // awready
net:   tb.dut.merge210.bid [4] = xxxx     // bid
net:   tb.dut.merge210.bresp [2] = xx     // bresp
net:   tb.dut.merge210.bvalid [1] = 0     // bvalid
net:   tb.dut.merge210.clk [1] = 1     // clk
net:   tb.dut.merge210.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge210.rid [4] = xxxx     // rid
net:   tb.dut.merge210.rlast [1] = x     // rlast
net:   tb.dut.merge210.rresp [2] = xx     // rresp
net:   tb.dut.merge210.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.rvalid [1] = 0     // rvalid
net:   tb.dut.merge210.wready [1] = x     // wready
net:   tb.dut.merge210.wvalid [1] = 0     // wvalid
net:   tb.dut.merge210.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge210.wlast [1] = 0     // wlast
net:   tb.dut.merge210.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge210.rready [1] = 1     // rready
net:   tb.dut.merge210.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge210.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge210.d_wready [1] = 1     // d_wready
net:   tb.dut.merge210.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge210.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge210.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge210.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge210.d_rready [1] = 1     // d_rready
net:   tb.dut.merge210.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge210.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge210.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge210.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge210.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge210.d_bready [1] = 1     // d_bready
net:   tb.dut.merge210.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge210.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge210.d_awready [1] = 1     // d_awready
net:   tb.dut.merge210.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge210.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge210.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge210.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge210.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge210.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge210.d_arready [1] = 1     // d_arready
net:   tb.dut.merge210.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge210.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge210.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge210.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge210.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge210.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge210.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge210.c_wready [1] = 1     // c_wready
net:   tb.dut.merge210.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge210.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge210.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge210.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge210.c_rready [1] = 1     // c_rready
net:   tb.dut.merge210.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge210.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge210.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge210.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge210.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge210.c_bready [1] = 1     // c_bready
net:   tb.dut.merge210.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge210.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge210.c_awready [1] = 1     // c_awready
net:   tb.dut.merge210.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge210.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge210.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge210.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge210.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge210.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge210.c_arready [1] = 1     // c_arready
net:   tb.dut.merge210.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge210.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge210.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge210.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge210.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge210.bready [1] = 1     // bready
net:   tb.dut.merge210.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge210.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge210.b_wready [1] = 1     // b_wready
net:   tb.dut.merge210.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge210.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge210.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge210.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge210.b_rready [1] = 1     // b_rready
net:   tb.dut.merge210.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge210.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge210.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge210.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge210.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge210.b_bready [1] = 1     // b_bready
net:   tb.dut.merge210.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge210.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge210.b_awready [1] = 1     // b_awready
net:   tb.dut.merge210.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge210.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge210.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge210.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge210.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge210.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge210.b_arready [1] = 1     // b_arready
net:   tb.dut.merge210.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge210.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge210.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge210.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge210.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge210.awvalid [1] = 0     // awvalid
net:   tb.dut.merge210.awlen [8] = 00000000     // awlen
net:   tb.dut.merge210.awid [4] = 0000     // awid
net:   tb.dut.merge210.awextras [8] = 00000000     // awextras
net:   tb.dut.merge210.awburst [2] = 00     // awburst
net:   tb.dut.merge210.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge210.arvalid [1] = 0     // arvalid
net:   tb.dut.merge210.arlen [8] = 00000000     // arlen
net:   tb.dut.merge210.arid [4] = 0000     // arid
net:   tb.dut.merge210.arextras [8] = 00000000     // arextras
net:   tb.dut.merge210.arburst [2] = 00     // arburst
net:   tb.dut.merge210.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge210.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge210.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge210.a_wready [1] = 1     // a_wready
net:   tb.dut.merge210.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge210.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge210.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge210.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge210.a_rready [1] = 1     // a_rready
net:   tb.dut.merge210.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge210.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge210.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge210.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge210.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge210.a_bready [1] = 1     // a_bready
net:   tb.dut.merge210.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge210.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge210.a_awready [1] = 1     // a_awready
net:   tb.dut.merge210.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge210.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge210.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge210.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge210.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge210.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge210.a_arready [1] = 1     // a_arready
net:   tb.dut.merge210.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge210.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge210.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge210.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge210.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge210.axi_rd_4_merger
son:   tb.dut.merge210.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge210.axi_rd_4_merger
net:   tb.dut.merge210.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge210.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge210.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge210.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge210.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge210.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge210.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge210.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge210.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge210.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge210.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge210.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge210.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge210.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge210.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge210.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge210.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge210.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge210.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge210.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge210.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge210.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge210.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge210.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge210.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge210.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge210.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge210.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge210.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge210.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge210.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge210.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge210.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge210.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge210.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge210.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge210.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge210.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge210.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge210.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge210.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge210.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge210.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge210.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge210.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge210.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge210.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge210.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge210.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge210.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge210.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge210.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge210.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge210.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge210.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge210.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge210.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge210.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge210.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge210.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge210.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge210.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge210.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge210.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge210.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge210.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge210.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge210.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge210.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge210.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge210.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge210.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge210.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge210.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge210.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge210.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge210.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge210.axi_wr_4_merger
net:   tb.dut.merge210.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge210.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge210.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge210.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge210.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge210.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge210.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge210.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge210.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge210.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge210.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge210.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge210.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge210.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge210.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge210.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge210.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge210.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge210.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge210.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge210.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge210.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge210.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge210.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge210.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge210.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge210.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge210.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge210.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge210.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge210.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge210.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge210.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge210.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge210.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge210.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge210.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge210.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge210.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge210.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge210.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge210.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge210.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge210.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge210.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge210.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge210.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge210.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge210.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge210.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge210.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge210.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge210.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge210.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge210.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge210.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge210.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge210.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge210.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge210.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge210.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge210.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge210.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge210.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge210.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge210.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge210.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge210.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge210.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge210.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge210.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge210.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge210.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge210.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge210.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge210.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge210.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge210.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge210.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge210.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge210.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge210.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge210.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge210.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge210.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge210.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge210.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge210.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge210.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge210.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge210.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge210.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge210.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge210.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge210.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge210.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge210.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge210.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge210.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge210.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge210.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge210.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge210.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge210.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge210.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge210.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge210.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge210.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge210.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge210.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge210.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge210.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge210.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge210.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge210.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge210.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge210.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge210.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge210.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge210.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge210.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge210.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge210.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge210.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge210.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge210.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge210.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge210.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge210.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge210.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge210.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge211
net:   tb.dut.merge211.arready [1] = 0     // arready
net:   tb.dut.merge211.awready [1] = 0     // awready
net:   tb.dut.merge211.bid [4] = xxxx     // bid
net:   tb.dut.merge211.bresp [2] = xx     // bresp
net:   tb.dut.merge211.bvalid [1] = 0     // bvalid
net:   tb.dut.merge211.clk [1] = 1     // clk
net:   tb.dut.merge211.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge211.rid [4] = xxxx     // rid
net:   tb.dut.merge211.rlast [1] = x     // rlast
net:   tb.dut.merge211.rresp [2] = xx     // rresp
net:   tb.dut.merge211.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.rvalid [1] = 0     // rvalid
net:   tb.dut.merge211.wready [1] = x     // wready
net:   tb.dut.merge211.wvalid [1] = 0     // wvalid
net:   tb.dut.merge211.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge211.wlast [1] = 0     // wlast
net:   tb.dut.merge211.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge211.rready [1] = 1     // rready
net:   tb.dut.merge211.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge211.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge211.d_wready [1] = 1     // d_wready
net:   tb.dut.merge211.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge211.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge211.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge211.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge211.d_rready [1] = 1     // d_rready
net:   tb.dut.merge211.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge211.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge211.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge211.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge211.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge211.d_bready [1] = 1     // d_bready
net:   tb.dut.merge211.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge211.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge211.d_awready [1] = 1     // d_awready
net:   tb.dut.merge211.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge211.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge211.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge211.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge211.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge211.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge211.d_arready [1] = 1     // d_arready
net:   tb.dut.merge211.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge211.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge211.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge211.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge211.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge211.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge211.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge211.c_wready [1] = 1     // c_wready
net:   tb.dut.merge211.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge211.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge211.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge211.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge211.c_rready [1] = 1     // c_rready
net:   tb.dut.merge211.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge211.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge211.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge211.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge211.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge211.c_bready [1] = 1     // c_bready
net:   tb.dut.merge211.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge211.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge211.c_awready [1] = 1     // c_awready
net:   tb.dut.merge211.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge211.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge211.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge211.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge211.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge211.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge211.c_arready [1] = 1     // c_arready
net:   tb.dut.merge211.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge211.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge211.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge211.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge211.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge211.bready [1] = 1     // bready
net:   tb.dut.merge211.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge211.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge211.b_wready [1] = 1     // b_wready
net:   tb.dut.merge211.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge211.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge211.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge211.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge211.b_rready [1] = 1     // b_rready
net:   tb.dut.merge211.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge211.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge211.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge211.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge211.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge211.b_bready [1] = 1     // b_bready
net:   tb.dut.merge211.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge211.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge211.b_awready [1] = 1     // b_awready
net:   tb.dut.merge211.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge211.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge211.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge211.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge211.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge211.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge211.b_arready [1] = 1     // b_arready
net:   tb.dut.merge211.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge211.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge211.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge211.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge211.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge211.awvalid [1] = 0     // awvalid
net:   tb.dut.merge211.awlen [8] = 00000000     // awlen
net:   tb.dut.merge211.awid [4] = 0000     // awid
net:   tb.dut.merge211.awextras [8] = 00000000     // awextras
net:   tb.dut.merge211.awburst [2] = 00     // awburst
net:   tb.dut.merge211.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge211.arvalid [1] = 0     // arvalid
net:   tb.dut.merge211.arlen [8] = 00000000     // arlen
net:   tb.dut.merge211.arid [4] = 0000     // arid
net:   tb.dut.merge211.arextras [8] = 00000000     // arextras
net:   tb.dut.merge211.arburst [2] = 00     // arburst
net:   tb.dut.merge211.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge211.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge211.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge211.a_wready [1] = 1     // a_wready
net:   tb.dut.merge211.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge211.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge211.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge211.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge211.a_rready [1] = 1     // a_rready
net:   tb.dut.merge211.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge211.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge211.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge211.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge211.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge211.a_bready [1] = 1     // a_bready
net:   tb.dut.merge211.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge211.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge211.a_awready [1] = 1     // a_awready
net:   tb.dut.merge211.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge211.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge211.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge211.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge211.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge211.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge211.a_arready [1] = 1     // a_arready
net:   tb.dut.merge211.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge211.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge211.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge211.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge211.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge211.axi_rd_4_merger
son:   tb.dut.merge211.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge211.axi_rd_4_merger
net:   tb.dut.merge211.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge211.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge211.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge211.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge211.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge211.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge211.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge211.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge211.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge211.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge211.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge211.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge211.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge211.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge211.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge211.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge211.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge211.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge211.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge211.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge211.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge211.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge211.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge211.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge211.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge211.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge211.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge211.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge211.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge211.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge211.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge211.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge211.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge211.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge211.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge211.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge211.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge211.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge211.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge211.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge211.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge211.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge211.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge211.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge211.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge211.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge211.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge211.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge211.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge211.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge211.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge211.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge211.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge211.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge211.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge211.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge211.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge211.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge211.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge211.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge211.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge211.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge211.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge211.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge211.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge211.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge211.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge211.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge211.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge211.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge211.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge211.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge211.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge211.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge211.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge211.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge211.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge211.axi_wr_4_merger
net:   tb.dut.merge211.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge211.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge211.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge211.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge211.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge211.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge211.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge211.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge211.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge211.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge211.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge211.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge211.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge211.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge211.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge211.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge211.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge211.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge211.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge211.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge211.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge211.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge211.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge211.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge211.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge211.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge211.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge211.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge211.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge211.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge211.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge211.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge211.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge211.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge211.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge211.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge211.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge211.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge211.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge211.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge211.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge211.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge211.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge211.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge211.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge211.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge211.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge211.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge211.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge211.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge211.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge211.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge211.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge211.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge211.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge211.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge211.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge211.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge211.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge211.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge211.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge211.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge211.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge211.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge211.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge211.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge211.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge211.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge211.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge211.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge211.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge211.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge211.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge211.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge211.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge211.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge211.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge211.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge211.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge211.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge211.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge211.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge211.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge211.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge211.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge211.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge211.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge211.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge211.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge211.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge211.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge211.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge211.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge211.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge211.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge211.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge211.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge211.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge211.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge211.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge211.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge211.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge211.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge211.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge211.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge211.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge211.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge211.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge211.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge211.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge211.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge211.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge211.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge211.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge211.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge211.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge211.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge211.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge211.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge211.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge211.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge211.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge211.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge211.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge211.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge211.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge211.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge211.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge211.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge211.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge211.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge212
net:   tb.dut.merge212.arready [1] = 0     // arready
net:   tb.dut.merge212.awready [1] = 0     // awready
net:   tb.dut.merge212.bid [4] = xxxx     // bid
net:   tb.dut.merge212.bresp [2] = xx     // bresp
net:   tb.dut.merge212.bvalid [1] = 0     // bvalid
net:   tb.dut.merge212.clk [1] = 1     // clk
net:   tb.dut.merge212.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge212.rid [4] = xxxx     // rid
net:   tb.dut.merge212.rlast [1] = x     // rlast
net:   tb.dut.merge212.rresp [2] = xx     // rresp
net:   tb.dut.merge212.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.rvalid [1] = 0     // rvalid
net:   tb.dut.merge212.wready [1] = x     // wready
net:   tb.dut.merge212.wvalid [1] = 0     // wvalid
net:   tb.dut.merge212.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge212.wlast [1] = 0     // wlast
net:   tb.dut.merge212.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge212.rready [1] = 1     // rready
net:   tb.dut.merge212.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge212.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge212.d_wready [1] = 1     // d_wready
net:   tb.dut.merge212.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge212.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge212.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge212.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge212.d_rready [1] = 1     // d_rready
net:   tb.dut.merge212.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge212.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge212.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge212.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge212.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge212.d_bready [1] = 1     // d_bready
net:   tb.dut.merge212.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge212.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge212.d_awready [1] = 1     // d_awready
net:   tb.dut.merge212.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge212.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge212.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge212.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge212.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge212.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge212.d_arready [1] = 1     // d_arready
net:   tb.dut.merge212.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge212.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge212.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge212.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge212.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge212.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge212.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge212.c_wready [1] = 1     // c_wready
net:   tb.dut.merge212.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge212.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge212.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge212.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge212.c_rready [1] = 1     // c_rready
net:   tb.dut.merge212.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge212.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge212.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge212.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge212.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge212.c_bready [1] = 1     // c_bready
net:   tb.dut.merge212.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge212.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge212.c_awready [1] = 1     // c_awready
net:   tb.dut.merge212.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge212.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge212.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge212.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge212.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge212.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge212.c_arready [1] = 1     // c_arready
net:   tb.dut.merge212.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge212.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge212.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge212.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge212.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge212.bready [1] = 1     // bready
net:   tb.dut.merge212.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge212.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge212.b_wready [1] = 1     // b_wready
net:   tb.dut.merge212.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge212.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge212.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge212.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge212.b_rready [1] = 1     // b_rready
net:   tb.dut.merge212.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge212.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge212.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge212.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge212.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge212.b_bready [1] = 1     // b_bready
net:   tb.dut.merge212.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge212.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge212.b_awready [1] = 1     // b_awready
net:   tb.dut.merge212.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge212.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge212.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge212.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge212.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge212.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge212.b_arready [1] = 1     // b_arready
net:   tb.dut.merge212.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge212.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge212.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge212.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge212.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge212.awvalid [1] = 0     // awvalid
net:   tb.dut.merge212.awlen [8] = 00000000     // awlen
net:   tb.dut.merge212.awid [4] = 0000     // awid
net:   tb.dut.merge212.awextras [8] = 00000000     // awextras
net:   tb.dut.merge212.awburst [2] = 00     // awburst
net:   tb.dut.merge212.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge212.arvalid [1] = 0     // arvalid
net:   tb.dut.merge212.arlen [8] = 00000000     // arlen
net:   tb.dut.merge212.arid [4] = 0000     // arid
net:   tb.dut.merge212.arextras [8] = 00000000     // arextras
net:   tb.dut.merge212.arburst [2] = 00     // arburst
net:   tb.dut.merge212.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge212.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge212.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge212.a_wready [1] = 1     // a_wready
net:   tb.dut.merge212.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge212.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge212.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge212.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge212.a_rready [1] = 1     // a_rready
net:   tb.dut.merge212.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge212.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge212.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge212.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge212.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge212.a_bready [1] = 1     // a_bready
net:   tb.dut.merge212.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge212.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge212.a_awready [1] = 1     // a_awready
net:   tb.dut.merge212.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge212.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge212.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge212.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge212.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge212.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge212.a_arready [1] = 1     // a_arready
net:   tb.dut.merge212.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge212.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge212.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge212.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge212.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge212.axi_rd_4_merger
son:   tb.dut.merge212.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge212.axi_rd_4_merger
net:   tb.dut.merge212.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge212.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge212.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge212.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge212.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge212.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge212.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge212.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge212.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge212.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge212.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge212.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge212.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge212.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge212.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge212.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge212.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge212.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge212.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge212.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge212.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge212.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge212.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge212.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge212.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge212.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge212.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge212.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge212.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge212.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge212.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge212.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge212.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge212.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge212.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge212.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge212.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge212.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge212.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge212.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge212.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge212.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge212.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge212.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge212.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge212.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge212.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge212.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge212.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge212.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge212.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge212.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge212.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge212.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge212.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge212.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge212.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge212.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge212.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge212.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge212.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge212.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge212.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge212.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge212.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge212.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge212.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge212.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge212.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge212.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge212.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge212.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge212.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge212.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge212.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge212.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge212.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge212.axi_wr_4_merger
net:   tb.dut.merge212.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge212.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge212.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge212.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge212.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge212.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge212.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge212.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge212.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge212.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge212.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge212.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge212.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge212.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge212.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge212.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge212.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge212.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge212.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge212.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge212.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge212.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge212.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge212.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge212.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge212.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge212.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge212.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge212.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge212.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge212.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge212.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge212.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge212.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge212.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge212.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge212.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge212.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge212.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge212.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge212.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge212.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge212.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge212.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge212.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge212.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge212.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge212.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge212.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge212.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge212.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge212.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge212.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge212.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge212.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge212.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge212.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge212.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge212.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge212.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge212.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge212.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge212.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge212.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge212.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge212.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge212.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge212.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge212.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge212.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge212.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge212.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge212.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge212.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge212.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge212.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge212.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge212.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge212.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge212.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge212.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge212.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge212.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge212.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge212.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge212.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge212.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge212.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge212.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge212.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge212.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge212.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge212.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge212.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge212.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge212.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge212.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge212.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge212.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge212.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge212.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge212.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge212.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge212.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge212.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge212.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge212.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge212.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge212.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge212.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge212.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge212.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge212.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge212.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge212.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge212.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge212.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge212.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge212.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge212.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge212.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge212.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge212.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge212.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge212.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge212.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge212.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge212.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge212.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge212.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge212.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge213
net:   tb.dut.merge213.arready [1] = 0     // arready
net:   tb.dut.merge213.awready [1] = 0     // awready
net:   tb.dut.merge213.bid [4] = xxxx     // bid
net:   tb.dut.merge213.bresp [2] = xx     // bresp
net:   tb.dut.merge213.bvalid [1] = 0     // bvalid
net:   tb.dut.merge213.clk [1] = 1     // clk
net:   tb.dut.merge213.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge213.rid [4] = xxxx     // rid
net:   tb.dut.merge213.rlast [1] = x     // rlast
net:   tb.dut.merge213.rresp [2] = xx     // rresp
net:   tb.dut.merge213.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.rvalid [1] = 0     // rvalid
net:   tb.dut.merge213.wready [1] = x     // wready
net:   tb.dut.merge213.wvalid [1] = 0     // wvalid
net:   tb.dut.merge213.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge213.wlast [1] = 0     // wlast
net:   tb.dut.merge213.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge213.rready [1] = 1     // rready
net:   tb.dut.merge213.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge213.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge213.d_wready [1] = 1     // d_wready
net:   tb.dut.merge213.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge213.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge213.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge213.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge213.d_rready [1] = 1     // d_rready
net:   tb.dut.merge213.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge213.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge213.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge213.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge213.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge213.d_bready [1] = 1     // d_bready
net:   tb.dut.merge213.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge213.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge213.d_awready [1] = 1     // d_awready
net:   tb.dut.merge213.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge213.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge213.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge213.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge213.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge213.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge213.d_arready [1] = 1     // d_arready
net:   tb.dut.merge213.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge213.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge213.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge213.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge213.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge213.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge213.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge213.c_wready [1] = 1     // c_wready
net:   tb.dut.merge213.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge213.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge213.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge213.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge213.c_rready [1] = 1     // c_rready
net:   tb.dut.merge213.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge213.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge213.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge213.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge213.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge213.c_bready [1] = 1     // c_bready
net:   tb.dut.merge213.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge213.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge213.c_awready [1] = 1     // c_awready
net:   tb.dut.merge213.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge213.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge213.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge213.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge213.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge213.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge213.c_arready [1] = 1     // c_arready
net:   tb.dut.merge213.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge213.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge213.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge213.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge213.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge213.bready [1] = 1     // bready
net:   tb.dut.merge213.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge213.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge213.b_wready [1] = 1     // b_wready
net:   tb.dut.merge213.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge213.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge213.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge213.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge213.b_rready [1] = 1     // b_rready
net:   tb.dut.merge213.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge213.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge213.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge213.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge213.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge213.b_bready [1] = 1     // b_bready
net:   tb.dut.merge213.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge213.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge213.b_awready [1] = 1     // b_awready
net:   tb.dut.merge213.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge213.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge213.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge213.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge213.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge213.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge213.b_arready [1] = 1     // b_arready
net:   tb.dut.merge213.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge213.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge213.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge213.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge213.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge213.awvalid [1] = 0     // awvalid
net:   tb.dut.merge213.awlen [8] = 00000000     // awlen
net:   tb.dut.merge213.awid [4] = 0000     // awid
net:   tb.dut.merge213.awextras [8] = 00000000     // awextras
net:   tb.dut.merge213.awburst [2] = 00     // awburst
net:   tb.dut.merge213.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge213.arvalid [1] = 0     // arvalid
net:   tb.dut.merge213.arlen [8] = 00000000     // arlen
net:   tb.dut.merge213.arid [4] = 0000     // arid
net:   tb.dut.merge213.arextras [8] = 00000000     // arextras
net:   tb.dut.merge213.arburst [2] = 00     // arburst
net:   tb.dut.merge213.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge213.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge213.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge213.a_wready [1] = 1     // a_wready
net:   tb.dut.merge213.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge213.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge213.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge213.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge213.a_rready [1] = 1     // a_rready
net:   tb.dut.merge213.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge213.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge213.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge213.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge213.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge213.a_bready [1] = 1     // a_bready
net:   tb.dut.merge213.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge213.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge213.a_awready [1] = 1     // a_awready
net:   tb.dut.merge213.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge213.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge213.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge213.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge213.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge213.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge213.a_arready [1] = 1     // a_arready
net:   tb.dut.merge213.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge213.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge213.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge213.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge213.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge213.axi_rd_4_merger
son:   tb.dut.merge213.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge213.axi_rd_4_merger
net:   tb.dut.merge213.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge213.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge213.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge213.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge213.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge213.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge213.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge213.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge213.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge213.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge213.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge213.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge213.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge213.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge213.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge213.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge213.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge213.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge213.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge213.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge213.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge213.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge213.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge213.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge213.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge213.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge213.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge213.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge213.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge213.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge213.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge213.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge213.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge213.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge213.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge213.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge213.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge213.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge213.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge213.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge213.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge213.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge213.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge213.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge213.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge213.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge213.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge213.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge213.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge213.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge213.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge213.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge213.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge213.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge213.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge213.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge213.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge213.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge213.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge213.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge213.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge213.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge213.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge213.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge213.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge213.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge213.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge213.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge213.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge213.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge213.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge213.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge213.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge213.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge213.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge213.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge213.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge213.axi_wr_4_merger
net:   tb.dut.merge213.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge213.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge213.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge213.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge213.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge213.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge213.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge213.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge213.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge213.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge213.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge213.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge213.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge213.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge213.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge213.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge213.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge213.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge213.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge213.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge213.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge213.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge213.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge213.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge213.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge213.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge213.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge213.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge213.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge213.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge213.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge213.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge213.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge213.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge213.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge213.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge213.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge213.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge213.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge213.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge213.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge213.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge213.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge213.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge213.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge213.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge213.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge213.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge213.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge213.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge213.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge213.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge213.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge213.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge213.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge213.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge213.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge213.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge213.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge213.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge213.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge213.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge213.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge213.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge213.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge213.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge213.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge213.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge213.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge213.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge213.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge213.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge213.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge213.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge213.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge213.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge213.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge213.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge213.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge213.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge213.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge213.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge213.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge213.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge213.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge213.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge213.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge213.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge213.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge213.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge213.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge213.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge213.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge213.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge213.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge213.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge213.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge213.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge213.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge213.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge213.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge213.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge213.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge213.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge213.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge213.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge213.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge213.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge213.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge213.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge213.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge213.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge213.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge213.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge213.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge213.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge213.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge213.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge213.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge213.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge213.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge213.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge213.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge213.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge213.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge213.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge213.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge213.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge213.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge213.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge213.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge214
net:   tb.dut.merge214.arready [1] = 0     // arready
net:   tb.dut.merge214.awready [1] = 0     // awready
net:   tb.dut.merge214.bid [4] = xxxx     // bid
net:   tb.dut.merge214.bresp [2] = xx     // bresp
net:   tb.dut.merge214.bvalid [1] = 0     // bvalid
net:   tb.dut.merge214.clk [1] = 1     // clk
net:   tb.dut.merge214.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge214.rid [4] = xxxx     // rid
net:   tb.dut.merge214.rlast [1] = x     // rlast
net:   tb.dut.merge214.rresp [2] = xx     // rresp
net:   tb.dut.merge214.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.rvalid [1] = 0     // rvalid
net:   tb.dut.merge214.wready [1] = x     // wready
net:   tb.dut.merge214.wvalid [1] = 0     // wvalid
net:   tb.dut.merge214.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge214.wlast [1] = 0     // wlast
net:   tb.dut.merge214.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge214.rready [1] = 1     // rready
net:   tb.dut.merge214.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge214.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge214.d_wready [1] = 1     // d_wready
net:   tb.dut.merge214.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge214.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge214.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge214.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge214.d_rready [1] = 1     // d_rready
net:   tb.dut.merge214.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge214.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge214.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge214.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge214.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge214.d_bready [1] = 1     // d_bready
net:   tb.dut.merge214.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge214.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge214.d_awready [1] = 1     // d_awready
net:   tb.dut.merge214.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge214.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge214.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge214.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge214.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge214.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge214.d_arready [1] = 1     // d_arready
net:   tb.dut.merge214.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge214.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge214.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge214.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge214.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge214.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge214.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge214.c_wready [1] = 1     // c_wready
net:   tb.dut.merge214.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge214.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge214.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge214.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge214.c_rready [1] = 1     // c_rready
net:   tb.dut.merge214.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge214.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge214.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge214.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge214.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge214.c_bready [1] = 1     // c_bready
net:   tb.dut.merge214.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge214.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge214.c_awready [1] = 1     // c_awready
net:   tb.dut.merge214.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge214.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge214.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge214.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge214.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge214.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge214.c_arready [1] = 1     // c_arready
net:   tb.dut.merge214.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge214.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge214.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge214.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge214.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge214.bready [1] = 1     // bready
net:   tb.dut.merge214.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge214.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge214.b_wready [1] = 1     // b_wready
net:   tb.dut.merge214.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge214.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge214.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge214.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge214.b_rready [1] = 1     // b_rready
net:   tb.dut.merge214.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge214.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge214.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge214.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge214.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge214.b_bready [1] = 1     // b_bready
net:   tb.dut.merge214.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge214.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge214.b_awready [1] = 1     // b_awready
net:   tb.dut.merge214.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge214.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge214.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge214.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge214.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge214.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge214.b_arready [1] = 1     // b_arready
net:   tb.dut.merge214.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge214.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge214.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge214.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge214.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge214.awvalid [1] = 0     // awvalid
net:   tb.dut.merge214.awlen [8] = 00000000     // awlen
net:   tb.dut.merge214.awid [4] = 0000     // awid
net:   tb.dut.merge214.awextras [8] = 00000000     // awextras
net:   tb.dut.merge214.awburst [2] = 00     // awburst
net:   tb.dut.merge214.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge214.arvalid [1] = 0     // arvalid
net:   tb.dut.merge214.arlen [8] = 00000000     // arlen
net:   tb.dut.merge214.arid [4] = 0000     // arid
net:   tb.dut.merge214.arextras [8] = 00000000     // arextras
net:   tb.dut.merge214.arburst [2] = 00     // arburst
net:   tb.dut.merge214.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge214.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge214.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge214.a_wready [1] = 1     // a_wready
net:   tb.dut.merge214.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge214.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge214.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge214.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge214.a_rready [1] = 1     // a_rready
net:   tb.dut.merge214.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge214.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge214.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge214.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge214.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge214.a_bready [1] = 1     // a_bready
net:   tb.dut.merge214.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge214.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge214.a_awready [1] = 1     // a_awready
net:   tb.dut.merge214.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge214.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge214.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge214.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge214.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge214.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge214.a_arready [1] = 1     // a_arready
net:   tb.dut.merge214.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge214.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge214.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge214.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge214.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge214.axi_rd_4_merger
son:   tb.dut.merge214.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge214.axi_rd_4_merger
net:   tb.dut.merge214.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge214.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge214.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge214.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge214.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge214.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge214.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge214.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge214.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge214.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge214.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge214.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge214.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge214.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge214.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge214.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge214.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge214.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge214.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge214.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge214.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge214.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge214.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge214.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge214.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge214.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge214.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge214.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge214.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge214.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge214.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge214.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge214.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge214.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge214.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge214.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge214.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge214.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge214.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge214.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge214.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge214.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge214.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge214.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge214.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge214.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge214.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge214.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge214.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge214.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge214.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge214.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge214.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge214.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge214.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge214.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge214.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge214.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge214.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge214.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge214.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge214.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge214.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge214.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge214.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge214.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge214.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge214.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge214.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge214.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge214.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge214.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge214.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge214.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge214.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge214.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge214.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge214.axi_wr_4_merger
net:   tb.dut.merge214.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge214.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge214.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge214.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge214.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge214.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge214.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge214.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge214.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge214.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge214.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge214.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge214.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge214.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge214.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge214.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge214.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge214.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge214.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge214.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge214.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge214.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge214.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge214.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge214.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge214.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge214.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge214.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge214.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge214.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge214.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge214.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge214.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge214.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge214.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge214.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge214.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge214.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge214.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge214.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge214.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge214.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge214.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge214.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge214.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge214.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge214.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge214.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge214.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge214.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge214.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge214.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge214.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge214.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge214.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge214.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge214.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge214.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge214.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge214.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge214.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge214.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge214.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge214.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge214.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge214.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge214.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge214.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge214.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge214.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge214.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge214.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge214.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge214.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge214.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge214.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge214.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge214.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge214.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge214.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge214.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge214.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge214.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge214.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge214.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge214.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge214.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge214.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge214.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge214.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge214.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge214.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge214.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge214.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge214.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge214.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge214.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge214.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge214.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge214.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge214.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge214.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge214.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge214.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge214.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge214.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge214.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge214.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge214.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge214.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge214.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge214.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge214.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge214.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge214.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge214.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge214.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge214.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge214.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge214.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge214.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge214.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge214.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge214.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge214.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge214.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge214.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge214.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge214.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge214.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge214.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge215
net:   tb.dut.merge215.arready [1] = 0     // arready
net:   tb.dut.merge215.awready [1] = 0     // awready
net:   tb.dut.merge215.bid [4] = xxxx     // bid
net:   tb.dut.merge215.bresp [2] = xx     // bresp
net:   tb.dut.merge215.bvalid [1] = 0     // bvalid
net:   tb.dut.merge215.clk [1] = 1     // clk
net:   tb.dut.merge215.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge215.rid [4] = xxxx     // rid
net:   tb.dut.merge215.rlast [1] = x     // rlast
net:   tb.dut.merge215.rresp [2] = xx     // rresp
net:   tb.dut.merge215.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.rvalid [1] = 0     // rvalid
net:   tb.dut.merge215.wready [1] = x     // wready
net:   tb.dut.merge215.wvalid [1] = 0     // wvalid
net:   tb.dut.merge215.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge215.wlast [1] = 0     // wlast
net:   tb.dut.merge215.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge215.rready [1] = 1     // rready
net:   tb.dut.merge215.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge215.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge215.d_wready [1] = 1     // d_wready
net:   tb.dut.merge215.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge215.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge215.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge215.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge215.d_rready [1] = 1     // d_rready
net:   tb.dut.merge215.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge215.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge215.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge215.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge215.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge215.d_bready [1] = 1     // d_bready
net:   tb.dut.merge215.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge215.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge215.d_awready [1] = 1     // d_awready
net:   tb.dut.merge215.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge215.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge215.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge215.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge215.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge215.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge215.d_arready [1] = 1     // d_arready
net:   tb.dut.merge215.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge215.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge215.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge215.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge215.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge215.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge215.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge215.c_wready [1] = 1     // c_wready
net:   tb.dut.merge215.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge215.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge215.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge215.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge215.c_rready [1] = 1     // c_rready
net:   tb.dut.merge215.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge215.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge215.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge215.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge215.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge215.c_bready [1] = 1     // c_bready
net:   tb.dut.merge215.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge215.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge215.c_awready [1] = 1     // c_awready
net:   tb.dut.merge215.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge215.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge215.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge215.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge215.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge215.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge215.c_arready [1] = 1     // c_arready
net:   tb.dut.merge215.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge215.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge215.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge215.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge215.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge215.bready [1] = 1     // bready
net:   tb.dut.merge215.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge215.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge215.b_wready [1] = 1     // b_wready
net:   tb.dut.merge215.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge215.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge215.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge215.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge215.b_rready [1] = 1     // b_rready
net:   tb.dut.merge215.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge215.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge215.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge215.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge215.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge215.b_bready [1] = 1     // b_bready
net:   tb.dut.merge215.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge215.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge215.b_awready [1] = 1     // b_awready
net:   tb.dut.merge215.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge215.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge215.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge215.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge215.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge215.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge215.b_arready [1] = 1     // b_arready
net:   tb.dut.merge215.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge215.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge215.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge215.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge215.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge215.awvalid [1] = 0     // awvalid
net:   tb.dut.merge215.awlen [8] = 00000000     // awlen
net:   tb.dut.merge215.awid [4] = 0000     // awid
net:   tb.dut.merge215.awextras [8] = 00000000     // awextras
net:   tb.dut.merge215.awburst [2] = 00     // awburst
net:   tb.dut.merge215.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge215.arvalid [1] = 0     // arvalid
net:   tb.dut.merge215.arlen [8] = 00000000     // arlen
net:   tb.dut.merge215.arid [4] = 0000     // arid
net:   tb.dut.merge215.arextras [8] = 00000000     // arextras
net:   tb.dut.merge215.arburst [2] = 00     // arburst
net:   tb.dut.merge215.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge215.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge215.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge215.a_wready [1] = 1     // a_wready
net:   tb.dut.merge215.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge215.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge215.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge215.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge215.a_rready [1] = 1     // a_rready
net:   tb.dut.merge215.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge215.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge215.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge215.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge215.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge215.a_bready [1] = 1     // a_bready
net:   tb.dut.merge215.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge215.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge215.a_awready [1] = 1     // a_awready
net:   tb.dut.merge215.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge215.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge215.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge215.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge215.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge215.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge215.a_arready [1] = 1     // a_arready
net:   tb.dut.merge215.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge215.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge215.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge215.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge215.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge215.axi_rd_4_merger
son:   tb.dut.merge215.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge215.axi_rd_4_merger
net:   tb.dut.merge215.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge215.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge215.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merge215.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge215.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge215.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge215.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge215.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge215.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge215.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge215.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge215.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge215.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge215.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge215.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merge215.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merge215.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merge215.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merge215.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge215.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge215.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge215.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge215.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge215.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge215.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge215.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge215.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge215.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge215.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge215.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge215.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge215.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge215.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge215.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge215.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge215.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge215.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge215.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge215.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge215.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge215.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge215.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge215.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge215.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge215.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge215.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge215.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge215.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge215.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge215.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge215.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge215.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge215.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge215.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge215.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge215.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge215.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge215.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge215.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge215.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge215.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge215.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge215.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge215.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge215.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge215.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge215.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge215.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge215.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge215.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge215.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge215.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge215.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge215.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge215.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge215.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge215.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge215.axi_wr_4_merger
net:   tb.dut.merge215.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge215.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merge215.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge215.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge215.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merge215.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge215.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge215.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merge215.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge215.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merge215.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merge215.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge215.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge215.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge215.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merge215.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge215.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge215.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merge215.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge215.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge215.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge215.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge215.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge215.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge215.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge215.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge215.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge215.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge215.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge215.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge215.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge215.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merge215.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge215.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge215.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge215.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge215.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge215.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge215.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge215.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge215.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge215.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge215.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge215.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge215.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge215.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge215.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge215.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge215.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge215.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merge215.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merge215.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge215.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge215.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge215.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge215.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge215.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge215.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge215.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge215.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge215.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge215.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge215.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge215.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge215.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge215.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge215.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge215.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge215.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge215.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge215.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge215.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge215.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge215.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge215.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge215.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge215.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge215.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge215.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge215.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge215.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge215.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge215.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge215.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge215.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge215.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge215.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge215.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge215.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge215.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge215.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge215.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge215.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge215.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge215.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge215.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge215.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge215.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge215.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge215.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge215.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge215.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge215.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge215.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge215.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge215.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge215.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge215.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge215.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge215.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge215.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge215.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge215.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge215.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge215.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge215.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge215.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge215.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge215.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge215.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge215.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge215.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge215.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge215.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge215.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge215.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge215.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge215.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge215.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge215.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge215.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge3
net:   tb.dut.merge3.clk [1] = 1     // clk
net:   tb.dut.merge3.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.wready [1] = 1     // wready
net:   tb.dut.merge3.wvalid [1] = 0     // wvalid
net:   tb.dut.merge3.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge3.wlast [1] = 0     // wlast
net:   tb.dut.merge3.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge3.rvalid [1] = 0     // rvalid
net:   tb.dut.merge3.rresp [2] = 00     // rresp
net:   tb.dut.merge3.rready [1] = 1     // rready
net:   tb.dut.merge3.rlast [1] = 0     // rlast
net:   tb.dut.merge3.rid [4] = 0000     // rid
net:   tb.dut.merge3.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge3.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge3.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge3.d_wready [1] = 1     // d_wready
net:   tb.dut.merge3.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge3.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge3.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge3.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge3.d_rready [1] = 1     // d_rready
net:   tb.dut.merge3.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge3.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge3.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge3.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge3.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge3.d_bready [1] = 1     // d_bready
net:   tb.dut.merge3.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge3.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge3.d_awready [1] = 1     // d_awready
net:   tb.dut.merge3.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge3.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge3.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge3.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge3.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge3.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge3.d_arready [1] = 1     // d_arready
net:   tb.dut.merge3.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge3.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge3.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge3.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge3.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge3.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge3.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge3.c_wready [1] = 1     // c_wready
net:   tb.dut.merge3.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge3.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge3.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge3.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge3.c_rready [1] = 1     // c_rready
net:   tb.dut.merge3.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge3.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge3.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge3.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge3.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge3.c_bready [1] = 1     // c_bready
net:   tb.dut.merge3.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge3.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge3.c_awready [1] = 1     // c_awready
net:   tb.dut.merge3.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge3.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge3.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge3.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge3.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge3.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge3.c_arready [1] = 1     // c_arready
net:   tb.dut.merge3.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge3.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge3.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge3.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge3.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge3.bvalid [1] = 0     // bvalid
net:   tb.dut.merge3.bresp [2] = 00     // bresp
net:   tb.dut.merge3.bready [1] = 1     // bready
net:   tb.dut.merge3.bid [4] = 0000     // bid
net:   tb.dut.merge3.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge3.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge3.b_wready [1] = 1     // b_wready
net:   tb.dut.merge3.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge3.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge3.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge3.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge3.b_rready [1] = 1     // b_rready
net:   tb.dut.merge3.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge3.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge3.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge3.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge3.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge3.b_bready [1] = 1     // b_bready
net:   tb.dut.merge3.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge3.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge3.b_awready [1] = 1     // b_awready
net:   tb.dut.merge3.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge3.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge3.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge3.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge3.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge3.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge3.b_arready [1] = 1     // b_arready
net:   tb.dut.merge3.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge3.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge3.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge3.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge3.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge3.awvalid [1] = 0     // awvalid
net:   tb.dut.merge3.awready [1] = 1     // awready
net:   tb.dut.merge3.awlen [8] = 00000000     // awlen
net:   tb.dut.merge3.awid [4] = 0000     // awid
net:   tb.dut.merge3.awextras [8] = 00000000     // awextras
net:   tb.dut.merge3.awburst [2] = 00     // awburst
net:   tb.dut.merge3.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge3.arvalid [1] = 0     // arvalid
net:   tb.dut.merge3.arready [1] = 1     // arready
net:   tb.dut.merge3.arlen [8] = 00000000     // arlen
net:   tb.dut.merge3.arid [4] = 0000     // arid
net:   tb.dut.merge3.arextras [8] = 00000000     // arextras
net:   tb.dut.merge3.arburst [2] = 00     // arburst
net:   tb.dut.merge3.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge3.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge3.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge3.a_wready [1] = 1     // a_wready
net:   tb.dut.merge3.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge3.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge3.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge3.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge3.a_rready [1] = 1     // a_rready
net:   tb.dut.merge3.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge3.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge3.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge3.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge3.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge3.a_bready [1] = 1     // a_bready
net:   tb.dut.merge3.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge3.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge3.a_awready [1] = 1     // a_awready
net:   tb.dut.merge3.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge3.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge3.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge3.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge3.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge3.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge3.a_arready [1] = 1     // a_arready
net:   tb.dut.merge3.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge3.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge3.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge3.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge3.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge3.axi_rd_4_merger
son:   tb.dut.merge3.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge3.axi_rd_4_merger
net:   tb.dut.merge3.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge3.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge3.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge3.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge3.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge3.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge3.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge3.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge3.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge3.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge3.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge3.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge3.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge3.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge3.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge3.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge3.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge3.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge3.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge3.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge3.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge3.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge3.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge3.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge3.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge3.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge3.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge3.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge3.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge3.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge3.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge3.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge3.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge3.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge3.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge3.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge3.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge3.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge3.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge3.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge3.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge3.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge3.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge3.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge3.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge3.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge3.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge3.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge3.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge3.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge3.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge3.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge3.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge3.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge3.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge3.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge3.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge3.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge3.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge3.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge3.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge3.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge3.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge3.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge3.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge3.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge3.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge3.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge3.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge3.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge3.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge3.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge3.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge3.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge3.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge3.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge3.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge3.axi_wr_4_merger
net:   tb.dut.merge3.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge3.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge3.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge3.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge3.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge3.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge3.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge3.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge3.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge3.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge3.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge3.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge3.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge3.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge3.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge3.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge3.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge3.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge3.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge3.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge3.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge3.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge3.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge3.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge3.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge3.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge3.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge3.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge3.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge3.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge3.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge3.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge3.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge3.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge3.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge3.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge3.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge3.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge3.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge3.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge3.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge3.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge3.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge3.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge3.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge3.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge3.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge3.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge3.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge3.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge3.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge3.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge3.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge3.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge3.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge3.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge3.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge3.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge3.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge3.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge3.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge3.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge3.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge3.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge3.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge3.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge3.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge3.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge3.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge3.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge3.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge3.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge3.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge3.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge3.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge3.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge3.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge3.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge3.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge3.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge3.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge3.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge3.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge3.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge3.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge3.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge3.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge3.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge3.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge3.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge3.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge3.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge3.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge3.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge3.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge3.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge3.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge3.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge3.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge3.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge3.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge3.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge3.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge3.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge3.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge3.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge3.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge3.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge3.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge3.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge3.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge3.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge3.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge3.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge3.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge3.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge3.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge3.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge3.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge3.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge3.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge3.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge3.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge3.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge3.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge3.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge3.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge3.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge3.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge3.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge3.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge4
net:   tb.dut.merge4.clk [1] = 1     // clk
net:   tb.dut.merge4.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.wready [1] = 1     // wready
net:   tb.dut.merge4.wvalid [1] = 0     // wvalid
net:   tb.dut.merge4.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge4.wlast [1] = 0     // wlast
net:   tb.dut.merge4.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge4.rvalid [1] = 0     // rvalid
net:   tb.dut.merge4.rresp [2] = 00     // rresp
net:   tb.dut.merge4.rready [1] = 1     // rready
net:   tb.dut.merge4.rlast [1] = 0     // rlast
net:   tb.dut.merge4.rid [4] = 0000     // rid
net:   tb.dut.merge4.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge4.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge4.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge4.d_wready [1] = 1     // d_wready
net:   tb.dut.merge4.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge4.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge4.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge4.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge4.d_rready [1] = 1     // d_rready
net:   tb.dut.merge4.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge4.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge4.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge4.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge4.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge4.d_bready [1] = 1     // d_bready
net:   tb.dut.merge4.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge4.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge4.d_awready [1] = 1     // d_awready
net:   tb.dut.merge4.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge4.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge4.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge4.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge4.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge4.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge4.d_arready [1] = 1     // d_arready
net:   tb.dut.merge4.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge4.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge4.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge4.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge4.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge4.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge4.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge4.c_wready [1] = 1     // c_wready
net:   tb.dut.merge4.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge4.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge4.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge4.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge4.c_rready [1] = 1     // c_rready
net:   tb.dut.merge4.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge4.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge4.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge4.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge4.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge4.c_bready [1] = 1     // c_bready
net:   tb.dut.merge4.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge4.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge4.c_awready [1] = 1     // c_awready
net:   tb.dut.merge4.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge4.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge4.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge4.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge4.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge4.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge4.c_arready [1] = 1     // c_arready
net:   tb.dut.merge4.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge4.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge4.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge4.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge4.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge4.bvalid [1] = 0     // bvalid
net:   tb.dut.merge4.bresp [2] = 00     // bresp
net:   tb.dut.merge4.bready [1] = 1     // bready
net:   tb.dut.merge4.bid [4] = 0000     // bid
net:   tb.dut.merge4.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge4.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge4.b_wready [1] = 1     // b_wready
net:   tb.dut.merge4.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge4.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge4.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge4.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge4.b_rready [1] = 1     // b_rready
net:   tb.dut.merge4.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge4.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge4.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge4.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge4.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge4.b_bready [1] = 1     // b_bready
net:   tb.dut.merge4.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge4.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge4.b_awready [1] = 1     // b_awready
net:   tb.dut.merge4.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge4.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge4.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge4.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge4.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge4.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge4.b_arready [1] = 1     // b_arready
net:   tb.dut.merge4.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge4.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge4.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge4.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge4.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge4.awvalid [1] = 0     // awvalid
net:   tb.dut.merge4.awready [1] = 1     // awready
net:   tb.dut.merge4.awlen [8] = 00000000     // awlen
net:   tb.dut.merge4.awid [4] = 0000     // awid
net:   tb.dut.merge4.awextras [8] = 00000000     // awextras
net:   tb.dut.merge4.awburst [2] = 00     // awburst
net:   tb.dut.merge4.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge4.arvalid [1] = 0     // arvalid
net:   tb.dut.merge4.arready [1] = 1     // arready
net:   tb.dut.merge4.arlen [8] = 00000000     // arlen
net:   tb.dut.merge4.arid [4] = 0000     // arid
net:   tb.dut.merge4.arextras [8] = 00000000     // arextras
net:   tb.dut.merge4.arburst [2] = 00     // arburst
net:   tb.dut.merge4.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge4.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge4.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge4.a_wready [1] = 1     // a_wready
net:   tb.dut.merge4.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge4.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge4.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge4.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge4.a_rready [1] = 1     // a_rready
net:   tb.dut.merge4.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge4.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge4.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge4.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge4.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge4.a_bready [1] = 1     // a_bready
net:   tb.dut.merge4.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge4.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge4.a_awready [1] = 1     // a_awready
net:   tb.dut.merge4.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge4.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge4.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge4.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge4.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge4.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge4.a_arready [1] = 1     // a_arready
net:   tb.dut.merge4.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge4.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge4.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge4.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge4.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge4.axi_rd_4_merger
son:   tb.dut.merge4.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge4.axi_rd_4_merger
net:   tb.dut.merge4.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge4.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge4.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge4.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge4.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge4.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge4.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge4.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge4.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge4.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge4.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge4.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge4.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge4.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge4.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge4.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge4.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge4.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge4.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge4.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge4.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge4.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge4.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge4.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge4.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge4.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge4.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge4.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge4.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge4.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge4.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge4.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge4.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge4.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge4.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge4.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge4.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge4.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge4.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge4.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge4.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge4.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge4.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge4.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge4.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge4.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge4.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge4.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge4.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge4.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge4.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge4.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge4.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge4.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge4.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge4.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge4.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge4.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge4.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge4.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge4.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge4.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge4.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge4.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge4.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge4.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge4.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge4.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge4.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge4.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge4.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge4.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge4.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge4.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge4.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge4.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge4.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge4.axi_wr_4_merger
net:   tb.dut.merge4.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge4.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge4.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge4.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge4.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge4.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge4.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge4.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge4.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge4.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge4.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge4.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge4.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge4.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge4.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge4.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge4.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge4.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge4.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge4.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge4.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge4.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge4.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge4.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge4.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge4.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge4.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge4.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge4.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge4.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge4.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge4.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge4.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge4.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge4.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge4.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge4.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge4.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge4.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge4.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge4.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge4.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge4.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge4.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge4.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge4.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge4.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge4.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge4.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge4.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge4.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge4.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge4.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge4.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge4.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge4.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge4.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge4.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge4.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge4.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge4.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge4.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge4.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge4.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge4.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge4.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge4.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge4.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge4.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge4.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge4.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge4.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge4.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge4.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge4.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge4.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge4.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge4.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge4.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge4.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge4.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge4.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge4.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge4.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge4.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge4.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge4.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge4.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge4.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge4.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge4.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge4.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge4.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge4.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge4.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge4.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge4.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge4.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge4.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge4.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge4.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge4.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge4.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge4.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge4.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge4.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge4.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge4.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge4.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge4.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge4.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge4.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge4.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge4.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge4.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge4.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge4.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge4.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge4.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge4.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge4.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge4.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge4.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge4.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge4.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge4.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge4.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge4.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge4.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge4.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge4.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge5
net:   tb.dut.merge5.clk [1] = 1     // clk
net:   tb.dut.merge5.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.wready [1] = 1     // wready
net:   tb.dut.merge5.wvalid [1] = 0     // wvalid
net:   tb.dut.merge5.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge5.wlast [1] = 0     // wlast
net:   tb.dut.merge5.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge5.rvalid [1] = 0     // rvalid
net:   tb.dut.merge5.rresp [2] = 00     // rresp
net:   tb.dut.merge5.rready [1] = 1     // rready
net:   tb.dut.merge5.rlast [1] = 0     // rlast
net:   tb.dut.merge5.rid [4] = 0000     // rid
net:   tb.dut.merge5.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge5.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge5.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge5.d_wready [1] = 1     // d_wready
net:   tb.dut.merge5.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge5.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge5.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge5.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge5.d_rready [1] = 1     // d_rready
net:   tb.dut.merge5.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge5.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge5.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge5.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge5.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge5.d_bready [1] = 1     // d_bready
net:   tb.dut.merge5.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge5.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge5.d_awready [1] = 1     // d_awready
net:   tb.dut.merge5.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge5.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge5.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge5.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge5.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge5.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge5.d_arready [1] = 1     // d_arready
net:   tb.dut.merge5.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge5.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge5.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge5.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge5.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge5.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge5.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge5.c_wready [1] = 1     // c_wready
net:   tb.dut.merge5.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge5.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge5.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge5.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge5.c_rready [1] = 1     // c_rready
net:   tb.dut.merge5.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge5.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge5.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge5.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge5.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge5.c_bready [1] = 1     // c_bready
net:   tb.dut.merge5.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge5.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge5.c_awready [1] = 1     // c_awready
net:   tb.dut.merge5.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge5.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge5.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge5.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge5.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge5.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge5.c_arready [1] = 1     // c_arready
net:   tb.dut.merge5.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge5.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge5.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge5.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge5.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge5.bvalid [1] = 0     // bvalid
net:   tb.dut.merge5.bresp [2] = 00     // bresp
net:   tb.dut.merge5.bready [1] = 1     // bready
net:   tb.dut.merge5.bid [4] = 0000     // bid
net:   tb.dut.merge5.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge5.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge5.b_wready [1] = 1     // b_wready
net:   tb.dut.merge5.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge5.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge5.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge5.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge5.b_rready [1] = 1     // b_rready
net:   tb.dut.merge5.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge5.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge5.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge5.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge5.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge5.b_bready [1] = 1     // b_bready
net:   tb.dut.merge5.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge5.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge5.b_awready [1] = 1     // b_awready
net:   tb.dut.merge5.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge5.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge5.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge5.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge5.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge5.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge5.b_arready [1] = 1     // b_arready
net:   tb.dut.merge5.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge5.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge5.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge5.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge5.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge5.awvalid [1] = 0     // awvalid
net:   tb.dut.merge5.awready [1] = 1     // awready
net:   tb.dut.merge5.awlen [8] = 00000000     // awlen
net:   tb.dut.merge5.awid [4] = 0000     // awid
net:   tb.dut.merge5.awextras [8] = 00000000     // awextras
net:   tb.dut.merge5.awburst [2] = 00     // awburst
net:   tb.dut.merge5.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge5.arvalid [1] = 0     // arvalid
net:   tb.dut.merge5.arready [1] = 1     // arready
net:   tb.dut.merge5.arlen [8] = 00000000     // arlen
net:   tb.dut.merge5.arid [4] = 0000     // arid
net:   tb.dut.merge5.arextras [8] = 00000000     // arextras
net:   tb.dut.merge5.arburst [2] = 00     // arburst
net:   tb.dut.merge5.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge5.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge5.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge5.a_wready [1] = 1     // a_wready
net:   tb.dut.merge5.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge5.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge5.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge5.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge5.a_rready [1] = 1     // a_rready
net:   tb.dut.merge5.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge5.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge5.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge5.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge5.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge5.a_bready [1] = 1     // a_bready
net:   tb.dut.merge5.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge5.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge5.a_awready [1] = 1     // a_awready
net:   tb.dut.merge5.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge5.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge5.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge5.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge5.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge5.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge5.a_arready [1] = 1     // a_arready
net:   tb.dut.merge5.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge5.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge5.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge5.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge5.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge5.axi_rd_4_merger
son:   tb.dut.merge5.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge5.axi_rd_4_merger
net:   tb.dut.merge5.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge5.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge5.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge5.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge5.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge5.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge5.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge5.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge5.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge5.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge5.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge5.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge5.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge5.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge5.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge5.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge5.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge5.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge5.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge5.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge5.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge5.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge5.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge5.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge5.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge5.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge5.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge5.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge5.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge5.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge5.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge5.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge5.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge5.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge5.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge5.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge5.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge5.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge5.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge5.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge5.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge5.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge5.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge5.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge5.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge5.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge5.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge5.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge5.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge5.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge5.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge5.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge5.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge5.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge5.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge5.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge5.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge5.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge5.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge5.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge5.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge5.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge5.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge5.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge5.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge5.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge5.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge5.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge5.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge5.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge5.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge5.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge5.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge5.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge5.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge5.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge5.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge5.axi_wr_4_merger
net:   tb.dut.merge5.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge5.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge5.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge5.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge5.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge5.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge5.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge5.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge5.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge5.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge5.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge5.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge5.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge5.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge5.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge5.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge5.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge5.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge5.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge5.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge5.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge5.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge5.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge5.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge5.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge5.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge5.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge5.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge5.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge5.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge5.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge5.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge5.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge5.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge5.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge5.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge5.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge5.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge5.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge5.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge5.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge5.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge5.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge5.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge5.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge5.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge5.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge5.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge5.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge5.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge5.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge5.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge5.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge5.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge5.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge5.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge5.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge5.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge5.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge5.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge5.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge5.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge5.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge5.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge5.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge5.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge5.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge5.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge5.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge5.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge5.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge5.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge5.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge5.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge5.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge5.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge5.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge5.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge5.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge5.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge5.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge5.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge5.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge5.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge5.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge5.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge5.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge5.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge5.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge5.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge5.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge5.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge5.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge5.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge5.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge5.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge5.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge5.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge5.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge5.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge5.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge5.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge5.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge5.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge5.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge5.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge5.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge5.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge5.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge5.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge5.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge5.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge5.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge5.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge5.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge5.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge5.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge5.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge5.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge5.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge5.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge5.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge5.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge5.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge5.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge5.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge5.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge5.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge5.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge5.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge5.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge6
net:   tb.dut.merge6.clk [1] = 1     // clk
net:   tb.dut.merge6.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.wready [1] = 1     // wready
net:   tb.dut.merge6.wvalid [1] = 0     // wvalid
net:   tb.dut.merge6.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge6.wlast [1] = 0     // wlast
net:   tb.dut.merge6.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge6.rvalid [1] = 0     // rvalid
net:   tb.dut.merge6.rresp [2] = 00     // rresp
net:   tb.dut.merge6.rready [1] = 1     // rready
net:   tb.dut.merge6.rlast [1] = 0     // rlast
net:   tb.dut.merge6.rid [4] = 0000     // rid
net:   tb.dut.merge6.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge6.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge6.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge6.d_wready [1] = 1     // d_wready
net:   tb.dut.merge6.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge6.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge6.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge6.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge6.d_rready [1] = 1     // d_rready
net:   tb.dut.merge6.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge6.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge6.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge6.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge6.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge6.d_bready [1] = 1     // d_bready
net:   tb.dut.merge6.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge6.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge6.d_awready [1] = 1     // d_awready
net:   tb.dut.merge6.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge6.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge6.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge6.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge6.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge6.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge6.d_arready [1] = 1     // d_arready
net:   tb.dut.merge6.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge6.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge6.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge6.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge6.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge6.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge6.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge6.c_wready [1] = 1     // c_wready
net:   tb.dut.merge6.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge6.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge6.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge6.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge6.c_rready [1] = 1     // c_rready
net:   tb.dut.merge6.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge6.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge6.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge6.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge6.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge6.c_bready [1] = 1     // c_bready
net:   tb.dut.merge6.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge6.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge6.c_awready [1] = 1     // c_awready
net:   tb.dut.merge6.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge6.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge6.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge6.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge6.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge6.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge6.c_arready [1] = 1     // c_arready
net:   tb.dut.merge6.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge6.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge6.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge6.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge6.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge6.bvalid [1] = 0     // bvalid
net:   tb.dut.merge6.bresp [2] = 00     // bresp
net:   tb.dut.merge6.bready [1] = 1     // bready
net:   tb.dut.merge6.bid [4] = 0000     // bid
net:   tb.dut.merge6.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge6.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge6.b_wready [1] = 1     // b_wready
net:   tb.dut.merge6.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge6.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge6.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge6.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge6.b_rready [1] = 1     // b_rready
net:   tb.dut.merge6.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge6.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge6.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge6.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge6.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge6.b_bready [1] = 1     // b_bready
net:   tb.dut.merge6.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge6.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge6.b_awready [1] = 1     // b_awready
net:   tb.dut.merge6.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge6.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge6.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge6.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge6.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge6.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge6.b_arready [1] = 1     // b_arready
net:   tb.dut.merge6.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge6.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge6.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge6.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge6.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge6.awvalid [1] = 0     // awvalid
net:   tb.dut.merge6.awready [1] = 1     // awready
net:   tb.dut.merge6.awlen [8] = 00000000     // awlen
net:   tb.dut.merge6.awid [4] = 0000     // awid
net:   tb.dut.merge6.awextras [8] = 00000000     // awextras
net:   tb.dut.merge6.awburst [2] = 00     // awburst
net:   tb.dut.merge6.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge6.arvalid [1] = 0     // arvalid
net:   tb.dut.merge6.arready [1] = 1     // arready
net:   tb.dut.merge6.arlen [8] = 00000000     // arlen
net:   tb.dut.merge6.arid [4] = 0000     // arid
net:   tb.dut.merge6.arextras [8] = 00000000     // arextras
net:   tb.dut.merge6.arburst [2] = 00     // arburst
net:   tb.dut.merge6.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge6.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge6.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge6.a_wready [1] = 1     // a_wready
net:   tb.dut.merge6.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge6.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge6.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge6.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge6.a_rready [1] = 1     // a_rready
net:   tb.dut.merge6.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge6.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge6.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge6.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge6.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge6.a_bready [1] = 1     // a_bready
net:   tb.dut.merge6.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge6.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge6.a_awready [1] = 1     // a_awready
net:   tb.dut.merge6.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge6.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge6.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge6.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge6.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge6.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge6.a_arready [1] = 1     // a_arready
net:   tb.dut.merge6.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge6.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge6.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge6.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge6.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge6.axi_rd_4_merger
son:   tb.dut.merge6.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge6.axi_rd_4_merger
net:   tb.dut.merge6.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge6.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge6.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge6.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge6.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge6.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge6.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge6.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge6.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge6.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge6.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge6.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge6.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge6.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge6.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge6.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge6.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge6.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge6.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge6.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge6.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge6.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge6.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge6.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge6.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge6.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge6.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge6.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge6.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge6.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge6.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge6.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge6.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge6.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge6.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge6.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge6.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge6.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge6.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge6.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge6.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge6.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge6.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge6.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge6.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge6.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge6.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge6.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge6.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge6.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge6.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge6.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge6.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge6.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge6.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge6.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge6.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge6.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge6.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge6.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge6.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge6.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge6.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge6.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge6.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge6.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge6.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge6.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge6.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge6.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge6.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge6.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge6.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge6.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge6.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge6.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge6.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge6.axi_wr_4_merger
net:   tb.dut.merge6.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge6.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge6.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge6.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge6.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge6.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge6.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge6.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge6.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge6.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge6.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge6.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge6.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge6.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge6.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge6.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge6.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge6.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge6.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge6.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge6.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge6.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge6.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge6.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge6.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge6.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge6.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge6.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge6.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge6.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge6.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge6.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge6.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge6.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge6.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge6.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge6.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge6.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge6.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge6.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge6.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge6.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge6.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge6.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge6.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge6.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge6.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge6.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge6.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge6.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge6.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge6.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge6.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge6.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge6.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge6.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge6.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge6.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge6.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge6.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge6.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge6.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge6.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge6.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge6.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge6.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge6.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge6.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge6.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge6.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge6.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge6.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge6.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge6.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge6.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge6.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge6.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge6.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge6.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge6.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge6.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge6.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge6.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge6.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge6.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge6.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge6.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge6.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge6.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge6.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge6.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge6.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge6.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge6.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge6.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge6.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge6.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge6.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge6.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge6.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge6.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge6.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge6.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge6.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge6.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge6.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge6.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge6.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge6.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge6.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge6.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge6.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge6.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge6.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge6.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge6.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge6.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge6.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge6.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge6.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge6.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge6.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge6.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge6.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge6.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge6.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge6.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge6.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge6.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge6.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge6.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge7
net:   tb.dut.merge7.clk [1] = 1     // clk
net:   tb.dut.merge7.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.wready [1] = 1     // wready
net:   tb.dut.merge7.wvalid [1] = 0     // wvalid
net:   tb.dut.merge7.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge7.wlast [1] = 0     // wlast
net:   tb.dut.merge7.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge7.rvalid [1] = 0     // rvalid
net:   tb.dut.merge7.rresp [2] = 00     // rresp
net:   tb.dut.merge7.rready [1] = 1     // rready
net:   tb.dut.merge7.rlast [1] = 0     // rlast
net:   tb.dut.merge7.rid [4] = 0000     // rid
net:   tb.dut.merge7.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge7.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge7.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge7.d_wready [1] = 1     // d_wready
net:   tb.dut.merge7.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge7.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge7.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge7.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge7.d_rready [1] = 1     // d_rready
net:   tb.dut.merge7.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge7.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge7.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge7.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge7.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge7.d_bready [1] = 1     // d_bready
net:   tb.dut.merge7.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge7.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge7.d_awready [1] = 1     // d_awready
net:   tb.dut.merge7.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge7.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge7.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge7.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge7.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge7.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge7.d_arready [1] = 1     // d_arready
net:   tb.dut.merge7.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge7.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge7.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge7.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge7.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge7.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge7.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge7.c_wready [1] = 1     // c_wready
net:   tb.dut.merge7.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge7.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge7.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge7.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge7.c_rready [1] = 1     // c_rready
net:   tb.dut.merge7.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge7.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge7.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge7.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge7.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge7.c_bready [1] = 1     // c_bready
net:   tb.dut.merge7.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge7.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge7.c_awready [1] = 1     // c_awready
net:   tb.dut.merge7.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge7.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge7.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge7.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge7.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge7.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge7.c_arready [1] = 1     // c_arready
net:   tb.dut.merge7.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge7.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge7.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge7.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge7.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge7.bvalid [1] = 0     // bvalid
net:   tb.dut.merge7.bresp [2] = 00     // bresp
net:   tb.dut.merge7.bready [1] = 1     // bready
net:   tb.dut.merge7.bid [4] = 0000     // bid
net:   tb.dut.merge7.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge7.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge7.b_wready [1] = 1     // b_wready
net:   tb.dut.merge7.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge7.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge7.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge7.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge7.b_rready [1] = 1     // b_rready
net:   tb.dut.merge7.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge7.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge7.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge7.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge7.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge7.b_bready [1] = 1     // b_bready
net:   tb.dut.merge7.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge7.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge7.b_awready [1] = 1     // b_awready
net:   tb.dut.merge7.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge7.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge7.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge7.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge7.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge7.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge7.b_arready [1] = 1     // b_arready
net:   tb.dut.merge7.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge7.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge7.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge7.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge7.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge7.awvalid [1] = 0     // awvalid
net:   tb.dut.merge7.awready [1] = 1     // awready
net:   tb.dut.merge7.awlen [8] = 00000000     // awlen
net:   tb.dut.merge7.awid [4] = 0000     // awid
net:   tb.dut.merge7.awextras [8] = 00000000     // awextras
net:   tb.dut.merge7.awburst [2] = 00     // awburst
net:   tb.dut.merge7.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge7.arvalid [1] = 0     // arvalid
net:   tb.dut.merge7.arready [1] = 1     // arready
net:   tb.dut.merge7.arlen [8] = 00000000     // arlen
net:   tb.dut.merge7.arid [4] = 0000     // arid
net:   tb.dut.merge7.arextras [8] = 00000000     // arextras
net:   tb.dut.merge7.arburst [2] = 00     // arburst
net:   tb.dut.merge7.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge7.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge7.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge7.a_wready [1] = 1     // a_wready
net:   tb.dut.merge7.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge7.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge7.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge7.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge7.a_rready [1] = 1     // a_rready
net:   tb.dut.merge7.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge7.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge7.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge7.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge7.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge7.a_bready [1] = 1     // a_bready
net:   tb.dut.merge7.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge7.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge7.a_awready [1] = 1     // a_awready
net:   tb.dut.merge7.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge7.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge7.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge7.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge7.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge7.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge7.a_arready [1] = 1     // a_arready
net:   tb.dut.merge7.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge7.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge7.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge7.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge7.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge7.axi_rd_4_merger
son:   tb.dut.merge7.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge7.axi_rd_4_merger
net:   tb.dut.merge7.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge7.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge7.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge7.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge7.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge7.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge7.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge7.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge7.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge7.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge7.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge7.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge7.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge7.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge7.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge7.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge7.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge7.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge7.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge7.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge7.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge7.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge7.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge7.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge7.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge7.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge7.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge7.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge7.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge7.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge7.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge7.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge7.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge7.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge7.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge7.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge7.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge7.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge7.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge7.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge7.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge7.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge7.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge7.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge7.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge7.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge7.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge7.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge7.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge7.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge7.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge7.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge7.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge7.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge7.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge7.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge7.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge7.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge7.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge7.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge7.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge7.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge7.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge7.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge7.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge7.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge7.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge7.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge7.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge7.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge7.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge7.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge7.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge7.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge7.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge7.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge7.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge7.axi_wr_4_merger
net:   tb.dut.merge7.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge7.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge7.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge7.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge7.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge7.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge7.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge7.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge7.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge7.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge7.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge7.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge7.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge7.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge7.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge7.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge7.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge7.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge7.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge7.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge7.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge7.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge7.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge7.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge7.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge7.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge7.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge7.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge7.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge7.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge7.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge7.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge7.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge7.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge7.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge7.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge7.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge7.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge7.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge7.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge7.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge7.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge7.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge7.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge7.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge7.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge7.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge7.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge7.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge7.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge7.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge7.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge7.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge7.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge7.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge7.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge7.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge7.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge7.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge7.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge7.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge7.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge7.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge7.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge7.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge7.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge7.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge7.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge7.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge7.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge7.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge7.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge7.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge7.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge7.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge7.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge7.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge7.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge7.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge7.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge7.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge7.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge7.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge7.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge7.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge7.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge7.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge7.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge7.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge7.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge7.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge7.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge7.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge7.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge7.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge7.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge7.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge7.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge7.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge7.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge7.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge7.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge7.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge7.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge7.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge7.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge7.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge7.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge7.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge7.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge7.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge7.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge7.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge7.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge7.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge7.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge7.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge7.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge7.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge7.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge7.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge7.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge7.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge7.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge7.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge7.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge7.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge7.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge7.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge7.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge7.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge8
net:   tb.dut.merge8.clk [1] = 1     // clk
net:   tb.dut.merge8.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.wready [1] = 1     // wready
net:   tb.dut.merge8.wvalid [1] = 0     // wvalid
net:   tb.dut.merge8.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge8.wlast [1] = 0     // wlast
net:   tb.dut.merge8.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge8.rvalid [1] = 0     // rvalid
net:   tb.dut.merge8.rresp [2] = 00     // rresp
net:   tb.dut.merge8.rready [1] = 1     // rready
net:   tb.dut.merge8.rlast [1] = 0     // rlast
net:   tb.dut.merge8.rid [4] = 0000     // rid
net:   tb.dut.merge8.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge8.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge8.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge8.d_wready [1] = 1     // d_wready
net:   tb.dut.merge8.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge8.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge8.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge8.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge8.d_rready [1] = 1     // d_rready
net:   tb.dut.merge8.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge8.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge8.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge8.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge8.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge8.d_bready [1] = 1     // d_bready
net:   tb.dut.merge8.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge8.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge8.d_awready [1] = 1     // d_awready
net:   tb.dut.merge8.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge8.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge8.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge8.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge8.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge8.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge8.d_arready [1] = 1     // d_arready
net:   tb.dut.merge8.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge8.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge8.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge8.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge8.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge8.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge8.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge8.c_wready [1] = 1     // c_wready
net:   tb.dut.merge8.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge8.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge8.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge8.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge8.c_rready [1] = 1     // c_rready
net:   tb.dut.merge8.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge8.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge8.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge8.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge8.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge8.c_bready [1] = 1     // c_bready
net:   tb.dut.merge8.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge8.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge8.c_awready [1] = 1     // c_awready
net:   tb.dut.merge8.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge8.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge8.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge8.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge8.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge8.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge8.c_arready [1] = 1     // c_arready
net:   tb.dut.merge8.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge8.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge8.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge8.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge8.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge8.bvalid [1] = 0     // bvalid
net:   tb.dut.merge8.bresp [2] = 00     // bresp
net:   tb.dut.merge8.bready [1] = 1     // bready
net:   tb.dut.merge8.bid [4] = 0000     // bid
net:   tb.dut.merge8.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge8.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge8.b_wready [1] = 1     // b_wready
net:   tb.dut.merge8.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge8.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge8.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge8.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge8.b_rready [1] = 1     // b_rready
net:   tb.dut.merge8.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge8.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge8.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge8.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge8.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge8.b_bready [1] = 1     // b_bready
net:   tb.dut.merge8.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge8.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge8.b_awready [1] = 1     // b_awready
net:   tb.dut.merge8.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge8.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge8.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge8.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge8.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge8.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge8.b_arready [1] = 1     // b_arready
net:   tb.dut.merge8.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge8.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge8.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge8.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge8.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge8.awvalid [1] = 0     // awvalid
net:   tb.dut.merge8.awready [1] = 1     // awready
net:   tb.dut.merge8.awlen [8] = 00000000     // awlen
net:   tb.dut.merge8.awid [4] = 0000     // awid
net:   tb.dut.merge8.awextras [8] = 00000000     // awextras
net:   tb.dut.merge8.awburst [2] = 00     // awburst
net:   tb.dut.merge8.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge8.arvalid [1] = 0     // arvalid
net:   tb.dut.merge8.arready [1] = 1     // arready
net:   tb.dut.merge8.arlen [8] = 00000000     // arlen
net:   tb.dut.merge8.arid [4] = 0000     // arid
net:   tb.dut.merge8.arextras [8] = 00000000     // arextras
net:   tb.dut.merge8.arburst [2] = 00     // arburst
net:   tb.dut.merge8.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge8.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge8.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge8.a_wready [1] = 1     // a_wready
net:   tb.dut.merge8.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge8.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge8.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge8.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge8.a_rready [1] = 1     // a_rready
net:   tb.dut.merge8.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge8.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge8.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge8.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge8.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge8.a_bready [1] = 1     // a_bready
net:   tb.dut.merge8.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge8.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge8.a_awready [1] = 1     // a_awready
net:   tb.dut.merge8.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge8.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge8.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge8.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge8.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge8.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge8.a_arready [1] = 1     // a_arready
net:   tb.dut.merge8.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge8.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge8.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge8.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge8.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge8.axi_rd_4_merger
son:   tb.dut.merge8.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge8.axi_rd_4_merger
net:   tb.dut.merge8.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge8.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge8.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge8.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge8.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge8.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge8.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge8.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge8.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge8.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge8.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge8.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge8.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge8.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge8.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge8.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge8.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge8.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge8.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge8.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge8.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge8.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge8.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge8.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge8.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge8.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge8.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge8.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge8.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge8.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge8.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge8.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge8.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge8.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge8.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge8.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge8.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge8.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge8.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge8.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge8.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge8.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge8.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge8.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge8.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge8.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge8.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge8.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge8.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge8.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge8.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge8.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge8.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge8.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge8.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge8.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge8.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge8.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge8.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge8.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge8.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge8.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge8.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge8.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge8.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge8.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge8.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge8.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge8.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge8.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge8.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge8.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge8.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge8.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge8.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge8.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge8.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge8.axi_wr_4_merger
net:   tb.dut.merge8.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge8.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge8.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge8.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge8.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge8.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge8.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge8.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge8.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge8.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge8.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge8.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge8.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge8.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge8.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge8.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge8.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge8.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge8.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge8.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge8.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge8.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge8.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge8.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge8.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge8.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge8.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge8.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge8.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge8.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge8.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge8.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge8.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge8.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge8.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge8.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge8.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge8.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge8.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge8.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge8.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge8.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge8.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge8.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge8.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge8.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge8.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge8.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge8.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge8.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge8.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge8.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge8.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge8.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge8.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge8.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge8.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge8.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge8.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge8.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge8.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge8.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge8.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge8.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge8.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge8.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge8.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge8.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge8.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge8.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge8.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge8.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge8.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge8.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge8.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge8.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge8.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge8.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge8.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge8.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge8.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge8.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge8.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge8.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge8.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge8.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge8.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge8.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge8.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge8.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge8.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge8.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge8.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge8.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge8.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge8.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge8.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge8.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge8.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge8.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge8.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge8.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge8.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge8.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge8.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge8.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge8.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge8.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge8.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge8.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge8.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge8.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge8.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge8.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge8.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge8.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge8.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge8.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge8.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge8.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge8.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge8.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge8.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge8.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge8.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge8.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge8.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge8.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge8.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge8.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge8.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merge9
net:   tb.dut.merge9.clk [1] = 1     // clk
net:   tb.dut.merge9.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.wready [1] = 1     // wready
net:   tb.dut.merge9.wvalid [1] = 0     // wvalid
net:   tb.dut.merge9.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge9.wlast [1] = 0     // wlast
net:   tb.dut.merge9.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge9.rvalid [1] = 0     // rvalid
net:   tb.dut.merge9.rresp [2] = 00     // rresp
net:   tb.dut.merge9.rready [1] = 1     // rready
net:   tb.dut.merge9.rlast [1] = 0     // rlast
net:   tb.dut.merge9.rid [4] = 0000     // rid
net:   tb.dut.merge9.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge9.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge9.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge9.d_wready [1] = 1     // d_wready
net:   tb.dut.merge9.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge9.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge9.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge9.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge9.d_rready [1] = 1     // d_rready
net:   tb.dut.merge9.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge9.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge9.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge9.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge9.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge9.d_bready [1] = 1     // d_bready
net:   tb.dut.merge9.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge9.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge9.d_awready [1] = 1     // d_awready
net:   tb.dut.merge9.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge9.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge9.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge9.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge9.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge9.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge9.d_arready [1] = 1     // d_arready
net:   tb.dut.merge9.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge9.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge9.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge9.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge9.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge9.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge9.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge9.c_wready [1] = 1     // c_wready
net:   tb.dut.merge9.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge9.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge9.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge9.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge9.c_rready [1] = 1     // c_rready
net:   tb.dut.merge9.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge9.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge9.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge9.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge9.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge9.c_bready [1] = 1     // c_bready
net:   tb.dut.merge9.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge9.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge9.c_awready [1] = 1     // c_awready
net:   tb.dut.merge9.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge9.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge9.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge9.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge9.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge9.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge9.c_arready [1] = 1     // c_arready
net:   tb.dut.merge9.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge9.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge9.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge9.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge9.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge9.bvalid [1] = 0     // bvalid
net:   tb.dut.merge9.bresp [2] = 00     // bresp
net:   tb.dut.merge9.bready [1] = 1     // bready
net:   tb.dut.merge9.bid [4] = 0000     // bid
net:   tb.dut.merge9.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge9.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge9.b_wready [1] = 1     // b_wready
net:   tb.dut.merge9.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge9.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge9.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge9.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge9.b_rready [1] = 1     // b_rready
net:   tb.dut.merge9.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge9.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge9.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge9.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge9.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge9.b_bready [1] = 1     // b_bready
net:   tb.dut.merge9.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge9.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge9.b_awready [1] = 1     // b_awready
net:   tb.dut.merge9.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge9.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge9.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge9.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge9.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge9.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge9.b_arready [1] = 1     // b_arready
net:   tb.dut.merge9.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge9.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge9.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge9.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge9.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge9.awvalid [1] = 0     // awvalid
net:   tb.dut.merge9.awready [1] = 1     // awready
net:   tb.dut.merge9.awlen [8] = 00000000     // awlen
net:   tb.dut.merge9.awid [4] = 0000     // awid
net:   tb.dut.merge9.awextras [8] = 00000000     // awextras
net:   tb.dut.merge9.awburst [2] = 00     // awburst
net:   tb.dut.merge9.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge9.arvalid [1] = 0     // arvalid
net:   tb.dut.merge9.arready [1] = 1     // arready
net:   tb.dut.merge9.arlen [8] = 00000000     // arlen
net:   tb.dut.merge9.arid [4] = 0000     // arid
net:   tb.dut.merge9.arextras [8] = 00000000     // arextras
net:   tb.dut.merge9.arburst [2] = 00     // arburst
net:   tb.dut.merge9.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge9.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge9.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge9.a_wready [1] = 1     // a_wready
net:   tb.dut.merge9.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge9.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge9.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge9.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge9.a_rready [1] = 1     // a_rready
net:   tb.dut.merge9.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge9.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge9.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge9.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge9.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge9.a_bready [1] = 1     // a_bready
net:   tb.dut.merge9.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge9.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge9.a_awready [1] = 1     // a_awready
net:   tb.dut.merge9.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge9.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge9.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge9.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge9.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge9.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge9.a_arready [1] = 1     // a_arready
net:   tb.dut.merge9.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge9.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge9.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge9.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge9.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merge9.axi_rd_4_merger
son:   tb.dut.merge9.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merge9.axi_rd_4_merger
net:   tb.dut.merge9.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merge9.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merge9.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merge9.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merge9.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merge9.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merge9.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merge9.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merge9.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merge9.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merge9.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merge9.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merge9.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merge9.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merge9.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merge9.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merge9.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merge9.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merge9.axi_rd_4_merger.rresp [2] = 00     // rresp
net:   tb.dut.merge9.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merge9.axi_rd_4_merger.rlast [1] = 0     // rlast
net:   tb.dut.merge9.axi_rd_4_merger.rid [4] = 0000     // rid
net:   tb.dut.merge9.axi_rd_4_merger.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.merge9.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merge9.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merge9.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merge9.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merge9.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merge9.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merge9.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merge9.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merge9.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merge9.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merge9.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merge9.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merge9.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merge9.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merge9.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merge9.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merge9.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merge9.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merge9.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merge9.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merge9.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merge9.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merge9.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merge9.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merge9.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merge9.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merge9.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merge9.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merge9.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merge9.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merge9.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merge9.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merge9.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merge9.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merge9.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merge9.axi_rd_4_merger.arready [1] = 1     // arready
net:   tb.dut.merge9.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merge9.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merge9.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merge9.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merge9.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merge9.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merge9.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merge9.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merge9.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merge9.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merge9.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merge9.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merge9.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merge9.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merge9.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merge9.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merge9.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merge9.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merge9.axi_wr_4_merger
net:   tb.dut.merge9.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merge9.axi_wr_4_merger.a_bresp [2] = 00     // a_bresp
net:   tb.dut.merge9.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merge9.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merge9.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merge9.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merge9.axi_wr_4_merger.b_bresp [2] = 00     // b_bresp
net:   tb.dut.merge9.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merge9.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merge9.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merge9.axi_wr_4_merger.c_bresp [2] = 00     // c_bresp
net:   tb.dut.merge9.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merge9.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merge9.axi_wr_4_merger.d_bresp [2] = 00     // d_bresp
net:   tb.dut.merge9.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merge9.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merge9.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merge9.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merge9.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merge9.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merge9.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merge9.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merge9.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merge9.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merge9.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merge9.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merge9.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merge9.axi_wr_4_merger.wready [1] = 1     // wready
net:   tb.dut.merge9.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merge9.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merge9.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merge9.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merge9.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merge9.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merge9.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merge9.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merge9.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merge9.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merge9.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merge9.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merge9.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merge9.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merge9.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merge9.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merge9.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merge9.axi_wr_4_merger.inbresp [2] = 00     // inbresp
net:   tb.dut.merge9.axi_wr_4_merger.inbid [4] = 0000     // inbid
net:   tb.dut.merge9.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merge9.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merge9.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merge9.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merge9.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merge9.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merge9.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merge9.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merge9.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merge9.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merge9.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merge9.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merge9.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merge9.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merge9.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merge9.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merge9.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merge9.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merge9.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merge9.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merge9.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merge9.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merge9.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merge9.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merge9.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merge9.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merge9.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merge9.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merge9.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merge9.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merge9.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merge9.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merge9.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merge9.axi_wr_4_merger.bresp [2] = 00     // bresp
net:   tb.dut.merge9.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merge9.axi_wr_4_merger.bid [4] = 0000     // bid
net:   tb.dut.merge9.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merge9.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merge9.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merge9.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merge9.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merge9.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merge9.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merge9.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merge9.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merge9.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merge9.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merge9.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merge9.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merge9.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merge9.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merge9.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merge9.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merge9.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merge9.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merge9.axi_wr_4_merger.awready [1] = 1     // awready
net:   tb.dut.merge9.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merge9.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merge9.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merge9.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merge9.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merge9.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merge9.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merge9.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merge9.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merge9.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merge9.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merge9.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merge9.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merge9.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merge9.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merge9.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merge9.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merge9.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merge9.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merge9.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merge9.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merge9.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merge9.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.din [10] = 0000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merge9.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merge9.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merge9.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merge9.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merge9.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_splitter tb.dut.split0
net:   tb.dut.split0.a_arready [1] = 1     // a_arready
net:   tb.dut.split0.a_awready [1] = 1     // a_awready
net:   tb.dut.split0.a_bid [4] = 0000     // a_bid
net:   tb.dut.split0.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split0.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split0.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split0.a_rid [4] = 0000     // a_rid
net:   tb.dut.split0.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split0.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split0.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split0.a_wready [1] = 1     // a_wready
net:   tb.dut.split0.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split0.arburst [2] = xx     // arburst
net:   tb.dut.split0.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split0.arid [4] = xxxx     // arid
net:   tb.dut.split0.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split0.arvalid [1] = 0     // arvalid
net:   tb.dut.split0.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split0.awburst [2] = xx     // awburst
net:   tb.dut.split0.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split0.awid [4] = xxxx     // awid
net:   tb.dut.split0.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split0.awvalid [1] = 0     // awvalid
net:   tb.dut.split0.b_arready [1] = 1     // b_arready
net:   tb.dut.split0.b_awready [1] = 1     // b_awready
net:   tb.dut.split0.b_bid [4] = 0000     // b_bid
net:   tb.dut.split0.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split0.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split0.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split0.b_rid [4] = 0000     // b_rid
net:   tb.dut.split0.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split0.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split0.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split0.b_wready [1] = 1     // b_wready
net:   tb.dut.split0.bready [1] = 0     // bready
net:   tb.dut.split0.c_arready [1] = 1     // c_arready
net:   tb.dut.split0.c_awready [1] = 1     // c_awready
net:   tb.dut.split0.c_bid [4] = 0000     // c_bid
net:   tb.dut.split0.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split0.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split0.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split0.c_rid [4] = 0000     // c_rid
net:   tb.dut.split0.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split0.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split0.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split0.c_wready [1] = 1     // c_wready
net:   tb.dut.split0.clk [1] = 1     // clk
net:   tb.dut.split0.d_arready [1] = 1     // d_arready
net:   tb.dut.split0.d_awready [1] = 1     // d_awready
net:   tb.dut.split0.d_bid [4] = 0000     // d_bid
net:   tb.dut.split0.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split0.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split0.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split0.d_rid [4] = 0000     // d_rid
net:   tb.dut.split0.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split0.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split0.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split0.d_wready [1] = 1     // d_wready
net:   tb.dut.split0.rready [1] = 0     // rready
net:   tb.dut.split0.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split0.wlast [1] = x     // wlast
net:   tb.dut.split0.wready [1] = 1     // wready
net:   tb.dut.split0.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split0.wvalid [1] = 0     // wvalid
net:   tb.dut.split0.rvalid [1] = 0     // rvalid
net:   tb.dut.split0.rresp [2] = 00     // rresp
net:   tb.dut.split0.rlast [1] = 0     // rlast
net:   tb.dut.split0.rid [4] = 0000     // rid
net:   tb.dut.split0.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split0.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split0.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split0.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split0.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split0.d_rready [1] = 1     // d_rready
net:   tb.dut.split0.d_bready [1] = 1     // d_bready
net:   tb.dut.split0.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split0.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split0.d_awid [4] = 0000     // d_awid
net:   tb.dut.split0.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split0.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split0.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split0.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split0.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split0.d_arid [4] = 0000     // d_arid
net:   tb.dut.split0.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split0.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split0.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split0.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split0.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split0.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split0.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split0.c_rready [1] = 1     // c_rready
net:   tb.dut.split0.c_bready [1] = 1     // c_bready
net:   tb.dut.split0.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split0.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split0.c_awid [4] = 0000     // c_awid
net:   tb.dut.split0.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split0.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split0.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split0.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split0.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split0.c_arid [4] = 0000     // c_arid
net:   tb.dut.split0.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split0.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split0.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split0.bvalid [1] = 0     // bvalid
net:   tb.dut.split0.bresp [2] = 00     // bresp
net:   tb.dut.split0.bid [4] = 0000     // bid
net:   tb.dut.split0.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split0.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split0.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split0.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split0.b_rready [1] = 1     // b_rready
net:   tb.dut.split0.b_bready [1] = 1     // b_bready
net:   tb.dut.split0.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split0.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split0.b_awid [4] = 0000     // b_awid
net:   tb.dut.split0.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split0.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split0.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split0.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split0.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split0.b_arid [4] = 0000     // b_arid
net:   tb.dut.split0.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split0.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split0.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split0.awready [1] = 1     // awready
net:   tb.dut.split0.arready [1] = 1     // arready
net:   tb.dut.split0.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split0.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split0.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split0.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split0.a_rready [1] = 1     // a_rready
net:   tb.dut.split0.a_bready [1] = 1     // a_bready
net:   tb.dut.split0.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split0.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split0.a_awid [4] = 0000     // a_awid
net:   tb.dut.split0.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split0.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split0.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split0.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split0.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split0.a_arid [4] = 0000     // a_arid
net:   tb.dut.split0.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split0.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split0.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split0.axi_rd_4_splitter
son:   tb.dut.split0.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split0.axi_rd_4_splitter
net:   tb.dut.split0.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split0.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split0.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split0.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split0.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split0.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split0.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split0.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split0.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split0.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split0.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split0.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split0.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split0.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split0.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split0.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split0.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split0.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split0.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split0.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split0.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split0.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split0.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split0.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split0.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split0.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split0.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split0.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split0.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split0.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split0.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split0.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split0.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split0.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split0.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split0.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split0.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split0.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split0.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split0.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split0.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split0.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split0.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split0.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split0.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split0.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split0.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split0.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split0.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split0.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split0.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split0.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split0.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split0.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split0.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split0.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split0.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split0.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split0.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split0.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split0.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split0.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split0.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split0.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split0.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split0.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split0.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split0.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split0.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split0.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split0.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split0.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split0.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split0.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split0.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split0.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split0.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split0.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split0.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split0.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split0.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split0.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split0.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split0.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split0.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split0.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split0.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split0.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split0.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split0.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split0.axi_rd_4_splitter.r_fifo
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split0.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split0.axi_wr_4_splitter
net:   tb.dut.split0.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split0.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split0.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split0.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split0.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split0.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split0.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split0.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split0.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split0.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split0.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split0.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split0.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split0.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split0.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split0.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split0.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split0.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split0.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split0.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split0.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split0.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split0.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split0.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split0.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split0.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split0.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split0.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split0.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split0.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split0.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split0.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split0.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split0.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split0.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split0.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split0.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split0.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split0.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split0.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split0.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split0.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split0.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split0.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split0.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split0.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split0.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split0.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split0.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split0.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split0.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split0.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split0.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split0.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split0.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split0.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split0.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split0.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split0.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split0.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split0.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split0.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split0.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split0.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split0.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split0.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split0.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split0.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split0.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split0.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split0.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split0.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split0.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split0.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split0.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split0.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split0.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split0.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split0.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split0.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split0.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split0.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split0.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split0.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split0.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split0.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split0.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split0.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split0.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split0.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split0.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split0.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split0.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split0.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split0.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split0.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split0.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split0.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split0.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split0.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split0.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split0.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split0.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split0.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split0.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split0.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split0.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split0.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split0.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split0.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split0.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split0.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split0.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split0.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split0.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split0.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split0.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split0.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split0.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split0.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split0.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split0.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split0.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split0.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split0.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split0.axi_wr_4_splitter.b_fifo
son:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split0.axi_wr_4_splitter.order_fifo
son:   tb.dut.split0.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split0.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split0.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split0.axi_wr_4_splitter.b_fifo
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split0.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split0.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split0.axi_wr_4_splitter.order_fifo
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split0.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split0.axi_wr_4_splitter.w_fifo
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split0.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split1
net:   tb.dut.split1.a_arready [1] = 1     // a_arready
net:   tb.dut.split1.a_awready [1] = 1     // a_awready
net:   tb.dut.split1.a_bid [4] = 0000     // a_bid
net:   tb.dut.split1.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split1.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split1.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split1.a_rid [4] = 0000     // a_rid
net:   tb.dut.split1.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split1.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split1.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split1.a_wready [1] = 1     // a_wready
net:   tb.dut.split1.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split1.arburst [2] = xx     // arburst
net:   tb.dut.split1.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split1.arid [4] = xxxx     // arid
net:   tb.dut.split1.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split1.arvalid [1] = 0     // arvalid
net:   tb.dut.split1.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split1.awburst [2] = xx     // awburst
net:   tb.dut.split1.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split1.awid [4] = xxxx     // awid
net:   tb.dut.split1.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split1.awvalid [1] = 0     // awvalid
net:   tb.dut.split1.b_arready [1] = 1     // b_arready
net:   tb.dut.split1.b_awready [1] = 1     // b_awready
net:   tb.dut.split1.b_bid [4] = 0000     // b_bid
net:   tb.dut.split1.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split1.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split1.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split1.b_rid [4] = 0000     // b_rid
net:   tb.dut.split1.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split1.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split1.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split1.b_wready [1] = 1     // b_wready
net:   tb.dut.split1.bready [1] = 0     // bready
net:   tb.dut.split1.c_arready [1] = 1     // c_arready
net:   tb.dut.split1.c_awready [1] = 1     // c_awready
net:   tb.dut.split1.c_bid [4] = 0000     // c_bid
net:   tb.dut.split1.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split1.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split1.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split1.c_rid [4] = 0000     // c_rid
net:   tb.dut.split1.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split1.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split1.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split1.c_wready [1] = 1     // c_wready
net:   tb.dut.split1.clk [1] = 1     // clk
net:   tb.dut.split1.d_arready [1] = 1     // d_arready
net:   tb.dut.split1.d_awready [1] = 1     // d_awready
net:   tb.dut.split1.d_bid [4] = 0000     // d_bid
net:   tb.dut.split1.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split1.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split1.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split1.d_rid [4] = 0000     // d_rid
net:   tb.dut.split1.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split1.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split1.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split1.d_wready [1] = 1     // d_wready
net:   tb.dut.split1.rready [1] = 0     // rready
net:   tb.dut.split1.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split1.wlast [1] = x     // wlast
net:   tb.dut.split1.wready [1] = 1     // wready
net:   tb.dut.split1.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split1.wvalid [1] = 0     // wvalid
net:   tb.dut.split1.rvalid [1] = 0     // rvalid
net:   tb.dut.split1.rresp [2] = 00     // rresp
net:   tb.dut.split1.rlast [1] = 0     // rlast
net:   tb.dut.split1.rid [4] = 0000     // rid
net:   tb.dut.split1.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split1.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split1.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split1.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split1.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split1.d_rready [1] = 1     // d_rready
net:   tb.dut.split1.d_bready [1] = 1     // d_bready
net:   tb.dut.split1.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split1.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split1.d_awid [4] = 0000     // d_awid
net:   tb.dut.split1.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split1.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split1.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split1.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split1.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split1.d_arid [4] = 0000     // d_arid
net:   tb.dut.split1.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split1.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split1.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split1.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split1.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split1.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split1.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split1.c_rready [1] = 1     // c_rready
net:   tb.dut.split1.c_bready [1] = 1     // c_bready
net:   tb.dut.split1.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split1.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split1.c_awid [4] = 0000     // c_awid
net:   tb.dut.split1.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split1.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split1.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split1.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split1.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split1.c_arid [4] = 0000     // c_arid
net:   tb.dut.split1.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split1.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split1.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split1.bvalid [1] = 0     // bvalid
net:   tb.dut.split1.bresp [2] = 00     // bresp
net:   tb.dut.split1.bid [4] = 0000     // bid
net:   tb.dut.split1.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split1.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split1.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split1.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split1.b_rready [1] = 1     // b_rready
net:   tb.dut.split1.b_bready [1] = 1     // b_bready
net:   tb.dut.split1.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split1.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split1.b_awid [4] = 0000     // b_awid
net:   tb.dut.split1.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split1.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split1.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split1.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split1.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split1.b_arid [4] = 0000     // b_arid
net:   tb.dut.split1.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split1.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split1.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split1.awready [1] = 1     // awready
net:   tb.dut.split1.arready [1] = 1     // arready
net:   tb.dut.split1.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split1.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split1.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split1.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split1.a_rready [1] = 1     // a_rready
net:   tb.dut.split1.a_bready [1] = 1     // a_bready
net:   tb.dut.split1.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split1.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split1.a_awid [4] = 0000     // a_awid
net:   tb.dut.split1.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split1.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split1.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split1.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split1.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split1.a_arid [4] = 0000     // a_arid
net:   tb.dut.split1.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split1.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split1.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split1.axi_rd_4_splitter
son:   tb.dut.split1.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split1.axi_rd_4_splitter
net:   tb.dut.split1.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split1.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split1.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split1.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split1.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split1.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split1.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split1.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split1.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split1.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split1.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split1.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split1.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split1.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split1.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split1.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split1.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split1.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split1.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split1.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split1.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split1.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split1.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split1.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split1.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split1.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split1.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split1.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split1.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split1.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split1.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split1.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split1.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split1.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split1.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split1.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split1.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split1.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split1.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split1.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split1.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split1.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split1.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split1.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split1.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split1.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split1.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split1.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split1.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split1.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split1.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split1.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split1.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split1.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split1.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split1.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split1.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split1.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split1.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split1.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split1.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split1.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split1.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split1.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split1.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split1.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split1.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split1.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split1.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split1.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split1.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split1.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split1.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split1.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split1.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split1.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split1.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split1.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split1.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split1.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split1.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split1.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split1.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split1.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split1.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split1.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split1.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split1.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split1.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split1.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split1.axi_rd_4_splitter.r_fifo
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split1.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split1.axi_wr_4_splitter
net:   tb.dut.split1.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split1.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split1.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split1.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split1.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split1.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split1.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split1.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split1.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split1.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split1.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split1.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split1.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split1.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split1.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split1.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split1.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split1.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split1.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split1.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split1.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split1.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split1.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split1.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split1.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split1.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split1.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split1.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split1.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split1.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split1.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split1.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split1.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split1.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split1.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split1.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split1.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split1.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split1.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split1.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split1.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split1.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split1.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split1.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split1.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split1.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split1.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split1.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split1.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split1.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split1.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split1.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split1.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split1.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split1.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split1.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split1.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split1.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split1.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split1.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split1.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split1.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split1.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split1.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split1.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split1.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split1.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split1.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split1.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split1.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split1.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split1.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split1.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split1.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split1.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split1.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split1.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split1.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split1.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split1.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split1.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split1.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split1.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split1.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split1.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split1.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split1.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split1.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split1.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split1.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split1.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split1.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split1.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split1.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split1.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split1.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split1.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split1.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split1.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split1.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split1.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split1.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split1.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split1.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split1.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split1.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split1.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split1.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split1.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split1.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split1.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split1.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split1.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split1.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split1.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split1.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split1.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split1.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split1.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split1.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split1.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split1.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split1.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split1.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split1.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split1.axi_wr_4_splitter.b_fifo
son:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split1.axi_wr_4_splitter.order_fifo
son:   tb.dut.split1.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split1.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split1.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split1.axi_wr_4_splitter.b_fifo
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split1.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split1.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split1.axi_wr_4_splitter.order_fifo
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split1.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split1.axi_wr_4_splitter.w_fifo
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split1.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split10
net:   tb.dut.split10.a_arready [1] = 1     // a_arready
net:   tb.dut.split10.a_awready [1] = 1     // a_awready
net:   tb.dut.split10.a_bid [4] = 0000     // a_bid
net:   tb.dut.split10.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split10.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split10.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split10.a_rid [4] = 0000     // a_rid
net:   tb.dut.split10.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split10.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split10.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split10.a_wready [1] = 1     // a_wready
net:   tb.dut.split10.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split10.arburst [2] = xx     // arburst
net:   tb.dut.split10.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split10.arid [4] = xxxx     // arid
net:   tb.dut.split10.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split10.arvalid [1] = 0     // arvalid
net:   tb.dut.split10.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split10.awburst [2] = xx     // awburst
net:   tb.dut.split10.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split10.awid [4] = xxxx     // awid
net:   tb.dut.split10.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split10.awvalid [1] = 0     // awvalid
net:   tb.dut.split10.b_arready [1] = 1     // b_arready
net:   tb.dut.split10.b_awready [1] = 1     // b_awready
net:   tb.dut.split10.b_bid [4] = 0000     // b_bid
net:   tb.dut.split10.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split10.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split10.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split10.b_rid [4] = 0000     // b_rid
net:   tb.dut.split10.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split10.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split10.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split10.b_wready [1] = 1     // b_wready
net:   tb.dut.split10.bready [1] = 0     // bready
net:   tb.dut.split10.c_arready [1] = 1     // c_arready
net:   tb.dut.split10.c_awready [1] = 1     // c_awready
net:   tb.dut.split10.c_bid [4] = 0000     // c_bid
net:   tb.dut.split10.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split10.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split10.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split10.c_rid [4] = 0000     // c_rid
net:   tb.dut.split10.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split10.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split10.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split10.c_wready [1] = 1     // c_wready
net:   tb.dut.split10.clk [1] = 1     // clk
net:   tb.dut.split10.d_arready [1] = 1     // d_arready
net:   tb.dut.split10.d_awready [1] = 1     // d_awready
net:   tb.dut.split10.d_bid [4] = 0000     // d_bid
net:   tb.dut.split10.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split10.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split10.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split10.d_rid [4] = 0000     // d_rid
net:   tb.dut.split10.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split10.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split10.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split10.d_wready [1] = 1     // d_wready
net:   tb.dut.split10.rready [1] = 0     // rready
net:   tb.dut.split10.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split10.wlast [1] = x     // wlast
net:   tb.dut.split10.wready [1] = 1     // wready
net:   tb.dut.split10.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split10.wvalid [1] = 0     // wvalid
net:   tb.dut.split10.rvalid [1] = 0     // rvalid
net:   tb.dut.split10.rresp [2] = 00     // rresp
net:   tb.dut.split10.rlast [1] = 0     // rlast
net:   tb.dut.split10.rid [4] = 0000     // rid
net:   tb.dut.split10.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split10.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split10.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split10.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split10.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split10.d_rready [1] = 1     // d_rready
net:   tb.dut.split10.d_bready [1] = 1     // d_bready
net:   tb.dut.split10.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split10.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split10.d_awid [4] = 0000     // d_awid
net:   tb.dut.split10.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split10.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split10.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split10.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split10.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split10.d_arid [4] = 0000     // d_arid
net:   tb.dut.split10.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split10.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split10.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split10.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split10.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split10.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split10.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split10.c_rready [1] = 1     // c_rready
net:   tb.dut.split10.c_bready [1] = 1     // c_bready
net:   tb.dut.split10.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split10.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split10.c_awid [4] = 0000     // c_awid
net:   tb.dut.split10.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split10.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split10.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split10.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split10.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split10.c_arid [4] = 0000     // c_arid
net:   tb.dut.split10.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split10.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split10.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split10.bvalid [1] = 0     // bvalid
net:   tb.dut.split10.bresp [2] = 00     // bresp
net:   tb.dut.split10.bid [4] = 0000     // bid
net:   tb.dut.split10.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split10.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split10.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split10.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split10.b_rready [1] = 1     // b_rready
net:   tb.dut.split10.b_bready [1] = 1     // b_bready
net:   tb.dut.split10.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split10.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split10.b_awid [4] = 0000     // b_awid
net:   tb.dut.split10.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split10.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split10.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split10.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split10.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split10.b_arid [4] = 0000     // b_arid
net:   tb.dut.split10.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split10.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split10.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split10.awready [1] = 1     // awready
net:   tb.dut.split10.arready [1] = 1     // arready
net:   tb.dut.split10.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split10.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split10.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split10.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split10.a_rready [1] = 1     // a_rready
net:   tb.dut.split10.a_bready [1] = 1     // a_bready
net:   tb.dut.split10.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split10.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split10.a_awid [4] = 0000     // a_awid
net:   tb.dut.split10.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split10.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split10.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split10.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split10.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split10.a_arid [4] = 0000     // a_arid
net:   tb.dut.split10.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split10.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split10.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split10.axi_rd_4_splitter
son:   tb.dut.split10.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split10.axi_rd_4_splitter
net:   tb.dut.split10.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split10.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split10.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split10.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split10.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split10.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split10.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split10.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split10.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split10.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split10.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split10.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split10.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split10.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split10.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split10.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split10.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split10.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split10.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split10.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split10.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split10.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split10.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split10.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split10.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split10.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split10.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split10.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split10.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split10.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split10.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split10.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split10.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split10.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split10.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split10.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split10.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split10.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split10.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split10.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split10.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split10.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split10.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split10.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split10.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split10.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split10.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split10.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split10.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split10.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split10.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split10.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split10.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split10.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split10.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split10.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split10.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split10.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split10.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split10.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split10.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split10.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split10.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split10.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split10.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split10.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split10.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split10.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split10.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split10.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split10.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split10.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split10.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split10.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split10.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split10.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split10.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split10.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split10.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split10.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split10.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split10.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split10.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split10.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split10.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split10.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split10.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split10.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split10.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split10.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split10.axi_rd_4_splitter.r_fifo
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split10.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split10.axi_wr_4_splitter
net:   tb.dut.split10.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split10.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split10.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split10.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split10.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split10.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split10.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split10.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split10.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split10.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split10.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split10.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split10.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split10.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split10.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split10.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split10.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split10.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split10.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split10.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split10.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split10.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split10.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split10.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split10.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split10.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split10.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split10.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split10.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split10.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split10.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split10.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split10.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split10.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split10.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split10.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split10.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split10.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split10.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split10.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split10.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split10.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split10.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split10.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split10.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split10.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split10.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split10.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split10.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split10.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split10.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split10.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split10.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split10.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split10.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split10.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split10.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split10.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split10.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split10.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split10.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split10.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split10.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split10.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split10.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split10.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split10.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split10.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split10.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split10.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split10.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split10.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split10.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split10.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split10.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split10.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split10.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split10.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split10.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split10.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split10.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split10.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split10.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split10.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split10.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split10.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split10.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split10.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split10.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split10.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split10.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split10.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split10.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split10.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split10.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split10.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split10.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split10.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split10.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split10.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split10.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split10.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split10.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split10.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split10.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split10.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split10.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split10.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split10.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split10.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split10.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split10.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split10.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split10.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split10.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split10.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split10.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split10.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split10.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split10.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split10.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split10.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split10.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split10.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split10.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split10.axi_wr_4_splitter.b_fifo
son:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split10.axi_wr_4_splitter.order_fifo
son:   tb.dut.split10.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split10.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split10.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split10.axi_wr_4_splitter.b_fifo
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split10.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split10.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split10.axi_wr_4_splitter.order_fifo
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split10.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split10.axi_wr_4_splitter.w_fifo
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split10.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split100
net:   tb.dut.split100.a_arready [1] = 1     // a_arready
net:   tb.dut.split100.a_awready [1] = 1     // a_awready
net:   tb.dut.split100.a_bid [4] = 0000     // a_bid
net:   tb.dut.split100.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split100.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split100.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split100.a_rid [4] = 0000     // a_rid
net:   tb.dut.split100.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split100.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split100.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split100.a_wready [1] = 1     // a_wready
net:   tb.dut.split100.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split100.arburst [2] = 00     // arburst
net:   tb.dut.split100.arextras [8] = 00000000     // arextras
net:   tb.dut.split100.arid [4] = 0000     // arid
net:   tb.dut.split100.arlen [8] = 00000000     // arlen
net:   tb.dut.split100.arvalid [1] = 0     // arvalid
net:   tb.dut.split100.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split100.awburst [2] = 00     // awburst
net:   tb.dut.split100.awextras [8] = 00000000     // awextras
net:   tb.dut.split100.awid [4] = 0000     // awid
net:   tb.dut.split100.awlen [8] = 00000000     // awlen
net:   tb.dut.split100.awvalid [1] = 0     // awvalid
net:   tb.dut.split100.b_arready [1] = 1     // b_arready
net:   tb.dut.split100.b_awready [1] = 1     // b_awready
net:   tb.dut.split100.b_bid [4] = 0000     // b_bid
net:   tb.dut.split100.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split100.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split100.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split100.b_rid [4] = 0000     // b_rid
net:   tb.dut.split100.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split100.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split100.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split100.b_wready [1] = 1     // b_wready
net:   tb.dut.split100.bready [1] = 1     // bready
net:   tb.dut.split100.c_arready [1] = 1     // c_arready
net:   tb.dut.split100.c_awready [1] = 1     // c_awready
net:   tb.dut.split100.c_bid [4] = 0000     // c_bid
net:   tb.dut.split100.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split100.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split100.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split100.c_rid [4] = 0000     // c_rid
net:   tb.dut.split100.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split100.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split100.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split100.c_wready [1] = 1     // c_wready
net:   tb.dut.split100.clk [1] = 1     // clk
net:   tb.dut.split100.d_arready [1] = 1     // d_arready
net:   tb.dut.split100.d_awready [1] = 1     // d_awready
net:   tb.dut.split100.d_bid [4] = 0000     // d_bid
net:   tb.dut.split100.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split100.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split100.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split100.d_rid [4] = 0000     // d_rid
net:   tb.dut.split100.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split100.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split100.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split100.d_wready [1] = 1     // d_wready
net:   tb.dut.split100.rready [1] = 1     // rready
net:   tb.dut.split100.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split100.wlast [1] = 0     // wlast
net:   tb.dut.split100.wready [1] = 1     // wready
net:   tb.dut.split100.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split100.wvalid [1] = 0     // wvalid
net:   tb.dut.split100.rvalid [1] = 0     // rvalid
net:   tb.dut.split100.rresp [2] = 00     // rresp
net:   tb.dut.split100.rlast [1] = 0     // rlast
net:   tb.dut.split100.rid [4] = 0000     // rid
net:   tb.dut.split100.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split100.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split100.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split100.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split100.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split100.d_rready [1] = 1     // d_rready
net:   tb.dut.split100.d_bready [1] = 1     // d_bready
net:   tb.dut.split100.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split100.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split100.d_awid [4] = 0000     // d_awid
net:   tb.dut.split100.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split100.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split100.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split100.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split100.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split100.d_arid [4] = 0000     // d_arid
net:   tb.dut.split100.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split100.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split100.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split100.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split100.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split100.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split100.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split100.c_rready [1] = 1     // c_rready
net:   tb.dut.split100.c_bready [1] = 1     // c_bready
net:   tb.dut.split100.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split100.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split100.c_awid [4] = 0000     // c_awid
net:   tb.dut.split100.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split100.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split100.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split100.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split100.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split100.c_arid [4] = 0000     // c_arid
net:   tb.dut.split100.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split100.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split100.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split100.bvalid [1] = 0     // bvalid
net:   tb.dut.split100.bresp [2] = 00     // bresp
net:   tb.dut.split100.bid [4] = 0000     // bid
net:   tb.dut.split100.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split100.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split100.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split100.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split100.b_rready [1] = 1     // b_rready
net:   tb.dut.split100.b_bready [1] = 1     // b_bready
net:   tb.dut.split100.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split100.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split100.b_awid [4] = 0000     // b_awid
net:   tb.dut.split100.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split100.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split100.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split100.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split100.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split100.b_arid [4] = 0000     // b_arid
net:   tb.dut.split100.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split100.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split100.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split100.awready [1] = 1     // awready
net:   tb.dut.split100.arready [1] = 1     // arready
net:   tb.dut.split100.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split100.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split100.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split100.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split100.a_rready [1] = 1     // a_rready
net:   tb.dut.split100.a_bready [1] = 1     // a_bready
net:   tb.dut.split100.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split100.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split100.a_awid [4] = 0000     // a_awid
net:   tb.dut.split100.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split100.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split100.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split100.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split100.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split100.a_arid [4] = 0000     // a_arid
net:   tb.dut.split100.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split100.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split100.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split100.axi_rd_4_splitter
son:   tb.dut.split100.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split100.axi_rd_4_splitter
net:   tb.dut.split100.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split100.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split100.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split100.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split100.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split100.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split100.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split100.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split100.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split100.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split100.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split100.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split100.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split100.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split100.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split100.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split100.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split100.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split100.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split100.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split100.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split100.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split100.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split100.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split100.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split100.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split100.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split100.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split100.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split100.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split100.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split100.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split100.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split100.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split100.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split100.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split100.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split100.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split100.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split100.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split100.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split100.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split100.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split100.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split100.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split100.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split100.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split100.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split100.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split100.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split100.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split100.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split100.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split100.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split100.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split100.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split100.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split100.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split100.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split100.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split100.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split100.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split100.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split100.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split100.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split100.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split100.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split100.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split100.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split100.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split100.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split100.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split100.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split100.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split100.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split100.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split100.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split100.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split100.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split100.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split100.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split100.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split100.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split100.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split100.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split100.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split100.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split100.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split100.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split100.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split100.axi_rd_4_splitter.r_fifo
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split100.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split100.axi_wr_4_splitter
net:   tb.dut.split100.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split100.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split100.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split100.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split100.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split100.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split100.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split100.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split100.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split100.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split100.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split100.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split100.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split100.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split100.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split100.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split100.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split100.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split100.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split100.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split100.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split100.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split100.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split100.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split100.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split100.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split100.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split100.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split100.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split100.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split100.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split100.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split100.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split100.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split100.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split100.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split100.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split100.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split100.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split100.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split100.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split100.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split100.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split100.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split100.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split100.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split100.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split100.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split100.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split100.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split100.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split100.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split100.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split100.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split100.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split100.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split100.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split100.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split100.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split100.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split100.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split100.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split100.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split100.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split100.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split100.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split100.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split100.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split100.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split100.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split100.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split100.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split100.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split100.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split100.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split100.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split100.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split100.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split100.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split100.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split100.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split100.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split100.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split100.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split100.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split100.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split100.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split100.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split100.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split100.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split100.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split100.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split100.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split100.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split100.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split100.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split100.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split100.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split100.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split100.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split100.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split100.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split100.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split100.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split100.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split100.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split100.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split100.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split100.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split100.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split100.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split100.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split100.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split100.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split100.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split100.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split100.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split100.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split100.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split100.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split100.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split100.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split100.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split100.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split100.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split100.axi_wr_4_splitter.b_fifo
son:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split100.axi_wr_4_splitter.order_fifo
son:   tb.dut.split100.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split100.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split100.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split100.axi_wr_4_splitter.b_fifo
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split100.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split100.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split100.axi_wr_4_splitter.order_fifo
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split100.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split100.axi_wr_4_splitter.w_fifo
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split100.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split101
net:   tb.dut.split101.a_arready [1] = 1     // a_arready
net:   tb.dut.split101.a_awready [1] = 1     // a_awready
net:   tb.dut.split101.a_bid [4] = 0000     // a_bid
net:   tb.dut.split101.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split101.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split101.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split101.a_rid [4] = 0000     // a_rid
net:   tb.dut.split101.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split101.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split101.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split101.a_wready [1] = 1     // a_wready
net:   tb.dut.split101.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split101.arburst [2] = 00     // arburst
net:   tb.dut.split101.arextras [8] = 00000000     // arextras
net:   tb.dut.split101.arid [4] = 0000     // arid
net:   tb.dut.split101.arlen [8] = 00000000     // arlen
net:   tb.dut.split101.arvalid [1] = 0     // arvalid
net:   tb.dut.split101.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split101.awburst [2] = 00     // awburst
net:   tb.dut.split101.awextras [8] = 00000000     // awextras
net:   tb.dut.split101.awid [4] = 0000     // awid
net:   tb.dut.split101.awlen [8] = 00000000     // awlen
net:   tb.dut.split101.awvalid [1] = 0     // awvalid
net:   tb.dut.split101.b_arready [1] = 1     // b_arready
net:   tb.dut.split101.b_awready [1] = 1     // b_awready
net:   tb.dut.split101.b_bid [4] = 0000     // b_bid
net:   tb.dut.split101.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split101.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split101.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split101.b_rid [4] = 0000     // b_rid
net:   tb.dut.split101.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split101.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split101.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split101.b_wready [1] = 1     // b_wready
net:   tb.dut.split101.bready [1] = 1     // bready
net:   tb.dut.split101.c_arready [1] = 1     // c_arready
net:   tb.dut.split101.c_awready [1] = 1     // c_awready
net:   tb.dut.split101.c_bid [4] = 0000     // c_bid
net:   tb.dut.split101.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split101.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split101.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split101.c_rid [4] = 0000     // c_rid
net:   tb.dut.split101.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split101.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split101.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split101.c_wready [1] = 1     // c_wready
net:   tb.dut.split101.clk [1] = 1     // clk
net:   tb.dut.split101.d_arready [1] = 1     // d_arready
net:   tb.dut.split101.d_awready [1] = 1     // d_awready
net:   tb.dut.split101.d_bid [4] = 0000     // d_bid
net:   tb.dut.split101.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split101.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split101.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split101.d_rid [4] = 0000     // d_rid
net:   tb.dut.split101.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split101.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split101.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split101.d_wready [1] = 1     // d_wready
net:   tb.dut.split101.rready [1] = 1     // rready
net:   tb.dut.split101.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split101.wlast [1] = 0     // wlast
net:   tb.dut.split101.wready [1] = 1     // wready
net:   tb.dut.split101.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split101.wvalid [1] = 0     // wvalid
net:   tb.dut.split101.rvalid [1] = 0     // rvalid
net:   tb.dut.split101.rresp [2] = 00     // rresp
net:   tb.dut.split101.rlast [1] = 0     // rlast
net:   tb.dut.split101.rid [4] = 0000     // rid
net:   tb.dut.split101.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split101.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split101.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split101.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split101.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split101.d_rready [1] = 1     // d_rready
net:   tb.dut.split101.d_bready [1] = 1     // d_bready
net:   tb.dut.split101.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split101.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split101.d_awid [4] = 0000     // d_awid
net:   tb.dut.split101.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split101.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split101.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split101.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split101.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split101.d_arid [4] = 0000     // d_arid
net:   tb.dut.split101.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split101.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split101.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split101.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split101.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split101.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split101.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split101.c_rready [1] = 1     // c_rready
net:   tb.dut.split101.c_bready [1] = 1     // c_bready
net:   tb.dut.split101.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split101.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split101.c_awid [4] = 0000     // c_awid
net:   tb.dut.split101.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split101.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split101.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split101.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split101.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split101.c_arid [4] = 0000     // c_arid
net:   tb.dut.split101.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split101.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split101.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split101.bvalid [1] = 0     // bvalid
net:   tb.dut.split101.bresp [2] = 00     // bresp
net:   tb.dut.split101.bid [4] = 0000     // bid
net:   tb.dut.split101.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split101.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split101.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split101.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split101.b_rready [1] = 1     // b_rready
net:   tb.dut.split101.b_bready [1] = 1     // b_bready
net:   tb.dut.split101.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split101.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split101.b_awid [4] = 0000     // b_awid
net:   tb.dut.split101.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split101.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split101.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split101.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split101.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split101.b_arid [4] = 0000     // b_arid
net:   tb.dut.split101.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split101.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split101.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split101.awready [1] = 1     // awready
net:   tb.dut.split101.arready [1] = 1     // arready
net:   tb.dut.split101.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split101.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split101.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split101.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split101.a_rready [1] = 1     // a_rready
net:   tb.dut.split101.a_bready [1] = 1     // a_bready
net:   tb.dut.split101.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split101.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split101.a_awid [4] = 0000     // a_awid
net:   tb.dut.split101.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split101.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split101.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split101.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split101.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split101.a_arid [4] = 0000     // a_arid
net:   tb.dut.split101.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split101.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split101.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split101.axi_rd_4_splitter
son:   tb.dut.split101.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split101.axi_rd_4_splitter
net:   tb.dut.split101.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split101.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split101.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split101.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split101.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split101.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split101.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split101.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split101.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split101.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split101.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split101.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split101.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split101.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split101.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split101.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split101.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split101.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split101.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split101.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split101.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split101.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split101.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split101.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split101.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split101.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split101.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split101.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split101.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split101.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split101.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split101.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split101.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split101.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split101.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split101.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split101.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split101.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split101.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split101.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split101.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split101.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split101.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split101.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split101.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split101.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split101.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split101.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split101.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split101.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split101.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split101.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split101.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split101.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split101.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split101.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split101.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split101.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split101.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split101.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split101.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split101.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split101.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split101.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split101.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split101.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split101.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split101.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split101.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split101.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split101.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split101.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split101.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split101.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split101.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split101.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split101.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split101.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split101.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split101.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split101.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split101.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split101.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split101.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split101.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split101.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split101.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split101.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split101.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split101.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split101.axi_rd_4_splitter.r_fifo
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split101.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split101.axi_wr_4_splitter
net:   tb.dut.split101.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split101.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split101.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split101.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split101.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split101.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split101.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split101.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split101.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split101.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split101.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split101.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split101.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split101.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split101.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split101.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split101.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split101.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split101.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split101.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split101.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split101.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split101.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split101.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split101.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split101.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split101.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split101.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split101.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split101.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split101.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split101.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split101.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split101.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split101.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split101.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split101.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split101.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split101.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split101.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split101.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split101.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split101.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split101.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split101.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split101.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split101.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split101.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split101.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split101.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split101.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split101.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split101.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split101.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split101.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split101.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split101.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split101.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split101.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split101.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split101.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split101.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split101.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split101.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split101.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split101.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split101.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split101.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split101.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split101.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split101.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split101.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split101.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split101.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split101.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split101.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split101.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split101.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split101.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split101.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split101.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split101.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split101.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split101.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split101.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split101.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split101.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split101.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split101.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split101.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split101.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split101.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split101.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split101.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split101.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split101.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split101.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split101.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split101.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split101.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split101.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split101.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split101.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split101.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split101.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split101.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split101.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split101.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split101.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split101.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split101.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split101.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split101.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split101.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split101.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split101.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split101.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split101.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split101.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split101.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split101.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split101.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split101.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split101.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split101.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split101.axi_wr_4_splitter.b_fifo
son:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split101.axi_wr_4_splitter.order_fifo
son:   tb.dut.split101.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split101.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split101.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split101.axi_wr_4_splitter.b_fifo
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split101.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split101.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split101.axi_wr_4_splitter.order_fifo
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split101.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split101.axi_wr_4_splitter.w_fifo
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split101.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split102
net:   tb.dut.split102.a_arready [1] = 1     // a_arready
net:   tb.dut.split102.a_awready [1] = 1     // a_awready
net:   tb.dut.split102.a_bid [4] = 0000     // a_bid
net:   tb.dut.split102.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split102.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split102.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split102.a_rid [4] = 0000     // a_rid
net:   tb.dut.split102.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split102.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split102.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split102.a_wready [1] = 1     // a_wready
net:   tb.dut.split102.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split102.arburst [2] = 00     // arburst
net:   tb.dut.split102.arextras [8] = 00000000     // arextras
net:   tb.dut.split102.arid [4] = 0000     // arid
net:   tb.dut.split102.arlen [8] = 00000000     // arlen
net:   tb.dut.split102.arvalid [1] = 0     // arvalid
net:   tb.dut.split102.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split102.awburst [2] = 00     // awburst
net:   tb.dut.split102.awextras [8] = 00000000     // awextras
net:   tb.dut.split102.awid [4] = 0000     // awid
net:   tb.dut.split102.awlen [8] = 00000000     // awlen
net:   tb.dut.split102.awvalid [1] = 0     // awvalid
net:   tb.dut.split102.b_arready [1] = 1     // b_arready
net:   tb.dut.split102.b_awready [1] = 1     // b_awready
net:   tb.dut.split102.b_bid [4] = 0000     // b_bid
net:   tb.dut.split102.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split102.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split102.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split102.b_rid [4] = 0000     // b_rid
net:   tb.dut.split102.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split102.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split102.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split102.b_wready [1] = 1     // b_wready
net:   tb.dut.split102.bready [1] = 1     // bready
net:   tb.dut.split102.c_arready [1] = 1     // c_arready
net:   tb.dut.split102.c_awready [1] = 1     // c_awready
net:   tb.dut.split102.c_bid [4] = 0000     // c_bid
net:   tb.dut.split102.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split102.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split102.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split102.c_rid [4] = 0000     // c_rid
net:   tb.dut.split102.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split102.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split102.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split102.c_wready [1] = 1     // c_wready
net:   tb.dut.split102.clk [1] = 1     // clk
net:   tb.dut.split102.d_arready [1] = 1     // d_arready
net:   tb.dut.split102.d_awready [1] = 1     // d_awready
net:   tb.dut.split102.d_bid [4] = 0000     // d_bid
net:   tb.dut.split102.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split102.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split102.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split102.d_rid [4] = 0000     // d_rid
net:   tb.dut.split102.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split102.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split102.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split102.d_wready [1] = 1     // d_wready
net:   tb.dut.split102.rready [1] = 1     // rready
net:   tb.dut.split102.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split102.wlast [1] = 0     // wlast
net:   tb.dut.split102.wready [1] = 1     // wready
net:   tb.dut.split102.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split102.wvalid [1] = 0     // wvalid
net:   tb.dut.split102.rvalid [1] = 0     // rvalid
net:   tb.dut.split102.rresp [2] = 00     // rresp
net:   tb.dut.split102.rlast [1] = 0     // rlast
net:   tb.dut.split102.rid [4] = 0000     // rid
net:   tb.dut.split102.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split102.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split102.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split102.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split102.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split102.d_rready [1] = 1     // d_rready
net:   tb.dut.split102.d_bready [1] = 1     // d_bready
net:   tb.dut.split102.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split102.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split102.d_awid [4] = 0000     // d_awid
net:   tb.dut.split102.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split102.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split102.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split102.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split102.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split102.d_arid [4] = 0000     // d_arid
net:   tb.dut.split102.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split102.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split102.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split102.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split102.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split102.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split102.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split102.c_rready [1] = 1     // c_rready
net:   tb.dut.split102.c_bready [1] = 1     // c_bready
net:   tb.dut.split102.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split102.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split102.c_awid [4] = 0000     // c_awid
net:   tb.dut.split102.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split102.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split102.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split102.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split102.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split102.c_arid [4] = 0000     // c_arid
net:   tb.dut.split102.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split102.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split102.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split102.bvalid [1] = 0     // bvalid
net:   tb.dut.split102.bresp [2] = 00     // bresp
net:   tb.dut.split102.bid [4] = 0000     // bid
net:   tb.dut.split102.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split102.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split102.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split102.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split102.b_rready [1] = 1     // b_rready
net:   tb.dut.split102.b_bready [1] = 1     // b_bready
net:   tb.dut.split102.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split102.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split102.b_awid [4] = 0000     // b_awid
net:   tb.dut.split102.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split102.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split102.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split102.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split102.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split102.b_arid [4] = 0000     // b_arid
net:   tb.dut.split102.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split102.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split102.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split102.awready [1] = 1     // awready
net:   tb.dut.split102.arready [1] = 1     // arready
net:   tb.dut.split102.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split102.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split102.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split102.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split102.a_rready [1] = 1     // a_rready
net:   tb.dut.split102.a_bready [1] = 1     // a_bready
net:   tb.dut.split102.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split102.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split102.a_awid [4] = 0000     // a_awid
net:   tb.dut.split102.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split102.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split102.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split102.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split102.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split102.a_arid [4] = 0000     // a_arid
net:   tb.dut.split102.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split102.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split102.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split102.axi_rd_4_splitter
son:   tb.dut.split102.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split102.axi_rd_4_splitter
net:   tb.dut.split102.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split102.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split102.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split102.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split102.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split102.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split102.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split102.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split102.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split102.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split102.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split102.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split102.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split102.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split102.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split102.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split102.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split102.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split102.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split102.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split102.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split102.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split102.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split102.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split102.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split102.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split102.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split102.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split102.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split102.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split102.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split102.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split102.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split102.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split102.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split102.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split102.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split102.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split102.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split102.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split102.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split102.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split102.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split102.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split102.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split102.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split102.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split102.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split102.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split102.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split102.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split102.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split102.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split102.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split102.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split102.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split102.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split102.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split102.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split102.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split102.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split102.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split102.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split102.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split102.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split102.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split102.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split102.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split102.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split102.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split102.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split102.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split102.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split102.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split102.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split102.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split102.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split102.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split102.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split102.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split102.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split102.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split102.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split102.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split102.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split102.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split102.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split102.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split102.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split102.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split102.axi_rd_4_splitter.r_fifo
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split102.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split102.axi_wr_4_splitter
net:   tb.dut.split102.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split102.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split102.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split102.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split102.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split102.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split102.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split102.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split102.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split102.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split102.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split102.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split102.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split102.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split102.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split102.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split102.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split102.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split102.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split102.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split102.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split102.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split102.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split102.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split102.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split102.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split102.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split102.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split102.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split102.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split102.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split102.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split102.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split102.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split102.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split102.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split102.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split102.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split102.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split102.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split102.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split102.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split102.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split102.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split102.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split102.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split102.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split102.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split102.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split102.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split102.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split102.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split102.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split102.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split102.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split102.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split102.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split102.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split102.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split102.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split102.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split102.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split102.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split102.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split102.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split102.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split102.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split102.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split102.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split102.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split102.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split102.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split102.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split102.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split102.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split102.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split102.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split102.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split102.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split102.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split102.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split102.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split102.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split102.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split102.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split102.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split102.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split102.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split102.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split102.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split102.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split102.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split102.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split102.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split102.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split102.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split102.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split102.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split102.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split102.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split102.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split102.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split102.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split102.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split102.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split102.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split102.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split102.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split102.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split102.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split102.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split102.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split102.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split102.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split102.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split102.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split102.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split102.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split102.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split102.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split102.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split102.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split102.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split102.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split102.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split102.axi_wr_4_splitter.b_fifo
son:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split102.axi_wr_4_splitter.order_fifo
son:   tb.dut.split102.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split102.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split102.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split102.axi_wr_4_splitter.b_fifo
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split102.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split102.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split102.axi_wr_4_splitter.order_fifo
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split102.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split102.axi_wr_4_splitter.w_fifo
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split102.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split103
net:   tb.dut.split103.a_arready [1] = 1     // a_arready
net:   tb.dut.split103.a_awready [1] = 1     // a_awready
net:   tb.dut.split103.a_bid [4] = 0000     // a_bid
net:   tb.dut.split103.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split103.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split103.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split103.a_rid [4] = 0000     // a_rid
net:   tb.dut.split103.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split103.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split103.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split103.a_wready [1] = 1     // a_wready
net:   tb.dut.split103.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split103.arburst [2] = 00     // arburst
net:   tb.dut.split103.arextras [8] = 00000000     // arextras
net:   tb.dut.split103.arid [4] = 0000     // arid
net:   tb.dut.split103.arlen [8] = 00000000     // arlen
net:   tb.dut.split103.arvalid [1] = 0     // arvalid
net:   tb.dut.split103.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split103.awburst [2] = 00     // awburst
net:   tb.dut.split103.awextras [8] = 00000000     // awextras
net:   tb.dut.split103.awid [4] = 0000     // awid
net:   tb.dut.split103.awlen [8] = 00000000     // awlen
net:   tb.dut.split103.awvalid [1] = 0     // awvalid
net:   tb.dut.split103.b_arready [1] = 1     // b_arready
net:   tb.dut.split103.b_awready [1] = 1     // b_awready
net:   tb.dut.split103.b_bid [4] = 0000     // b_bid
net:   tb.dut.split103.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split103.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split103.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split103.b_rid [4] = 0000     // b_rid
net:   tb.dut.split103.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split103.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split103.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split103.b_wready [1] = 1     // b_wready
net:   tb.dut.split103.bready [1] = 1     // bready
net:   tb.dut.split103.c_arready [1] = 1     // c_arready
net:   tb.dut.split103.c_awready [1] = 1     // c_awready
net:   tb.dut.split103.c_bid [4] = 0000     // c_bid
net:   tb.dut.split103.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split103.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split103.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split103.c_rid [4] = 0000     // c_rid
net:   tb.dut.split103.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split103.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split103.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split103.c_wready [1] = 1     // c_wready
net:   tb.dut.split103.clk [1] = 1     // clk
net:   tb.dut.split103.d_arready [1] = 1     // d_arready
net:   tb.dut.split103.d_awready [1] = 1     // d_awready
net:   tb.dut.split103.d_bid [4] = 0000     // d_bid
net:   tb.dut.split103.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split103.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split103.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split103.d_rid [4] = 0000     // d_rid
net:   tb.dut.split103.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split103.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split103.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split103.d_wready [1] = 1     // d_wready
net:   tb.dut.split103.rready [1] = 1     // rready
net:   tb.dut.split103.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split103.wlast [1] = 0     // wlast
net:   tb.dut.split103.wready [1] = 1     // wready
net:   tb.dut.split103.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split103.wvalid [1] = 0     // wvalid
net:   tb.dut.split103.rvalid [1] = 0     // rvalid
net:   tb.dut.split103.rresp [2] = 00     // rresp
net:   tb.dut.split103.rlast [1] = 0     // rlast
net:   tb.dut.split103.rid [4] = 0000     // rid
net:   tb.dut.split103.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split103.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split103.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split103.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split103.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split103.d_rready [1] = 1     // d_rready
net:   tb.dut.split103.d_bready [1] = 1     // d_bready
net:   tb.dut.split103.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split103.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split103.d_awid [4] = 0000     // d_awid
net:   tb.dut.split103.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split103.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split103.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split103.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split103.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split103.d_arid [4] = 0000     // d_arid
net:   tb.dut.split103.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split103.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split103.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split103.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split103.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split103.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split103.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split103.c_rready [1] = 1     // c_rready
net:   tb.dut.split103.c_bready [1] = 1     // c_bready
net:   tb.dut.split103.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split103.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split103.c_awid [4] = 0000     // c_awid
net:   tb.dut.split103.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split103.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split103.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split103.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split103.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split103.c_arid [4] = 0000     // c_arid
net:   tb.dut.split103.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split103.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split103.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split103.bvalid [1] = 0     // bvalid
net:   tb.dut.split103.bresp [2] = 00     // bresp
net:   tb.dut.split103.bid [4] = 0000     // bid
net:   tb.dut.split103.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split103.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split103.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split103.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split103.b_rready [1] = 1     // b_rready
net:   tb.dut.split103.b_bready [1] = 1     // b_bready
net:   tb.dut.split103.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split103.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split103.b_awid [4] = 0000     // b_awid
net:   tb.dut.split103.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split103.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split103.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split103.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split103.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split103.b_arid [4] = 0000     // b_arid
net:   tb.dut.split103.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split103.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split103.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split103.awready [1] = 1     // awready
net:   tb.dut.split103.arready [1] = 1     // arready
net:   tb.dut.split103.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split103.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split103.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split103.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split103.a_rready [1] = 1     // a_rready
net:   tb.dut.split103.a_bready [1] = 1     // a_bready
net:   tb.dut.split103.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split103.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split103.a_awid [4] = 0000     // a_awid
net:   tb.dut.split103.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split103.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split103.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split103.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split103.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split103.a_arid [4] = 0000     // a_arid
net:   tb.dut.split103.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split103.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split103.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split103.axi_rd_4_splitter
son:   tb.dut.split103.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split103.axi_rd_4_splitter
net:   tb.dut.split103.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split103.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split103.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split103.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split103.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split103.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split103.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split103.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split103.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split103.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split103.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split103.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split103.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split103.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split103.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split103.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split103.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split103.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split103.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split103.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split103.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split103.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split103.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split103.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split103.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split103.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split103.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split103.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split103.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split103.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split103.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split103.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split103.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split103.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split103.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split103.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split103.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split103.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split103.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split103.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split103.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split103.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split103.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split103.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split103.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split103.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split103.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split103.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split103.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split103.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split103.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split103.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split103.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split103.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split103.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split103.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split103.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split103.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split103.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split103.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split103.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split103.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split103.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split103.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split103.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split103.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split103.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split103.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split103.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split103.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split103.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split103.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split103.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split103.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split103.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split103.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split103.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split103.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split103.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split103.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split103.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split103.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split103.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split103.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split103.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split103.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split103.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split103.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split103.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split103.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split103.axi_rd_4_splitter.r_fifo
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split103.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split103.axi_wr_4_splitter
net:   tb.dut.split103.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split103.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split103.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split103.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split103.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split103.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split103.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split103.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split103.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split103.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split103.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split103.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split103.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split103.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split103.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split103.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split103.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split103.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split103.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split103.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split103.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split103.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split103.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split103.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split103.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split103.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split103.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split103.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split103.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split103.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split103.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split103.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split103.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split103.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split103.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split103.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split103.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split103.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split103.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split103.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split103.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split103.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split103.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split103.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split103.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split103.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split103.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split103.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split103.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split103.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split103.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split103.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split103.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split103.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split103.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split103.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split103.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split103.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split103.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split103.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split103.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split103.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split103.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split103.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split103.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split103.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split103.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split103.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split103.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split103.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split103.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split103.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split103.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split103.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split103.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split103.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split103.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split103.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split103.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split103.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split103.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split103.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split103.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split103.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split103.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split103.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split103.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split103.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split103.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split103.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split103.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split103.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split103.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split103.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split103.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split103.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split103.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split103.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split103.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split103.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split103.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split103.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split103.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split103.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split103.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split103.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split103.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split103.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split103.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split103.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split103.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split103.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split103.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split103.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split103.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split103.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split103.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split103.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split103.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split103.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split103.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split103.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split103.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split103.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split103.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split103.axi_wr_4_splitter.b_fifo
son:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split103.axi_wr_4_splitter.order_fifo
son:   tb.dut.split103.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split103.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split103.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split103.axi_wr_4_splitter.b_fifo
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split103.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split103.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split103.axi_wr_4_splitter.order_fifo
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split103.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split103.axi_wr_4_splitter.w_fifo
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split103.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split104
net:   tb.dut.split104.a_arready [1] = 1     // a_arready
net:   tb.dut.split104.a_awready [1] = 1     // a_awready
net:   tb.dut.split104.a_bid [4] = 0000     // a_bid
net:   tb.dut.split104.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split104.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split104.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split104.a_rid [4] = 0000     // a_rid
net:   tb.dut.split104.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split104.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split104.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split104.a_wready [1] = 1     // a_wready
net:   tb.dut.split104.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split104.arburst [2] = 00     // arburst
net:   tb.dut.split104.arextras [8] = 00000000     // arextras
net:   tb.dut.split104.arid [4] = 0000     // arid
net:   tb.dut.split104.arlen [8] = 00000000     // arlen
net:   tb.dut.split104.arvalid [1] = 0     // arvalid
net:   tb.dut.split104.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split104.awburst [2] = 00     // awburst
net:   tb.dut.split104.awextras [8] = 00000000     // awextras
net:   tb.dut.split104.awid [4] = 0000     // awid
net:   tb.dut.split104.awlen [8] = 00000000     // awlen
net:   tb.dut.split104.awvalid [1] = 0     // awvalid
net:   tb.dut.split104.b_arready [1] = 1     // b_arready
net:   tb.dut.split104.b_awready [1] = 1     // b_awready
net:   tb.dut.split104.b_bid [4] = 0000     // b_bid
net:   tb.dut.split104.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split104.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split104.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split104.b_rid [4] = 0000     // b_rid
net:   tb.dut.split104.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split104.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split104.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split104.b_wready [1] = 1     // b_wready
net:   tb.dut.split104.bready [1] = 1     // bready
net:   tb.dut.split104.c_arready [1] = 1     // c_arready
net:   tb.dut.split104.c_awready [1] = 1     // c_awready
net:   tb.dut.split104.c_bid [4] = 0000     // c_bid
net:   tb.dut.split104.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split104.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split104.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split104.c_rid [4] = 0000     // c_rid
net:   tb.dut.split104.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split104.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split104.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split104.c_wready [1] = 1     // c_wready
net:   tb.dut.split104.clk [1] = 1     // clk
net:   tb.dut.split104.d_arready [1] = 1     // d_arready
net:   tb.dut.split104.d_awready [1] = 1     // d_awready
net:   tb.dut.split104.d_bid [4] = 0000     // d_bid
net:   tb.dut.split104.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split104.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split104.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split104.d_rid [4] = 0000     // d_rid
net:   tb.dut.split104.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split104.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split104.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split104.d_wready [1] = 1     // d_wready
net:   tb.dut.split104.rready [1] = 1     // rready
net:   tb.dut.split104.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split104.wlast [1] = 0     // wlast
net:   tb.dut.split104.wready [1] = 1     // wready
net:   tb.dut.split104.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split104.wvalid [1] = 0     // wvalid
net:   tb.dut.split104.rvalid [1] = 0     // rvalid
net:   tb.dut.split104.rresp [2] = 00     // rresp
net:   tb.dut.split104.rlast [1] = 0     // rlast
net:   tb.dut.split104.rid [4] = 0000     // rid
net:   tb.dut.split104.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split104.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split104.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split104.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split104.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split104.d_rready [1] = 1     // d_rready
net:   tb.dut.split104.d_bready [1] = 1     // d_bready
net:   tb.dut.split104.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split104.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split104.d_awid [4] = 0000     // d_awid
net:   tb.dut.split104.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split104.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split104.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split104.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split104.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split104.d_arid [4] = 0000     // d_arid
net:   tb.dut.split104.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split104.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split104.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split104.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split104.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split104.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split104.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split104.c_rready [1] = 1     // c_rready
net:   tb.dut.split104.c_bready [1] = 1     // c_bready
net:   tb.dut.split104.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split104.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split104.c_awid [4] = 0000     // c_awid
net:   tb.dut.split104.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split104.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split104.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split104.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split104.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split104.c_arid [4] = 0000     // c_arid
net:   tb.dut.split104.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split104.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split104.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split104.bvalid [1] = 0     // bvalid
net:   tb.dut.split104.bresp [2] = 00     // bresp
net:   tb.dut.split104.bid [4] = 0000     // bid
net:   tb.dut.split104.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split104.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split104.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split104.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split104.b_rready [1] = 1     // b_rready
net:   tb.dut.split104.b_bready [1] = 1     // b_bready
net:   tb.dut.split104.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split104.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split104.b_awid [4] = 0000     // b_awid
net:   tb.dut.split104.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split104.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split104.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split104.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split104.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split104.b_arid [4] = 0000     // b_arid
net:   tb.dut.split104.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split104.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split104.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split104.awready [1] = 1     // awready
net:   tb.dut.split104.arready [1] = 1     // arready
net:   tb.dut.split104.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split104.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split104.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split104.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split104.a_rready [1] = 1     // a_rready
net:   tb.dut.split104.a_bready [1] = 1     // a_bready
net:   tb.dut.split104.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split104.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split104.a_awid [4] = 0000     // a_awid
net:   tb.dut.split104.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split104.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split104.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split104.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split104.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split104.a_arid [4] = 0000     // a_arid
net:   tb.dut.split104.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split104.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split104.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split104.axi_rd_4_splitter
son:   tb.dut.split104.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split104.axi_rd_4_splitter
net:   tb.dut.split104.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split104.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split104.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split104.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split104.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split104.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split104.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split104.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split104.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split104.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split104.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split104.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split104.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split104.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split104.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split104.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split104.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split104.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split104.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split104.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split104.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split104.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split104.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split104.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split104.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split104.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split104.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split104.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split104.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split104.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split104.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split104.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split104.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split104.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split104.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split104.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split104.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split104.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split104.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split104.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split104.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split104.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split104.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split104.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split104.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split104.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split104.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split104.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split104.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split104.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split104.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split104.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split104.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split104.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split104.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split104.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split104.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split104.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split104.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split104.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split104.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split104.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split104.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split104.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split104.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split104.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split104.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split104.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split104.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split104.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split104.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split104.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split104.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split104.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split104.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split104.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split104.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split104.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split104.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split104.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split104.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split104.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split104.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split104.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split104.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split104.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split104.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split104.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split104.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split104.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split104.axi_rd_4_splitter.r_fifo
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split104.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split104.axi_wr_4_splitter
net:   tb.dut.split104.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split104.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split104.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split104.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split104.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split104.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split104.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split104.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split104.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split104.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split104.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split104.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split104.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split104.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split104.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split104.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split104.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split104.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split104.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split104.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split104.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split104.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split104.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split104.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split104.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split104.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split104.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split104.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split104.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split104.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split104.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split104.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split104.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split104.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split104.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split104.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split104.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split104.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split104.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split104.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split104.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split104.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split104.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split104.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split104.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split104.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split104.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split104.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split104.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split104.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split104.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split104.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split104.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split104.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split104.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split104.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split104.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split104.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split104.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split104.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split104.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split104.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split104.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split104.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split104.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split104.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split104.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split104.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split104.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split104.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split104.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split104.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split104.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split104.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split104.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split104.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split104.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split104.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split104.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split104.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split104.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split104.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split104.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split104.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split104.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split104.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split104.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split104.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split104.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split104.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split104.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split104.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split104.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split104.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split104.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split104.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split104.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split104.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split104.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split104.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split104.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split104.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split104.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split104.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split104.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split104.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split104.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split104.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split104.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split104.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split104.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split104.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split104.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split104.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split104.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split104.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split104.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split104.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split104.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split104.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split104.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split104.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split104.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split104.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split104.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split104.axi_wr_4_splitter.b_fifo
son:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split104.axi_wr_4_splitter.order_fifo
son:   tb.dut.split104.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split104.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split104.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split104.axi_wr_4_splitter.b_fifo
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split104.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split104.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split104.axi_wr_4_splitter.order_fifo
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split104.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split104.axi_wr_4_splitter.w_fifo
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split104.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split105
net:   tb.dut.split105.a_arready [1] = 1     // a_arready
net:   tb.dut.split105.a_awready [1] = 1     // a_awready
net:   tb.dut.split105.a_bid [4] = 0000     // a_bid
net:   tb.dut.split105.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split105.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split105.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split105.a_rid [4] = 0000     // a_rid
net:   tb.dut.split105.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split105.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split105.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split105.a_wready [1] = 1     // a_wready
net:   tb.dut.split105.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split105.arburst [2] = 00     // arburst
net:   tb.dut.split105.arextras [8] = 00000000     // arextras
net:   tb.dut.split105.arid [4] = 0000     // arid
net:   tb.dut.split105.arlen [8] = 00000000     // arlen
net:   tb.dut.split105.arvalid [1] = 0     // arvalid
net:   tb.dut.split105.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split105.awburst [2] = 00     // awburst
net:   tb.dut.split105.awextras [8] = 00000000     // awextras
net:   tb.dut.split105.awid [4] = 0000     // awid
net:   tb.dut.split105.awlen [8] = 00000000     // awlen
net:   tb.dut.split105.awvalid [1] = 0     // awvalid
net:   tb.dut.split105.b_arready [1] = 1     // b_arready
net:   tb.dut.split105.b_awready [1] = 1     // b_awready
net:   tb.dut.split105.b_bid [4] = 0000     // b_bid
net:   tb.dut.split105.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split105.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split105.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split105.b_rid [4] = 0000     // b_rid
net:   tb.dut.split105.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split105.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split105.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split105.b_wready [1] = 1     // b_wready
net:   tb.dut.split105.bready [1] = 1     // bready
net:   tb.dut.split105.c_arready [1] = 1     // c_arready
net:   tb.dut.split105.c_awready [1] = 1     // c_awready
net:   tb.dut.split105.c_bid [4] = 0000     // c_bid
net:   tb.dut.split105.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split105.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split105.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split105.c_rid [4] = 0000     // c_rid
net:   tb.dut.split105.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split105.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split105.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split105.c_wready [1] = 1     // c_wready
net:   tb.dut.split105.clk [1] = 1     // clk
net:   tb.dut.split105.d_arready [1] = 1     // d_arready
net:   tb.dut.split105.d_awready [1] = 1     // d_awready
net:   tb.dut.split105.d_bid [4] = 0000     // d_bid
net:   tb.dut.split105.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split105.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split105.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split105.d_rid [4] = 0000     // d_rid
net:   tb.dut.split105.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split105.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split105.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split105.d_wready [1] = 1     // d_wready
net:   tb.dut.split105.rready [1] = 1     // rready
net:   tb.dut.split105.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split105.wlast [1] = 0     // wlast
net:   tb.dut.split105.wready [1] = 1     // wready
net:   tb.dut.split105.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split105.wvalid [1] = 0     // wvalid
net:   tb.dut.split105.rvalid [1] = 0     // rvalid
net:   tb.dut.split105.rresp [2] = 00     // rresp
net:   tb.dut.split105.rlast [1] = 0     // rlast
net:   tb.dut.split105.rid [4] = 0000     // rid
net:   tb.dut.split105.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split105.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split105.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split105.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split105.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split105.d_rready [1] = 1     // d_rready
net:   tb.dut.split105.d_bready [1] = 1     // d_bready
net:   tb.dut.split105.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split105.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split105.d_awid [4] = 0000     // d_awid
net:   tb.dut.split105.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split105.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split105.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split105.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split105.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split105.d_arid [4] = 0000     // d_arid
net:   tb.dut.split105.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split105.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split105.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split105.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split105.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split105.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split105.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split105.c_rready [1] = 1     // c_rready
net:   tb.dut.split105.c_bready [1] = 1     // c_bready
net:   tb.dut.split105.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split105.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split105.c_awid [4] = 0000     // c_awid
net:   tb.dut.split105.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split105.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split105.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split105.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split105.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split105.c_arid [4] = 0000     // c_arid
net:   tb.dut.split105.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split105.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split105.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split105.bvalid [1] = 0     // bvalid
net:   tb.dut.split105.bresp [2] = 00     // bresp
net:   tb.dut.split105.bid [4] = 0000     // bid
net:   tb.dut.split105.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split105.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split105.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split105.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split105.b_rready [1] = 1     // b_rready
net:   tb.dut.split105.b_bready [1] = 1     // b_bready
net:   tb.dut.split105.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split105.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split105.b_awid [4] = 0000     // b_awid
net:   tb.dut.split105.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split105.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split105.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split105.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split105.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split105.b_arid [4] = 0000     // b_arid
net:   tb.dut.split105.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split105.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split105.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split105.awready [1] = 1     // awready
net:   tb.dut.split105.arready [1] = 1     // arready
net:   tb.dut.split105.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split105.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split105.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split105.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split105.a_rready [1] = 1     // a_rready
net:   tb.dut.split105.a_bready [1] = 1     // a_bready
net:   tb.dut.split105.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split105.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split105.a_awid [4] = 0000     // a_awid
net:   tb.dut.split105.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split105.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split105.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split105.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split105.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split105.a_arid [4] = 0000     // a_arid
net:   tb.dut.split105.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split105.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split105.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split105.axi_rd_4_splitter
son:   tb.dut.split105.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split105.axi_rd_4_splitter
net:   tb.dut.split105.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split105.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split105.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split105.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split105.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split105.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split105.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split105.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split105.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split105.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split105.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split105.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split105.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split105.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split105.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split105.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split105.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split105.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split105.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split105.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split105.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split105.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split105.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split105.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split105.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split105.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split105.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split105.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split105.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split105.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split105.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split105.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split105.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split105.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split105.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split105.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split105.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split105.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split105.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split105.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split105.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split105.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split105.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split105.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split105.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split105.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split105.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split105.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split105.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split105.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split105.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split105.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split105.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split105.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split105.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split105.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split105.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split105.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split105.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split105.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split105.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split105.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split105.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split105.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split105.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split105.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split105.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split105.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split105.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split105.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split105.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split105.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split105.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split105.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split105.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split105.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split105.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split105.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split105.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split105.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split105.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split105.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split105.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split105.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split105.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split105.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split105.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split105.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split105.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split105.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split105.axi_rd_4_splitter.r_fifo
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split105.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split105.axi_wr_4_splitter
net:   tb.dut.split105.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split105.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split105.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split105.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split105.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split105.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split105.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split105.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split105.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split105.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split105.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split105.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split105.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split105.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split105.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split105.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split105.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split105.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split105.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split105.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split105.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split105.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split105.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split105.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split105.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split105.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split105.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split105.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split105.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split105.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split105.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split105.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split105.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split105.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split105.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split105.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split105.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split105.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split105.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split105.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split105.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split105.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split105.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split105.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split105.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split105.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split105.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split105.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split105.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split105.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split105.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split105.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split105.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split105.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split105.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split105.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split105.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split105.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split105.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split105.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split105.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split105.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split105.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split105.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split105.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split105.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split105.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split105.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split105.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split105.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split105.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split105.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split105.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split105.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split105.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split105.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split105.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split105.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split105.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split105.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split105.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split105.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split105.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split105.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split105.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split105.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split105.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split105.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split105.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split105.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split105.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split105.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split105.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split105.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split105.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split105.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split105.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split105.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split105.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split105.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split105.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split105.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split105.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split105.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split105.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split105.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split105.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split105.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split105.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split105.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split105.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split105.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split105.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split105.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split105.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split105.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split105.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split105.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split105.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split105.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split105.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split105.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split105.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split105.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split105.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split105.axi_wr_4_splitter.b_fifo
son:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split105.axi_wr_4_splitter.order_fifo
son:   tb.dut.split105.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split105.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split105.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split105.axi_wr_4_splitter.b_fifo
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split105.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split105.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split105.axi_wr_4_splitter.order_fifo
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split105.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split105.axi_wr_4_splitter.w_fifo
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split105.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split106
net:   tb.dut.split106.a_arready [1] = 1     // a_arready
net:   tb.dut.split106.a_awready [1] = 1     // a_awready
net:   tb.dut.split106.a_bid [4] = 0000     // a_bid
net:   tb.dut.split106.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split106.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split106.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split106.a_rid [4] = 0000     // a_rid
net:   tb.dut.split106.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split106.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split106.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split106.a_wready [1] = 1     // a_wready
net:   tb.dut.split106.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split106.arburst [2] = 00     // arburst
net:   tb.dut.split106.arextras [8] = 00000000     // arextras
net:   tb.dut.split106.arid [4] = 0000     // arid
net:   tb.dut.split106.arlen [8] = 00000000     // arlen
net:   tb.dut.split106.arvalid [1] = 0     // arvalid
net:   tb.dut.split106.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split106.awburst [2] = 00     // awburst
net:   tb.dut.split106.awextras [8] = 00000000     // awextras
net:   tb.dut.split106.awid [4] = 0000     // awid
net:   tb.dut.split106.awlen [8] = 00000000     // awlen
net:   tb.dut.split106.awvalid [1] = 0     // awvalid
net:   tb.dut.split106.b_arready [1] = 1     // b_arready
net:   tb.dut.split106.b_awready [1] = 1     // b_awready
net:   tb.dut.split106.b_bid [4] = 0000     // b_bid
net:   tb.dut.split106.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split106.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split106.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split106.b_rid [4] = 0000     // b_rid
net:   tb.dut.split106.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split106.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split106.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split106.b_wready [1] = 1     // b_wready
net:   tb.dut.split106.bready [1] = 1     // bready
net:   tb.dut.split106.c_arready [1] = 1     // c_arready
net:   tb.dut.split106.c_awready [1] = 1     // c_awready
net:   tb.dut.split106.c_bid [4] = 0000     // c_bid
net:   tb.dut.split106.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split106.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split106.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split106.c_rid [4] = 0000     // c_rid
net:   tb.dut.split106.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split106.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split106.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split106.c_wready [1] = 1     // c_wready
net:   tb.dut.split106.clk [1] = 1     // clk
net:   tb.dut.split106.d_arready [1] = 1     // d_arready
net:   tb.dut.split106.d_awready [1] = 1     // d_awready
net:   tb.dut.split106.d_bid [4] = 0000     // d_bid
net:   tb.dut.split106.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split106.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split106.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split106.d_rid [4] = 0000     // d_rid
net:   tb.dut.split106.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split106.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split106.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split106.d_wready [1] = 1     // d_wready
net:   tb.dut.split106.rready [1] = 1     // rready
net:   tb.dut.split106.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split106.wlast [1] = 0     // wlast
net:   tb.dut.split106.wready [1] = 1     // wready
net:   tb.dut.split106.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split106.wvalid [1] = 0     // wvalid
net:   tb.dut.split106.rvalid [1] = 0     // rvalid
net:   tb.dut.split106.rresp [2] = 00     // rresp
net:   tb.dut.split106.rlast [1] = 0     // rlast
net:   tb.dut.split106.rid [4] = 0000     // rid
net:   tb.dut.split106.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split106.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split106.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split106.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split106.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split106.d_rready [1] = 1     // d_rready
net:   tb.dut.split106.d_bready [1] = 1     // d_bready
net:   tb.dut.split106.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split106.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split106.d_awid [4] = 0000     // d_awid
net:   tb.dut.split106.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split106.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split106.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split106.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split106.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split106.d_arid [4] = 0000     // d_arid
net:   tb.dut.split106.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split106.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split106.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split106.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split106.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split106.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split106.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split106.c_rready [1] = 1     // c_rready
net:   tb.dut.split106.c_bready [1] = 1     // c_bready
net:   tb.dut.split106.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split106.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split106.c_awid [4] = 0000     // c_awid
net:   tb.dut.split106.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split106.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split106.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split106.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split106.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split106.c_arid [4] = 0000     // c_arid
net:   tb.dut.split106.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split106.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split106.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split106.bvalid [1] = 0     // bvalid
net:   tb.dut.split106.bresp [2] = 00     // bresp
net:   tb.dut.split106.bid [4] = 0000     // bid
net:   tb.dut.split106.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split106.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split106.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split106.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split106.b_rready [1] = 1     // b_rready
net:   tb.dut.split106.b_bready [1] = 1     // b_bready
net:   tb.dut.split106.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split106.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split106.b_awid [4] = 0000     // b_awid
net:   tb.dut.split106.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split106.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split106.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split106.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split106.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split106.b_arid [4] = 0000     // b_arid
net:   tb.dut.split106.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split106.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split106.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split106.awready [1] = 1     // awready
net:   tb.dut.split106.arready [1] = 1     // arready
net:   tb.dut.split106.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split106.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split106.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split106.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split106.a_rready [1] = 1     // a_rready
net:   tb.dut.split106.a_bready [1] = 1     // a_bready
net:   tb.dut.split106.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split106.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split106.a_awid [4] = 0000     // a_awid
net:   tb.dut.split106.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split106.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split106.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split106.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split106.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split106.a_arid [4] = 0000     // a_arid
net:   tb.dut.split106.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split106.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split106.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split106.axi_rd_4_splitter
son:   tb.dut.split106.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split106.axi_rd_4_splitter
net:   tb.dut.split106.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split106.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split106.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split106.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split106.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split106.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split106.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split106.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split106.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split106.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split106.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split106.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split106.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split106.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split106.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split106.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split106.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split106.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split106.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split106.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split106.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split106.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split106.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split106.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split106.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split106.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split106.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split106.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split106.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split106.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split106.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split106.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split106.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split106.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split106.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split106.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split106.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split106.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split106.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split106.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split106.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split106.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split106.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split106.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split106.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split106.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split106.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split106.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split106.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split106.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split106.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split106.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split106.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split106.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split106.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split106.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split106.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split106.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split106.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split106.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split106.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split106.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split106.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split106.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split106.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split106.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split106.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split106.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split106.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split106.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split106.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split106.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split106.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split106.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split106.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split106.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split106.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split106.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split106.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split106.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split106.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split106.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split106.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split106.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split106.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split106.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split106.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split106.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split106.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split106.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split106.axi_rd_4_splitter.r_fifo
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split106.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split106.axi_wr_4_splitter
net:   tb.dut.split106.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split106.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split106.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split106.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split106.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split106.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split106.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split106.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split106.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split106.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split106.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split106.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split106.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split106.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split106.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split106.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split106.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split106.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split106.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split106.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split106.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split106.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split106.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split106.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split106.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split106.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split106.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split106.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split106.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split106.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split106.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split106.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split106.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split106.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split106.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split106.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split106.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split106.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split106.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split106.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split106.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split106.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split106.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split106.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split106.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split106.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split106.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split106.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split106.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split106.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split106.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split106.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split106.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split106.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split106.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split106.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split106.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split106.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split106.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split106.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split106.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split106.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split106.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split106.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split106.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split106.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split106.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split106.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split106.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split106.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split106.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split106.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split106.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split106.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split106.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split106.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split106.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split106.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split106.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split106.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split106.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split106.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split106.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split106.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split106.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split106.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split106.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split106.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split106.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split106.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split106.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split106.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split106.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split106.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split106.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split106.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split106.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split106.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split106.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split106.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split106.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split106.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split106.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split106.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split106.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split106.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split106.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split106.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split106.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split106.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split106.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split106.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split106.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split106.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split106.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split106.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split106.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split106.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split106.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split106.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split106.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split106.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split106.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split106.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split106.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split106.axi_wr_4_splitter.b_fifo
son:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split106.axi_wr_4_splitter.order_fifo
son:   tb.dut.split106.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split106.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split106.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split106.axi_wr_4_splitter.b_fifo
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split106.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split106.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split106.axi_wr_4_splitter.order_fifo
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split106.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split106.axi_wr_4_splitter.w_fifo
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split106.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split107
net:   tb.dut.split107.a_arready [1] = 1     // a_arready
net:   tb.dut.split107.a_awready [1] = 1     // a_awready
net:   tb.dut.split107.a_bid [4] = 0000     // a_bid
net:   tb.dut.split107.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split107.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split107.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split107.a_rid [4] = 0000     // a_rid
net:   tb.dut.split107.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split107.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split107.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split107.a_wready [1] = 1     // a_wready
net:   tb.dut.split107.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split107.arburst [2] = 00     // arburst
net:   tb.dut.split107.arextras [8] = 00000000     // arextras
net:   tb.dut.split107.arid [4] = 0000     // arid
net:   tb.dut.split107.arlen [8] = 00000000     // arlen
net:   tb.dut.split107.arvalid [1] = 0     // arvalid
net:   tb.dut.split107.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split107.awburst [2] = 00     // awburst
net:   tb.dut.split107.awextras [8] = 00000000     // awextras
net:   tb.dut.split107.awid [4] = 0000     // awid
net:   tb.dut.split107.awlen [8] = 00000000     // awlen
net:   tb.dut.split107.awvalid [1] = 0     // awvalid
net:   tb.dut.split107.b_arready [1] = 1     // b_arready
net:   tb.dut.split107.b_awready [1] = 1     // b_awready
net:   tb.dut.split107.b_bid [4] = 0000     // b_bid
net:   tb.dut.split107.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split107.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split107.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split107.b_rid [4] = 0000     // b_rid
net:   tb.dut.split107.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split107.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split107.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split107.b_wready [1] = 1     // b_wready
net:   tb.dut.split107.bready [1] = 1     // bready
net:   tb.dut.split107.c_arready [1] = 1     // c_arready
net:   tb.dut.split107.c_awready [1] = 1     // c_awready
net:   tb.dut.split107.c_bid [4] = 0000     // c_bid
net:   tb.dut.split107.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split107.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split107.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split107.c_rid [4] = 0000     // c_rid
net:   tb.dut.split107.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split107.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split107.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split107.c_wready [1] = 1     // c_wready
net:   tb.dut.split107.clk [1] = 1     // clk
net:   tb.dut.split107.d_arready [1] = 1     // d_arready
net:   tb.dut.split107.d_awready [1] = 1     // d_awready
net:   tb.dut.split107.d_bid [4] = 0000     // d_bid
net:   tb.dut.split107.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split107.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split107.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split107.d_rid [4] = 0000     // d_rid
net:   tb.dut.split107.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split107.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split107.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split107.d_wready [1] = 1     // d_wready
net:   tb.dut.split107.rready [1] = 1     // rready
net:   tb.dut.split107.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split107.wlast [1] = 0     // wlast
net:   tb.dut.split107.wready [1] = 1     // wready
net:   tb.dut.split107.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split107.wvalid [1] = 0     // wvalid
net:   tb.dut.split107.rvalid [1] = 0     // rvalid
net:   tb.dut.split107.rresp [2] = 00     // rresp
net:   tb.dut.split107.rlast [1] = 0     // rlast
net:   tb.dut.split107.rid [4] = 0000     // rid
net:   tb.dut.split107.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split107.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split107.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split107.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split107.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split107.d_rready [1] = 1     // d_rready
net:   tb.dut.split107.d_bready [1] = 1     // d_bready
net:   tb.dut.split107.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split107.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split107.d_awid [4] = 0000     // d_awid
net:   tb.dut.split107.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split107.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split107.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split107.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split107.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split107.d_arid [4] = 0000     // d_arid
net:   tb.dut.split107.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split107.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split107.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split107.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split107.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split107.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split107.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split107.c_rready [1] = 1     // c_rready
net:   tb.dut.split107.c_bready [1] = 1     // c_bready
net:   tb.dut.split107.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split107.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split107.c_awid [4] = 0000     // c_awid
net:   tb.dut.split107.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split107.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split107.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split107.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split107.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split107.c_arid [4] = 0000     // c_arid
net:   tb.dut.split107.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split107.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split107.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split107.bvalid [1] = 0     // bvalid
net:   tb.dut.split107.bresp [2] = 00     // bresp
net:   tb.dut.split107.bid [4] = 0000     // bid
net:   tb.dut.split107.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split107.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split107.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split107.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split107.b_rready [1] = 1     // b_rready
net:   tb.dut.split107.b_bready [1] = 1     // b_bready
net:   tb.dut.split107.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split107.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split107.b_awid [4] = 0000     // b_awid
net:   tb.dut.split107.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split107.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split107.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split107.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split107.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split107.b_arid [4] = 0000     // b_arid
net:   tb.dut.split107.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split107.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split107.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split107.awready [1] = 1     // awready
net:   tb.dut.split107.arready [1] = 1     // arready
net:   tb.dut.split107.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split107.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split107.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split107.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split107.a_rready [1] = 1     // a_rready
net:   tb.dut.split107.a_bready [1] = 1     // a_bready
net:   tb.dut.split107.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split107.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split107.a_awid [4] = 0000     // a_awid
net:   tb.dut.split107.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split107.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split107.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split107.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split107.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split107.a_arid [4] = 0000     // a_arid
net:   tb.dut.split107.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split107.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split107.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split107.axi_rd_4_splitter
son:   tb.dut.split107.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split107.axi_rd_4_splitter
net:   tb.dut.split107.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split107.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split107.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split107.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split107.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split107.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split107.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split107.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split107.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split107.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split107.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split107.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split107.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split107.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split107.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split107.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split107.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split107.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split107.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split107.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split107.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split107.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split107.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split107.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split107.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split107.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split107.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split107.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split107.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split107.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split107.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split107.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split107.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split107.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split107.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split107.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split107.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split107.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split107.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split107.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split107.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split107.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split107.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split107.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split107.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split107.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split107.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split107.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split107.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split107.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split107.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split107.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split107.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split107.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split107.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split107.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split107.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split107.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split107.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split107.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split107.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split107.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split107.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split107.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split107.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split107.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split107.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split107.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split107.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split107.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split107.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split107.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split107.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split107.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split107.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split107.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split107.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split107.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split107.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split107.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split107.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split107.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split107.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split107.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split107.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split107.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split107.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split107.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split107.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split107.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split107.axi_rd_4_splitter.r_fifo
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split107.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split107.axi_wr_4_splitter
net:   tb.dut.split107.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split107.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split107.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split107.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split107.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split107.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split107.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split107.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split107.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split107.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split107.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split107.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split107.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split107.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split107.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split107.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split107.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split107.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split107.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split107.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split107.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split107.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split107.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split107.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split107.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split107.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split107.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split107.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split107.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split107.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split107.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split107.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split107.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split107.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split107.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split107.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split107.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split107.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split107.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split107.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split107.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split107.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split107.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split107.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split107.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split107.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split107.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split107.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split107.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split107.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split107.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split107.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split107.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split107.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split107.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split107.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split107.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split107.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split107.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split107.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split107.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split107.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split107.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split107.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split107.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split107.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split107.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split107.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split107.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split107.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split107.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split107.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split107.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split107.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split107.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split107.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split107.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split107.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split107.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split107.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split107.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split107.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split107.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split107.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split107.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split107.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split107.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split107.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split107.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split107.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split107.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split107.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split107.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split107.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split107.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split107.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split107.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split107.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split107.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split107.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split107.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split107.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split107.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split107.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split107.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split107.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split107.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split107.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split107.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split107.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split107.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split107.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split107.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split107.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split107.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split107.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split107.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split107.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split107.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split107.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split107.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split107.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split107.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split107.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split107.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split107.axi_wr_4_splitter.b_fifo
son:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split107.axi_wr_4_splitter.order_fifo
son:   tb.dut.split107.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split107.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split107.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split107.axi_wr_4_splitter.b_fifo
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split107.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split107.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split107.axi_wr_4_splitter.order_fifo
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split107.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split107.axi_wr_4_splitter.w_fifo
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split107.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split108
net:   tb.dut.split108.a_arready [1] = 1     // a_arready
net:   tb.dut.split108.a_awready [1] = 1     // a_awready
net:   tb.dut.split108.a_bid [4] = 0000     // a_bid
net:   tb.dut.split108.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split108.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split108.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split108.a_rid [4] = 0000     // a_rid
net:   tb.dut.split108.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split108.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split108.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split108.a_wready [1] = 1     // a_wready
net:   tb.dut.split108.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split108.arburst [2] = 00     // arburst
net:   tb.dut.split108.arextras [8] = 00000000     // arextras
net:   tb.dut.split108.arid [4] = 0000     // arid
net:   tb.dut.split108.arlen [8] = 00000000     // arlen
net:   tb.dut.split108.arvalid [1] = 0     // arvalid
net:   tb.dut.split108.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split108.awburst [2] = 00     // awburst
net:   tb.dut.split108.awextras [8] = 00000000     // awextras
net:   tb.dut.split108.awid [4] = 0000     // awid
net:   tb.dut.split108.awlen [8] = 00000000     // awlen
net:   tb.dut.split108.awvalid [1] = 0     // awvalid
net:   tb.dut.split108.b_arready [1] = 1     // b_arready
net:   tb.dut.split108.b_awready [1] = 1     // b_awready
net:   tb.dut.split108.b_bid [4] = 0000     // b_bid
net:   tb.dut.split108.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split108.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split108.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split108.b_rid [4] = 0000     // b_rid
net:   tb.dut.split108.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split108.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split108.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split108.b_wready [1] = 1     // b_wready
net:   tb.dut.split108.bready [1] = 1     // bready
net:   tb.dut.split108.c_arready [1] = 1     // c_arready
net:   tb.dut.split108.c_awready [1] = 1     // c_awready
net:   tb.dut.split108.c_bid [4] = 0000     // c_bid
net:   tb.dut.split108.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split108.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split108.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split108.c_rid [4] = 0000     // c_rid
net:   tb.dut.split108.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split108.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split108.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split108.c_wready [1] = 1     // c_wready
net:   tb.dut.split108.clk [1] = 1     // clk
net:   tb.dut.split108.d_arready [1] = 1     // d_arready
net:   tb.dut.split108.d_awready [1] = 1     // d_awready
net:   tb.dut.split108.d_bid [4] = 0000     // d_bid
net:   tb.dut.split108.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split108.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split108.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split108.d_rid [4] = 0000     // d_rid
net:   tb.dut.split108.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split108.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split108.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split108.d_wready [1] = 1     // d_wready
net:   tb.dut.split108.rready [1] = 1     // rready
net:   tb.dut.split108.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split108.wlast [1] = 0     // wlast
net:   tb.dut.split108.wready [1] = 1     // wready
net:   tb.dut.split108.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split108.wvalid [1] = 0     // wvalid
net:   tb.dut.split108.rvalid [1] = 0     // rvalid
net:   tb.dut.split108.rresp [2] = 00     // rresp
net:   tb.dut.split108.rlast [1] = 0     // rlast
net:   tb.dut.split108.rid [4] = 0000     // rid
net:   tb.dut.split108.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split108.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split108.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split108.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split108.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split108.d_rready [1] = 1     // d_rready
net:   tb.dut.split108.d_bready [1] = 1     // d_bready
net:   tb.dut.split108.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split108.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split108.d_awid [4] = 0000     // d_awid
net:   tb.dut.split108.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split108.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split108.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split108.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split108.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split108.d_arid [4] = 0000     // d_arid
net:   tb.dut.split108.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split108.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split108.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split108.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split108.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split108.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split108.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split108.c_rready [1] = 1     // c_rready
net:   tb.dut.split108.c_bready [1] = 1     // c_bready
net:   tb.dut.split108.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split108.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split108.c_awid [4] = 0000     // c_awid
net:   tb.dut.split108.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split108.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split108.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split108.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split108.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split108.c_arid [4] = 0000     // c_arid
net:   tb.dut.split108.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split108.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split108.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split108.bvalid [1] = 0     // bvalid
net:   tb.dut.split108.bresp [2] = 00     // bresp
net:   tb.dut.split108.bid [4] = 0000     // bid
net:   tb.dut.split108.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split108.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split108.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split108.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split108.b_rready [1] = 1     // b_rready
net:   tb.dut.split108.b_bready [1] = 1     // b_bready
net:   tb.dut.split108.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split108.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split108.b_awid [4] = 0000     // b_awid
net:   tb.dut.split108.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split108.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split108.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split108.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split108.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split108.b_arid [4] = 0000     // b_arid
net:   tb.dut.split108.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split108.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split108.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split108.awready [1] = 1     // awready
net:   tb.dut.split108.arready [1] = 1     // arready
net:   tb.dut.split108.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split108.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split108.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split108.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split108.a_rready [1] = 1     // a_rready
net:   tb.dut.split108.a_bready [1] = 1     // a_bready
net:   tb.dut.split108.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split108.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split108.a_awid [4] = 0000     // a_awid
net:   tb.dut.split108.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split108.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split108.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split108.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split108.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split108.a_arid [4] = 0000     // a_arid
net:   tb.dut.split108.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split108.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split108.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split108.axi_rd_4_splitter
son:   tb.dut.split108.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split108.axi_rd_4_splitter
net:   tb.dut.split108.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split108.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split108.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split108.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split108.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split108.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split108.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split108.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split108.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split108.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split108.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split108.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split108.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split108.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split108.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split108.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split108.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split108.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split108.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split108.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split108.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split108.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split108.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split108.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split108.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split108.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split108.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split108.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split108.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split108.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split108.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split108.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split108.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split108.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split108.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split108.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split108.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split108.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split108.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split108.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split108.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split108.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split108.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split108.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split108.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split108.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split108.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split108.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split108.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split108.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split108.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split108.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split108.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split108.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split108.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split108.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split108.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split108.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split108.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split108.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split108.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split108.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split108.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split108.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split108.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split108.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split108.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split108.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split108.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split108.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split108.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split108.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split108.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split108.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split108.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split108.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split108.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split108.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split108.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split108.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split108.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split108.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split108.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split108.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split108.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split108.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split108.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split108.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split108.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split108.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split108.axi_rd_4_splitter.r_fifo
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split108.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split108.axi_wr_4_splitter
net:   tb.dut.split108.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split108.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split108.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split108.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split108.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split108.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split108.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split108.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split108.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split108.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split108.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split108.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split108.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split108.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split108.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split108.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split108.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split108.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split108.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split108.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split108.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split108.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split108.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split108.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split108.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split108.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split108.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split108.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split108.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split108.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split108.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split108.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split108.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split108.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split108.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split108.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split108.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split108.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split108.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split108.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split108.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split108.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split108.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split108.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split108.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split108.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split108.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split108.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split108.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split108.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split108.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split108.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split108.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split108.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split108.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split108.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split108.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split108.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split108.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split108.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split108.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split108.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split108.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split108.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split108.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split108.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split108.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split108.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split108.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split108.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split108.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split108.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split108.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split108.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split108.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split108.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split108.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split108.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split108.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split108.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split108.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split108.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split108.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split108.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split108.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split108.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split108.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split108.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split108.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split108.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split108.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split108.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split108.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split108.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split108.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split108.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split108.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split108.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split108.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split108.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split108.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split108.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split108.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split108.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split108.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split108.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split108.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split108.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split108.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split108.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split108.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split108.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split108.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split108.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split108.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split108.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split108.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split108.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split108.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split108.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split108.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split108.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split108.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split108.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split108.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split108.axi_wr_4_splitter.b_fifo
son:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split108.axi_wr_4_splitter.order_fifo
son:   tb.dut.split108.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split108.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split108.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split108.axi_wr_4_splitter.b_fifo
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split108.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split108.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split108.axi_wr_4_splitter.order_fifo
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split108.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split108.axi_wr_4_splitter.w_fifo
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split108.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split109
net:   tb.dut.split109.a_arready [1] = 1     // a_arready
net:   tb.dut.split109.a_awready [1] = 1     // a_awready
net:   tb.dut.split109.a_bid [4] = 0000     // a_bid
net:   tb.dut.split109.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split109.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split109.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split109.a_rid [4] = 0000     // a_rid
net:   tb.dut.split109.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split109.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split109.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split109.a_wready [1] = 1     // a_wready
net:   tb.dut.split109.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split109.arburst [2] = 00     // arburst
net:   tb.dut.split109.arextras [8] = 00000000     // arextras
net:   tb.dut.split109.arid [4] = 0000     // arid
net:   tb.dut.split109.arlen [8] = 00000000     // arlen
net:   tb.dut.split109.arvalid [1] = 0     // arvalid
net:   tb.dut.split109.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split109.awburst [2] = 00     // awburst
net:   tb.dut.split109.awextras [8] = 00000000     // awextras
net:   tb.dut.split109.awid [4] = 0000     // awid
net:   tb.dut.split109.awlen [8] = 00000000     // awlen
net:   tb.dut.split109.awvalid [1] = 0     // awvalid
net:   tb.dut.split109.b_arready [1] = 1     // b_arready
net:   tb.dut.split109.b_awready [1] = 1     // b_awready
net:   tb.dut.split109.b_bid [4] = 0000     // b_bid
net:   tb.dut.split109.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split109.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split109.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split109.b_rid [4] = 0000     // b_rid
net:   tb.dut.split109.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split109.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split109.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split109.b_wready [1] = 1     // b_wready
net:   tb.dut.split109.bready [1] = 1     // bready
net:   tb.dut.split109.c_arready [1] = 1     // c_arready
net:   tb.dut.split109.c_awready [1] = 1     // c_awready
net:   tb.dut.split109.c_bid [4] = 0000     // c_bid
net:   tb.dut.split109.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split109.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split109.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split109.c_rid [4] = 0000     // c_rid
net:   tb.dut.split109.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split109.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split109.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split109.c_wready [1] = 1     // c_wready
net:   tb.dut.split109.clk [1] = 1     // clk
net:   tb.dut.split109.d_arready [1] = 1     // d_arready
net:   tb.dut.split109.d_awready [1] = 1     // d_awready
net:   tb.dut.split109.d_bid [4] = 0000     // d_bid
net:   tb.dut.split109.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split109.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split109.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split109.d_rid [4] = 0000     // d_rid
net:   tb.dut.split109.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split109.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split109.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split109.d_wready [1] = 1     // d_wready
net:   tb.dut.split109.rready [1] = 1     // rready
net:   tb.dut.split109.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split109.wlast [1] = 0     // wlast
net:   tb.dut.split109.wready [1] = 1     // wready
net:   tb.dut.split109.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split109.wvalid [1] = 0     // wvalid
net:   tb.dut.split109.rvalid [1] = 0     // rvalid
net:   tb.dut.split109.rresp [2] = 00     // rresp
net:   tb.dut.split109.rlast [1] = 0     // rlast
net:   tb.dut.split109.rid [4] = 0000     // rid
net:   tb.dut.split109.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split109.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split109.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split109.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split109.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split109.d_rready [1] = 1     // d_rready
net:   tb.dut.split109.d_bready [1] = 1     // d_bready
net:   tb.dut.split109.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split109.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split109.d_awid [4] = 0000     // d_awid
net:   tb.dut.split109.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split109.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split109.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split109.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split109.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split109.d_arid [4] = 0000     // d_arid
net:   tb.dut.split109.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split109.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split109.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split109.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split109.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split109.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split109.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split109.c_rready [1] = 1     // c_rready
net:   tb.dut.split109.c_bready [1] = 1     // c_bready
net:   tb.dut.split109.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split109.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split109.c_awid [4] = 0000     // c_awid
net:   tb.dut.split109.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split109.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split109.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split109.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split109.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split109.c_arid [4] = 0000     // c_arid
net:   tb.dut.split109.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split109.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split109.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split109.bvalid [1] = 0     // bvalid
net:   tb.dut.split109.bresp [2] = 00     // bresp
net:   tb.dut.split109.bid [4] = 0000     // bid
net:   tb.dut.split109.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split109.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split109.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split109.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split109.b_rready [1] = 1     // b_rready
net:   tb.dut.split109.b_bready [1] = 1     // b_bready
net:   tb.dut.split109.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split109.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split109.b_awid [4] = 0000     // b_awid
net:   tb.dut.split109.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split109.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split109.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split109.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split109.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split109.b_arid [4] = 0000     // b_arid
net:   tb.dut.split109.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split109.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split109.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split109.awready [1] = 1     // awready
net:   tb.dut.split109.arready [1] = 1     // arready
net:   tb.dut.split109.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split109.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split109.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split109.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split109.a_rready [1] = 1     // a_rready
net:   tb.dut.split109.a_bready [1] = 1     // a_bready
net:   tb.dut.split109.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split109.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split109.a_awid [4] = 0000     // a_awid
net:   tb.dut.split109.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split109.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split109.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split109.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split109.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split109.a_arid [4] = 0000     // a_arid
net:   tb.dut.split109.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split109.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split109.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split109.axi_rd_4_splitter
son:   tb.dut.split109.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split109.axi_rd_4_splitter
net:   tb.dut.split109.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split109.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split109.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split109.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split109.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split109.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split109.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split109.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split109.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split109.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split109.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split109.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split109.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split109.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split109.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split109.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split109.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split109.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split109.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split109.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split109.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split109.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split109.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split109.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split109.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split109.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split109.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split109.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split109.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split109.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split109.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split109.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split109.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split109.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split109.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split109.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split109.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split109.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split109.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split109.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split109.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split109.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split109.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split109.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split109.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split109.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split109.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split109.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split109.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split109.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split109.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split109.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split109.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split109.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split109.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split109.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split109.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split109.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split109.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split109.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split109.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split109.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split109.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split109.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split109.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split109.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split109.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split109.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split109.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split109.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split109.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split109.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split109.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split109.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split109.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split109.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split109.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split109.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split109.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split109.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split109.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split109.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split109.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split109.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split109.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split109.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split109.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split109.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split109.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split109.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split109.axi_rd_4_splitter.r_fifo
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split109.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split109.axi_wr_4_splitter
net:   tb.dut.split109.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split109.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split109.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split109.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split109.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split109.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split109.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split109.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split109.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split109.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split109.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split109.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split109.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split109.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split109.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split109.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split109.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split109.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split109.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split109.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split109.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split109.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split109.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split109.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split109.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split109.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split109.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split109.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split109.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split109.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split109.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split109.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split109.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split109.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split109.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split109.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split109.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split109.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split109.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split109.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split109.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split109.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split109.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split109.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split109.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split109.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split109.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split109.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split109.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split109.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split109.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split109.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split109.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split109.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split109.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split109.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split109.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split109.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split109.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split109.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split109.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split109.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split109.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split109.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split109.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split109.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split109.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split109.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split109.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split109.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split109.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split109.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split109.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split109.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split109.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split109.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split109.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split109.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split109.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split109.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split109.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split109.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split109.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split109.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split109.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split109.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split109.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split109.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split109.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split109.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split109.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split109.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split109.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split109.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split109.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split109.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split109.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split109.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split109.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split109.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split109.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split109.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split109.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split109.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split109.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split109.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split109.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split109.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split109.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split109.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split109.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split109.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split109.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split109.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split109.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split109.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split109.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split109.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split109.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split109.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split109.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split109.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split109.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split109.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split109.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split109.axi_wr_4_splitter.b_fifo
son:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split109.axi_wr_4_splitter.order_fifo
son:   tb.dut.split109.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split109.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split109.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split109.axi_wr_4_splitter.b_fifo
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split109.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split109.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split109.axi_wr_4_splitter.order_fifo
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split109.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split109.axi_wr_4_splitter.w_fifo
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split109.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split11
net:   tb.dut.split11.a_arready [1] = 1     // a_arready
net:   tb.dut.split11.a_awready [1] = 1     // a_awready
net:   tb.dut.split11.a_bid [4] = 0000     // a_bid
net:   tb.dut.split11.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split11.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split11.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split11.a_rid [4] = 0000     // a_rid
net:   tb.dut.split11.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split11.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split11.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split11.a_wready [1] = 1     // a_wready
net:   tb.dut.split11.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split11.arburst [2] = xx     // arburst
net:   tb.dut.split11.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split11.arid [4] = xxxx     // arid
net:   tb.dut.split11.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split11.arvalid [1] = 0     // arvalid
net:   tb.dut.split11.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split11.awburst [2] = xx     // awburst
net:   tb.dut.split11.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split11.awid [4] = xxxx     // awid
net:   tb.dut.split11.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split11.awvalid [1] = 0     // awvalid
net:   tb.dut.split11.b_arready [1] = 1     // b_arready
net:   tb.dut.split11.b_awready [1] = 1     // b_awready
net:   tb.dut.split11.b_bid [4] = 0000     // b_bid
net:   tb.dut.split11.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split11.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split11.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split11.b_rid [4] = 0000     // b_rid
net:   tb.dut.split11.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split11.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split11.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split11.b_wready [1] = 1     // b_wready
net:   tb.dut.split11.bready [1] = 0     // bready
net:   tb.dut.split11.c_arready [1] = 1     // c_arready
net:   tb.dut.split11.c_awready [1] = 1     // c_awready
net:   tb.dut.split11.c_bid [4] = 0000     // c_bid
net:   tb.dut.split11.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split11.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split11.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split11.c_rid [4] = 0000     // c_rid
net:   tb.dut.split11.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split11.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split11.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split11.c_wready [1] = 1     // c_wready
net:   tb.dut.split11.clk [1] = 1     // clk
net:   tb.dut.split11.d_arready [1] = 1     // d_arready
net:   tb.dut.split11.d_awready [1] = 1     // d_awready
net:   tb.dut.split11.d_bid [4] = 0000     // d_bid
net:   tb.dut.split11.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split11.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split11.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split11.d_rid [4] = 0000     // d_rid
net:   tb.dut.split11.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split11.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split11.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split11.d_wready [1] = 1     // d_wready
net:   tb.dut.split11.rready [1] = 0     // rready
net:   tb.dut.split11.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split11.wlast [1] = x     // wlast
net:   tb.dut.split11.wready [1] = 1     // wready
net:   tb.dut.split11.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split11.wvalid [1] = 0     // wvalid
net:   tb.dut.split11.rvalid [1] = 0     // rvalid
net:   tb.dut.split11.rresp [2] = 00     // rresp
net:   tb.dut.split11.rlast [1] = 0     // rlast
net:   tb.dut.split11.rid [4] = 0000     // rid
net:   tb.dut.split11.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split11.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split11.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split11.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split11.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split11.d_rready [1] = 1     // d_rready
net:   tb.dut.split11.d_bready [1] = 1     // d_bready
net:   tb.dut.split11.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split11.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split11.d_awid [4] = 0000     // d_awid
net:   tb.dut.split11.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split11.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split11.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split11.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split11.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split11.d_arid [4] = 0000     // d_arid
net:   tb.dut.split11.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split11.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split11.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split11.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split11.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split11.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split11.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split11.c_rready [1] = 1     // c_rready
net:   tb.dut.split11.c_bready [1] = 1     // c_bready
net:   tb.dut.split11.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split11.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split11.c_awid [4] = 0000     // c_awid
net:   tb.dut.split11.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split11.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split11.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split11.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split11.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split11.c_arid [4] = 0000     // c_arid
net:   tb.dut.split11.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split11.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split11.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split11.bvalid [1] = 0     // bvalid
net:   tb.dut.split11.bresp [2] = 00     // bresp
net:   tb.dut.split11.bid [4] = 0000     // bid
net:   tb.dut.split11.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split11.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split11.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split11.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split11.b_rready [1] = 1     // b_rready
net:   tb.dut.split11.b_bready [1] = 1     // b_bready
net:   tb.dut.split11.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split11.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split11.b_awid [4] = 0000     // b_awid
net:   tb.dut.split11.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split11.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split11.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split11.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split11.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split11.b_arid [4] = 0000     // b_arid
net:   tb.dut.split11.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split11.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split11.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split11.awready [1] = 1     // awready
net:   tb.dut.split11.arready [1] = 1     // arready
net:   tb.dut.split11.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split11.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split11.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split11.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split11.a_rready [1] = 1     // a_rready
net:   tb.dut.split11.a_bready [1] = 1     // a_bready
net:   tb.dut.split11.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split11.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split11.a_awid [4] = 0000     // a_awid
net:   tb.dut.split11.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split11.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split11.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split11.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split11.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split11.a_arid [4] = 0000     // a_arid
net:   tb.dut.split11.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split11.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split11.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split11.axi_rd_4_splitter
son:   tb.dut.split11.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split11.axi_rd_4_splitter
net:   tb.dut.split11.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split11.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split11.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split11.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split11.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split11.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split11.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split11.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split11.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split11.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split11.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split11.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split11.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split11.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split11.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split11.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split11.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split11.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split11.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split11.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split11.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split11.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split11.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split11.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split11.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split11.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split11.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split11.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split11.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split11.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split11.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split11.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split11.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split11.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split11.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split11.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split11.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split11.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split11.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split11.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split11.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split11.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split11.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split11.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split11.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split11.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split11.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split11.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split11.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split11.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split11.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split11.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split11.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split11.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split11.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split11.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split11.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split11.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split11.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split11.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split11.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split11.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split11.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split11.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split11.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split11.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split11.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split11.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split11.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split11.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split11.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split11.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split11.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split11.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split11.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split11.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split11.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split11.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split11.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split11.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split11.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split11.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split11.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split11.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split11.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split11.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split11.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split11.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split11.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split11.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split11.axi_rd_4_splitter.r_fifo
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split11.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split11.axi_wr_4_splitter
net:   tb.dut.split11.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split11.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split11.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split11.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split11.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split11.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split11.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split11.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split11.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split11.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split11.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split11.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split11.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split11.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split11.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split11.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split11.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split11.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split11.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split11.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split11.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split11.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split11.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split11.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split11.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split11.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split11.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split11.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split11.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split11.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split11.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split11.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split11.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split11.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split11.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split11.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split11.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split11.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split11.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split11.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split11.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split11.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split11.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split11.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split11.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split11.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split11.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split11.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split11.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split11.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split11.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split11.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split11.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split11.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split11.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split11.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split11.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split11.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split11.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split11.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split11.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split11.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split11.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split11.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split11.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split11.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split11.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split11.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split11.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split11.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split11.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split11.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split11.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split11.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split11.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split11.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split11.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split11.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split11.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split11.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split11.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split11.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split11.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split11.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split11.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split11.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split11.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split11.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split11.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split11.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split11.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split11.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split11.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split11.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split11.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split11.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split11.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split11.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split11.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split11.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split11.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split11.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split11.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split11.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split11.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split11.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split11.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split11.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split11.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split11.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split11.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split11.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split11.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split11.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split11.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split11.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split11.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split11.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split11.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split11.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split11.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split11.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split11.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split11.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split11.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split11.axi_wr_4_splitter.b_fifo
son:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split11.axi_wr_4_splitter.order_fifo
son:   tb.dut.split11.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split11.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split11.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split11.axi_wr_4_splitter.b_fifo
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split11.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split11.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split11.axi_wr_4_splitter.order_fifo
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split11.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split11.axi_wr_4_splitter.w_fifo
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split11.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split110
net:   tb.dut.split110.a_arready [1] = 1     // a_arready
net:   tb.dut.split110.a_awready [1] = 1     // a_awready
net:   tb.dut.split110.a_bid [4] = 0000     // a_bid
net:   tb.dut.split110.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split110.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split110.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split110.a_rid [4] = 0000     // a_rid
net:   tb.dut.split110.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split110.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split110.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split110.a_wready [1] = 1     // a_wready
net:   tb.dut.split110.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split110.arburst [2] = 00     // arburst
net:   tb.dut.split110.arextras [8] = 00000000     // arextras
net:   tb.dut.split110.arid [4] = 0000     // arid
net:   tb.dut.split110.arlen [8] = 00000000     // arlen
net:   tb.dut.split110.arvalid [1] = 0     // arvalid
net:   tb.dut.split110.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split110.awburst [2] = 00     // awburst
net:   tb.dut.split110.awextras [8] = 00000000     // awextras
net:   tb.dut.split110.awid [4] = 0000     // awid
net:   tb.dut.split110.awlen [8] = 00000000     // awlen
net:   tb.dut.split110.awvalid [1] = 0     // awvalid
net:   tb.dut.split110.b_arready [1] = 1     // b_arready
net:   tb.dut.split110.b_awready [1] = 1     // b_awready
net:   tb.dut.split110.b_bid [4] = 0000     // b_bid
net:   tb.dut.split110.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split110.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split110.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split110.b_rid [4] = 0000     // b_rid
net:   tb.dut.split110.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split110.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split110.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split110.b_wready [1] = 1     // b_wready
net:   tb.dut.split110.bready [1] = 1     // bready
net:   tb.dut.split110.c_arready [1] = 1     // c_arready
net:   tb.dut.split110.c_awready [1] = 1     // c_awready
net:   tb.dut.split110.c_bid [4] = 0000     // c_bid
net:   tb.dut.split110.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split110.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split110.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split110.c_rid [4] = 0000     // c_rid
net:   tb.dut.split110.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split110.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split110.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split110.c_wready [1] = 1     // c_wready
net:   tb.dut.split110.clk [1] = 1     // clk
net:   tb.dut.split110.d_arready [1] = 1     // d_arready
net:   tb.dut.split110.d_awready [1] = 1     // d_awready
net:   tb.dut.split110.d_bid [4] = 0000     // d_bid
net:   tb.dut.split110.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split110.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split110.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split110.d_rid [4] = 0000     // d_rid
net:   tb.dut.split110.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split110.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split110.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split110.d_wready [1] = 1     // d_wready
net:   tb.dut.split110.rready [1] = 1     // rready
net:   tb.dut.split110.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split110.wlast [1] = 0     // wlast
net:   tb.dut.split110.wready [1] = 1     // wready
net:   tb.dut.split110.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split110.wvalid [1] = 0     // wvalid
net:   tb.dut.split110.rvalid [1] = 0     // rvalid
net:   tb.dut.split110.rresp [2] = 00     // rresp
net:   tb.dut.split110.rlast [1] = 0     // rlast
net:   tb.dut.split110.rid [4] = 0000     // rid
net:   tb.dut.split110.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split110.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split110.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split110.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split110.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split110.d_rready [1] = 1     // d_rready
net:   tb.dut.split110.d_bready [1] = 1     // d_bready
net:   tb.dut.split110.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split110.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split110.d_awid [4] = 0000     // d_awid
net:   tb.dut.split110.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split110.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split110.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split110.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split110.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split110.d_arid [4] = 0000     // d_arid
net:   tb.dut.split110.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split110.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split110.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split110.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split110.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split110.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split110.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split110.c_rready [1] = 1     // c_rready
net:   tb.dut.split110.c_bready [1] = 1     // c_bready
net:   tb.dut.split110.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split110.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split110.c_awid [4] = 0000     // c_awid
net:   tb.dut.split110.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split110.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split110.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split110.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split110.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split110.c_arid [4] = 0000     // c_arid
net:   tb.dut.split110.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split110.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split110.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split110.bvalid [1] = 0     // bvalid
net:   tb.dut.split110.bresp [2] = 00     // bresp
net:   tb.dut.split110.bid [4] = 0000     // bid
net:   tb.dut.split110.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split110.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split110.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split110.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split110.b_rready [1] = 1     // b_rready
net:   tb.dut.split110.b_bready [1] = 1     // b_bready
net:   tb.dut.split110.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split110.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split110.b_awid [4] = 0000     // b_awid
net:   tb.dut.split110.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split110.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split110.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split110.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split110.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split110.b_arid [4] = 0000     // b_arid
net:   tb.dut.split110.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split110.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split110.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split110.awready [1] = 1     // awready
net:   tb.dut.split110.arready [1] = 1     // arready
net:   tb.dut.split110.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split110.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split110.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split110.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split110.a_rready [1] = 1     // a_rready
net:   tb.dut.split110.a_bready [1] = 1     // a_bready
net:   tb.dut.split110.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split110.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split110.a_awid [4] = 0000     // a_awid
net:   tb.dut.split110.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split110.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split110.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split110.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split110.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split110.a_arid [4] = 0000     // a_arid
net:   tb.dut.split110.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split110.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split110.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split110.axi_rd_4_splitter
son:   tb.dut.split110.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split110.axi_rd_4_splitter
net:   tb.dut.split110.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split110.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split110.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split110.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split110.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split110.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split110.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split110.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split110.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split110.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split110.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split110.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split110.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split110.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split110.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split110.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split110.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split110.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split110.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split110.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split110.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split110.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split110.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split110.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split110.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split110.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split110.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split110.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split110.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split110.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split110.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split110.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split110.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split110.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split110.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split110.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split110.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split110.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split110.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split110.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split110.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split110.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split110.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split110.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split110.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split110.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split110.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split110.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split110.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split110.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split110.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split110.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split110.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split110.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split110.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split110.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split110.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split110.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split110.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split110.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split110.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split110.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split110.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split110.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split110.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split110.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split110.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split110.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split110.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split110.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split110.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split110.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split110.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split110.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split110.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split110.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split110.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split110.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split110.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split110.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split110.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split110.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split110.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split110.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split110.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split110.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split110.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split110.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split110.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split110.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split110.axi_rd_4_splitter.r_fifo
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split110.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split110.axi_wr_4_splitter
net:   tb.dut.split110.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split110.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split110.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split110.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split110.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split110.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split110.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split110.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split110.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split110.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split110.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split110.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split110.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split110.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split110.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split110.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split110.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split110.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split110.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split110.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split110.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split110.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split110.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split110.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split110.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split110.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split110.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split110.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split110.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split110.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split110.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split110.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split110.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split110.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split110.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split110.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split110.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split110.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split110.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split110.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split110.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split110.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split110.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split110.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split110.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split110.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split110.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split110.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split110.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split110.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split110.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split110.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split110.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split110.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split110.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split110.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split110.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split110.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split110.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split110.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split110.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split110.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split110.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split110.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split110.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split110.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split110.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split110.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split110.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split110.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split110.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split110.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split110.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split110.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split110.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split110.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split110.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split110.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split110.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split110.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split110.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split110.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split110.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split110.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split110.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split110.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split110.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split110.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split110.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split110.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split110.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split110.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split110.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split110.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split110.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split110.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split110.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split110.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split110.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split110.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split110.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split110.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split110.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split110.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split110.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split110.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split110.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split110.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split110.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split110.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split110.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split110.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split110.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split110.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split110.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split110.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split110.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split110.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split110.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split110.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split110.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split110.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split110.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split110.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split110.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split110.axi_wr_4_splitter.b_fifo
son:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split110.axi_wr_4_splitter.order_fifo
son:   tb.dut.split110.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split110.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split110.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split110.axi_wr_4_splitter.b_fifo
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split110.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split110.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split110.axi_wr_4_splitter.order_fifo
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split110.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split110.axi_wr_4_splitter.w_fifo
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split110.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split111
net:   tb.dut.split111.a_arready [1] = 1     // a_arready
net:   tb.dut.split111.a_awready [1] = 1     // a_awready
net:   tb.dut.split111.a_bid [4] = 0000     // a_bid
net:   tb.dut.split111.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split111.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split111.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split111.a_rid [4] = 0000     // a_rid
net:   tb.dut.split111.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split111.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split111.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split111.a_wready [1] = 1     // a_wready
net:   tb.dut.split111.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split111.arburst [2] = 00     // arburst
net:   tb.dut.split111.arextras [8] = 00000000     // arextras
net:   tb.dut.split111.arid [4] = 0000     // arid
net:   tb.dut.split111.arlen [8] = 00000000     // arlen
net:   tb.dut.split111.arvalid [1] = 0     // arvalid
net:   tb.dut.split111.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split111.awburst [2] = 00     // awburst
net:   tb.dut.split111.awextras [8] = 00000000     // awextras
net:   tb.dut.split111.awid [4] = 0000     // awid
net:   tb.dut.split111.awlen [8] = 00000000     // awlen
net:   tb.dut.split111.awvalid [1] = 0     // awvalid
net:   tb.dut.split111.b_arready [1] = 1     // b_arready
net:   tb.dut.split111.b_awready [1] = 1     // b_awready
net:   tb.dut.split111.b_bid [4] = 0000     // b_bid
net:   tb.dut.split111.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split111.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split111.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split111.b_rid [4] = 0000     // b_rid
net:   tb.dut.split111.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split111.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split111.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split111.b_wready [1] = 1     // b_wready
net:   tb.dut.split111.bready [1] = 1     // bready
net:   tb.dut.split111.c_arready [1] = 1     // c_arready
net:   tb.dut.split111.c_awready [1] = 1     // c_awready
net:   tb.dut.split111.c_bid [4] = 0000     // c_bid
net:   tb.dut.split111.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split111.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split111.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split111.c_rid [4] = 0000     // c_rid
net:   tb.dut.split111.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split111.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split111.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split111.c_wready [1] = 1     // c_wready
net:   tb.dut.split111.clk [1] = 1     // clk
net:   tb.dut.split111.d_arready [1] = 1     // d_arready
net:   tb.dut.split111.d_awready [1] = 1     // d_awready
net:   tb.dut.split111.d_bid [4] = 0000     // d_bid
net:   tb.dut.split111.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split111.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split111.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split111.d_rid [4] = 0000     // d_rid
net:   tb.dut.split111.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split111.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split111.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split111.d_wready [1] = 1     // d_wready
net:   tb.dut.split111.rready [1] = 1     // rready
net:   tb.dut.split111.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split111.wlast [1] = 0     // wlast
net:   tb.dut.split111.wready [1] = 1     // wready
net:   tb.dut.split111.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split111.wvalid [1] = 0     // wvalid
net:   tb.dut.split111.rvalid [1] = 0     // rvalid
net:   tb.dut.split111.rresp [2] = 00     // rresp
net:   tb.dut.split111.rlast [1] = 0     // rlast
net:   tb.dut.split111.rid [4] = 0000     // rid
net:   tb.dut.split111.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split111.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split111.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split111.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split111.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split111.d_rready [1] = 1     // d_rready
net:   tb.dut.split111.d_bready [1] = 1     // d_bready
net:   tb.dut.split111.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split111.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split111.d_awid [4] = 0000     // d_awid
net:   tb.dut.split111.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split111.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split111.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split111.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split111.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split111.d_arid [4] = 0000     // d_arid
net:   tb.dut.split111.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split111.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split111.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split111.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split111.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split111.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split111.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split111.c_rready [1] = 1     // c_rready
net:   tb.dut.split111.c_bready [1] = 1     // c_bready
net:   tb.dut.split111.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split111.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split111.c_awid [4] = 0000     // c_awid
net:   tb.dut.split111.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split111.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split111.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split111.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split111.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split111.c_arid [4] = 0000     // c_arid
net:   tb.dut.split111.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split111.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split111.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split111.bvalid [1] = 0     // bvalid
net:   tb.dut.split111.bresp [2] = 00     // bresp
net:   tb.dut.split111.bid [4] = 0000     // bid
net:   tb.dut.split111.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split111.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split111.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split111.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split111.b_rready [1] = 1     // b_rready
net:   tb.dut.split111.b_bready [1] = 1     // b_bready
net:   tb.dut.split111.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split111.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split111.b_awid [4] = 0000     // b_awid
net:   tb.dut.split111.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split111.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split111.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split111.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split111.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split111.b_arid [4] = 0000     // b_arid
net:   tb.dut.split111.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split111.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split111.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split111.awready [1] = 1     // awready
net:   tb.dut.split111.arready [1] = 1     // arready
net:   tb.dut.split111.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split111.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split111.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split111.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split111.a_rready [1] = 1     // a_rready
net:   tb.dut.split111.a_bready [1] = 1     // a_bready
net:   tb.dut.split111.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split111.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split111.a_awid [4] = 0000     // a_awid
net:   tb.dut.split111.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split111.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split111.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split111.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split111.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split111.a_arid [4] = 0000     // a_arid
net:   tb.dut.split111.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split111.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split111.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split111.axi_rd_4_splitter
son:   tb.dut.split111.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split111.axi_rd_4_splitter
net:   tb.dut.split111.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split111.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split111.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split111.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split111.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split111.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split111.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split111.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split111.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split111.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split111.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split111.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split111.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split111.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split111.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split111.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split111.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split111.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split111.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split111.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split111.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split111.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split111.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split111.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split111.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split111.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split111.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split111.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split111.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split111.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split111.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split111.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split111.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split111.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split111.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split111.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split111.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split111.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split111.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split111.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split111.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split111.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split111.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split111.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split111.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split111.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split111.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split111.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split111.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split111.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split111.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split111.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split111.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split111.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split111.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split111.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split111.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split111.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split111.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split111.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split111.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split111.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split111.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split111.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split111.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split111.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split111.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split111.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split111.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split111.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split111.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split111.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split111.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split111.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split111.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split111.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split111.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split111.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split111.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split111.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split111.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split111.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split111.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split111.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split111.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split111.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split111.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split111.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split111.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split111.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split111.axi_rd_4_splitter.r_fifo
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split111.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split111.axi_wr_4_splitter
net:   tb.dut.split111.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split111.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split111.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split111.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split111.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split111.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split111.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split111.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split111.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split111.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split111.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split111.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split111.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split111.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split111.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split111.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split111.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split111.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split111.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split111.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split111.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split111.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split111.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split111.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split111.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split111.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split111.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split111.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split111.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split111.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split111.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split111.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split111.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split111.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split111.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split111.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split111.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split111.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split111.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split111.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split111.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split111.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split111.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split111.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split111.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split111.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split111.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split111.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split111.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split111.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split111.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split111.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split111.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split111.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split111.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split111.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split111.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split111.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split111.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split111.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split111.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split111.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split111.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split111.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split111.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split111.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split111.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split111.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split111.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split111.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split111.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split111.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split111.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split111.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split111.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split111.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split111.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split111.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split111.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split111.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split111.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split111.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split111.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split111.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split111.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split111.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split111.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split111.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split111.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split111.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split111.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split111.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split111.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split111.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split111.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split111.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split111.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split111.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split111.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split111.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split111.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split111.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split111.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split111.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split111.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split111.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split111.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split111.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split111.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split111.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split111.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split111.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split111.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split111.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split111.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split111.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split111.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split111.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split111.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split111.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split111.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split111.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split111.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split111.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split111.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split111.axi_wr_4_splitter.b_fifo
son:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split111.axi_wr_4_splitter.order_fifo
son:   tb.dut.split111.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split111.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split111.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split111.axi_wr_4_splitter.b_fifo
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split111.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split111.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split111.axi_wr_4_splitter.order_fifo
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split111.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split111.axi_wr_4_splitter.w_fifo
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split111.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split112
net:   tb.dut.split112.a_arready [1] = 1     // a_arready
net:   tb.dut.split112.a_awready [1] = 1     // a_awready
net:   tb.dut.split112.a_bid [4] = 0000     // a_bid
net:   tb.dut.split112.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split112.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split112.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split112.a_rid [4] = 0000     // a_rid
net:   tb.dut.split112.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split112.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split112.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split112.a_wready [1] = 1     // a_wready
net:   tb.dut.split112.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split112.arburst [2] = 00     // arburst
net:   tb.dut.split112.arextras [8] = 00000000     // arextras
net:   tb.dut.split112.arid [4] = 0000     // arid
net:   tb.dut.split112.arlen [8] = 00000000     // arlen
net:   tb.dut.split112.arvalid [1] = 0     // arvalid
net:   tb.dut.split112.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split112.awburst [2] = 00     // awburst
net:   tb.dut.split112.awextras [8] = 00000000     // awextras
net:   tb.dut.split112.awid [4] = 0000     // awid
net:   tb.dut.split112.awlen [8] = 00000000     // awlen
net:   tb.dut.split112.awvalid [1] = 0     // awvalid
net:   tb.dut.split112.b_arready [1] = 1     // b_arready
net:   tb.dut.split112.b_awready [1] = 1     // b_awready
net:   tb.dut.split112.b_bid [4] = 0000     // b_bid
net:   tb.dut.split112.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split112.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split112.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split112.b_rid [4] = 0000     // b_rid
net:   tb.dut.split112.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split112.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split112.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split112.b_wready [1] = 1     // b_wready
net:   tb.dut.split112.bready [1] = 1     // bready
net:   tb.dut.split112.c_arready [1] = 1     // c_arready
net:   tb.dut.split112.c_awready [1] = 1     // c_awready
net:   tb.dut.split112.c_bid [4] = 0000     // c_bid
net:   tb.dut.split112.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split112.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split112.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split112.c_rid [4] = 0000     // c_rid
net:   tb.dut.split112.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split112.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split112.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split112.c_wready [1] = 1     // c_wready
net:   tb.dut.split112.clk [1] = 1     // clk
net:   tb.dut.split112.d_arready [1] = 1     // d_arready
net:   tb.dut.split112.d_awready [1] = 1     // d_awready
net:   tb.dut.split112.d_bid [4] = 0000     // d_bid
net:   tb.dut.split112.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split112.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split112.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split112.d_rid [4] = 0000     // d_rid
net:   tb.dut.split112.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split112.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split112.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split112.d_wready [1] = 1     // d_wready
net:   tb.dut.split112.rready [1] = 1     // rready
net:   tb.dut.split112.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split112.wlast [1] = 0     // wlast
net:   tb.dut.split112.wready [1] = 1     // wready
net:   tb.dut.split112.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split112.wvalid [1] = 0     // wvalid
net:   tb.dut.split112.rvalid [1] = 0     // rvalid
net:   tb.dut.split112.rresp [2] = 00     // rresp
net:   tb.dut.split112.rlast [1] = 0     // rlast
net:   tb.dut.split112.rid [4] = 0000     // rid
net:   tb.dut.split112.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split112.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split112.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split112.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split112.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split112.d_rready [1] = 1     // d_rready
net:   tb.dut.split112.d_bready [1] = 1     // d_bready
net:   tb.dut.split112.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split112.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split112.d_awid [4] = 0000     // d_awid
net:   tb.dut.split112.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split112.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split112.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split112.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split112.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split112.d_arid [4] = 0000     // d_arid
net:   tb.dut.split112.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split112.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split112.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split112.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split112.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split112.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split112.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split112.c_rready [1] = 1     // c_rready
net:   tb.dut.split112.c_bready [1] = 1     // c_bready
net:   tb.dut.split112.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split112.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split112.c_awid [4] = 0000     // c_awid
net:   tb.dut.split112.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split112.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split112.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split112.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split112.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split112.c_arid [4] = 0000     // c_arid
net:   tb.dut.split112.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split112.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split112.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split112.bvalid [1] = 0     // bvalid
net:   tb.dut.split112.bresp [2] = 00     // bresp
net:   tb.dut.split112.bid [4] = 0000     // bid
net:   tb.dut.split112.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split112.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split112.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split112.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split112.b_rready [1] = 1     // b_rready
net:   tb.dut.split112.b_bready [1] = 1     // b_bready
net:   tb.dut.split112.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split112.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split112.b_awid [4] = 0000     // b_awid
net:   tb.dut.split112.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split112.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split112.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split112.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split112.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split112.b_arid [4] = 0000     // b_arid
net:   tb.dut.split112.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split112.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split112.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split112.awready [1] = 1     // awready
net:   tb.dut.split112.arready [1] = 1     // arready
net:   tb.dut.split112.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split112.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split112.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split112.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split112.a_rready [1] = 1     // a_rready
net:   tb.dut.split112.a_bready [1] = 1     // a_bready
net:   tb.dut.split112.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split112.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split112.a_awid [4] = 0000     // a_awid
net:   tb.dut.split112.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split112.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split112.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split112.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split112.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split112.a_arid [4] = 0000     // a_arid
net:   tb.dut.split112.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split112.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split112.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split112.axi_rd_4_splitter
son:   tb.dut.split112.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split112.axi_rd_4_splitter
net:   tb.dut.split112.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split112.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split112.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split112.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split112.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split112.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split112.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split112.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split112.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split112.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split112.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split112.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split112.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split112.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split112.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split112.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split112.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split112.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split112.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split112.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split112.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split112.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split112.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split112.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split112.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split112.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split112.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split112.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split112.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split112.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split112.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split112.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split112.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split112.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split112.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split112.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split112.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split112.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split112.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split112.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split112.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split112.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split112.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split112.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split112.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split112.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split112.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split112.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split112.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split112.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split112.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split112.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split112.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split112.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split112.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split112.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split112.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split112.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split112.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split112.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split112.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split112.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split112.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split112.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split112.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split112.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split112.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split112.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split112.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split112.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split112.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split112.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split112.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split112.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split112.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split112.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split112.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split112.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split112.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split112.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split112.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split112.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split112.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split112.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split112.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split112.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split112.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split112.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split112.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split112.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split112.axi_rd_4_splitter.r_fifo
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split112.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split112.axi_wr_4_splitter
net:   tb.dut.split112.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split112.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split112.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split112.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split112.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split112.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split112.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split112.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split112.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split112.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split112.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split112.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split112.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split112.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split112.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split112.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split112.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split112.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split112.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split112.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split112.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split112.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split112.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split112.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split112.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split112.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split112.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split112.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split112.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split112.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split112.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split112.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split112.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split112.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split112.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split112.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split112.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split112.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split112.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split112.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split112.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split112.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split112.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split112.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split112.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split112.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split112.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split112.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split112.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split112.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split112.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split112.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split112.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split112.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split112.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split112.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split112.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split112.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split112.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split112.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split112.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split112.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split112.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split112.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split112.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split112.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split112.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split112.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split112.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split112.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split112.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split112.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split112.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split112.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split112.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split112.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split112.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split112.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split112.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split112.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split112.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split112.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split112.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split112.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split112.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split112.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split112.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split112.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split112.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split112.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split112.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split112.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split112.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split112.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split112.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split112.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split112.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split112.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split112.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split112.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split112.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split112.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split112.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split112.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split112.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split112.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split112.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split112.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split112.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split112.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split112.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split112.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split112.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split112.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split112.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split112.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split112.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split112.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split112.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split112.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split112.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split112.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split112.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split112.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split112.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split112.axi_wr_4_splitter.b_fifo
son:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split112.axi_wr_4_splitter.order_fifo
son:   tb.dut.split112.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split112.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split112.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split112.axi_wr_4_splitter.b_fifo
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split112.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split112.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split112.axi_wr_4_splitter.order_fifo
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split112.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split112.axi_wr_4_splitter.w_fifo
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split112.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split113
net:   tb.dut.split113.a_arready [1] = 1     // a_arready
net:   tb.dut.split113.a_awready [1] = 1     // a_awready
net:   tb.dut.split113.a_bid [4] = 0000     // a_bid
net:   tb.dut.split113.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split113.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split113.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split113.a_rid [4] = 0000     // a_rid
net:   tb.dut.split113.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split113.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split113.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split113.a_wready [1] = 1     // a_wready
net:   tb.dut.split113.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split113.arburst [2] = 00     // arburst
net:   tb.dut.split113.arextras [8] = 00000000     // arextras
net:   tb.dut.split113.arid [4] = 0000     // arid
net:   tb.dut.split113.arlen [8] = 00000000     // arlen
net:   tb.dut.split113.arvalid [1] = 0     // arvalid
net:   tb.dut.split113.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split113.awburst [2] = 00     // awburst
net:   tb.dut.split113.awextras [8] = 00000000     // awextras
net:   tb.dut.split113.awid [4] = 0000     // awid
net:   tb.dut.split113.awlen [8] = 00000000     // awlen
net:   tb.dut.split113.awvalid [1] = 0     // awvalid
net:   tb.dut.split113.b_arready [1] = 1     // b_arready
net:   tb.dut.split113.b_awready [1] = 1     // b_awready
net:   tb.dut.split113.b_bid [4] = 0000     // b_bid
net:   tb.dut.split113.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split113.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split113.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split113.b_rid [4] = 0000     // b_rid
net:   tb.dut.split113.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split113.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split113.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split113.b_wready [1] = 1     // b_wready
net:   tb.dut.split113.bready [1] = 1     // bready
net:   tb.dut.split113.c_arready [1] = 1     // c_arready
net:   tb.dut.split113.c_awready [1] = 1     // c_awready
net:   tb.dut.split113.c_bid [4] = 0000     // c_bid
net:   tb.dut.split113.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split113.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split113.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split113.c_rid [4] = 0000     // c_rid
net:   tb.dut.split113.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split113.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split113.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split113.c_wready [1] = 1     // c_wready
net:   tb.dut.split113.clk [1] = 1     // clk
net:   tb.dut.split113.d_arready [1] = 1     // d_arready
net:   tb.dut.split113.d_awready [1] = 1     // d_awready
net:   tb.dut.split113.d_bid [4] = 0000     // d_bid
net:   tb.dut.split113.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split113.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split113.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split113.d_rid [4] = 0000     // d_rid
net:   tb.dut.split113.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split113.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split113.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split113.d_wready [1] = 1     // d_wready
net:   tb.dut.split113.rready [1] = 1     // rready
net:   tb.dut.split113.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split113.wlast [1] = 0     // wlast
net:   tb.dut.split113.wready [1] = 1     // wready
net:   tb.dut.split113.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split113.wvalid [1] = 0     // wvalid
net:   tb.dut.split113.rvalid [1] = 0     // rvalid
net:   tb.dut.split113.rresp [2] = 00     // rresp
net:   tb.dut.split113.rlast [1] = 0     // rlast
net:   tb.dut.split113.rid [4] = 0000     // rid
net:   tb.dut.split113.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split113.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split113.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split113.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split113.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split113.d_rready [1] = 1     // d_rready
net:   tb.dut.split113.d_bready [1] = 1     // d_bready
net:   tb.dut.split113.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split113.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split113.d_awid [4] = 0000     // d_awid
net:   tb.dut.split113.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split113.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split113.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split113.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split113.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split113.d_arid [4] = 0000     // d_arid
net:   tb.dut.split113.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split113.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split113.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split113.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split113.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split113.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split113.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split113.c_rready [1] = 1     // c_rready
net:   tb.dut.split113.c_bready [1] = 1     // c_bready
net:   tb.dut.split113.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split113.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split113.c_awid [4] = 0000     // c_awid
net:   tb.dut.split113.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split113.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split113.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split113.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split113.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split113.c_arid [4] = 0000     // c_arid
net:   tb.dut.split113.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split113.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split113.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split113.bvalid [1] = 0     // bvalid
net:   tb.dut.split113.bresp [2] = 00     // bresp
net:   tb.dut.split113.bid [4] = 0000     // bid
net:   tb.dut.split113.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split113.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split113.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split113.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split113.b_rready [1] = 1     // b_rready
net:   tb.dut.split113.b_bready [1] = 1     // b_bready
net:   tb.dut.split113.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split113.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split113.b_awid [4] = 0000     // b_awid
net:   tb.dut.split113.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split113.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split113.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split113.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split113.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split113.b_arid [4] = 0000     // b_arid
net:   tb.dut.split113.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split113.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split113.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split113.awready [1] = 1     // awready
net:   tb.dut.split113.arready [1] = 1     // arready
net:   tb.dut.split113.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split113.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split113.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split113.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split113.a_rready [1] = 1     // a_rready
net:   tb.dut.split113.a_bready [1] = 1     // a_bready
net:   tb.dut.split113.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split113.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split113.a_awid [4] = 0000     // a_awid
net:   tb.dut.split113.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split113.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split113.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split113.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split113.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split113.a_arid [4] = 0000     // a_arid
net:   tb.dut.split113.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split113.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split113.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split113.axi_rd_4_splitter
son:   tb.dut.split113.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split113.axi_rd_4_splitter
net:   tb.dut.split113.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split113.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split113.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split113.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split113.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split113.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split113.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split113.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split113.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split113.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split113.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split113.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split113.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split113.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split113.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split113.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split113.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split113.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split113.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split113.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split113.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split113.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split113.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split113.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split113.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split113.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split113.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split113.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split113.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split113.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split113.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split113.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split113.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split113.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split113.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split113.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split113.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split113.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split113.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split113.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split113.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split113.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split113.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split113.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split113.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split113.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split113.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split113.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split113.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split113.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split113.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split113.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split113.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split113.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split113.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split113.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split113.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split113.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split113.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split113.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split113.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split113.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split113.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split113.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split113.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split113.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split113.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split113.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split113.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split113.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split113.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split113.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split113.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split113.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split113.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split113.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split113.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split113.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split113.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split113.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split113.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split113.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split113.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split113.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split113.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split113.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split113.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split113.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split113.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split113.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split113.axi_rd_4_splitter.r_fifo
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split113.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split113.axi_wr_4_splitter
net:   tb.dut.split113.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split113.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split113.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split113.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split113.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split113.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split113.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split113.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split113.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split113.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split113.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split113.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split113.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split113.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split113.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split113.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split113.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split113.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split113.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split113.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split113.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split113.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split113.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split113.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split113.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split113.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split113.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split113.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split113.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split113.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split113.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split113.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split113.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split113.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split113.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split113.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split113.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split113.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split113.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split113.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split113.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split113.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split113.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split113.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split113.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split113.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split113.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split113.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split113.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split113.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split113.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split113.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split113.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split113.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split113.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split113.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split113.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split113.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split113.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split113.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split113.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split113.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split113.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split113.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split113.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split113.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split113.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split113.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split113.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split113.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split113.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split113.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split113.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split113.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split113.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split113.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split113.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split113.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split113.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split113.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split113.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split113.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split113.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split113.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split113.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split113.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split113.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split113.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split113.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split113.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split113.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split113.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split113.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split113.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split113.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split113.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split113.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split113.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split113.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split113.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split113.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split113.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split113.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split113.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split113.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split113.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split113.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split113.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split113.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split113.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split113.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split113.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split113.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split113.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split113.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split113.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split113.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split113.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split113.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split113.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split113.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split113.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split113.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split113.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split113.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split113.axi_wr_4_splitter.b_fifo
son:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split113.axi_wr_4_splitter.order_fifo
son:   tb.dut.split113.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split113.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split113.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split113.axi_wr_4_splitter.b_fifo
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split113.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split113.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split113.axi_wr_4_splitter.order_fifo
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split113.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split113.axi_wr_4_splitter.w_fifo
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split113.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split114
net:   tb.dut.split114.a_arready [1] = 1     // a_arready
net:   tb.dut.split114.a_awready [1] = 1     // a_awready
net:   tb.dut.split114.a_bid [4] = 0000     // a_bid
net:   tb.dut.split114.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split114.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split114.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split114.a_rid [4] = 0000     // a_rid
net:   tb.dut.split114.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split114.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split114.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split114.a_wready [1] = 1     // a_wready
net:   tb.dut.split114.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split114.arburst [2] = 00     // arburst
net:   tb.dut.split114.arextras [8] = 00000000     // arextras
net:   tb.dut.split114.arid [4] = 0000     // arid
net:   tb.dut.split114.arlen [8] = 00000000     // arlen
net:   tb.dut.split114.arvalid [1] = 0     // arvalid
net:   tb.dut.split114.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split114.awburst [2] = 00     // awburst
net:   tb.dut.split114.awextras [8] = 00000000     // awextras
net:   tb.dut.split114.awid [4] = 0000     // awid
net:   tb.dut.split114.awlen [8] = 00000000     // awlen
net:   tb.dut.split114.awvalid [1] = 0     // awvalid
net:   tb.dut.split114.b_arready [1] = 1     // b_arready
net:   tb.dut.split114.b_awready [1] = 1     // b_awready
net:   tb.dut.split114.b_bid [4] = 0000     // b_bid
net:   tb.dut.split114.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split114.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split114.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split114.b_rid [4] = 0000     // b_rid
net:   tb.dut.split114.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split114.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split114.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split114.b_wready [1] = 1     // b_wready
net:   tb.dut.split114.bready [1] = 1     // bready
net:   tb.dut.split114.c_arready [1] = 1     // c_arready
net:   tb.dut.split114.c_awready [1] = 1     // c_awready
net:   tb.dut.split114.c_bid [4] = 0000     // c_bid
net:   tb.dut.split114.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split114.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split114.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split114.c_rid [4] = 0000     // c_rid
net:   tb.dut.split114.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split114.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split114.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split114.c_wready [1] = 1     // c_wready
net:   tb.dut.split114.clk [1] = 1     // clk
net:   tb.dut.split114.d_arready [1] = 1     // d_arready
net:   tb.dut.split114.d_awready [1] = 1     // d_awready
net:   tb.dut.split114.d_bid [4] = 0000     // d_bid
net:   tb.dut.split114.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split114.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split114.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split114.d_rid [4] = 0000     // d_rid
net:   tb.dut.split114.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split114.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split114.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split114.d_wready [1] = 1     // d_wready
net:   tb.dut.split114.rready [1] = 1     // rready
net:   tb.dut.split114.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split114.wlast [1] = 0     // wlast
net:   tb.dut.split114.wready [1] = 1     // wready
net:   tb.dut.split114.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split114.wvalid [1] = 0     // wvalid
net:   tb.dut.split114.rvalid [1] = 0     // rvalid
net:   tb.dut.split114.rresp [2] = 00     // rresp
net:   tb.dut.split114.rlast [1] = 0     // rlast
net:   tb.dut.split114.rid [4] = 0000     // rid
net:   tb.dut.split114.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split114.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split114.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split114.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split114.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split114.d_rready [1] = 1     // d_rready
net:   tb.dut.split114.d_bready [1] = 1     // d_bready
net:   tb.dut.split114.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split114.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split114.d_awid [4] = 0000     // d_awid
net:   tb.dut.split114.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split114.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split114.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split114.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split114.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split114.d_arid [4] = 0000     // d_arid
net:   tb.dut.split114.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split114.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split114.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split114.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split114.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split114.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split114.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split114.c_rready [1] = 1     // c_rready
net:   tb.dut.split114.c_bready [1] = 1     // c_bready
net:   tb.dut.split114.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split114.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split114.c_awid [4] = 0000     // c_awid
net:   tb.dut.split114.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split114.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split114.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split114.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split114.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split114.c_arid [4] = 0000     // c_arid
net:   tb.dut.split114.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split114.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split114.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split114.bvalid [1] = 0     // bvalid
net:   tb.dut.split114.bresp [2] = 00     // bresp
net:   tb.dut.split114.bid [4] = 0000     // bid
net:   tb.dut.split114.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split114.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split114.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split114.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split114.b_rready [1] = 1     // b_rready
net:   tb.dut.split114.b_bready [1] = 1     // b_bready
net:   tb.dut.split114.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split114.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split114.b_awid [4] = 0000     // b_awid
net:   tb.dut.split114.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split114.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split114.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split114.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split114.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split114.b_arid [4] = 0000     // b_arid
net:   tb.dut.split114.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split114.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split114.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split114.awready [1] = 1     // awready
net:   tb.dut.split114.arready [1] = 1     // arready
net:   tb.dut.split114.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split114.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split114.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split114.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split114.a_rready [1] = 1     // a_rready
net:   tb.dut.split114.a_bready [1] = 1     // a_bready
net:   tb.dut.split114.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split114.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split114.a_awid [4] = 0000     // a_awid
net:   tb.dut.split114.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split114.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split114.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split114.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split114.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split114.a_arid [4] = 0000     // a_arid
net:   tb.dut.split114.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split114.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split114.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split114.axi_rd_4_splitter
son:   tb.dut.split114.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split114.axi_rd_4_splitter
net:   tb.dut.split114.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split114.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split114.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split114.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split114.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split114.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split114.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split114.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split114.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split114.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split114.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split114.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split114.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split114.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split114.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split114.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split114.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split114.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split114.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split114.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split114.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split114.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split114.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split114.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split114.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split114.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split114.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split114.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split114.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split114.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split114.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split114.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split114.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split114.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split114.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split114.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split114.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split114.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split114.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split114.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split114.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split114.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split114.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split114.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split114.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split114.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split114.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split114.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split114.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split114.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split114.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split114.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split114.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split114.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split114.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split114.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split114.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split114.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split114.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split114.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split114.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split114.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split114.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split114.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split114.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split114.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split114.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split114.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split114.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split114.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split114.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split114.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split114.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split114.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split114.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split114.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split114.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split114.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split114.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split114.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split114.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split114.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split114.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split114.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split114.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split114.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split114.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split114.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split114.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split114.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split114.axi_rd_4_splitter.r_fifo
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split114.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split114.axi_wr_4_splitter
net:   tb.dut.split114.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split114.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split114.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split114.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split114.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split114.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split114.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split114.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split114.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split114.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split114.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split114.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split114.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split114.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split114.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split114.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split114.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split114.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split114.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split114.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split114.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split114.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split114.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split114.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split114.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split114.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split114.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split114.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split114.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split114.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split114.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split114.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split114.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split114.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split114.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split114.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split114.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split114.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split114.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split114.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split114.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split114.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split114.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split114.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split114.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split114.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split114.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split114.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split114.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split114.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split114.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split114.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split114.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split114.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split114.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split114.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split114.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split114.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split114.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split114.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split114.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split114.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split114.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split114.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split114.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split114.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split114.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split114.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split114.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split114.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split114.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split114.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split114.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split114.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split114.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split114.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split114.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split114.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split114.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split114.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split114.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split114.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split114.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split114.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split114.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split114.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split114.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split114.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split114.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split114.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split114.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split114.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split114.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split114.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split114.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split114.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split114.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split114.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split114.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split114.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split114.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split114.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split114.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split114.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split114.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split114.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split114.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split114.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split114.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split114.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split114.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split114.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split114.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split114.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split114.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split114.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split114.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split114.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split114.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split114.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split114.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split114.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split114.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split114.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split114.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split114.axi_wr_4_splitter.b_fifo
son:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split114.axi_wr_4_splitter.order_fifo
son:   tb.dut.split114.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split114.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split114.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split114.axi_wr_4_splitter.b_fifo
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split114.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split114.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split114.axi_wr_4_splitter.order_fifo
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split114.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split114.axi_wr_4_splitter.w_fifo
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split114.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split115
net:   tb.dut.split115.a_arready [1] = 1     // a_arready
net:   tb.dut.split115.a_awready [1] = 1     // a_awready
net:   tb.dut.split115.a_bid [4] = 0000     // a_bid
net:   tb.dut.split115.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split115.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split115.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split115.a_rid [4] = 0000     // a_rid
net:   tb.dut.split115.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split115.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split115.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split115.a_wready [1] = 1     // a_wready
net:   tb.dut.split115.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split115.arburst [2] = 00     // arburst
net:   tb.dut.split115.arextras [8] = 00000000     // arextras
net:   tb.dut.split115.arid [4] = 0000     // arid
net:   tb.dut.split115.arlen [8] = 00000000     // arlen
net:   tb.dut.split115.arvalid [1] = 0     // arvalid
net:   tb.dut.split115.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split115.awburst [2] = 00     // awburst
net:   tb.dut.split115.awextras [8] = 00000000     // awextras
net:   tb.dut.split115.awid [4] = 0000     // awid
net:   tb.dut.split115.awlen [8] = 00000000     // awlen
net:   tb.dut.split115.awvalid [1] = 0     // awvalid
net:   tb.dut.split115.b_arready [1] = 1     // b_arready
net:   tb.dut.split115.b_awready [1] = 1     // b_awready
net:   tb.dut.split115.b_bid [4] = 0000     // b_bid
net:   tb.dut.split115.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split115.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split115.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split115.b_rid [4] = 0000     // b_rid
net:   tb.dut.split115.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split115.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split115.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split115.b_wready [1] = 1     // b_wready
net:   tb.dut.split115.bready [1] = 1     // bready
net:   tb.dut.split115.c_arready [1] = 1     // c_arready
net:   tb.dut.split115.c_awready [1] = 1     // c_awready
net:   tb.dut.split115.c_bid [4] = 0000     // c_bid
net:   tb.dut.split115.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split115.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split115.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split115.c_rid [4] = 0000     // c_rid
net:   tb.dut.split115.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split115.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split115.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split115.c_wready [1] = 1     // c_wready
net:   tb.dut.split115.clk [1] = 1     // clk
net:   tb.dut.split115.d_arready [1] = 1     // d_arready
net:   tb.dut.split115.d_awready [1] = 1     // d_awready
net:   tb.dut.split115.d_bid [4] = 0000     // d_bid
net:   tb.dut.split115.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split115.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split115.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split115.d_rid [4] = 0000     // d_rid
net:   tb.dut.split115.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split115.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split115.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split115.d_wready [1] = 1     // d_wready
net:   tb.dut.split115.rready [1] = 1     // rready
net:   tb.dut.split115.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split115.wlast [1] = 0     // wlast
net:   tb.dut.split115.wready [1] = 1     // wready
net:   tb.dut.split115.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split115.wvalid [1] = 0     // wvalid
net:   tb.dut.split115.rvalid [1] = 0     // rvalid
net:   tb.dut.split115.rresp [2] = 00     // rresp
net:   tb.dut.split115.rlast [1] = 0     // rlast
net:   tb.dut.split115.rid [4] = 0000     // rid
net:   tb.dut.split115.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split115.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split115.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split115.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split115.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split115.d_rready [1] = 1     // d_rready
net:   tb.dut.split115.d_bready [1] = 1     // d_bready
net:   tb.dut.split115.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split115.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split115.d_awid [4] = 0000     // d_awid
net:   tb.dut.split115.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split115.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split115.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split115.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split115.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split115.d_arid [4] = 0000     // d_arid
net:   tb.dut.split115.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split115.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split115.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split115.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split115.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split115.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split115.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split115.c_rready [1] = 1     // c_rready
net:   tb.dut.split115.c_bready [1] = 1     // c_bready
net:   tb.dut.split115.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split115.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split115.c_awid [4] = 0000     // c_awid
net:   tb.dut.split115.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split115.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split115.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split115.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split115.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split115.c_arid [4] = 0000     // c_arid
net:   tb.dut.split115.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split115.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split115.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split115.bvalid [1] = 0     // bvalid
net:   tb.dut.split115.bresp [2] = 00     // bresp
net:   tb.dut.split115.bid [4] = 0000     // bid
net:   tb.dut.split115.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split115.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split115.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split115.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split115.b_rready [1] = 1     // b_rready
net:   tb.dut.split115.b_bready [1] = 1     // b_bready
net:   tb.dut.split115.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split115.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split115.b_awid [4] = 0000     // b_awid
net:   tb.dut.split115.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split115.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split115.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split115.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split115.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split115.b_arid [4] = 0000     // b_arid
net:   tb.dut.split115.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split115.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split115.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split115.awready [1] = 1     // awready
net:   tb.dut.split115.arready [1] = 1     // arready
net:   tb.dut.split115.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split115.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split115.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split115.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split115.a_rready [1] = 1     // a_rready
net:   tb.dut.split115.a_bready [1] = 1     // a_bready
net:   tb.dut.split115.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split115.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split115.a_awid [4] = 0000     // a_awid
net:   tb.dut.split115.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split115.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split115.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split115.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split115.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split115.a_arid [4] = 0000     // a_arid
net:   tb.dut.split115.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split115.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split115.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split115.axi_rd_4_splitter
son:   tb.dut.split115.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split115.axi_rd_4_splitter
net:   tb.dut.split115.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split115.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split115.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split115.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split115.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split115.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split115.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split115.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split115.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split115.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split115.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split115.axi_rd_4_splitter.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.split115.axi_rd_4_splitter.arburst [2] = 00     // arburst
net:   tb.dut.split115.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.split115.axi_rd_4_splitter.arid [4] = 0000     // arid
net:   tb.dut.split115.axi_rd_4_splitter.arlen [8] = 00000000     // arlen
net:   tb.dut.split115.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split115.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split115.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split115.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split115.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split115.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split115.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split115.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split115.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split115.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split115.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split115.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split115.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split115.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split115.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split115.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split115.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split115.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split115.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split115.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split115.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split115.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split115.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split115.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split115.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split115.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split115.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split115.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split115.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split115.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split115.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split115.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split115.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split115.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split115.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split115.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split115.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split115.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split115.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split115.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split115.axi_rd_4_splitter.rready [1] = 1     // rready
net:   tb.dut.split115.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split115.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split115.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split115.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split115.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split115.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split115.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split115.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split115.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split115.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split115.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split115.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split115.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split115.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split115.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split115.axi_rd_4_splitter.new_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_ar_entry
net:   tb.dut.split115.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split115.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split115.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split115.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split115.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split115.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split115.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split115.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split115.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split115.axi_rd_4_splitter.active_ar_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_ar_entry
net:   tb.dut.split115.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split115.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split115.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split115.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split115.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split115.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split115.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split115.axi_rd_4_splitter.r_fifo
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split115.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split115.axi_wr_4_splitter
net:   tb.dut.split115.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split115.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split115.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split115.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.split115.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split115.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split115.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split115.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split115.axi_wr_4_splitter.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.split115.axi_wr_4_splitter.awburst [2] = 00     // awburst
net:   tb.dut.split115.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.split115.axi_wr_4_splitter.awid [4] = 0000     // awid
net:   tb.dut.split115.axi_wr_4_splitter.awlen [8] = 00000000     // awlen
net:   tb.dut.split115.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split115.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split115.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split115.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split115.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.split115.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split115.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split115.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split115.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split115.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split115.axi_wr_4_splitter.bready [1] = 1     // bready
net:   tb.dut.split115.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split115.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split115.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split115.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.split115.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split115.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split115.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split115.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split115.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split115.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split115.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split115.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.split115.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split115.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split115.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split115.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split115.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split115.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split115.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split115.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split115.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split115.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split115.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split115.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.split115.axi_wr_4_splitter.wlast [1] = 0     // wlast
net:   tb.dut.split115.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split115.axi_wr_4_splitter.wstrb [8] = 00000000     // wstrb
net:   tb.dut.split115.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split115.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split115.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split115.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split115.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split115.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split115.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split115.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split115.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split115.axi_wr_4_splitter.work_wstrb [8] = 00000000     // work_wstrb
net:   tb.dut.split115.axi_wr_4_splitter.work_wlast [1] = 0     // work_wlast
net:   tb.dut.split115.axi_wr_4_splitter.work_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // work_wdata
net:   tb.dut.split115.axi_wr_4_splitter.work_awlen [8] = 00000000     // work_awlen
net:   tb.dut.split115.axi_wr_4_splitter.work_awid [4] = 0000     // work_awid
net:   tb.dut.split115.axi_wr_4_splitter.work_awextras [8] = 00000000     // work_awextras
net:   tb.dut.split115.axi_wr_4_splitter.work_awburst [2] = 00     // work_awburst
net:   tb.dut.split115.axi_wr_4_splitter.work_awaddr [32] = 00000000000000000000000000000000     // work_awaddr
net:   tb.dut.split115.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split115.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split115.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split115.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split115.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split115.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split115.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split115.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split115.axi_wr_4_splitter.new_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_aw_entry
net:   tb.dut.split115.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split115.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split115.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split115.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split115.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split115.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split115.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split115.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split115.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split115.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split115.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split115.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split115.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split115.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split115.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split115.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split115.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split115.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split115.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split115.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split115.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split115.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split115.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split115.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split115.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split115.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split115.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split115.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split115.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split115.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split115.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split115.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split115.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split115.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split115.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split115.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split115.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split115.axi_wr_4_splitter.active_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // active_aw_entry
net:   tb.dut.split115.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split115.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split115.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split115.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split115.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split115.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split115.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split115.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split115.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split115.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split115.axi_wr_4_splitter.b_fifo
son:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split115.axi_wr_4_splitter.order_fifo
son:   tb.dut.split115.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split115.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split115.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = 000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split115.axi_wr_4_splitter.b_fifo
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split115.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split115.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split115.axi_wr_4_splitter.order_fifo
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split115.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split115.axi_wr_4_splitter.w_fifo
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split115.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split12
net:   tb.dut.split12.a_arready [1] = 1     // a_arready
net:   tb.dut.split12.a_awready [1] = 1     // a_awready
net:   tb.dut.split12.a_bid [4] = 0000     // a_bid
net:   tb.dut.split12.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split12.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split12.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split12.a_rid [4] = 0000     // a_rid
net:   tb.dut.split12.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split12.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split12.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split12.a_wready [1] = 1     // a_wready
net:   tb.dut.split12.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split12.arburst [2] = xx     // arburst
net:   tb.dut.split12.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split12.arid [4] = xxxx     // arid
net:   tb.dut.split12.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split12.arvalid [1] = 0     // arvalid
net:   tb.dut.split12.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split12.awburst [2] = xx     // awburst
net:   tb.dut.split12.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split12.awid [4] = xxxx     // awid
net:   tb.dut.split12.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split12.awvalid [1] = 0     // awvalid
net:   tb.dut.split12.b_arready [1] = 1     // b_arready
net:   tb.dut.split12.b_awready [1] = 1     // b_awready
net:   tb.dut.split12.b_bid [4] = 0000     // b_bid
net:   tb.dut.split12.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split12.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split12.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split12.b_rid [4] = 0000     // b_rid
net:   tb.dut.split12.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split12.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split12.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split12.b_wready [1] = 1     // b_wready
net:   tb.dut.split12.bready [1] = 0     // bready
net:   tb.dut.split12.c_arready [1] = 1     // c_arready
net:   tb.dut.split12.c_awready [1] = 1     // c_awready
net:   tb.dut.split12.c_bid [4] = 0000     // c_bid
net:   tb.dut.split12.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split12.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split12.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split12.c_rid [4] = 0000     // c_rid
net:   tb.dut.split12.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split12.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split12.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split12.c_wready [1] = 1     // c_wready
net:   tb.dut.split12.clk [1] = 1     // clk
net:   tb.dut.split12.d_arready [1] = 1     // d_arready
net:   tb.dut.split12.d_awready [1] = 1     // d_awready
net:   tb.dut.split12.d_bid [4] = 0000     // d_bid
net:   tb.dut.split12.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split12.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split12.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split12.d_rid [4] = 0000     // d_rid
net:   tb.dut.split12.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split12.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split12.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split12.d_wready [1] = 1     // d_wready
net:   tb.dut.split12.rready [1] = 0     // rready
net:   tb.dut.split12.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split12.wlast [1] = x     // wlast
net:   tb.dut.split12.wready [1] = 1     // wready
net:   tb.dut.split12.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split12.wvalid [1] = 0     // wvalid
net:   tb.dut.split12.rvalid [1] = 0     // rvalid
net:   tb.dut.split12.rresp [2] = 00     // rresp
net:   tb.dut.split12.rlast [1] = 0     // rlast
net:   tb.dut.split12.rid [4] = 0000     // rid
net:   tb.dut.split12.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split12.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split12.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split12.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split12.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split12.d_rready [1] = 1     // d_rready
net:   tb.dut.split12.d_bready [1] = 1     // d_bready
net:   tb.dut.split12.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split12.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split12.d_awid [4] = 0000     // d_awid
net:   tb.dut.split12.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split12.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split12.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split12.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split12.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split12.d_arid [4] = 0000     // d_arid
net:   tb.dut.split12.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split12.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split12.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split12.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split12.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split12.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split12.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split12.c_rready [1] = 1     // c_rready
net:   tb.dut.split12.c_bready [1] = 1     // c_bready
net:   tb.dut.split12.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split12.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split12.c_awid [4] = 0000     // c_awid
net:   tb.dut.split12.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split12.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split12.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split12.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split12.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split12.c_arid [4] = 0000     // c_arid
net:   tb.dut.split12.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split12.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split12.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split12.bvalid [1] = 0     // bvalid
net:   tb.dut.split12.bresp [2] = 00     // bresp
net:   tb.dut.split12.bid [4] = 0000     // bid
net:   tb.dut.split12.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split12.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split12.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split12.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split12.b_rready [1] = 1     // b_rready
net:   tb.dut.split12.b_bready [1] = 1     // b_bready
net:   tb.dut.split12.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split12.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split12.b_awid [4] = 0000     // b_awid
net:   tb.dut.split12.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split12.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split12.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split12.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split12.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split12.b_arid [4] = 0000     // b_arid
net:   tb.dut.split12.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split12.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split12.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split12.awready [1] = 1     // awready
net:   tb.dut.split12.arready [1] = 1     // arready
net:   tb.dut.split12.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split12.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split12.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split12.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split12.a_rready [1] = 1     // a_rready
net:   tb.dut.split12.a_bready [1] = 1     // a_bready
net:   tb.dut.split12.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split12.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split12.a_awid [4] = 0000     // a_awid
net:   tb.dut.split12.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split12.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split12.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split12.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split12.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split12.a_arid [4] = 0000     // a_arid
net:   tb.dut.split12.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split12.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split12.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split12.axi_rd_4_splitter
son:   tb.dut.split12.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split12.axi_rd_4_splitter
net:   tb.dut.split12.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split12.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split12.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split12.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split12.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split12.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split12.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split12.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split12.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split12.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split12.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split12.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split12.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split12.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split12.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split12.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split12.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split12.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split12.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split12.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split12.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split12.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split12.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split12.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split12.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split12.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split12.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split12.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split12.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split12.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split12.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split12.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split12.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split12.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split12.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split12.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split12.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split12.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split12.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split12.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split12.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split12.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split12.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split12.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split12.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split12.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split12.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split12.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split12.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split12.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split12.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split12.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split12.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split12.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split12.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split12.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split12.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split12.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split12.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split12.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split12.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split12.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split12.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split12.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split12.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split12.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split12.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split12.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split12.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split12.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split12.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split12.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split12.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split12.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split12.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split12.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split12.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split12.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split12.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split12.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split12.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split12.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split12.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split12.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split12.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split12.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split12.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split12.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split12.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split12.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split12.axi_rd_4_splitter.r_fifo
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split12.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split12.axi_wr_4_splitter
net:   tb.dut.split12.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split12.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split12.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split12.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split12.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split12.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split12.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split12.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split12.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split12.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split12.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split12.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split12.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split12.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split12.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split12.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split12.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split12.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split12.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split12.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split12.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split12.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split12.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split12.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split12.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split12.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split12.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split12.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split12.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split12.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split12.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split12.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split12.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split12.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split12.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split12.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split12.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split12.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split12.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split12.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split12.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split12.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split12.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split12.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split12.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split12.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split12.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split12.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split12.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split12.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split12.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split12.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split12.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split12.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split12.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split12.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split12.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split12.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split12.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split12.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split12.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split12.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split12.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split12.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split12.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split12.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split12.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split12.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split12.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split12.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split12.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split12.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split12.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split12.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split12.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split12.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split12.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split12.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split12.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split12.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split12.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split12.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split12.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split12.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split12.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split12.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split12.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split12.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split12.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split12.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split12.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split12.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split12.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split12.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split12.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split12.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split12.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split12.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split12.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split12.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split12.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split12.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split12.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split12.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split12.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split12.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split12.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split12.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split12.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split12.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split12.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split12.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split12.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split12.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split12.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split12.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split12.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split12.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split12.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split12.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split12.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split12.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split12.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split12.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split12.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split12.axi_wr_4_splitter.b_fifo
son:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split12.axi_wr_4_splitter.order_fifo
son:   tb.dut.split12.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split12.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split12.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split12.axi_wr_4_splitter.b_fifo
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split12.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split12.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split12.axi_wr_4_splitter.order_fifo
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split12.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split12.axi_wr_4_splitter.w_fifo
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split12.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split13
net:   tb.dut.split13.a_arready [1] = 1     // a_arready
net:   tb.dut.split13.a_awready [1] = 1     // a_awready
net:   tb.dut.split13.a_bid [4] = 0000     // a_bid
net:   tb.dut.split13.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split13.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split13.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split13.a_rid [4] = 0000     // a_rid
net:   tb.dut.split13.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split13.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split13.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split13.a_wready [1] = 1     // a_wready
net:   tb.dut.split13.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split13.arburst [2] = xx     // arburst
net:   tb.dut.split13.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split13.arid [4] = xxxx     // arid
net:   tb.dut.split13.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split13.arvalid [1] = 0     // arvalid
net:   tb.dut.split13.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split13.awburst [2] = xx     // awburst
net:   tb.dut.split13.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split13.awid [4] = xxxx     // awid
net:   tb.dut.split13.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split13.awvalid [1] = 0     // awvalid
net:   tb.dut.split13.b_arready [1] = 1     // b_arready
net:   tb.dut.split13.b_awready [1] = 1     // b_awready
net:   tb.dut.split13.b_bid [4] = 0000     // b_bid
net:   tb.dut.split13.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split13.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split13.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split13.b_rid [4] = 0000     // b_rid
net:   tb.dut.split13.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split13.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split13.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split13.b_wready [1] = 1     // b_wready
net:   tb.dut.split13.bready [1] = 0     // bready
net:   tb.dut.split13.c_arready [1] = 1     // c_arready
net:   tb.dut.split13.c_awready [1] = 1     // c_awready
net:   tb.dut.split13.c_bid [4] = 0000     // c_bid
net:   tb.dut.split13.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split13.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split13.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split13.c_rid [4] = 0000     // c_rid
net:   tb.dut.split13.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split13.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split13.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split13.c_wready [1] = 1     // c_wready
net:   tb.dut.split13.clk [1] = 1     // clk
net:   tb.dut.split13.d_arready [1] = 1     // d_arready
net:   tb.dut.split13.d_awready [1] = 1     // d_awready
net:   tb.dut.split13.d_bid [4] = 0000     // d_bid
net:   tb.dut.split13.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split13.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split13.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split13.d_rid [4] = 0000     // d_rid
net:   tb.dut.split13.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split13.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split13.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split13.d_wready [1] = 1     // d_wready
net:   tb.dut.split13.rready [1] = 0     // rready
net:   tb.dut.split13.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split13.wlast [1] = x     // wlast
net:   tb.dut.split13.wready [1] = 1     // wready
net:   tb.dut.split13.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split13.wvalid [1] = 0     // wvalid
net:   tb.dut.split13.rvalid [1] = 0     // rvalid
net:   tb.dut.split13.rresp [2] = 00     // rresp
net:   tb.dut.split13.rlast [1] = 0     // rlast
net:   tb.dut.split13.rid [4] = 0000     // rid
net:   tb.dut.split13.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split13.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split13.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split13.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split13.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split13.d_rready [1] = 1     // d_rready
net:   tb.dut.split13.d_bready [1] = 1     // d_bready
net:   tb.dut.split13.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split13.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split13.d_awid [4] = 0000     // d_awid
net:   tb.dut.split13.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split13.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split13.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split13.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split13.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split13.d_arid [4] = 0000     // d_arid
net:   tb.dut.split13.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split13.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split13.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split13.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split13.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split13.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split13.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split13.c_rready [1] = 1     // c_rready
net:   tb.dut.split13.c_bready [1] = 1     // c_bready
net:   tb.dut.split13.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split13.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split13.c_awid [4] = 0000     // c_awid
net:   tb.dut.split13.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split13.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split13.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split13.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split13.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split13.c_arid [4] = 0000     // c_arid
net:   tb.dut.split13.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split13.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split13.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split13.bvalid [1] = 0     // bvalid
net:   tb.dut.split13.bresp [2] = 00     // bresp
net:   tb.dut.split13.bid [4] = 0000     // bid
net:   tb.dut.split13.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split13.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split13.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split13.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split13.b_rready [1] = 1     // b_rready
net:   tb.dut.split13.b_bready [1] = 1     // b_bready
net:   tb.dut.split13.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split13.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split13.b_awid [4] = 0000     // b_awid
net:   tb.dut.split13.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split13.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split13.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split13.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split13.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split13.b_arid [4] = 0000     // b_arid
net:   tb.dut.split13.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split13.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split13.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split13.awready [1] = 1     // awready
net:   tb.dut.split13.arready [1] = 1     // arready
net:   tb.dut.split13.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split13.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split13.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split13.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split13.a_rready [1] = 1     // a_rready
net:   tb.dut.split13.a_bready [1] = 1     // a_bready
net:   tb.dut.split13.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split13.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split13.a_awid [4] = 0000     // a_awid
net:   tb.dut.split13.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split13.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split13.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split13.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split13.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split13.a_arid [4] = 0000     // a_arid
net:   tb.dut.split13.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split13.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split13.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split13.axi_rd_4_splitter
son:   tb.dut.split13.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split13.axi_rd_4_splitter
net:   tb.dut.split13.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split13.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split13.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split13.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split13.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split13.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split13.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split13.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split13.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split13.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split13.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split13.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split13.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split13.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split13.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split13.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split13.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split13.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split13.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split13.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split13.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split13.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split13.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split13.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split13.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split13.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split13.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split13.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split13.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split13.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split13.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split13.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split13.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split13.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split13.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split13.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split13.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split13.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split13.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split13.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split13.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split13.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split13.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split13.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split13.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split13.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split13.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split13.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split13.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split13.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split13.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split13.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split13.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split13.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split13.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split13.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split13.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split13.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split13.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split13.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split13.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split13.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split13.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split13.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split13.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split13.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split13.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split13.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split13.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split13.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split13.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split13.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split13.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split13.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split13.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split13.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split13.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split13.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split13.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split13.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split13.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split13.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split13.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split13.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split13.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split13.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split13.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split13.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split13.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split13.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split13.axi_rd_4_splitter.r_fifo
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split13.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split13.axi_wr_4_splitter
net:   tb.dut.split13.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split13.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split13.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split13.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split13.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split13.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split13.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split13.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split13.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split13.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split13.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split13.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split13.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split13.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split13.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split13.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split13.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split13.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split13.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split13.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split13.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split13.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split13.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split13.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split13.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split13.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split13.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split13.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split13.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split13.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split13.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split13.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split13.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split13.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split13.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split13.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split13.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split13.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split13.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split13.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split13.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split13.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split13.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split13.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split13.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split13.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split13.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split13.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split13.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split13.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split13.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split13.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split13.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split13.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split13.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split13.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split13.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split13.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split13.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split13.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split13.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split13.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split13.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split13.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split13.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split13.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split13.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split13.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split13.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split13.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split13.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split13.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split13.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split13.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split13.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split13.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split13.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split13.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split13.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split13.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split13.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split13.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split13.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split13.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split13.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split13.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split13.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split13.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split13.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split13.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split13.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split13.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split13.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split13.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split13.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split13.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split13.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split13.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split13.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split13.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split13.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split13.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split13.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split13.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split13.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split13.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split13.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split13.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split13.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split13.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split13.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split13.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split13.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split13.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split13.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split13.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split13.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split13.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split13.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split13.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split13.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split13.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split13.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split13.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split13.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split13.axi_wr_4_splitter.b_fifo
son:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split13.axi_wr_4_splitter.order_fifo
son:   tb.dut.split13.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split13.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split13.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split13.axi_wr_4_splitter.b_fifo
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split13.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split13.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split13.axi_wr_4_splitter.order_fifo
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split13.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split13.axi_wr_4_splitter.w_fifo
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split13.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split14
net:   tb.dut.split14.a_arready [1] = 1     // a_arready
net:   tb.dut.split14.a_awready [1] = 1     // a_awready
net:   tb.dut.split14.a_bid [4] = 0000     // a_bid
net:   tb.dut.split14.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split14.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split14.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split14.a_rid [4] = 0000     // a_rid
net:   tb.dut.split14.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split14.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split14.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split14.a_wready [1] = 1     // a_wready
net:   tb.dut.split14.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split14.arburst [2] = xx     // arburst
net:   tb.dut.split14.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split14.arid [4] = xxxx     // arid
net:   tb.dut.split14.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split14.arvalid [1] = 0     // arvalid
net:   tb.dut.split14.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split14.awburst [2] = xx     // awburst
net:   tb.dut.split14.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split14.awid [4] = xxxx     // awid
net:   tb.dut.split14.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split14.awvalid [1] = 0     // awvalid
net:   tb.dut.split14.b_arready [1] = 1     // b_arready
net:   tb.dut.split14.b_awready [1] = 1     // b_awready
net:   tb.dut.split14.b_bid [4] = 0000     // b_bid
net:   tb.dut.split14.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split14.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split14.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split14.b_rid [4] = 0000     // b_rid
net:   tb.dut.split14.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split14.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split14.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split14.b_wready [1] = 1     // b_wready
net:   tb.dut.split14.bready [1] = 0     // bready
net:   tb.dut.split14.c_arready [1] = 1     // c_arready
net:   tb.dut.split14.c_awready [1] = 1     // c_awready
net:   tb.dut.split14.c_bid [4] = 0000     // c_bid
net:   tb.dut.split14.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split14.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split14.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split14.c_rid [4] = 0000     // c_rid
net:   tb.dut.split14.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split14.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split14.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split14.c_wready [1] = 1     // c_wready
net:   tb.dut.split14.clk [1] = 1     // clk
net:   tb.dut.split14.d_arready [1] = 1     // d_arready
net:   tb.dut.split14.d_awready [1] = 1     // d_awready
net:   tb.dut.split14.d_bid [4] = 0000     // d_bid
net:   tb.dut.split14.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split14.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split14.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split14.d_rid [4] = 0000     // d_rid
net:   tb.dut.split14.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split14.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split14.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split14.d_wready [1] = 1     // d_wready
net:   tb.dut.split14.rready [1] = 0     // rready
net:   tb.dut.split14.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split14.wlast [1] = x     // wlast
net:   tb.dut.split14.wready [1] = 1     // wready
net:   tb.dut.split14.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split14.wvalid [1] = 0     // wvalid
net:   tb.dut.split14.rvalid [1] = 0     // rvalid
net:   tb.dut.split14.rresp [2] = 00     // rresp
net:   tb.dut.split14.rlast [1] = 0     // rlast
net:   tb.dut.split14.rid [4] = 0000     // rid
net:   tb.dut.split14.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split14.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split14.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split14.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split14.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split14.d_rready [1] = 1     // d_rready
net:   tb.dut.split14.d_bready [1] = 1     // d_bready
net:   tb.dut.split14.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split14.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split14.d_awid [4] = 0000     // d_awid
net:   tb.dut.split14.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split14.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split14.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split14.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split14.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split14.d_arid [4] = 0000     // d_arid
net:   tb.dut.split14.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split14.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split14.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split14.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split14.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split14.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split14.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split14.c_rready [1] = 1     // c_rready
net:   tb.dut.split14.c_bready [1] = 1     // c_bready
net:   tb.dut.split14.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split14.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split14.c_awid [4] = 0000     // c_awid
net:   tb.dut.split14.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split14.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split14.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split14.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split14.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split14.c_arid [4] = 0000     // c_arid
net:   tb.dut.split14.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split14.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split14.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split14.bvalid [1] = 0     // bvalid
net:   tb.dut.split14.bresp [2] = 00     // bresp
net:   tb.dut.split14.bid [4] = 0000     // bid
net:   tb.dut.split14.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split14.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split14.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split14.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split14.b_rready [1] = 1     // b_rready
net:   tb.dut.split14.b_bready [1] = 1     // b_bready
net:   tb.dut.split14.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split14.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split14.b_awid [4] = 0000     // b_awid
net:   tb.dut.split14.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split14.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split14.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split14.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split14.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split14.b_arid [4] = 0000     // b_arid
net:   tb.dut.split14.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split14.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split14.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split14.awready [1] = 1     // awready
net:   tb.dut.split14.arready [1] = 1     // arready
net:   tb.dut.split14.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split14.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split14.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split14.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split14.a_rready [1] = 1     // a_rready
net:   tb.dut.split14.a_bready [1] = 1     // a_bready
net:   tb.dut.split14.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split14.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split14.a_awid [4] = 0000     // a_awid
net:   tb.dut.split14.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split14.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split14.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split14.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split14.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split14.a_arid [4] = 0000     // a_arid
net:   tb.dut.split14.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split14.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split14.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split14.axi_rd_4_splitter
son:   tb.dut.split14.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split14.axi_rd_4_splitter
net:   tb.dut.split14.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split14.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split14.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split14.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split14.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split14.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split14.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split14.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split14.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split14.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split14.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split14.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split14.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split14.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split14.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split14.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split14.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split14.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split14.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split14.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split14.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split14.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split14.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split14.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split14.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split14.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split14.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split14.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split14.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split14.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split14.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split14.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split14.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split14.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split14.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split14.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split14.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split14.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split14.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split14.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split14.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split14.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split14.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split14.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split14.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split14.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split14.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split14.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split14.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split14.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split14.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split14.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split14.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split14.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split14.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split14.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split14.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split14.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split14.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split14.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split14.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split14.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split14.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split14.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split14.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split14.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split14.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split14.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split14.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split14.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split14.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split14.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split14.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split14.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split14.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split14.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split14.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split14.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split14.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split14.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split14.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split14.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split14.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split14.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split14.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split14.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split14.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split14.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split14.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split14.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split14.axi_rd_4_splitter.r_fifo
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split14.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split14.axi_wr_4_splitter
net:   tb.dut.split14.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split14.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split14.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split14.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split14.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split14.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split14.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split14.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split14.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split14.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split14.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split14.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split14.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split14.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split14.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split14.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split14.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split14.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split14.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split14.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split14.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split14.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split14.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split14.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split14.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split14.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split14.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split14.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split14.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split14.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split14.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split14.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split14.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split14.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split14.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split14.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split14.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split14.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split14.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split14.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split14.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split14.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split14.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split14.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split14.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split14.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split14.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split14.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split14.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split14.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split14.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split14.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split14.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split14.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split14.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split14.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split14.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split14.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split14.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split14.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split14.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split14.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split14.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split14.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split14.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split14.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split14.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split14.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split14.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split14.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split14.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split14.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split14.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split14.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split14.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split14.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split14.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split14.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split14.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split14.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split14.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split14.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split14.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split14.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split14.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split14.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split14.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split14.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split14.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split14.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split14.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split14.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split14.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split14.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split14.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split14.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split14.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split14.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split14.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split14.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split14.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split14.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split14.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split14.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split14.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split14.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split14.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split14.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split14.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split14.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split14.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split14.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split14.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split14.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split14.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split14.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split14.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split14.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split14.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split14.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split14.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split14.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split14.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split14.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split14.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split14.axi_wr_4_splitter.b_fifo
son:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split14.axi_wr_4_splitter.order_fifo
son:   tb.dut.split14.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split14.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split14.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split14.axi_wr_4_splitter.b_fifo
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split14.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split14.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split14.axi_wr_4_splitter.order_fifo
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split14.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split14.axi_wr_4_splitter.w_fifo
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split14.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split15
net:   tb.dut.split15.a_arready [1] = 1     // a_arready
net:   tb.dut.split15.a_awready [1] = 1     // a_awready
net:   tb.dut.split15.a_bid [4] = 0000     // a_bid
net:   tb.dut.split15.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split15.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split15.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split15.a_rid [4] = 0000     // a_rid
net:   tb.dut.split15.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split15.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split15.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split15.a_wready [1] = 1     // a_wready
net:   tb.dut.split15.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split15.arburst [2] = xx     // arburst
net:   tb.dut.split15.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split15.arid [4] = xxxx     // arid
net:   tb.dut.split15.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split15.arvalid [1] = 0     // arvalid
net:   tb.dut.split15.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split15.awburst [2] = xx     // awburst
net:   tb.dut.split15.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split15.awid [4] = xxxx     // awid
net:   tb.dut.split15.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split15.awvalid [1] = 0     // awvalid
net:   tb.dut.split15.b_arready [1] = 1     // b_arready
net:   tb.dut.split15.b_awready [1] = 1     // b_awready
net:   tb.dut.split15.b_bid [4] = 0000     // b_bid
net:   tb.dut.split15.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split15.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split15.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split15.b_rid [4] = 0000     // b_rid
net:   tb.dut.split15.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split15.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split15.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split15.b_wready [1] = 1     // b_wready
net:   tb.dut.split15.bready [1] = 0     // bready
net:   tb.dut.split15.c_arready [1] = 1     // c_arready
net:   tb.dut.split15.c_awready [1] = 1     // c_awready
net:   tb.dut.split15.c_bid [4] = 0000     // c_bid
net:   tb.dut.split15.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split15.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split15.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split15.c_rid [4] = 0000     // c_rid
net:   tb.dut.split15.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split15.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split15.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split15.c_wready [1] = 1     // c_wready
net:   tb.dut.split15.clk [1] = 1     // clk
net:   tb.dut.split15.d_arready [1] = 1     // d_arready
net:   tb.dut.split15.d_awready [1] = 1     // d_awready
net:   tb.dut.split15.d_bid [4] = 0000     // d_bid
net:   tb.dut.split15.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split15.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split15.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split15.d_rid [4] = 0000     // d_rid
net:   tb.dut.split15.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split15.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split15.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split15.d_wready [1] = 1     // d_wready
net:   tb.dut.split15.rready [1] = 0     // rready
net:   tb.dut.split15.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split15.wlast [1] = x     // wlast
net:   tb.dut.split15.wready [1] = 1     // wready
net:   tb.dut.split15.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split15.wvalid [1] = 0     // wvalid
net:   tb.dut.split15.rvalid [1] = 0     // rvalid
net:   tb.dut.split15.rresp [2] = 00     // rresp
net:   tb.dut.split15.rlast [1] = 0     // rlast
net:   tb.dut.split15.rid [4] = 0000     // rid
net:   tb.dut.split15.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split15.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split15.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split15.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split15.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split15.d_rready [1] = 1     // d_rready
net:   tb.dut.split15.d_bready [1] = 1     // d_bready
net:   tb.dut.split15.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split15.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split15.d_awid [4] = 0000     // d_awid
net:   tb.dut.split15.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split15.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split15.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split15.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split15.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split15.d_arid [4] = 0000     // d_arid
net:   tb.dut.split15.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split15.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split15.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split15.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split15.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split15.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split15.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split15.c_rready [1] = 1     // c_rready
net:   tb.dut.split15.c_bready [1] = 1     // c_bready
net:   tb.dut.split15.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split15.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split15.c_awid [4] = 0000     // c_awid
net:   tb.dut.split15.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split15.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split15.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split15.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split15.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split15.c_arid [4] = 0000     // c_arid
net:   tb.dut.split15.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split15.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split15.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split15.bvalid [1] = 0     // bvalid
net:   tb.dut.split15.bresp [2] = 00     // bresp
net:   tb.dut.split15.bid [4] = 0000     // bid
net:   tb.dut.split15.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split15.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split15.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split15.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split15.b_rready [1] = 1     // b_rready
net:   tb.dut.split15.b_bready [1] = 1     // b_bready
net:   tb.dut.split15.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split15.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split15.b_awid [4] = 0000     // b_awid
net:   tb.dut.split15.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split15.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split15.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split15.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split15.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split15.b_arid [4] = 0000     // b_arid
net:   tb.dut.split15.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split15.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split15.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split15.awready [1] = 1     // awready
net:   tb.dut.split15.arready [1] = 1     // arready
net:   tb.dut.split15.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split15.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split15.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split15.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split15.a_rready [1] = 1     // a_rready
net:   tb.dut.split15.a_bready [1] = 1     // a_bready
net:   tb.dut.split15.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split15.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split15.a_awid [4] = 0000     // a_awid
net:   tb.dut.split15.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split15.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split15.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split15.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split15.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split15.a_arid [4] = 0000     // a_arid
net:   tb.dut.split15.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split15.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split15.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split15.axi_rd_4_splitter
son:   tb.dut.split15.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split15.axi_rd_4_splitter
net:   tb.dut.split15.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split15.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split15.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split15.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split15.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split15.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split15.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split15.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split15.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split15.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split15.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split15.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split15.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split15.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split15.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split15.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split15.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split15.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split15.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split15.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split15.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split15.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split15.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split15.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split15.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split15.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split15.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split15.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split15.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split15.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split15.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split15.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split15.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split15.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split15.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split15.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split15.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split15.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split15.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split15.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split15.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split15.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split15.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split15.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split15.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split15.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split15.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split15.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split15.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split15.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split15.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split15.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split15.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split15.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split15.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split15.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split15.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split15.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split15.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split15.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split15.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split15.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split15.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split15.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split15.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split15.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split15.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split15.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split15.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split15.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split15.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split15.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split15.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split15.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split15.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split15.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split15.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split15.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split15.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split15.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split15.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split15.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split15.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split15.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split15.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split15.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split15.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split15.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split15.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split15.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split15.axi_rd_4_splitter.r_fifo
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split15.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split15.axi_wr_4_splitter
net:   tb.dut.split15.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split15.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split15.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split15.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split15.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split15.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split15.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split15.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split15.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split15.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split15.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split15.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split15.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split15.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split15.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split15.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split15.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split15.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split15.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split15.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split15.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split15.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split15.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split15.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split15.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split15.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split15.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split15.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split15.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split15.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split15.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split15.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split15.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split15.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split15.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split15.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split15.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split15.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split15.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split15.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split15.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split15.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split15.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split15.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split15.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split15.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split15.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split15.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split15.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split15.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split15.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split15.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split15.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split15.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split15.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split15.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split15.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split15.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split15.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split15.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split15.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split15.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split15.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split15.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split15.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split15.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split15.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split15.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split15.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split15.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split15.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split15.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split15.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split15.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split15.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split15.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split15.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split15.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split15.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split15.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split15.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split15.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split15.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split15.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split15.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split15.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split15.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split15.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split15.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split15.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split15.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split15.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split15.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split15.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split15.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split15.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split15.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split15.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split15.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split15.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split15.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split15.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split15.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split15.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split15.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split15.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split15.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split15.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split15.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split15.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split15.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split15.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split15.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split15.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split15.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split15.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split15.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split15.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split15.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split15.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split15.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split15.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split15.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split15.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split15.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split15.axi_wr_4_splitter.b_fifo
son:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split15.axi_wr_4_splitter.order_fifo
son:   tb.dut.split15.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split15.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split15.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split15.axi_wr_4_splitter.b_fifo
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split15.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split15.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split15.axi_wr_4_splitter.order_fifo
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split15.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split15.axi_wr_4_splitter.w_fifo
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split15.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split2
net:   tb.dut.split2.a_arready [1] = 1     // a_arready
net:   tb.dut.split2.a_awready [1] = 1     // a_awready
net:   tb.dut.split2.a_bid [4] = 0000     // a_bid
net:   tb.dut.split2.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split2.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split2.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split2.a_rid [4] = 0000     // a_rid
net:   tb.dut.split2.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split2.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split2.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split2.a_wready [1] = 1     // a_wready
net:   tb.dut.split2.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split2.arburst [2] = xx     // arburst
net:   tb.dut.split2.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split2.arid [4] = xxxx     // arid
net:   tb.dut.split2.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split2.arvalid [1] = 0     // arvalid
net:   tb.dut.split2.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split2.awburst [2] = xx     // awburst
net:   tb.dut.split2.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split2.awid [4] = xxxx     // awid
net:   tb.dut.split2.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split2.awvalid [1] = 0     // awvalid
net:   tb.dut.split2.b_arready [1] = 1     // b_arready
net:   tb.dut.split2.b_awready [1] = 1     // b_awready
net:   tb.dut.split2.b_bid [4] = 0000     // b_bid
net:   tb.dut.split2.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split2.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split2.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split2.b_rid [4] = 0000     // b_rid
net:   tb.dut.split2.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split2.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split2.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split2.b_wready [1] = 1     // b_wready
net:   tb.dut.split2.bready [1] = 0     // bready
net:   tb.dut.split2.c_arready [1] = 1     // c_arready
net:   tb.dut.split2.c_awready [1] = 1     // c_awready
net:   tb.dut.split2.c_bid [4] = 0000     // c_bid
net:   tb.dut.split2.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split2.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split2.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split2.c_rid [4] = 0000     // c_rid
net:   tb.dut.split2.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split2.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split2.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split2.c_wready [1] = 1     // c_wready
net:   tb.dut.split2.clk [1] = 1     // clk
net:   tb.dut.split2.d_arready [1] = 1     // d_arready
net:   tb.dut.split2.d_awready [1] = 1     // d_awready
net:   tb.dut.split2.d_bid [4] = 0000     // d_bid
net:   tb.dut.split2.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split2.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split2.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split2.d_rid [4] = 0000     // d_rid
net:   tb.dut.split2.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split2.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split2.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split2.d_wready [1] = 1     // d_wready
net:   tb.dut.split2.rready [1] = 0     // rready
net:   tb.dut.split2.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split2.wlast [1] = x     // wlast
net:   tb.dut.split2.wready [1] = 1     // wready
net:   tb.dut.split2.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split2.wvalid [1] = 0     // wvalid
net:   tb.dut.split2.rvalid [1] = 0     // rvalid
net:   tb.dut.split2.rresp [2] = 00     // rresp
net:   tb.dut.split2.rlast [1] = 0     // rlast
net:   tb.dut.split2.rid [4] = 0000     // rid
net:   tb.dut.split2.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split2.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split2.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split2.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split2.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split2.d_rready [1] = 1     // d_rready
net:   tb.dut.split2.d_bready [1] = 1     // d_bready
net:   tb.dut.split2.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split2.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split2.d_awid [4] = 0000     // d_awid
net:   tb.dut.split2.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split2.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split2.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split2.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split2.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split2.d_arid [4] = 0000     // d_arid
net:   tb.dut.split2.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split2.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split2.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split2.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split2.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split2.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split2.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split2.c_rready [1] = 1     // c_rready
net:   tb.dut.split2.c_bready [1] = 1     // c_bready
net:   tb.dut.split2.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split2.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split2.c_awid [4] = 0000     // c_awid
net:   tb.dut.split2.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split2.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split2.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split2.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split2.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split2.c_arid [4] = 0000     // c_arid
net:   tb.dut.split2.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split2.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split2.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split2.bvalid [1] = 0     // bvalid
net:   tb.dut.split2.bresp [2] = 00     // bresp
net:   tb.dut.split2.bid [4] = 0000     // bid
net:   tb.dut.split2.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split2.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split2.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split2.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split2.b_rready [1] = 1     // b_rready
net:   tb.dut.split2.b_bready [1] = 1     // b_bready
net:   tb.dut.split2.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split2.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split2.b_awid [4] = 0000     // b_awid
net:   tb.dut.split2.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split2.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split2.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split2.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split2.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split2.b_arid [4] = 0000     // b_arid
net:   tb.dut.split2.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split2.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split2.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split2.awready [1] = 1     // awready
net:   tb.dut.split2.arready [1] = 1     // arready
net:   tb.dut.split2.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split2.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split2.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split2.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split2.a_rready [1] = 1     // a_rready
net:   tb.dut.split2.a_bready [1] = 1     // a_bready
net:   tb.dut.split2.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split2.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split2.a_awid [4] = 0000     // a_awid
net:   tb.dut.split2.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split2.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split2.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split2.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split2.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split2.a_arid [4] = 0000     // a_arid
net:   tb.dut.split2.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split2.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split2.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split2.axi_rd_4_splitter
son:   tb.dut.split2.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split2.axi_rd_4_splitter
net:   tb.dut.split2.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split2.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split2.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split2.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split2.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split2.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split2.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split2.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split2.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split2.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split2.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split2.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split2.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split2.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split2.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split2.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split2.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split2.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split2.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split2.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split2.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split2.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split2.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split2.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split2.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split2.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split2.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split2.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split2.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split2.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split2.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split2.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split2.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split2.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split2.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split2.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split2.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split2.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split2.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split2.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split2.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split2.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split2.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split2.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split2.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split2.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split2.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split2.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split2.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split2.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split2.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split2.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split2.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split2.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split2.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split2.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split2.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split2.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split2.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split2.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split2.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split2.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split2.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split2.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split2.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split2.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split2.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split2.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split2.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split2.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split2.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split2.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split2.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split2.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split2.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split2.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split2.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split2.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split2.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split2.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split2.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split2.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split2.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split2.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split2.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split2.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split2.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split2.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split2.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split2.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split2.axi_rd_4_splitter.r_fifo
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split2.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split2.axi_wr_4_splitter
net:   tb.dut.split2.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split2.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split2.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split2.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split2.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split2.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split2.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split2.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split2.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split2.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split2.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split2.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split2.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split2.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split2.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split2.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split2.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split2.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split2.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split2.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split2.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split2.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split2.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split2.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split2.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split2.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split2.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split2.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split2.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split2.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split2.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split2.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split2.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split2.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split2.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split2.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split2.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split2.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split2.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split2.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split2.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split2.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split2.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split2.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split2.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split2.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split2.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split2.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split2.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split2.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split2.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split2.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split2.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split2.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split2.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split2.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split2.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split2.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split2.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split2.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split2.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split2.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split2.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split2.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split2.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split2.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split2.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split2.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split2.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split2.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split2.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split2.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split2.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split2.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split2.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split2.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split2.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split2.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split2.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split2.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split2.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split2.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split2.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split2.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split2.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split2.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split2.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split2.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split2.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split2.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split2.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split2.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split2.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split2.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split2.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split2.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split2.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split2.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split2.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split2.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split2.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split2.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split2.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split2.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split2.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split2.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split2.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split2.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split2.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split2.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split2.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split2.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split2.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split2.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split2.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split2.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split2.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split2.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split2.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split2.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split2.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split2.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split2.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split2.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split2.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split2.axi_wr_4_splitter.b_fifo
son:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split2.axi_wr_4_splitter.order_fifo
son:   tb.dut.split2.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split2.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split2.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split2.axi_wr_4_splitter.b_fifo
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split2.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split2.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split2.axi_wr_4_splitter.order_fifo
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split2.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split2.axi_wr_4_splitter.w_fifo
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split2.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split3
net:   tb.dut.split3.a_arready [1] = 1     // a_arready
net:   tb.dut.split3.a_awready [1] = 1     // a_awready
net:   tb.dut.split3.a_bid [4] = 0000     // a_bid
net:   tb.dut.split3.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split3.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split3.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split3.a_rid [4] = 0000     // a_rid
net:   tb.dut.split3.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split3.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split3.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split3.a_wready [1] = 1     // a_wready
net:   tb.dut.split3.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split3.arburst [2] = xx     // arburst
net:   tb.dut.split3.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split3.arid [4] = xxxx     // arid
net:   tb.dut.split3.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split3.arvalid [1] = 0     // arvalid
net:   tb.dut.split3.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split3.awburst [2] = xx     // awburst
net:   tb.dut.split3.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split3.awid [4] = xxxx     // awid
net:   tb.dut.split3.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split3.awvalid [1] = 0     // awvalid
net:   tb.dut.split3.b_arready [1] = 1     // b_arready
net:   tb.dut.split3.b_awready [1] = 1     // b_awready
net:   tb.dut.split3.b_bid [4] = 0000     // b_bid
net:   tb.dut.split3.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split3.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split3.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split3.b_rid [4] = 0000     // b_rid
net:   tb.dut.split3.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split3.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split3.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split3.b_wready [1] = 1     // b_wready
net:   tb.dut.split3.bready [1] = 0     // bready
net:   tb.dut.split3.c_arready [1] = 1     // c_arready
net:   tb.dut.split3.c_awready [1] = 1     // c_awready
net:   tb.dut.split3.c_bid [4] = 0000     // c_bid
net:   tb.dut.split3.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split3.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split3.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split3.c_rid [4] = 0000     // c_rid
net:   tb.dut.split3.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split3.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split3.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split3.c_wready [1] = 1     // c_wready
net:   tb.dut.split3.clk [1] = 1     // clk
net:   tb.dut.split3.d_arready [1] = 1     // d_arready
net:   tb.dut.split3.d_awready [1] = 1     // d_awready
net:   tb.dut.split3.d_bid [4] = 0000     // d_bid
net:   tb.dut.split3.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split3.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split3.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split3.d_rid [4] = 0000     // d_rid
net:   tb.dut.split3.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split3.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split3.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split3.d_wready [1] = 1     // d_wready
net:   tb.dut.split3.rready [1] = 0     // rready
net:   tb.dut.split3.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split3.wlast [1] = x     // wlast
net:   tb.dut.split3.wready [1] = 1     // wready
net:   tb.dut.split3.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split3.wvalid [1] = 0     // wvalid
net:   tb.dut.split3.rvalid [1] = 0     // rvalid
net:   tb.dut.split3.rresp [2] = 00     // rresp
net:   tb.dut.split3.rlast [1] = 0     // rlast
net:   tb.dut.split3.rid [4] = 0000     // rid
net:   tb.dut.split3.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split3.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split3.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split3.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split3.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split3.d_rready [1] = 1     // d_rready
net:   tb.dut.split3.d_bready [1] = 1     // d_bready
net:   tb.dut.split3.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split3.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split3.d_awid [4] = 0000     // d_awid
net:   tb.dut.split3.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split3.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split3.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split3.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split3.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split3.d_arid [4] = 0000     // d_arid
net:   tb.dut.split3.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split3.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split3.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split3.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split3.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split3.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split3.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split3.c_rready [1] = 1     // c_rready
net:   tb.dut.split3.c_bready [1] = 1     // c_bready
net:   tb.dut.split3.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split3.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split3.c_awid [4] = 0000     // c_awid
net:   tb.dut.split3.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split3.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split3.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split3.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split3.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split3.c_arid [4] = 0000     // c_arid
net:   tb.dut.split3.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split3.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split3.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split3.bvalid [1] = 0     // bvalid
net:   tb.dut.split3.bresp [2] = 00     // bresp
net:   tb.dut.split3.bid [4] = 0000     // bid
net:   tb.dut.split3.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split3.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split3.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split3.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split3.b_rready [1] = 1     // b_rready
net:   tb.dut.split3.b_bready [1] = 1     // b_bready
net:   tb.dut.split3.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split3.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split3.b_awid [4] = 0000     // b_awid
net:   tb.dut.split3.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split3.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split3.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split3.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split3.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split3.b_arid [4] = 0000     // b_arid
net:   tb.dut.split3.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split3.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split3.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split3.awready [1] = 1     // awready
net:   tb.dut.split3.arready [1] = 1     // arready
net:   tb.dut.split3.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split3.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split3.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split3.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split3.a_rready [1] = 1     // a_rready
net:   tb.dut.split3.a_bready [1] = 1     // a_bready
net:   tb.dut.split3.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split3.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split3.a_awid [4] = 0000     // a_awid
net:   tb.dut.split3.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split3.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split3.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split3.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split3.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split3.a_arid [4] = 0000     // a_arid
net:   tb.dut.split3.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split3.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split3.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split3.axi_rd_4_splitter
son:   tb.dut.split3.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split3.axi_rd_4_splitter
net:   tb.dut.split3.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split3.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split3.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split3.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split3.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split3.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split3.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split3.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split3.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split3.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split3.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split3.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split3.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split3.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split3.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split3.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split3.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split3.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split3.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split3.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split3.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split3.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split3.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split3.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split3.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split3.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split3.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split3.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split3.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split3.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split3.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split3.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split3.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split3.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split3.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split3.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split3.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split3.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split3.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split3.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split3.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split3.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split3.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split3.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split3.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split3.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split3.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split3.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split3.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split3.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split3.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split3.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split3.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split3.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split3.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split3.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split3.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split3.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split3.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split3.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split3.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split3.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split3.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split3.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split3.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split3.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split3.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split3.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split3.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split3.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split3.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split3.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split3.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split3.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split3.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split3.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split3.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split3.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split3.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split3.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split3.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split3.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split3.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split3.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split3.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split3.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split3.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split3.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split3.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split3.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split3.axi_rd_4_splitter.r_fifo
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split3.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split3.axi_wr_4_splitter
net:   tb.dut.split3.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split3.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split3.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split3.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split3.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split3.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split3.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split3.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split3.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split3.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split3.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split3.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split3.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split3.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split3.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split3.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split3.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split3.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split3.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split3.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split3.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split3.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split3.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split3.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split3.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split3.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split3.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split3.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split3.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split3.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split3.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split3.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split3.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split3.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split3.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split3.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split3.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split3.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split3.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split3.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split3.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split3.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split3.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split3.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split3.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split3.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split3.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split3.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split3.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split3.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split3.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split3.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split3.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split3.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split3.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split3.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split3.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split3.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split3.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split3.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split3.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split3.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split3.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split3.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split3.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split3.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split3.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split3.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split3.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split3.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split3.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split3.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split3.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split3.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split3.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split3.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split3.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split3.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split3.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split3.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split3.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split3.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split3.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split3.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split3.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split3.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split3.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split3.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split3.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split3.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split3.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split3.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split3.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split3.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split3.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split3.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split3.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split3.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split3.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split3.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split3.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split3.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split3.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split3.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split3.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split3.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split3.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split3.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split3.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split3.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split3.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split3.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split3.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split3.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split3.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split3.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split3.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split3.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split3.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split3.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split3.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split3.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split3.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split3.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split3.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split3.axi_wr_4_splitter.b_fifo
son:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split3.axi_wr_4_splitter.order_fifo
son:   tb.dut.split3.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split3.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split3.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split3.axi_wr_4_splitter.b_fifo
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split3.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split3.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split3.axi_wr_4_splitter.order_fifo
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split3.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split3.axi_wr_4_splitter.w_fifo
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split3.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split4
net:   tb.dut.split4.a_arready [1] = 1     // a_arready
net:   tb.dut.split4.a_awready [1] = 1     // a_awready
net:   tb.dut.split4.a_bid [4] = 0000     // a_bid
net:   tb.dut.split4.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split4.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split4.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split4.a_rid [4] = 0000     // a_rid
net:   tb.dut.split4.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split4.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split4.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split4.a_wready [1] = 1     // a_wready
net:   tb.dut.split4.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split4.arburst [2] = xx     // arburst
net:   tb.dut.split4.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split4.arid [4] = xxxx     // arid
net:   tb.dut.split4.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split4.arvalid [1] = 0     // arvalid
net:   tb.dut.split4.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split4.awburst [2] = xx     // awburst
net:   tb.dut.split4.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split4.awid [4] = xxxx     // awid
net:   tb.dut.split4.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split4.awvalid [1] = 0     // awvalid
net:   tb.dut.split4.b_arready [1] = 1     // b_arready
net:   tb.dut.split4.b_awready [1] = 1     // b_awready
net:   tb.dut.split4.b_bid [4] = 0000     // b_bid
net:   tb.dut.split4.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split4.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split4.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split4.b_rid [4] = 0000     // b_rid
net:   tb.dut.split4.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split4.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split4.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split4.b_wready [1] = 1     // b_wready
net:   tb.dut.split4.bready [1] = 0     // bready
net:   tb.dut.split4.c_arready [1] = 1     // c_arready
net:   tb.dut.split4.c_awready [1] = 1     // c_awready
net:   tb.dut.split4.c_bid [4] = 0000     // c_bid
net:   tb.dut.split4.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split4.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split4.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split4.c_rid [4] = 0000     // c_rid
net:   tb.dut.split4.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split4.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split4.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split4.c_wready [1] = 1     // c_wready
net:   tb.dut.split4.clk [1] = 1     // clk
net:   tb.dut.split4.d_arready [1] = 1     // d_arready
net:   tb.dut.split4.d_awready [1] = 1     // d_awready
net:   tb.dut.split4.d_bid [4] = 0000     // d_bid
net:   tb.dut.split4.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split4.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split4.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split4.d_rid [4] = 0000     // d_rid
net:   tb.dut.split4.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split4.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split4.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split4.d_wready [1] = 1     // d_wready
net:   tb.dut.split4.rready [1] = 0     // rready
net:   tb.dut.split4.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split4.wlast [1] = x     // wlast
net:   tb.dut.split4.wready [1] = 1     // wready
net:   tb.dut.split4.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split4.wvalid [1] = 0     // wvalid
net:   tb.dut.split4.rvalid [1] = 0     // rvalid
net:   tb.dut.split4.rresp [2] = 00     // rresp
net:   tb.dut.split4.rlast [1] = 0     // rlast
net:   tb.dut.split4.rid [4] = 0000     // rid
net:   tb.dut.split4.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split4.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split4.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split4.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split4.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split4.d_rready [1] = 1     // d_rready
net:   tb.dut.split4.d_bready [1] = 1     // d_bready
net:   tb.dut.split4.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split4.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split4.d_awid [4] = 0000     // d_awid
net:   tb.dut.split4.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split4.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split4.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split4.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split4.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split4.d_arid [4] = 0000     // d_arid
net:   tb.dut.split4.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split4.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split4.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split4.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split4.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split4.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split4.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split4.c_rready [1] = 1     // c_rready
net:   tb.dut.split4.c_bready [1] = 1     // c_bready
net:   tb.dut.split4.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split4.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split4.c_awid [4] = 0000     // c_awid
net:   tb.dut.split4.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split4.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split4.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split4.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split4.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split4.c_arid [4] = 0000     // c_arid
net:   tb.dut.split4.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split4.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split4.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split4.bvalid [1] = 0     // bvalid
net:   tb.dut.split4.bresp [2] = 00     // bresp
net:   tb.dut.split4.bid [4] = 0000     // bid
net:   tb.dut.split4.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split4.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split4.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split4.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split4.b_rready [1] = 1     // b_rready
net:   tb.dut.split4.b_bready [1] = 1     // b_bready
net:   tb.dut.split4.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split4.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split4.b_awid [4] = 0000     // b_awid
net:   tb.dut.split4.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split4.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split4.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split4.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split4.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split4.b_arid [4] = 0000     // b_arid
net:   tb.dut.split4.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split4.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split4.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split4.awready [1] = 1     // awready
net:   tb.dut.split4.arready [1] = 1     // arready
net:   tb.dut.split4.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split4.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split4.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split4.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split4.a_rready [1] = 1     // a_rready
net:   tb.dut.split4.a_bready [1] = 1     // a_bready
net:   tb.dut.split4.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split4.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split4.a_awid [4] = 0000     // a_awid
net:   tb.dut.split4.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split4.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split4.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split4.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split4.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split4.a_arid [4] = 0000     // a_arid
net:   tb.dut.split4.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split4.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split4.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split4.axi_rd_4_splitter
son:   tb.dut.split4.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split4.axi_rd_4_splitter
net:   tb.dut.split4.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split4.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split4.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split4.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split4.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split4.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split4.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split4.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split4.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split4.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split4.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split4.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split4.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split4.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split4.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split4.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split4.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split4.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split4.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split4.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split4.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split4.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split4.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split4.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split4.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split4.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split4.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split4.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split4.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split4.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split4.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split4.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split4.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split4.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split4.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split4.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split4.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split4.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split4.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split4.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split4.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split4.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split4.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split4.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split4.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split4.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split4.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split4.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split4.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split4.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split4.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split4.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split4.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split4.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split4.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split4.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split4.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split4.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split4.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split4.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split4.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split4.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split4.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split4.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split4.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split4.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split4.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split4.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split4.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split4.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split4.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split4.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split4.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split4.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split4.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split4.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split4.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split4.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split4.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split4.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split4.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split4.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split4.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split4.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split4.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split4.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split4.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split4.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split4.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split4.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split4.axi_rd_4_splitter.r_fifo
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split4.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split4.axi_wr_4_splitter
net:   tb.dut.split4.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split4.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split4.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split4.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split4.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split4.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split4.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split4.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split4.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split4.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split4.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split4.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split4.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split4.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split4.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split4.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split4.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split4.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split4.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split4.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split4.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split4.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split4.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split4.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split4.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split4.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split4.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split4.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split4.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split4.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split4.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split4.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split4.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split4.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split4.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split4.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split4.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split4.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split4.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split4.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split4.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split4.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split4.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split4.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split4.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split4.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split4.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split4.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split4.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split4.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split4.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split4.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split4.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split4.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split4.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split4.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split4.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split4.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split4.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split4.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split4.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split4.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split4.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split4.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split4.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split4.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split4.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split4.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split4.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split4.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split4.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split4.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split4.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split4.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split4.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split4.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split4.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split4.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split4.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split4.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split4.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split4.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split4.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split4.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split4.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split4.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split4.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split4.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split4.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split4.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split4.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split4.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split4.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split4.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split4.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split4.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split4.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split4.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split4.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split4.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split4.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split4.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split4.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split4.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split4.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split4.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split4.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split4.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split4.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split4.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split4.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split4.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split4.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split4.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split4.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split4.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split4.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split4.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split4.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split4.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split4.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split4.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split4.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split4.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split4.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split4.axi_wr_4_splitter.b_fifo
son:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split4.axi_wr_4_splitter.order_fifo
son:   tb.dut.split4.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split4.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split4.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split4.axi_wr_4_splitter.b_fifo
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split4.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split4.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split4.axi_wr_4_splitter.order_fifo
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split4.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split4.axi_wr_4_splitter.w_fifo
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split4.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split5
net:   tb.dut.split5.a_arready [1] = 1     // a_arready
net:   tb.dut.split5.a_awready [1] = 1     // a_awready
net:   tb.dut.split5.a_bid [4] = 0000     // a_bid
net:   tb.dut.split5.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split5.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split5.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split5.a_rid [4] = 0000     // a_rid
net:   tb.dut.split5.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split5.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split5.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split5.a_wready [1] = 1     // a_wready
net:   tb.dut.split5.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split5.arburst [2] = xx     // arburst
net:   tb.dut.split5.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split5.arid [4] = xxxx     // arid
net:   tb.dut.split5.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split5.arvalid [1] = 0     // arvalid
net:   tb.dut.split5.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split5.awburst [2] = xx     // awburst
net:   tb.dut.split5.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split5.awid [4] = xxxx     // awid
net:   tb.dut.split5.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split5.awvalid [1] = 0     // awvalid
net:   tb.dut.split5.b_arready [1] = 1     // b_arready
net:   tb.dut.split5.b_awready [1] = 1     // b_awready
net:   tb.dut.split5.b_bid [4] = 0000     // b_bid
net:   tb.dut.split5.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split5.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split5.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split5.b_rid [4] = 0000     // b_rid
net:   tb.dut.split5.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split5.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split5.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split5.b_wready [1] = 1     // b_wready
net:   tb.dut.split5.bready [1] = 0     // bready
net:   tb.dut.split5.c_arready [1] = 1     // c_arready
net:   tb.dut.split5.c_awready [1] = 1     // c_awready
net:   tb.dut.split5.c_bid [4] = 0000     // c_bid
net:   tb.dut.split5.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split5.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split5.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split5.c_rid [4] = 0000     // c_rid
net:   tb.dut.split5.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split5.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split5.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split5.c_wready [1] = 1     // c_wready
net:   tb.dut.split5.clk [1] = 1     // clk
net:   tb.dut.split5.d_arready [1] = 1     // d_arready
net:   tb.dut.split5.d_awready [1] = 1     // d_awready
net:   tb.dut.split5.d_bid [4] = 0000     // d_bid
net:   tb.dut.split5.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split5.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split5.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split5.d_rid [4] = 0000     // d_rid
net:   tb.dut.split5.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split5.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split5.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split5.d_wready [1] = 1     // d_wready
net:   tb.dut.split5.rready [1] = 0     // rready
net:   tb.dut.split5.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split5.wlast [1] = x     // wlast
net:   tb.dut.split5.wready [1] = 1     // wready
net:   tb.dut.split5.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split5.wvalid [1] = 0     // wvalid
net:   tb.dut.split5.rvalid [1] = 0     // rvalid
net:   tb.dut.split5.rresp [2] = 00     // rresp
net:   tb.dut.split5.rlast [1] = 0     // rlast
net:   tb.dut.split5.rid [4] = 0000     // rid
net:   tb.dut.split5.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split5.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split5.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split5.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split5.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split5.d_rready [1] = 1     // d_rready
net:   tb.dut.split5.d_bready [1] = 1     // d_bready
net:   tb.dut.split5.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split5.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split5.d_awid [4] = 0000     // d_awid
net:   tb.dut.split5.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split5.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split5.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split5.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split5.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split5.d_arid [4] = 0000     // d_arid
net:   tb.dut.split5.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split5.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split5.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split5.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split5.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split5.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split5.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split5.c_rready [1] = 1     // c_rready
net:   tb.dut.split5.c_bready [1] = 1     // c_bready
net:   tb.dut.split5.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split5.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split5.c_awid [4] = 0000     // c_awid
net:   tb.dut.split5.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split5.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split5.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split5.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split5.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split5.c_arid [4] = 0000     // c_arid
net:   tb.dut.split5.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split5.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split5.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split5.bvalid [1] = 0     // bvalid
net:   tb.dut.split5.bresp [2] = 00     // bresp
net:   tb.dut.split5.bid [4] = 0000     // bid
net:   tb.dut.split5.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split5.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split5.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split5.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split5.b_rready [1] = 1     // b_rready
net:   tb.dut.split5.b_bready [1] = 1     // b_bready
net:   tb.dut.split5.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split5.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split5.b_awid [4] = 0000     // b_awid
net:   tb.dut.split5.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split5.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split5.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split5.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split5.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split5.b_arid [4] = 0000     // b_arid
net:   tb.dut.split5.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split5.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split5.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split5.awready [1] = 1     // awready
net:   tb.dut.split5.arready [1] = 1     // arready
net:   tb.dut.split5.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split5.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split5.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split5.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split5.a_rready [1] = 1     // a_rready
net:   tb.dut.split5.a_bready [1] = 1     // a_bready
net:   tb.dut.split5.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split5.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split5.a_awid [4] = 0000     // a_awid
net:   tb.dut.split5.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split5.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split5.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split5.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split5.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split5.a_arid [4] = 0000     // a_arid
net:   tb.dut.split5.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split5.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split5.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split5.axi_rd_4_splitter
son:   tb.dut.split5.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split5.axi_rd_4_splitter
net:   tb.dut.split5.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split5.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split5.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split5.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split5.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split5.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split5.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split5.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split5.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split5.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split5.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split5.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split5.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split5.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split5.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split5.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split5.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split5.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split5.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split5.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split5.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split5.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split5.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split5.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split5.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split5.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split5.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split5.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split5.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split5.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split5.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split5.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split5.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split5.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split5.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split5.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split5.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split5.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split5.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split5.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split5.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split5.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split5.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split5.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split5.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split5.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split5.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split5.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split5.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split5.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split5.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split5.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split5.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split5.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split5.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split5.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split5.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split5.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split5.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split5.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split5.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split5.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split5.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split5.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split5.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split5.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split5.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split5.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split5.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split5.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split5.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split5.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split5.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split5.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split5.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split5.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split5.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split5.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split5.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split5.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split5.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split5.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split5.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split5.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split5.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split5.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split5.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split5.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split5.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split5.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split5.axi_rd_4_splitter.r_fifo
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split5.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split5.axi_wr_4_splitter
net:   tb.dut.split5.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split5.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split5.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split5.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split5.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split5.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split5.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split5.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split5.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split5.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split5.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split5.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split5.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split5.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split5.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split5.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split5.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split5.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split5.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split5.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split5.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split5.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split5.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split5.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split5.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split5.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split5.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split5.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split5.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split5.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split5.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split5.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split5.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split5.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split5.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split5.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split5.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split5.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split5.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split5.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split5.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split5.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split5.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split5.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split5.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split5.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split5.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split5.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split5.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split5.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split5.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split5.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split5.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split5.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split5.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split5.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split5.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split5.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split5.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split5.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split5.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split5.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split5.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split5.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split5.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split5.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split5.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split5.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split5.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split5.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split5.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split5.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split5.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split5.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split5.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split5.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split5.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split5.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split5.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split5.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split5.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split5.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split5.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split5.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split5.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split5.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split5.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split5.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split5.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split5.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split5.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split5.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split5.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split5.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split5.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split5.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split5.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split5.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split5.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split5.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split5.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split5.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split5.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split5.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split5.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split5.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split5.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split5.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split5.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split5.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split5.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split5.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split5.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split5.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split5.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split5.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split5.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split5.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split5.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split5.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split5.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split5.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split5.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split5.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split5.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split5.axi_wr_4_splitter.b_fifo
son:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split5.axi_wr_4_splitter.order_fifo
son:   tb.dut.split5.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split5.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split5.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split5.axi_wr_4_splitter.b_fifo
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split5.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split5.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split5.axi_wr_4_splitter.order_fifo
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split5.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split5.axi_wr_4_splitter.w_fifo
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split5.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split6
net:   tb.dut.split6.a_arready [1] = 1     // a_arready
net:   tb.dut.split6.a_awready [1] = 1     // a_awready
net:   tb.dut.split6.a_bid [4] = 0000     // a_bid
net:   tb.dut.split6.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split6.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split6.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split6.a_rid [4] = 0000     // a_rid
net:   tb.dut.split6.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split6.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split6.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split6.a_wready [1] = 1     // a_wready
net:   tb.dut.split6.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split6.arburst [2] = xx     // arburst
net:   tb.dut.split6.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split6.arid [4] = xxxx     // arid
net:   tb.dut.split6.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split6.arvalid [1] = 0     // arvalid
net:   tb.dut.split6.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split6.awburst [2] = xx     // awburst
net:   tb.dut.split6.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split6.awid [4] = xxxx     // awid
net:   tb.dut.split6.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split6.awvalid [1] = 0     // awvalid
net:   tb.dut.split6.b_arready [1] = 1     // b_arready
net:   tb.dut.split6.b_awready [1] = 1     // b_awready
net:   tb.dut.split6.b_bid [4] = 0000     // b_bid
net:   tb.dut.split6.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split6.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split6.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split6.b_rid [4] = 0000     // b_rid
net:   tb.dut.split6.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split6.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split6.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split6.b_wready [1] = 1     // b_wready
net:   tb.dut.split6.bready [1] = 0     // bready
net:   tb.dut.split6.c_arready [1] = 1     // c_arready
net:   tb.dut.split6.c_awready [1] = 1     // c_awready
net:   tb.dut.split6.c_bid [4] = 0000     // c_bid
net:   tb.dut.split6.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split6.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split6.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split6.c_rid [4] = 0000     // c_rid
net:   tb.dut.split6.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split6.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split6.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split6.c_wready [1] = 1     // c_wready
net:   tb.dut.split6.clk [1] = 1     // clk
net:   tb.dut.split6.d_arready [1] = 1     // d_arready
net:   tb.dut.split6.d_awready [1] = 1     // d_awready
net:   tb.dut.split6.d_bid [4] = 0000     // d_bid
net:   tb.dut.split6.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split6.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split6.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split6.d_rid [4] = 0000     // d_rid
net:   tb.dut.split6.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split6.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split6.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split6.d_wready [1] = 1     // d_wready
net:   tb.dut.split6.rready [1] = 0     // rready
net:   tb.dut.split6.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split6.wlast [1] = x     // wlast
net:   tb.dut.split6.wready [1] = 1     // wready
net:   tb.dut.split6.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split6.wvalid [1] = 0     // wvalid
net:   tb.dut.split6.rvalid [1] = 0     // rvalid
net:   tb.dut.split6.rresp [2] = 00     // rresp
net:   tb.dut.split6.rlast [1] = 0     // rlast
net:   tb.dut.split6.rid [4] = 0000     // rid
net:   tb.dut.split6.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split6.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split6.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split6.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split6.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split6.d_rready [1] = 1     // d_rready
net:   tb.dut.split6.d_bready [1] = 1     // d_bready
net:   tb.dut.split6.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split6.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split6.d_awid [4] = 0000     // d_awid
net:   tb.dut.split6.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split6.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split6.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split6.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split6.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split6.d_arid [4] = 0000     // d_arid
net:   tb.dut.split6.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split6.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split6.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split6.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split6.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split6.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split6.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split6.c_rready [1] = 1     // c_rready
net:   tb.dut.split6.c_bready [1] = 1     // c_bready
net:   tb.dut.split6.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split6.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split6.c_awid [4] = 0000     // c_awid
net:   tb.dut.split6.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split6.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split6.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split6.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split6.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split6.c_arid [4] = 0000     // c_arid
net:   tb.dut.split6.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split6.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split6.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split6.bvalid [1] = 0     // bvalid
net:   tb.dut.split6.bresp [2] = 00     // bresp
net:   tb.dut.split6.bid [4] = 0000     // bid
net:   tb.dut.split6.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split6.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split6.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split6.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split6.b_rready [1] = 1     // b_rready
net:   tb.dut.split6.b_bready [1] = 1     // b_bready
net:   tb.dut.split6.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split6.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split6.b_awid [4] = 0000     // b_awid
net:   tb.dut.split6.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split6.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split6.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split6.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split6.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split6.b_arid [4] = 0000     // b_arid
net:   tb.dut.split6.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split6.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split6.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split6.awready [1] = 1     // awready
net:   tb.dut.split6.arready [1] = 1     // arready
net:   tb.dut.split6.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split6.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split6.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split6.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split6.a_rready [1] = 1     // a_rready
net:   tb.dut.split6.a_bready [1] = 1     // a_bready
net:   tb.dut.split6.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split6.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split6.a_awid [4] = 0000     // a_awid
net:   tb.dut.split6.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split6.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split6.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split6.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split6.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split6.a_arid [4] = 0000     // a_arid
net:   tb.dut.split6.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split6.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split6.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split6.axi_rd_4_splitter
son:   tb.dut.split6.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split6.axi_rd_4_splitter
net:   tb.dut.split6.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split6.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split6.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split6.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split6.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split6.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split6.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split6.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split6.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split6.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split6.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split6.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split6.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split6.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split6.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split6.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split6.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split6.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split6.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split6.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split6.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split6.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split6.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split6.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split6.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split6.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split6.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split6.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split6.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split6.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split6.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split6.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split6.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split6.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split6.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split6.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split6.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split6.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split6.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split6.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split6.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split6.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split6.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split6.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split6.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split6.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split6.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split6.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split6.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split6.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split6.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split6.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split6.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split6.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split6.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split6.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split6.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split6.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split6.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split6.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split6.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split6.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split6.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split6.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split6.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split6.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split6.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split6.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split6.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split6.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split6.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split6.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split6.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split6.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split6.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split6.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split6.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split6.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split6.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split6.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split6.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split6.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split6.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split6.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split6.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split6.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split6.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split6.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split6.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split6.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split6.axi_rd_4_splitter.r_fifo
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split6.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split6.axi_wr_4_splitter
net:   tb.dut.split6.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split6.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split6.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split6.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split6.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split6.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split6.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split6.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split6.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split6.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split6.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split6.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split6.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split6.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split6.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split6.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split6.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split6.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split6.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split6.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split6.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split6.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split6.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split6.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split6.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split6.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split6.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split6.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split6.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split6.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split6.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split6.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split6.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split6.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split6.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split6.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split6.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split6.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split6.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split6.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split6.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split6.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split6.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split6.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split6.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split6.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split6.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split6.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split6.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split6.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split6.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split6.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split6.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split6.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split6.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split6.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split6.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split6.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split6.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split6.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split6.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split6.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split6.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split6.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split6.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split6.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split6.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split6.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split6.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split6.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split6.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split6.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split6.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split6.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split6.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split6.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split6.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split6.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split6.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split6.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split6.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split6.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split6.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split6.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split6.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split6.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split6.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split6.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split6.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split6.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split6.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split6.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split6.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split6.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split6.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split6.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split6.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split6.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split6.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split6.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split6.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split6.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split6.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split6.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split6.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split6.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split6.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split6.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split6.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split6.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split6.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split6.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split6.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split6.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split6.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split6.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split6.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split6.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split6.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split6.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split6.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split6.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split6.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split6.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split6.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split6.axi_wr_4_splitter.b_fifo
son:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split6.axi_wr_4_splitter.order_fifo
son:   tb.dut.split6.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split6.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split6.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split6.axi_wr_4_splitter.b_fifo
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split6.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split6.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split6.axi_wr_4_splitter.order_fifo
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split6.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split6.axi_wr_4_splitter.w_fifo
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split6.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split7
net:   tb.dut.split7.a_arready [1] = 1     // a_arready
net:   tb.dut.split7.a_awready [1] = 1     // a_awready
net:   tb.dut.split7.a_bid [4] = 0000     // a_bid
net:   tb.dut.split7.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split7.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split7.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split7.a_rid [4] = 0000     // a_rid
net:   tb.dut.split7.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split7.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split7.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split7.a_wready [1] = 1     // a_wready
net:   tb.dut.split7.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split7.arburst [2] = xx     // arburst
net:   tb.dut.split7.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split7.arid [4] = xxxx     // arid
net:   tb.dut.split7.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split7.arvalid [1] = 0     // arvalid
net:   tb.dut.split7.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split7.awburst [2] = xx     // awburst
net:   tb.dut.split7.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split7.awid [4] = xxxx     // awid
net:   tb.dut.split7.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split7.awvalid [1] = 0     // awvalid
net:   tb.dut.split7.b_arready [1] = 1     // b_arready
net:   tb.dut.split7.b_awready [1] = 1     // b_awready
net:   tb.dut.split7.b_bid [4] = 0000     // b_bid
net:   tb.dut.split7.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split7.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split7.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split7.b_rid [4] = 0000     // b_rid
net:   tb.dut.split7.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split7.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split7.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split7.b_wready [1] = 1     // b_wready
net:   tb.dut.split7.bready [1] = 0     // bready
net:   tb.dut.split7.c_arready [1] = 1     // c_arready
net:   tb.dut.split7.c_awready [1] = 1     // c_awready
net:   tb.dut.split7.c_bid [4] = 0000     // c_bid
net:   tb.dut.split7.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split7.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split7.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split7.c_rid [4] = 0000     // c_rid
net:   tb.dut.split7.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split7.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split7.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split7.c_wready [1] = 1     // c_wready
net:   tb.dut.split7.clk [1] = 1     // clk
net:   tb.dut.split7.d_arready [1] = 1     // d_arready
net:   tb.dut.split7.d_awready [1] = 1     // d_awready
net:   tb.dut.split7.d_bid [4] = 0000     // d_bid
net:   tb.dut.split7.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split7.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split7.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split7.d_rid [4] = 0000     // d_rid
net:   tb.dut.split7.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split7.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split7.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split7.d_wready [1] = 1     // d_wready
net:   tb.dut.split7.rready [1] = 0     // rready
net:   tb.dut.split7.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split7.wlast [1] = x     // wlast
net:   tb.dut.split7.wready [1] = 1     // wready
net:   tb.dut.split7.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split7.wvalid [1] = 0     // wvalid
net:   tb.dut.split7.rvalid [1] = 0     // rvalid
net:   tb.dut.split7.rresp [2] = 00     // rresp
net:   tb.dut.split7.rlast [1] = 0     // rlast
net:   tb.dut.split7.rid [4] = 0000     // rid
net:   tb.dut.split7.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split7.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split7.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split7.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split7.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split7.d_rready [1] = 1     // d_rready
net:   tb.dut.split7.d_bready [1] = 1     // d_bready
net:   tb.dut.split7.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split7.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split7.d_awid [4] = 0000     // d_awid
net:   tb.dut.split7.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split7.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split7.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split7.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split7.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split7.d_arid [4] = 0000     // d_arid
net:   tb.dut.split7.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split7.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split7.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split7.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split7.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split7.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split7.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split7.c_rready [1] = 1     // c_rready
net:   tb.dut.split7.c_bready [1] = 1     // c_bready
net:   tb.dut.split7.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split7.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split7.c_awid [4] = 0000     // c_awid
net:   tb.dut.split7.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split7.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split7.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split7.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split7.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split7.c_arid [4] = 0000     // c_arid
net:   tb.dut.split7.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split7.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split7.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split7.bvalid [1] = 0     // bvalid
net:   tb.dut.split7.bresp [2] = 00     // bresp
net:   tb.dut.split7.bid [4] = 0000     // bid
net:   tb.dut.split7.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split7.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split7.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split7.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split7.b_rready [1] = 1     // b_rready
net:   tb.dut.split7.b_bready [1] = 1     // b_bready
net:   tb.dut.split7.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split7.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split7.b_awid [4] = 0000     // b_awid
net:   tb.dut.split7.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split7.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split7.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split7.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split7.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split7.b_arid [4] = 0000     // b_arid
net:   tb.dut.split7.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split7.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split7.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split7.awready [1] = 1     // awready
net:   tb.dut.split7.arready [1] = 1     // arready
net:   tb.dut.split7.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split7.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split7.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split7.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split7.a_rready [1] = 1     // a_rready
net:   tb.dut.split7.a_bready [1] = 1     // a_bready
net:   tb.dut.split7.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split7.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split7.a_awid [4] = 0000     // a_awid
net:   tb.dut.split7.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split7.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split7.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split7.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split7.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split7.a_arid [4] = 0000     // a_arid
net:   tb.dut.split7.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split7.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split7.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split7.axi_rd_4_splitter
son:   tb.dut.split7.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split7.axi_rd_4_splitter
net:   tb.dut.split7.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split7.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split7.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split7.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split7.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split7.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split7.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split7.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split7.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split7.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split7.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split7.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split7.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split7.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split7.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split7.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split7.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split7.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split7.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split7.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split7.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split7.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split7.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split7.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split7.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split7.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split7.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split7.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split7.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split7.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split7.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split7.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split7.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split7.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split7.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split7.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split7.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split7.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split7.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split7.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split7.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split7.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split7.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split7.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split7.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split7.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split7.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split7.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split7.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split7.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split7.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split7.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split7.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split7.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split7.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split7.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split7.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split7.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split7.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split7.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split7.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split7.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split7.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split7.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split7.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split7.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split7.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split7.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split7.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split7.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split7.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split7.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split7.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split7.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split7.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split7.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split7.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split7.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split7.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split7.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split7.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split7.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split7.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split7.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split7.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split7.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split7.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split7.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split7.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split7.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split7.axi_rd_4_splitter.r_fifo
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split7.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split7.axi_wr_4_splitter
net:   tb.dut.split7.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split7.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split7.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split7.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split7.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split7.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split7.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split7.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split7.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split7.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split7.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split7.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split7.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split7.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split7.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split7.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split7.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split7.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split7.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split7.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split7.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split7.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split7.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split7.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split7.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split7.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split7.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split7.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split7.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split7.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split7.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split7.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split7.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split7.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split7.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split7.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split7.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split7.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split7.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split7.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split7.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split7.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split7.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split7.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split7.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split7.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split7.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split7.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split7.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split7.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split7.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split7.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split7.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split7.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split7.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split7.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split7.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split7.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split7.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split7.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split7.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split7.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split7.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split7.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split7.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split7.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split7.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split7.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split7.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split7.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split7.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split7.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split7.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split7.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split7.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split7.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split7.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split7.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split7.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split7.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split7.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split7.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split7.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split7.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split7.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split7.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split7.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split7.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split7.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split7.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split7.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split7.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split7.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split7.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split7.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split7.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split7.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split7.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split7.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split7.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split7.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split7.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split7.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split7.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split7.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split7.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split7.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split7.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split7.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split7.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split7.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split7.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split7.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split7.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split7.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split7.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split7.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split7.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split7.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split7.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split7.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split7.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split7.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split7.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split7.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split7.axi_wr_4_splitter.b_fifo
son:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split7.axi_wr_4_splitter.order_fifo
son:   tb.dut.split7.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split7.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split7.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split7.axi_wr_4_splitter.b_fifo
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split7.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split7.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split7.axi_wr_4_splitter.order_fifo
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split7.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split7.axi_wr_4_splitter.w_fifo
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split7.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split8
net:   tb.dut.split8.a_arready [1] = 1     // a_arready
net:   tb.dut.split8.a_awready [1] = 1     // a_awready
net:   tb.dut.split8.a_bid [4] = 0000     // a_bid
net:   tb.dut.split8.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split8.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split8.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split8.a_rid [4] = 0000     // a_rid
net:   tb.dut.split8.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split8.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split8.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split8.a_wready [1] = 1     // a_wready
net:   tb.dut.split8.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split8.arburst [2] = xx     // arburst
net:   tb.dut.split8.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split8.arid [4] = xxxx     // arid
net:   tb.dut.split8.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split8.arvalid [1] = 0     // arvalid
net:   tb.dut.split8.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split8.awburst [2] = xx     // awburst
net:   tb.dut.split8.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split8.awid [4] = xxxx     // awid
net:   tb.dut.split8.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split8.awvalid [1] = 0     // awvalid
net:   tb.dut.split8.b_arready [1] = 1     // b_arready
net:   tb.dut.split8.b_awready [1] = 1     // b_awready
net:   tb.dut.split8.b_bid [4] = 0000     // b_bid
net:   tb.dut.split8.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split8.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split8.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split8.b_rid [4] = 0000     // b_rid
net:   tb.dut.split8.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split8.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split8.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split8.b_wready [1] = 1     // b_wready
net:   tb.dut.split8.bready [1] = 0     // bready
net:   tb.dut.split8.c_arready [1] = 1     // c_arready
net:   tb.dut.split8.c_awready [1] = 1     // c_awready
net:   tb.dut.split8.c_bid [4] = 0000     // c_bid
net:   tb.dut.split8.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split8.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split8.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split8.c_rid [4] = 0000     // c_rid
net:   tb.dut.split8.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split8.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split8.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split8.c_wready [1] = 1     // c_wready
net:   tb.dut.split8.clk [1] = 1     // clk
net:   tb.dut.split8.d_arready [1] = 1     // d_arready
net:   tb.dut.split8.d_awready [1] = 1     // d_awready
net:   tb.dut.split8.d_bid [4] = 0000     // d_bid
net:   tb.dut.split8.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split8.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split8.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split8.d_rid [4] = 0000     // d_rid
net:   tb.dut.split8.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split8.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split8.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split8.d_wready [1] = 1     // d_wready
net:   tb.dut.split8.rready [1] = 0     // rready
net:   tb.dut.split8.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split8.wlast [1] = x     // wlast
net:   tb.dut.split8.wready [1] = 1     // wready
net:   tb.dut.split8.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split8.wvalid [1] = 0     // wvalid
net:   tb.dut.split8.rvalid [1] = 0     // rvalid
net:   tb.dut.split8.rresp [2] = 00     // rresp
net:   tb.dut.split8.rlast [1] = 0     // rlast
net:   tb.dut.split8.rid [4] = 0000     // rid
net:   tb.dut.split8.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split8.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split8.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split8.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split8.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split8.d_rready [1] = 1     // d_rready
net:   tb.dut.split8.d_bready [1] = 1     // d_bready
net:   tb.dut.split8.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split8.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split8.d_awid [4] = 0000     // d_awid
net:   tb.dut.split8.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split8.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split8.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split8.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split8.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split8.d_arid [4] = 0000     // d_arid
net:   tb.dut.split8.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split8.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split8.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split8.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split8.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split8.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split8.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split8.c_rready [1] = 1     // c_rready
net:   tb.dut.split8.c_bready [1] = 1     // c_bready
net:   tb.dut.split8.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split8.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split8.c_awid [4] = 0000     // c_awid
net:   tb.dut.split8.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split8.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split8.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split8.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split8.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split8.c_arid [4] = 0000     // c_arid
net:   tb.dut.split8.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split8.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split8.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split8.bvalid [1] = 0     // bvalid
net:   tb.dut.split8.bresp [2] = 00     // bresp
net:   tb.dut.split8.bid [4] = 0000     // bid
net:   tb.dut.split8.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split8.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split8.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split8.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split8.b_rready [1] = 1     // b_rready
net:   tb.dut.split8.b_bready [1] = 1     // b_bready
net:   tb.dut.split8.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split8.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split8.b_awid [4] = 0000     // b_awid
net:   tb.dut.split8.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split8.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split8.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split8.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split8.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split8.b_arid [4] = 0000     // b_arid
net:   tb.dut.split8.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split8.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split8.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split8.awready [1] = 1     // awready
net:   tb.dut.split8.arready [1] = 1     // arready
net:   tb.dut.split8.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split8.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split8.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split8.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split8.a_rready [1] = 1     // a_rready
net:   tb.dut.split8.a_bready [1] = 1     // a_bready
net:   tb.dut.split8.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split8.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split8.a_awid [4] = 0000     // a_awid
net:   tb.dut.split8.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split8.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split8.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split8.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split8.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split8.a_arid [4] = 0000     // a_arid
net:   tb.dut.split8.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split8.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split8.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split8.axi_rd_4_splitter
son:   tb.dut.split8.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split8.axi_rd_4_splitter
net:   tb.dut.split8.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split8.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split8.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split8.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split8.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split8.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split8.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split8.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split8.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split8.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split8.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split8.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split8.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split8.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split8.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split8.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split8.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split8.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split8.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split8.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split8.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split8.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split8.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split8.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split8.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split8.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split8.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split8.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split8.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split8.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split8.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split8.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split8.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split8.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split8.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split8.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split8.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split8.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split8.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split8.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split8.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split8.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split8.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split8.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split8.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split8.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split8.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split8.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split8.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split8.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split8.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split8.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split8.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split8.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split8.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split8.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split8.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split8.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split8.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split8.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split8.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split8.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split8.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split8.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split8.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split8.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split8.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split8.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split8.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split8.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split8.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split8.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split8.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split8.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split8.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split8.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split8.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split8.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split8.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split8.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split8.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split8.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split8.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split8.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split8.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split8.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split8.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split8.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split8.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split8.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split8.axi_rd_4_splitter.r_fifo
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split8.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split8.axi_wr_4_splitter
net:   tb.dut.split8.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split8.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split8.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split8.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split8.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split8.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split8.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split8.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split8.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split8.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split8.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split8.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split8.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split8.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split8.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split8.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split8.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split8.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split8.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split8.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split8.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split8.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split8.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split8.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split8.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split8.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split8.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split8.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split8.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split8.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split8.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split8.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split8.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split8.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split8.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split8.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split8.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split8.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split8.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split8.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split8.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split8.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split8.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split8.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split8.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split8.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split8.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split8.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split8.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split8.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split8.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split8.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split8.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split8.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split8.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split8.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split8.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split8.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split8.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split8.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split8.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split8.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split8.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split8.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split8.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split8.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split8.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split8.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split8.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split8.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split8.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split8.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split8.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split8.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split8.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split8.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split8.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split8.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split8.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split8.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split8.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split8.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split8.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split8.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split8.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split8.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split8.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split8.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split8.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split8.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split8.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split8.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split8.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split8.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split8.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split8.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split8.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split8.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split8.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split8.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split8.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split8.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split8.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split8.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split8.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split8.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split8.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split8.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split8.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split8.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split8.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split8.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split8.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split8.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split8.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split8.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split8.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split8.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split8.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split8.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split8.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split8.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split8.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split8.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split8.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split8.axi_wr_4_splitter.b_fifo
son:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split8.axi_wr_4_splitter.order_fifo
son:   tb.dut.split8.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split8.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split8.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split8.axi_wr_4_splitter.b_fifo
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split8.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split8.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split8.axi_wr_4_splitter.order_fifo
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split8.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split8.axi_wr_4_splitter.w_fifo
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split8.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.split9
net:   tb.dut.split9.a_arready [1] = 1     // a_arready
net:   tb.dut.split9.a_awready [1] = 1     // a_awready
net:   tb.dut.split9.a_bid [4] = 0000     // a_bid
net:   tb.dut.split9.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split9.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split9.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split9.a_rid [4] = 0000     // a_rid
net:   tb.dut.split9.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split9.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split9.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split9.a_wready [1] = 1     // a_wready
net:   tb.dut.split9.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split9.arburst [2] = xx     // arburst
net:   tb.dut.split9.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split9.arid [4] = xxxx     // arid
net:   tb.dut.split9.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split9.arvalid [1] = 0     // arvalid
net:   tb.dut.split9.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split9.awburst [2] = xx     // awburst
net:   tb.dut.split9.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split9.awid [4] = xxxx     // awid
net:   tb.dut.split9.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split9.awvalid [1] = 0     // awvalid
net:   tb.dut.split9.b_arready [1] = 1     // b_arready
net:   tb.dut.split9.b_awready [1] = 1     // b_awready
net:   tb.dut.split9.b_bid [4] = 0000     // b_bid
net:   tb.dut.split9.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split9.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split9.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split9.b_rid [4] = 0000     // b_rid
net:   tb.dut.split9.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split9.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split9.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split9.b_wready [1] = 1     // b_wready
net:   tb.dut.split9.bready [1] = 0     // bready
net:   tb.dut.split9.c_arready [1] = 1     // c_arready
net:   tb.dut.split9.c_awready [1] = 1     // c_awready
net:   tb.dut.split9.c_bid [4] = 0000     // c_bid
net:   tb.dut.split9.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split9.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split9.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split9.c_rid [4] = 0000     // c_rid
net:   tb.dut.split9.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split9.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split9.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split9.c_wready [1] = 1     // c_wready
net:   tb.dut.split9.clk [1] = 1     // clk
net:   tb.dut.split9.d_arready [1] = 1     // d_arready
net:   tb.dut.split9.d_awready [1] = 1     // d_awready
net:   tb.dut.split9.d_bid [4] = 0000     // d_bid
net:   tb.dut.split9.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split9.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split9.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split9.d_rid [4] = 0000     // d_rid
net:   tb.dut.split9.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split9.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split9.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split9.d_wready [1] = 1     // d_wready
net:   tb.dut.split9.rready [1] = 0     // rready
net:   tb.dut.split9.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split9.wlast [1] = x     // wlast
net:   tb.dut.split9.wready [1] = 1     // wready
net:   tb.dut.split9.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split9.wvalid [1] = 0     // wvalid
net:   tb.dut.split9.rvalid [1] = 0     // rvalid
net:   tb.dut.split9.rresp [2] = 00     // rresp
net:   tb.dut.split9.rlast [1] = 0     // rlast
net:   tb.dut.split9.rid [4] = 0000     // rid
net:   tb.dut.split9.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split9.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split9.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split9.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split9.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split9.d_rready [1] = 1     // d_rready
net:   tb.dut.split9.d_bready [1] = 1     // d_bready
net:   tb.dut.split9.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split9.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split9.d_awid [4] = 0000     // d_awid
net:   tb.dut.split9.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split9.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split9.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split9.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split9.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split9.d_arid [4] = 0000     // d_arid
net:   tb.dut.split9.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split9.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split9.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split9.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split9.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split9.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split9.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split9.c_rready [1] = 1     // c_rready
net:   tb.dut.split9.c_bready [1] = 1     // c_bready
net:   tb.dut.split9.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split9.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split9.c_awid [4] = 0000     // c_awid
net:   tb.dut.split9.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split9.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split9.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split9.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split9.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split9.c_arid [4] = 0000     // c_arid
net:   tb.dut.split9.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split9.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split9.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split9.bvalid [1] = 0     // bvalid
net:   tb.dut.split9.bresp [2] = 00     // bresp
net:   tb.dut.split9.bid [4] = 0000     // bid
net:   tb.dut.split9.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split9.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split9.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split9.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split9.b_rready [1] = 1     // b_rready
net:   tb.dut.split9.b_bready [1] = 1     // b_bready
net:   tb.dut.split9.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split9.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split9.b_awid [4] = 0000     // b_awid
net:   tb.dut.split9.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split9.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split9.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split9.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split9.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split9.b_arid [4] = 0000     // b_arid
net:   tb.dut.split9.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split9.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split9.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split9.awready [1] = 1     // awready
net:   tb.dut.split9.arready [1] = 1     // arready
net:   tb.dut.split9.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split9.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split9.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split9.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split9.a_rready [1] = 1     // a_rready
net:   tb.dut.split9.a_bready [1] = 1     // a_bready
net:   tb.dut.split9.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split9.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split9.a_awid [4] = 0000     // a_awid
net:   tb.dut.split9.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split9.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split9.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.split9.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split9.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split9.a_arid [4] = 0000     // a_arid
net:   tb.dut.split9.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split9.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split9.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split9.axi_rd_4_splitter
son:   tb.dut.split9.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.split9.axi_rd_4_splitter
net:   tb.dut.split9.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.split9.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.split9.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.split9.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.split9.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.split9.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.split9.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.split9.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.split9.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.split9.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.split9.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.split9.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.split9.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.split9.axi_rd_4_splitter.arextras [8] = xxxxxxxx     // arextras
net:   tb.dut.split9.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.split9.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.split9.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.split9.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.split9.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.split9.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.split9.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.split9.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.split9.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.split9.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.split9.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.split9.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.split9.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.split9.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.split9.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.split9.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.split9.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.split9.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.split9.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.split9.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.split9.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.split9.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.split9.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.split9.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.split9.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.split9.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.split9.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.split9.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split9.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.split9.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.split9.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.split9.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.split9.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.split9.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.split9.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.split9.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.split9.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.split9.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.split9.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.split9.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.split9.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.split9.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.split9.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.split9.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.split9.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.split9.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.split9.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.split9.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.split9.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.split9.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.split9.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.split9.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.split9.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.split9.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.split9.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.split9.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.split9.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.split9.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.split9.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_ar_entry
net:   tb.dut.split9.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split9.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.split9.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split9.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.split9.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split9.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.split9.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.split9.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.split9.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.split9.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.split9.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.split9.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.split9.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.split9.axi_rd_4_splitter.ar_fifo
son:   tb.dut.split9.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.split9.axi_rd_4_splitter.ar_fifo
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split9.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split9.axi_rd_4_splitter.r_fifo
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split9.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.split9.axi_wr_4_splitter
net:   tb.dut.split9.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.split9.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.split9.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.split9.axi_wr_4_splitter.a_bresp [2] = 00     // a_bresp
net:   tb.dut.split9.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.split9.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.split9.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.split9.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.split9.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.split9.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.split9.axi_wr_4_splitter.awextras [8] = xxxxxxxx     // awextras
net:   tb.dut.split9.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.split9.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.split9.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.split9.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.split9.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.split9.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.split9.axi_wr_4_splitter.b_bresp [2] = 00     // b_bresp
net:   tb.dut.split9.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.split9.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.split9.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.split9.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.split9.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.split9.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.split9.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.split9.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.split9.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.split9.axi_wr_4_splitter.c_bresp [2] = 00     // c_bresp
net:   tb.dut.split9.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.split9.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.split9.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.split9.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.split9.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.split9.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.split9.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.split9.axi_wr_4_splitter.d_bresp [2] = 00     // d_bresp
net:   tb.dut.split9.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.split9.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.split9.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.split9.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.split9.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.split9.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.split9.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.split9.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.split9.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.split9.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.split9.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.split9.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.split9.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.split9.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.split9.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.split9.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.split9.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.split9.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.split9.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.split9.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.split9.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.split9.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.split9.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.split9.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.split9.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.split9.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.split9.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.split9.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.split9.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.split9.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.split9.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.split9.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.split9.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.split9.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.split9.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.split9.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.split9.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.split9.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.split9.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.split9.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.split9.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.split9.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.split9.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.split9.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.split9.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.split9.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.split9.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.split9.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.split9.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.split9.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.split9.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.split9.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.split9.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.split9.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.split9.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.split9.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.split9.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.split9.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.split9.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.split9.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.split9.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.split9.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.split9.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.split9.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.split9.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.split9.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.split9.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.split9.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.split9.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.split9.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.split9.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.split9.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.split9.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.split9.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.split9.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.split9.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.split9.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.split9.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.split9.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.split9.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.split9.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.split9.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.split9.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.split9.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.split9.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.split9.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.split9.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.split9.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.split9.axi_wr_4_splitter.aw_fifo
son:   tb.dut.split9.axi_wr_4_splitter.b_fifo
son:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.split9.axi_wr_4_splitter.order_fifo
son:   tb.dut.split9.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.split9.axi_wr_4_splitter.aw_fifo
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split9.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.split9.axi_wr_4_splitter.b_fifo
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.split9.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 000000     // din
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 000000     // din
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 000000     // din
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 000000     // din
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.split9.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.split9.axi_wr_4_splitter.order_fifo
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split9.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.split9.axi_wr_4_splitter.w_fifo
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.split9.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
