module: tb tb
net:   tb.mst0_wready [1] = 1     // mst0_wready
net:   tb.mst1_wready [1] = 1     // mst1_wready
net:   tb.mst2_wready [1] = 1     // mst2_wready
net:   tb.mst3_wready [1] = 1     // mst3_wready
net:   tb.slv3_wvalid [1] = 0     // slv3_wvalid
net:   tb.slv3_wstrb [8] = 00000000     // slv3_wstrb
net:   tb.slv3_wlast [1] = 0     // slv3_wlast
net:   tb.slv3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv3_wdata
net:   tb.slv3_rready [1] = 1     // slv3_rready
net:   tb.slv3_bready [1] = 1     // slv3_bready
net:   tb.slv3_awvalid [1] = 0     // slv3_awvalid
net:   tb.slv3_awlen [8] = 00000000     // slv3_awlen
net:   tb.slv3_awid [4] = 0000     // slv3_awid
net:   tb.slv3_awextras [8] = 00000000     // slv3_awextras
net:   tb.slv3_awburst [2] = 00     // slv3_awburst
net:   tb.slv3_awaddr [32] = 00000000000000000000000000000000     // slv3_awaddr
net:   tb.slv3_arvalid [1] = 0     // slv3_arvalid
net:   tb.slv3_arlen [8] = 00000000     // slv3_arlen
net:   tb.slv3_arid [4] = 0000     // slv3_arid
net:   tb.slv3_arextras [8] = 00000000     // slv3_arextras
net:   tb.slv3_arburst [2] = 00     // slv3_arburst
net:   tb.slv3_araddr [32] = 00000000000000000000000000000000     // slv3_araddr
net:   tb.slv2_wvalid [1] = 0     // slv2_wvalid
net:   tb.slv2_wstrb [8] = 00000000     // slv2_wstrb
net:   tb.slv2_wlast [1] = 0     // slv2_wlast
net:   tb.slv2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv2_wdata
net:   tb.slv2_rready [1] = 1     // slv2_rready
net:   tb.slv2_bready [1] = 1     // slv2_bready
net:   tb.slv2_awvalid [1] = 0     // slv2_awvalid
net:   tb.slv2_awlen [8] = 00000000     // slv2_awlen
net:   tb.slv2_awid [4] = 0000     // slv2_awid
net:   tb.slv2_awextras [8] = 00000000     // slv2_awextras
net:   tb.slv2_awburst [2] = 00     // slv2_awburst
net:   tb.slv2_awaddr [32] = 00000000000000000000000000000000     // slv2_awaddr
net:   tb.slv2_arvalid [1] = 0     // slv2_arvalid
net:   tb.slv2_arlen [8] = 00000000     // slv2_arlen
net:   tb.slv2_arid [4] = 0000     // slv2_arid
net:   tb.slv2_arextras [8] = 00000000     // slv2_arextras
net:   tb.slv2_arburst [2] = 00     // slv2_arburst
net:   tb.slv2_araddr [32] = 00000000000000000000000000000000     // slv2_araddr
net:   tb.slv1_wvalid [1] = 0     // slv1_wvalid
net:   tb.slv1_wstrb [8] = 00000000     // slv1_wstrb
net:   tb.slv1_wlast [1] = 0     // slv1_wlast
net:   tb.slv1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv1_wdata
net:   tb.slv1_rready [1] = 1     // slv1_rready
net:   tb.slv1_bready [1] = 1     // slv1_bready
net:   tb.slv1_awvalid [1] = 0     // slv1_awvalid
net:   tb.slv1_awlen [8] = 00000000     // slv1_awlen
net:   tb.slv1_awid [4] = 0000     // slv1_awid
net:   tb.slv1_awextras [8] = 00000000     // slv1_awextras
net:   tb.slv1_awburst [2] = 00     // slv1_awburst
net:   tb.slv1_awaddr [32] = 00000000000000000000000000000000     // slv1_awaddr
net:   tb.slv1_arvalid [1] = 0     // slv1_arvalid
net:   tb.slv1_arlen [8] = 00000000     // slv1_arlen
net:   tb.slv1_arid [4] = 0000     // slv1_arid
net:   tb.slv1_arextras [8] = 00000000     // slv1_arextras
net:   tb.slv1_arburst [2] = 00     // slv1_arburst
net:   tb.slv1_araddr [32] = 00000000000000000000000000000000     // slv1_araddr
net:   tb.slv0_wvalid [1] = 0     // slv0_wvalid
net:   tb.slv0_wstrb [8] = 00000000     // slv0_wstrb
net:   tb.slv0_wlast [1] = 0     // slv0_wlast
net:   tb.slv0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv0_wdata
net:   tb.slv0_rready [1] = 1     // slv0_rready
net:   tb.slv0_bready [1] = 1     // slv0_bready
net:   tb.slv0_awvalid [1] = 0     // slv0_awvalid
net:   tb.slv0_awlen [8] = 00000000     // slv0_awlen
net:   tb.slv0_awid [4] = 0000     // slv0_awid
net:   tb.slv0_awextras [8] = 00000000     // slv0_awextras
net:   tb.slv0_awburst [2] = 00     // slv0_awburst
net:   tb.slv0_awaddr [32] = 00000000000000000000000000000000     // slv0_awaddr
net:   tb.slv0_arvalid [1] = 0     // slv0_arvalid
net:   tb.slv0_arlen [8] = 00000000     // slv0_arlen
net:   tb.slv0_arid [4] = 0000     // slv0_arid
net:   tb.slv0_arextras [8] = 00000000     // slv0_arextras
net:   tb.slv0_arburst [2] = 00     // slv0_arburst
net:   tb.slv0_araddr [32] = 00000000000000000000000000000000     // slv0_araddr
net:   tb.mst3_rvalid [1] = 0     // mst3_rvalid
net:   tb.mst3_rresp [2] = 00     // mst3_rresp
net:   tb.mst3_rlast [1] = 0     // mst3_rlast
net:   tb.mst3_rid [4] = 0000     // mst3_rid
net:   tb.mst3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst3_rdata
net:   tb.mst3_bvalid [1] = 0     // mst3_bvalid
net:   tb.mst3_bresp [2] = 00     // mst3_bresp
net:   tb.mst3_bid [4] = 0000     // mst3_bid
net:   tb.mst3_awready [1] = 1     // mst3_awready
net:   tb.mst3_arready [1] = 1     // mst3_arready
net:   tb.mst2_rvalid [1] = 0     // mst2_rvalid
net:   tb.mst2_rresp [2] = 00     // mst2_rresp
net:   tb.mst2_rlast [1] = 0     // mst2_rlast
net:   tb.mst2_rid [4] = 0000     // mst2_rid
net:   tb.mst2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst2_rdata
net:   tb.mst2_bvalid [1] = 0     // mst2_bvalid
net:   tb.mst2_bresp [2] = 00     // mst2_bresp
net:   tb.mst2_bid [4] = 0000     // mst2_bid
net:   tb.mst2_awready [1] = 1     // mst2_awready
net:   tb.mst2_arready [1] = 1     // mst2_arready
net:   tb.mst1_rvalid [1] = 0     // mst1_rvalid
net:   tb.mst1_rresp [2] = 00     // mst1_rresp
net:   tb.mst1_rlast [1] = 0     // mst1_rlast
net:   tb.mst1_rid [4] = 0000     // mst1_rid
net:   tb.mst1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst1_rdata
net:   tb.mst1_bvalid [1] = 0     // mst1_bvalid
net:   tb.mst1_bresp [2] = 00     // mst1_bresp
net:   tb.mst1_bid [4] = 0000     // mst1_bid
net:   tb.mst1_awready [1] = 1     // mst1_awready
net:   tb.mst1_arready [1] = 1     // mst1_arready
net:   tb.mst0_rvalid [1] = 0     // mst0_rvalid
net:   tb.mst0_rresp [2] = 00     // mst0_rresp
net:   tb.mst0_rlast [1] = 0     // mst0_rlast
net:   tb.mst0_rid [4] = 0000     // mst0_rid
net:   tb.mst0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst0_rdata
net:   tb.mst0_bvalid [1] = 0     // mst0_bvalid
net:   tb.mst0_bresp [2] = 00     // mst0_bresp
net:   tb.mst0_bid [4] = 0000     // mst0_bid
net:   tb.mst0_awready [1] = 1     // mst0_awready
net:   tb.mst0_arready [1] = 1     // mst0_arready
reg:   Index [32] = 00000000000000000000000000000000 // Index
reg:   Panics [32] = 00000000000000000000000000000000 // Panics
reg:   clk [1] = 1 // clk
reg:   corrects [32] = 00000000000000000000000000000000 // corrects
reg:   cycles [32] = 00000000000000000000000000011110 // cycles
reg:   errors [32] = 00000000000000000000000000000000 // errors
reg:   marker [32] = 00000000000000000000000000000000 // marker
reg:   marker0 [32] = 00000000000000000000000000000000 // marker0
reg:   marker1 [32] = 00000000000000000000000000000000 // marker1
reg:   marker2 [32] = 00000000000000000000000000000000 // marker2
reg:   marker3 [32] = 00000000000000000000000000000000 // marker3
reg:   mst0_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_araddr
reg:   mst0_arburst [2] = xx // mst0_arburst
reg:   mst0_arextras [8] = 00000000 // mst0_arextras
reg:   mst0_arid [4] = xxxx // mst0_arid
reg:   mst0_arlen [8] = xxxxxxxx // mst0_arlen
reg:   mst0_arsize [3] = 000 // mst0_arsize
reg:   mst0_arvalid [1] = 0 // mst0_arvalid
reg:   mst0_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_awaddr
reg:   mst0_awburst [2] = xx // mst0_awburst
reg:   mst0_awextras [8] = 00000000 // mst0_awextras
reg:   mst0_awid [4] = xxxx // mst0_awid
reg:   mst0_awlen [8] = xxxxxxxx // mst0_awlen
reg:   mst0_awsize [3] = 000 // mst0_awsize
reg:   mst0_awvalid [1] = 0 // mst0_awvalid
reg:   mst0_bready [1] = 0 // mst0_bready
reg:   mst0_rready [1] = 0 // mst0_rready
reg:   mst0_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst0_wdata
reg:   mst0_wlast [1] = x // mst0_wlast
reg:   mst0_wstrb [8] = xxxxxxxx // mst0_wstrb
reg:   mst0_wvalid [1] = 0 // mst0_wvalid
reg:   mst1_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_araddr
reg:   mst1_arburst [2] = xx // mst1_arburst
reg:   mst1_arextras [8] = 00000000 // mst1_arextras
reg:   mst1_arid [4] = xxxx // mst1_arid
reg:   mst1_arlen [8] = xxxxxxxx // mst1_arlen
reg:   mst1_arsize [3] = 000 // mst1_arsize
reg:   mst1_arvalid [1] = 0 // mst1_arvalid
reg:   mst1_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_awaddr
reg:   mst1_awburst [2] = xx // mst1_awburst
reg:   mst1_awextras [8] = 00000000 // mst1_awextras
reg:   mst1_awid [4] = xxxx // mst1_awid
reg:   mst1_awlen [8] = xxxxxxxx // mst1_awlen
reg:   mst1_awsize [3] = 000 // mst1_awsize
reg:   mst1_awvalid [1] = 0 // mst1_awvalid
reg:   mst1_bready [1] = 0 // mst1_bready
reg:   mst1_rready [1] = 0 // mst1_rready
reg:   mst1_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst1_wdata
reg:   mst1_wlast [1] = x // mst1_wlast
reg:   mst1_wstrb [8] = xxxxxxxx // mst1_wstrb
reg:   mst1_wvalid [1] = 0 // mst1_wvalid
reg:   mst2_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_araddr
reg:   mst2_arburst [2] = xx // mst2_arburst
reg:   mst2_arextras [8] = 00000000 // mst2_arextras
reg:   mst2_arid [4] = xxxx // mst2_arid
reg:   mst2_arlen [8] = xxxxxxxx // mst2_arlen
reg:   mst2_arsize [3] = 000 // mst2_arsize
reg:   mst2_arvalid [1] = 0 // mst2_arvalid
reg:   mst2_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_awaddr
reg:   mst2_awburst [2] = xx // mst2_awburst
reg:   mst2_awextras [8] = 00000000 // mst2_awextras
reg:   mst2_awid [4] = xxxx // mst2_awid
reg:   mst2_awlen [8] = xxxxxxxx // mst2_awlen
reg:   mst2_awsize [3] = 000 // mst2_awsize
reg:   mst2_awvalid [1] = 0 // mst2_awvalid
reg:   mst2_bready [1] = 0 // mst2_bready
reg:   mst2_rready [1] = 0 // mst2_rready
reg:   mst2_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst2_wdata
reg:   mst2_wlast [1] = x // mst2_wlast
reg:   mst2_wstrb [8] = xxxxxxxx // mst2_wstrb
reg:   mst2_wvalid [1] = 0 // mst2_wvalid
reg:   mst3_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_araddr
reg:   mst3_arburst [2] = xx // mst3_arburst
reg:   mst3_arextras [8] = 00000000 // mst3_arextras
reg:   mst3_arid [4] = xxxx // mst3_arid
reg:   mst3_arlen [8] = xxxxxxxx // mst3_arlen
reg:   mst3_arsize [3] = 000 // mst3_arsize
reg:   mst3_arvalid [1] = 0 // mst3_arvalid
reg:   mst3_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_awaddr
reg:   mst3_awburst [2] = xx // mst3_awburst
reg:   mst3_awextras [8] = 00000000 // mst3_awextras
reg:   mst3_awid [4] = xxxx // mst3_awid
reg:   mst3_awlen [8] = xxxxxxxx // mst3_awlen
reg:   mst3_awsize [3] = 000 // mst3_awsize
reg:   mst3_awvalid [1] = 0 // mst3_awvalid
reg:   mst3_bready [1] = 0 // mst3_bready
reg:   mst3_rready [1] = 0 // mst3_rready
reg:   mst3_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // mst3_wdata
reg:   mst3_wlast [1] = x // mst3_wlast
reg:   mst3_wstrb [8] = xxxxxxxx // mst3_wstrb
reg:   mst3_wvalid [1] = 0 // mst3_wvalid
reg:   rst_n [1] = 1 // rst_n
reg:   slv0_arready [1] = 0 // slv0_arready
reg:   slv0_arsize [3] = 000 // slv0_arsize
reg:   slv0_awready [1] = 0 // slv0_awready
reg:   slv0_awsize [3] = 000 // slv0_awsize
reg:   slv0_bid [4] = xxxx // slv0_bid
reg:   slv0_bresp [2] = xx // slv0_bresp
reg:   slv0_bvalid [1] = 0 // slv0_bvalid
reg:   slv0_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv0_rdata
reg:   slv0_rid [4] = xxxx // slv0_rid
reg:   slv0_rlast [1] = x // slv0_rlast
reg:   slv0_rresp [2] = xx // slv0_rresp
reg:   slv0_rvalid [1] = 0 // slv0_rvalid
reg:   slv0_wready [1] = x // slv0_wready
reg:   slv1_arready [1] = 0 // slv1_arready
reg:   slv1_arsize [3] = 000 // slv1_arsize
reg:   slv1_awready [1] = 0 // slv1_awready
reg:   slv1_awsize [3] = 000 // slv1_awsize
reg:   slv1_bid [4] = xxxx // slv1_bid
reg:   slv1_bresp [2] = xx // slv1_bresp
reg:   slv1_bvalid [1] = 0 // slv1_bvalid
reg:   slv1_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv1_rdata
reg:   slv1_rid [4] = xxxx // slv1_rid
reg:   slv1_rlast [1] = x // slv1_rlast
reg:   slv1_rresp [2] = xx // slv1_rresp
reg:   slv1_rvalid [1] = 0 // slv1_rvalid
reg:   slv1_wready [1] = x // slv1_wready
reg:   slv2_arready [1] = 0 // slv2_arready
reg:   slv2_arsize [3] = 000 // slv2_arsize
reg:   slv2_awready [1] = 0 // slv2_awready
reg:   slv2_awsize [3] = 000 // slv2_awsize
reg:   slv2_bid [4] = xxxx // slv2_bid
reg:   slv2_bresp [2] = xx // slv2_bresp
reg:   slv2_bvalid [1] = 0 // slv2_bvalid
reg:   slv2_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv2_rdata
reg:   slv2_rid [4] = xxxx // slv2_rid
reg:   slv2_rlast [1] = x // slv2_rlast
reg:   slv2_rresp [2] = xx // slv2_rresp
reg:   slv2_rvalid [1] = 0 // slv2_rvalid
reg:   slv2_wready [1] = x // slv2_wready
reg:   slv3_arready [1] = 0 // slv3_arready
reg:   slv3_arsize [3] = 000 // slv3_arsize
reg:   slv3_awready [1] = 0 // slv3_awready
reg:   slv3_awsize [3] = 000 // slv3_awsize
reg:   slv3_bid [4] = xxxx // slv3_bid
reg:   slv3_bresp [2] = xx // slv3_bresp
reg:   slv3_bvalid [1] = 0 // slv3_bvalid
reg:   slv3_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // slv3_rdata
reg:   slv3_rid [4] = xxxx // slv3_rid
reg:   slv3_rlast [1] = x // slv3_rlast
reg:   slv3_rresp [2] = xx // slv3_rresp
reg:   slv3_rvalid [1] = 0 // slv3_rvalid
reg:   slv3_wready [1] = x // slv3_wready
reg:   wrongs [32] = 00000000000000000000000000000000 // wrongs
son:   tb.dut
module: x4x4 tb.dut
net:   tb.dut.clk [1] = 1     // clk
net:   tb.dut.mst0_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_araddr
net:   tb.dut.mst0_arburst [2] = xx     // mst0_arburst
net:   tb.dut.mst0_arextras [8] = 00000000     // mst0_arextras
net:   tb.dut.mst0_arid [4] = xxxx     // mst0_arid
net:   tb.dut.mst0_arlen [8] = xxxxxxxx     // mst0_arlen
net:   tb.dut.mst0_arvalid [1] = 0     // mst0_arvalid
net:   tb.dut.mst0_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_awaddr
net:   tb.dut.mst0_awburst [2] = xx     // mst0_awburst
net:   tb.dut.mst0_awextras [8] = 00000000     // mst0_awextras
net:   tb.dut.mst0_awid [4] = xxxx     // mst0_awid
net:   tb.dut.mst0_awlen [8] = xxxxxxxx     // mst0_awlen
net:   tb.dut.mst0_awvalid [1] = 0     // mst0_awvalid
net:   tb.dut.mst0_bready [1] = 0     // mst0_bready
net:   tb.dut.mst0_rready [1] = 0     // mst0_rready
net:   tb.dut.mst0_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst0_wdata
net:   tb.dut.mst0_wlast [1] = x     // mst0_wlast
net:   tb.dut.mst0_wready [1] = 1     // mst0_wready
net:   tb.dut.mst0_wstrb [8] = xxxxxxxx     // mst0_wstrb
net:   tb.dut.mst0_wvalid [1] = 0     // mst0_wvalid
net:   tb.dut.mst1_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_araddr
net:   tb.dut.mst1_arburst [2] = xx     // mst1_arburst
net:   tb.dut.mst1_arextras [8] = 00000000     // mst1_arextras
net:   tb.dut.mst1_arid [4] = xxxx     // mst1_arid
net:   tb.dut.mst1_arlen [8] = xxxxxxxx     // mst1_arlen
net:   tb.dut.mst1_arvalid [1] = 0     // mst1_arvalid
net:   tb.dut.mst1_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_awaddr
net:   tb.dut.mst1_awburst [2] = xx     // mst1_awburst
net:   tb.dut.mst1_awextras [8] = 00000000     // mst1_awextras
net:   tb.dut.mst1_awid [4] = xxxx     // mst1_awid
net:   tb.dut.mst1_awlen [8] = xxxxxxxx     // mst1_awlen
net:   tb.dut.mst1_awvalid [1] = 0     // mst1_awvalid
net:   tb.dut.mst1_bready [1] = 0     // mst1_bready
net:   tb.dut.mst1_rready [1] = 0     // mst1_rready
net:   tb.dut.mst1_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst1_wdata
net:   tb.dut.mst1_wlast [1] = x     // mst1_wlast
net:   tb.dut.mst1_wready [1] = 1     // mst1_wready
net:   tb.dut.mst1_wstrb [8] = xxxxxxxx     // mst1_wstrb
net:   tb.dut.mst1_wvalid [1] = 0     // mst1_wvalid
net:   tb.dut.mst2_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_araddr
net:   tb.dut.mst2_arburst [2] = xx     // mst2_arburst
net:   tb.dut.mst2_arextras [8] = 00000000     // mst2_arextras
net:   tb.dut.mst2_arid [4] = xxxx     // mst2_arid
net:   tb.dut.mst2_arlen [8] = xxxxxxxx     // mst2_arlen
net:   tb.dut.mst2_arvalid [1] = 0     // mst2_arvalid
net:   tb.dut.mst2_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_awaddr
net:   tb.dut.mst2_awburst [2] = xx     // mst2_awburst
net:   tb.dut.mst2_awextras [8] = 00000000     // mst2_awextras
net:   tb.dut.mst2_awid [4] = xxxx     // mst2_awid
net:   tb.dut.mst2_awlen [8] = xxxxxxxx     // mst2_awlen
net:   tb.dut.mst2_awvalid [1] = 0     // mst2_awvalid
net:   tb.dut.mst2_bready [1] = 0     // mst2_bready
net:   tb.dut.mst2_rready [1] = 0     // mst2_rready
net:   tb.dut.mst2_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst2_wdata
net:   tb.dut.mst2_wlast [1] = x     // mst2_wlast
net:   tb.dut.mst2_wready [1] = 1     // mst2_wready
net:   tb.dut.mst2_wstrb [8] = xxxxxxxx     // mst2_wstrb
net:   tb.dut.mst2_wvalid [1] = 0     // mst2_wvalid
net:   tb.dut.mst3_araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_araddr
net:   tb.dut.mst3_arburst [2] = xx     // mst3_arburst
net:   tb.dut.mst3_arextras [8] = 00000000     // mst3_arextras
net:   tb.dut.mst3_arid [4] = xxxx     // mst3_arid
net:   tb.dut.mst3_arlen [8] = xxxxxxxx     // mst3_arlen
net:   tb.dut.mst3_arvalid [1] = 0     // mst3_arvalid
net:   tb.dut.mst3_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_awaddr
net:   tb.dut.mst3_awburst [2] = xx     // mst3_awburst
net:   tb.dut.mst3_awextras [8] = 00000000     // mst3_awextras
net:   tb.dut.mst3_awid [4] = xxxx     // mst3_awid
net:   tb.dut.mst3_awlen [8] = xxxxxxxx     // mst3_awlen
net:   tb.dut.mst3_awvalid [1] = 0     // mst3_awvalid
net:   tb.dut.mst3_bready [1] = 0     // mst3_bready
net:   tb.dut.mst3_rready [1] = 0     // mst3_rready
net:   tb.dut.mst3_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // mst3_wdata
net:   tb.dut.mst3_wlast [1] = x     // mst3_wlast
net:   tb.dut.mst3_wready [1] = 1     // mst3_wready
net:   tb.dut.mst3_wstrb [8] = xxxxxxxx     // mst3_wstrb
net:   tb.dut.mst3_wvalid [1] = 0     // mst3_wvalid
net:   tb.dut.rst_n [1] = 1     // rst_n
net:   tb.dut.slv0_arready [1] = 0     // slv0_arready
net:   tb.dut.slv0_awready [1] = 0     // slv0_awready
net:   tb.dut.slv0_bid [4] = xxxx     // slv0_bid
net:   tb.dut.slv0_bresp [2] = xx     // slv0_bresp
net:   tb.dut.slv0_bvalid [1] = 0     // slv0_bvalid
net:   tb.dut.slv0_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv0_rdata
net:   tb.dut.slv0_rid [4] = xxxx     // slv0_rid
net:   tb.dut.slv0_rlast [1] = x     // slv0_rlast
net:   tb.dut.slv0_rresp [2] = xx     // slv0_rresp
net:   tb.dut.slv0_rvalid [1] = 0     // slv0_rvalid
net:   tb.dut.slv0_wready [1] = x     // slv0_wready
net:   tb.dut.slv1_arready [1] = 0     // slv1_arready
net:   tb.dut.slv1_awready [1] = 0     // slv1_awready
net:   tb.dut.slv1_bid [4] = xxxx     // slv1_bid
net:   tb.dut.slv1_bresp [2] = xx     // slv1_bresp
net:   tb.dut.slv1_bvalid [1] = 0     // slv1_bvalid
net:   tb.dut.slv1_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv1_rdata
net:   tb.dut.slv1_rid [4] = xxxx     // slv1_rid
net:   tb.dut.slv1_rlast [1] = x     // slv1_rlast
net:   tb.dut.slv1_rresp [2] = xx     // slv1_rresp
net:   tb.dut.slv1_rvalid [1] = 0     // slv1_rvalid
net:   tb.dut.slv1_wready [1] = x     // slv1_wready
net:   tb.dut.slv2_arready [1] = 0     // slv2_arready
net:   tb.dut.slv2_awready [1] = 0     // slv2_awready
net:   tb.dut.slv2_bid [4] = xxxx     // slv2_bid
net:   tb.dut.slv2_bresp [2] = xx     // slv2_bresp
net:   tb.dut.slv2_bvalid [1] = 0     // slv2_bvalid
net:   tb.dut.slv2_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv2_rdata
net:   tb.dut.slv2_rid [4] = xxxx     // slv2_rid
net:   tb.dut.slv2_rlast [1] = x     // slv2_rlast
net:   tb.dut.slv2_rresp [2] = xx     // slv2_rresp
net:   tb.dut.slv2_rvalid [1] = 0     // slv2_rvalid
net:   tb.dut.slv2_wready [1] = x     // slv2_wready
net:   tb.dut.slv3_arready [1] = 0     // slv3_arready
net:   tb.dut.slv3_awready [1] = 0     // slv3_awready
net:   tb.dut.slv3_bid [4] = xxxx     // slv3_bid
net:   tb.dut.slv3_bresp [2] = xx     // slv3_bresp
net:   tb.dut.slv3_bvalid [1] = 0     // slv3_bvalid
net:   tb.dut.slv3_rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // slv3_rdata
net:   tb.dut.slv3_rid [4] = xxxx     // slv3_rid
net:   tb.dut.slv3_rlast [1] = x     // slv3_rlast
net:   tb.dut.slv3_rresp [2] = xx     // slv3_rresp
net:   tb.dut.slv3_rvalid [1] = 0     // slv3_rvalid
net:   tb.dut.slv3_wready [1] = x     // slv3_wready
net:   tb.dut.splitter3_merger3_wvalid [1] = 0     // splitter3_merger3_wvalid
net:   tb.dut.splitter3_merger3_wstrb [8] = 00000000     // splitter3_merger3_wstrb
net:   tb.dut.splitter3_merger3_wready [1] = 1     // splitter3_merger3_wready
net:   tb.dut.splitter3_merger3_wlast [1] = 0     // splitter3_merger3_wlast
net:   tb.dut.splitter3_merger3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger3_wdata
net:   tb.dut.splitter3_merger3_rvalid [1] = 0     // splitter3_merger3_rvalid
net:   tb.dut.splitter3_merger3_rresp [2] = 00     // splitter3_merger3_rresp
net:   tb.dut.splitter3_merger3_rready [1] = 1     // splitter3_merger3_rready
net:   tb.dut.splitter3_merger3_rlast [1] = 0     // splitter3_merger3_rlast
net:   tb.dut.splitter3_merger3_rid [4] = 0000     // splitter3_merger3_rid
net:   tb.dut.splitter3_merger3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger3_rdata
net:   tb.dut.splitter3_merger3_bvalid [1] = 0     // splitter3_merger3_bvalid
net:   tb.dut.splitter3_merger3_bresp [2] = xx     // splitter3_merger3_bresp
net:   tb.dut.splitter3_merger3_bready [1] = 1     // splitter3_merger3_bready
net:   tb.dut.splitter3_merger3_bid [4] = 0000     // splitter3_merger3_bid
net:   tb.dut.splitter3_merger3_awvalid [1] = 0     // splitter3_merger3_awvalid
net:   tb.dut.splitter3_merger3_awready [1] = 1     // splitter3_merger3_awready
net:   tb.dut.splitter3_merger3_awlen [8] = 00000000     // splitter3_merger3_awlen
net:   tb.dut.splitter3_merger3_awid [4] = 0000     // splitter3_merger3_awid
net:   tb.dut.splitter3_merger3_awextras [8] = 00000000     // splitter3_merger3_awextras
net:   tb.dut.splitter3_merger3_awburst [2] = 00     // splitter3_merger3_awburst
net:   tb.dut.splitter3_merger3_awaddr [32] = 00000000000000000000000000000000     // splitter3_merger3_awaddr
net:   tb.dut.splitter3_merger3_arvalid [1] = 0     // splitter3_merger3_arvalid
net:   tb.dut.splitter3_merger3_arready [1] = 1     // splitter3_merger3_arready
net:   tb.dut.splitter3_merger3_arlen [8] = 00000000     // splitter3_merger3_arlen
net:   tb.dut.splitter3_merger3_arid [4] = 0000     // splitter3_merger3_arid
net:   tb.dut.splitter3_merger3_arextras [8] = 00000000     // splitter3_merger3_arextras
net:   tb.dut.splitter3_merger3_arburst [2] = 00     // splitter3_merger3_arburst
net:   tb.dut.splitter3_merger3_araddr [32] = 00000000000000000000000000000000     // splitter3_merger3_araddr
net:   tb.dut.splitter3_merger2_wvalid [1] = 0     // splitter3_merger2_wvalid
net:   tb.dut.splitter3_merger2_wstrb [8] = 00000000     // splitter3_merger2_wstrb
net:   tb.dut.splitter3_merger2_wready [1] = 1     // splitter3_merger2_wready
net:   tb.dut.splitter3_merger2_wlast [1] = 0     // splitter3_merger2_wlast
net:   tb.dut.splitter3_merger2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger2_wdata
net:   tb.dut.splitter3_merger2_rvalid [1] = 0     // splitter3_merger2_rvalid
net:   tb.dut.splitter3_merger2_rresp [2] = 00     // splitter3_merger2_rresp
net:   tb.dut.splitter3_merger2_rready [1] = 1     // splitter3_merger2_rready
net:   tb.dut.splitter3_merger2_rlast [1] = 0     // splitter3_merger2_rlast
net:   tb.dut.splitter3_merger2_rid [4] = 0000     // splitter3_merger2_rid
net:   tb.dut.splitter3_merger2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger2_rdata
net:   tb.dut.splitter3_merger2_bvalid [1] = 0     // splitter3_merger2_bvalid
net:   tb.dut.splitter3_merger2_bresp [2] = xx     // splitter3_merger2_bresp
net:   tb.dut.splitter3_merger2_bready [1] = 1     // splitter3_merger2_bready
net:   tb.dut.splitter3_merger2_bid [4] = 0000     // splitter3_merger2_bid
net:   tb.dut.splitter3_merger2_awvalid [1] = 0     // splitter3_merger2_awvalid
net:   tb.dut.splitter3_merger2_awready [1] = 1     // splitter3_merger2_awready
net:   tb.dut.splitter3_merger2_awlen [8] = 00000000     // splitter3_merger2_awlen
net:   tb.dut.splitter3_merger2_awid [4] = 0000     // splitter3_merger2_awid
net:   tb.dut.splitter3_merger2_awextras [8] = 00000000     // splitter3_merger2_awextras
net:   tb.dut.splitter3_merger2_awburst [2] = 00     // splitter3_merger2_awburst
net:   tb.dut.splitter3_merger2_awaddr [32] = 00000000000000000000000000000000     // splitter3_merger2_awaddr
net:   tb.dut.splitter3_merger2_arvalid [1] = 0     // splitter3_merger2_arvalid
net:   tb.dut.splitter3_merger2_arready [1] = 1     // splitter3_merger2_arready
net:   tb.dut.splitter3_merger2_arlen [8] = 00000000     // splitter3_merger2_arlen
net:   tb.dut.splitter3_merger2_arid [4] = 0000     // splitter3_merger2_arid
net:   tb.dut.splitter3_merger2_arextras [8] = 00000000     // splitter3_merger2_arextras
net:   tb.dut.splitter3_merger2_arburst [2] = 00     // splitter3_merger2_arburst
net:   tb.dut.splitter3_merger2_araddr [32] = 00000000000000000000000000000000     // splitter3_merger2_araddr
net:   tb.dut.splitter3_merger1_wvalid [1] = 0     // splitter3_merger1_wvalid
net:   tb.dut.splitter3_merger1_wstrb [8] = 00000000     // splitter3_merger1_wstrb
net:   tb.dut.splitter3_merger1_wready [1] = 1     // splitter3_merger1_wready
net:   tb.dut.splitter3_merger1_wlast [1] = 0     // splitter3_merger1_wlast
net:   tb.dut.splitter3_merger1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger1_wdata
net:   tb.dut.splitter3_merger1_rvalid [1] = 0     // splitter3_merger1_rvalid
net:   tb.dut.splitter3_merger1_rresp [2] = 00     // splitter3_merger1_rresp
net:   tb.dut.splitter3_merger1_rready [1] = 1     // splitter3_merger1_rready
net:   tb.dut.splitter3_merger1_rlast [1] = 0     // splitter3_merger1_rlast
net:   tb.dut.splitter3_merger1_rid [4] = 0000     // splitter3_merger1_rid
net:   tb.dut.splitter3_merger1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger1_rdata
net:   tb.dut.splitter3_merger1_bvalid [1] = 0     // splitter3_merger1_bvalid
net:   tb.dut.splitter3_merger1_bresp [2] = xx     // splitter3_merger1_bresp
net:   tb.dut.splitter3_merger1_bready [1] = 1     // splitter3_merger1_bready
net:   tb.dut.splitter3_merger1_bid [4] = 0000     // splitter3_merger1_bid
net:   tb.dut.splitter3_merger1_awvalid [1] = 0     // splitter3_merger1_awvalid
net:   tb.dut.splitter3_merger1_awready [1] = 1     // splitter3_merger1_awready
net:   tb.dut.splitter3_merger1_awlen [8] = 00000000     // splitter3_merger1_awlen
net:   tb.dut.splitter3_merger1_awid [4] = 0000     // splitter3_merger1_awid
net:   tb.dut.splitter3_merger1_awextras [8] = 00000000     // splitter3_merger1_awextras
net:   tb.dut.splitter3_merger1_awburst [2] = 00     // splitter3_merger1_awburst
net:   tb.dut.splitter3_merger1_awaddr [32] = 00000000000000000000000000000000     // splitter3_merger1_awaddr
net:   tb.dut.splitter3_merger1_arvalid [1] = 0     // splitter3_merger1_arvalid
net:   tb.dut.splitter3_merger1_arready [1] = 1     // splitter3_merger1_arready
net:   tb.dut.splitter3_merger1_arlen [8] = 00000000     // splitter3_merger1_arlen
net:   tb.dut.splitter3_merger1_arid [4] = 0000     // splitter3_merger1_arid
net:   tb.dut.splitter3_merger1_arextras [8] = 00000000     // splitter3_merger1_arextras
net:   tb.dut.splitter3_merger1_arburst [2] = 00     // splitter3_merger1_arburst
net:   tb.dut.splitter3_merger1_araddr [32] = 00000000000000000000000000000000     // splitter3_merger1_araddr
net:   tb.dut.splitter3_merger0_wvalid [1] = 0     // splitter3_merger0_wvalid
net:   tb.dut.splitter3_merger0_wstrb [8] = 00000000     // splitter3_merger0_wstrb
net:   tb.dut.splitter3_merger0_wready [1] = 1     // splitter3_merger0_wready
net:   tb.dut.splitter3_merger0_wlast [1] = 0     // splitter3_merger0_wlast
net:   tb.dut.splitter3_merger0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger0_wdata
net:   tb.dut.splitter3_merger0_rvalid [1] = 0     // splitter3_merger0_rvalid
net:   tb.dut.splitter3_merger0_rresp [2] = 00     // splitter3_merger0_rresp
net:   tb.dut.splitter3_merger0_rready [1] = 1     // splitter3_merger0_rready
net:   tb.dut.splitter3_merger0_rlast [1] = 0     // splitter3_merger0_rlast
net:   tb.dut.splitter3_merger0_rid [4] = 0000     // splitter3_merger0_rid
net:   tb.dut.splitter3_merger0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter3_merger0_rdata
net:   tb.dut.splitter3_merger0_bvalid [1] = 0     // splitter3_merger0_bvalid
net:   tb.dut.splitter3_merger0_bresp [2] = xx     // splitter3_merger0_bresp
net:   tb.dut.splitter3_merger0_bready [1] = 1     // splitter3_merger0_bready
net:   tb.dut.splitter3_merger0_bid [4] = 0000     // splitter3_merger0_bid
net:   tb.dut.splitter3_merger0_awvalid [1] = 0     // splitter3_merger0_awvalid
net:   tb.dut.splitter3_merger0_awready [1] = 1     // splitter3_merger0_awready
net:   tb.dut.splitter3_merger0_awlen [8] = 00000000     // splitter3_merger0_awlen
net:   tb.dut.splitter3_merger0_awid [4] = 0000     // splitter3_merger0_awid
net:   tb.dut.splitter3_merger0_awextras [8] = 00000000     // splitter3_merger0_awextras
net:   tb.dut.splitter3_merger0_awburst [2] = 00     // splitter3_merger0_awburst
net:   tb.dut.splitter3_merger0_awaddr [32] = 00000000000000000000000000000000     // splitter3_merger0_awaddr
net:   tb.dut.splitter3_merger0_arvalid [1] = 0     // splitter3_merger0_arvalid
net:   tb.dut.splitter3_merger0_arready [1] = 1     // splitter3_merger0_arready
net:   tb.dut.splitter3_merger0_arlen [8] = 00000000     // splitter3_merger0_arlen
net:   tb.dut.splitter3_merger0_arid [4] = 0000     // splitter3_merger0_arid
net:   tb.dut.splitter3_merger0_arextras [8] = 00000000     // splitter3_merger0_arextras
net:   tb.dut.splitter3_merger0_arburst [2] = 00     // splitter3_merger0_arburst
net:   tb.dut.splitter3_merger0_araddr [32] = 00000000000000000000000000000000     // splitter3_merger0_araddr
net:   tb.dut.splitter2_merger3_wvalid [1] = 0     // splitter2_merger3_wvalid
net:   tb.dut.splitter2_merger3_wstrb [8] = 00000000     // splitter2_merger3_wstrb
net:   tb.dut.splitter2_merger3_wready [1] = 1     // splitter2_merger3_wready
net:   tb.dut.splitter2_merger3_wlast [1] = 0     // splitter2_merger3_wlast
net:   tb.dut.splitter2_merger3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger3_wdata
net:   tb.dut.splitter2_merger3_rvalid [1] = 0     // splitter2_merger3_rvalid
net:   tb.dut.splitter2_merger3_rresp [2] = 00     // splitter2_merger3_rresp
net:   tb.dut.splitter2_merger3_rready [1] = 1     // splitter2_merger3_rready
net:   tb.dut.splitter2_merger3_rlast [1] = 0     // splitter2_merger3_rlast
net:   tb.dut.splitter2_merger3_rid [4] = 0000     // splitter2_merger3_rid
net:   tb.dut.splitter2_merger3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger3_rdata
net:   tb.dut.splitter2_merger3_bvalid [1] = 0     // splitter2_merger3_bvalid
net:   tb.dut.splitter2_merger3_bresp [2] = xx     // splitter2_merger3_bresp
net:   tb.dut.splitter2_merger3_bready [1] = 1     // splitter2_merger3_bready
net:   tb.dut.splitter2_merger3_bid [4] = 0000     // splitter2_merger3_bid
net:   tb.dut.splitter2_merger3_awvalid [1] = 0     // splitter2_merger3_awvalid
net:   tb.dut.splitter2_merger3_awready [1] = 1     // splitter2_merger3_awready
net:   tb.dut.splitter2_merger3_awlen [8] = 00000000     // splitter2_merger3_awlen
net:   tb.dut.splitter2_merger3_awid [4] = 0000     // splitter2_merger3_awid
net:   tb.dut.splitter2_merger3_awextras [8] = 00000000     // splitter2_merger3_awextras
net:   tb.dut.splitter2_merger3_awburst [2] = 00     // splitter2_merger3_awburst
net:   tb.dut.splitter2_merger3_awaddr [32] = 00000000000000000000000000000000     // splitter2_merger3_awaddr
net:   tb.dut.splitter2_merger3_arvalid [1] = 0     // splitter2_merger3_arvalid
net:   tb.dut.splitter2_merger3_arready [1] = 1     // splitter2_merger3_arready
net:   tb.dut.splitter2_merger3_arlen [8] = 00000000     // splitter2_merger3_arlen
net:   tb.dut.splitter2_merger3_arid [4] = 0000     // splitter2_merger3_arid
net:   tb.dut.splitter2_merger3_arextras [8] = 00000000     // splitter2_merger3_arextras
net:   tb.dut.splitter2_merger3_arburst [2] = 00     // splitter2_merger3_arburst
net:   tb.dut.splitter2_merger3_araddr [32] = 00000000000000000000000000000000     // splitter2_merger3_araddr
net:   tb.dut.splitter2_merger2_wvalid [1] = 0     // splitter2_merger2_wvalid
net:   tb.dut.splitter2_merger2_wstrb [8] = 00000000     // splitter2_merger2_wstrb
net:   tb.dut.splitter2_merger2_wready [1] = 1     // splitter2_merger2_wready
net:   tb.dut.splitter2_merger2_wlast [1] = 0     // splitter2_merger2_wlast
net:   tb.dut.splitter2_merger2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger2_wdata
net:   tb.dut.splitter2_merger2_rvalid [1] = 0     // splitter2_merger2_rvalid
net:   tb.dut.splitter2_merger2_rresp [2] = 00     // splitter2_merger2_rresp
net:   tb.dut.splitter2_merger2_rready [1] = 1     // splitter2_merger2_rready
net:   tb.dut.splitter2_merger2_rlast [1] = 0     // splitter2_merger2_rlast
net:   tb.dut.splitter2_merger2_rid [4] = 0000     // splitter2_merger2_rid
net:   tb.dut.splitter2_merger2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger2_rdata
net:   tb.dut.splitter2_merger2_bvalid [1] = 0     // splitter2_merger2_bvalid
net:   tb.dut.splitter2_merger2_bresp [2] = xx     // splitter2_merger2_bresp
net:   tb.dut.splitter2_merger2_bready [1] = 1     // splitter2_merger2_bready
net:   tb.dut.splitter2_merger2_bid [4] = 0000     // splitter2_merger2_bid
net:   tb.dut.splitter2_merger2_awvalid [1] = 0     // splitter2_merger2_awvalid
net:   tb.dut.splitter2_merger2_awready [1] = 1     // splitter2_merger2_awready
net:   tb.dut.splitter2_merger2_awlen [8] = 00000000     // splitter2_merger2_awlen
net:   tb.dut.splitter2_merger2_awid [4] = 0000     // splitter2_merger2_awid
net:   tb.dut.splitter2_merger2_awextras [8] = 00000000     // splitter2_merger2_awextras
net:   tb.dut.splitter2_merger2_awburst [2] = 00     // splitter2_merger2_awburst
net:   tb.dut.splitter2_merger2_awaddr [32] = 00000000000000000000000000000000     // splitter2_merger2_awaddr
net:   tb.dut.splitter2_merger2_arvalid [1] = 0     // splitter2_merger2_arvalid
net:   tb.dut.splitter2_merger2_arready [1] = 1     // splitter2_merger2_arready
net:   tb.dut.splitter2_merger2_arlen [8] = 00000000     // splitter2_merger2_arlen
net:   tb.dut.splitter2_merger2_arid [4] = 0000     // splitter2_merger2_arid
net:   tb.dut.splitter2_merger2_arextras [8] = 00000000     // splitter2_merger2_arextras
net:   tb.dut.splitter2_merger2_arburst [2] = 00     // splitter2_merger2_arburst
net:   tb.dut.splitter2_merger2_araddr [32] = 00000000000000000000000000000000     // splitter2_merger2_araddr
net:   tb.dut.splitter2_merger1_wvalid [1] = 0     // splitter2_merger1_wvalid
net:   tb.dut.splitter2_merger1_wstrb [8] = 00000000     // splitter2_merger1_wstrb
net:   tb.dut.splitter2_merger1_wready [1] = 1     // splitter2_merger1_wready
net:   tb.dut.splitter2_merger1_wlast [1] = 0     // splitter2_merger1_wlast
net:   tb.dut.splitter2_merger1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger1_wdata
net:   tb.dut.splitter2_merger1_rvalid [1] = 0     // splitter2_merger1_rvalid
net:   tb.dut.splitter2_merger1_rresp [2] = 00     // splitter2_merger1_rresp
net:   tb.dut.splitter2_merger1_rready [1] = 1     // splitter2_merger1_rready
net:   tb.dut.splitter2_merger1_rlast [1] = 0     // splitter2_merger1_rlast
net:   tb.dut.splitter2_merger1_rid [4] = 0000     // splitter2_merger1_rid
net:   tb.dut.splitter2_merger1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger1_rdata
net:   tb.dut.splitter2_merger1_bvalid [1] = 0     // splitter2_merger1_bvalid
net:   tb.dut.splitter2_merger1_bresp [2] = xx     // splitter2_merger1_bresp
net:   tb.dut.splitter2_merger1_bready [1] = 1     // splitter2_merger1_bready
net:   tb.dut.splitter2_merger1_bid [4] = 0000     // splitter2_merger1_bid
net:   tb.dut.splitter2_merger1_awvalid [1] = 0     // splitter2_merger1_awvalid
net:   tb.dut.splitter2_merger1_awready [1] = 1     // splitter2_merger1_awready
net:   tb.dut.splitter2_merger1_awlen [8] = 00000000     // splitter2_merger1_awlen
net:   tb.dut.splitter2_merger1_awid [4] = 0000     // splitter2_merger1_awid
net:   tb.dut.splitter2_merger1_awextras [8] = 00000000     // splitter2_merger1_awextras
net:   tb.dut.splitter2_merger1_awburst [2] = 00     // splitter2_merger1_awburst
net:   tb.dut.splitter2_merger1_awaddr [32] = 00000000000000000000000000000000     // splitter2_merger1_awaddr
net:   tb.dut.splitter2_merger1_arvalid [1] = 0     // splitter2_merger1_arvalid
net:   tb.dut.splitter2_merger1_arready [1] = 1     // splitter2_merger1_arready
net:   tb.dut.splitter2_merger1_arlen [8] = 00000000     // splitter2_merger1_arlen
net:   tb.dut.splitter2_merger1_arid [4] = 0000     // splitter2_merger1_arid
net:   tb.dut.splitter2_merger1_arextras [8] = 00000000     // splitter2_merger1_arextras
net:   tb.dut.splitter2_merger1_arburst [2] = 00     // splitter2_merger1_arburst
net:   tb.dut.splitter2_merger1_araddr [32] = 00000000000000000000000000000000     // splitter2_merger1_araddr
net:   tb.dut.splitter2_merger0_wvalid [1] = 0     // splitter2_merger0_wvalid
net:   tb.dut.splitter2_merger0_wstrb [8] = 00000000     // splitter2_merger0_wstrb
net:   tb.dut.splitter2_merger0_wready [1] = 1     // splitter2_merger0_wready
net:   tb.dut.splitter2_merger0_wlast [1] = 0     // splitter2_merger0_wlast
net:   tb.dut.splitter2_merger0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger0_wdata
net:   tb.dut.splitter2_merger0_rvalid [1] = 0     // splitter2_merger0_rvalid
net:   tb.dut.splitter2_merger0_rresp [2] = 00     // splitter2_merger0_rresp
net:   tb.dut.splitter2_merger0_rready [1] = 1     // splitter2_merger0_rready
net:   tb.dut.splitter2_merger0_rlast [1] = 0     // splitter2_merger0_rlast
net:   tb.dut.splitter2_merger0_rid [4] = 0000     // splitter2_merger0_rid
net:   tb.dut.splitter2_merger0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter2_merger0_rdata
net:   tb.dut.splitter2_merger0_bvalid [1] = 0     // splitter2_merger0_bvalid
net:   tb.dut.splitter2_merger0_bresp [2] = xx     // splitter2_merger0_bresp
net:   tb.dut.splitter2_merger0_bready [1] = 1     // splitter2_merger0_bready
net:   tb.dut.splitter2_merger0_bid [4] = 0000     // splitter2_merger0_bid
net:   tb.dut.splitter2_merger0_awvalid [1] = 0     // splitter2_merger0_awvalid
net:   tb.dut.splitter2_merger0_awready [1] = 1     // splitter2_merger0_awready
net:   tb.dut.splitter2_merger0_awlen [8] = 00000000     // splitter2_merger0_awlen
net:   tb.dut.splitter2_merger0_awid [4] = 0000     // splitter2_merger0_awid
net:   tb.dut.splitter2_merger0_awextras [8] = 00000000     // splitter2_merger0_awextras
net:   tb.dut.splitter2_merger0_awburst [2] = 00     // splitter2_merger0_awburst
net:   tb.dut.splitter2_merger0_awaddr [32] = 00000000000000000000000000000000     // splitter2_merger0_awaddr
net:   tb.dut.splitter2_merger0_arvalid [1] = 0     // splitter2_merger0_arvalid
net:   tb.dut.splitter2_merger0_arready [1] = 1     // splitter2_merger0_arready
net:   tb.dut.splitter2_merger0_arlen [8] = 00000000     // splitter2_merger0_arlen
net:   tb.dut.splitter2_merger0_arid [4] = 0000     // splitter2_merger0_arid
net:   tb.dut.splitter2_merger0_arextras [8] = 00000000     // splitter2_merger0_arextras
net:   tb.dut.splitter2_merger0_arburst [2] = 00     // splitter2_merger0_arburst
net:   tb.dut.splitter2_merger0_araddr [32] = 00000000000000000000000000000000     // splitter2_merger0_araddr
net:   tb.dut.splitter1_merger3_wvalid [1] = 0     // splitter1_merger3_wvalid
net:   tb.dut.splitter1_merger3_wstrb [8] = 00000000     // splitter1_merger3_wstrb
net:   tb.dut.splitter1_merger3_wready [1] = 1     // splitter1_merger3_wready
net:   tb.dut.splitter1_merger3_wlast [1] = 0     // splitter1_merger3_wlast
net:   tb.dut.splitter1_merger3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger3_wdata
net:   tb.dut.splitter1_merger3_rvalid [1] = 0     // splitter1_merger3_rvalid
net:   tb.dut.splitter1_merger3_rresp [2] = 00     // splitter1_merger3_rresp
net:   tb.dut.splitter1_merger3_rready [1] = 1     // splitter1_merger3_rready
net:   tb.dut.splitter1_merger3_rlast [1] = 0     // splitter1_merger3_rlast
net:   tb.dut.splitter1_merger3_rid [4] = 0000     // splitter1_merger3_rid
net:   tb.dut.splitter1_merger3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger3_rdata
net:   tb.dut.splitter1_merger3_bvalid [1] = 0     // splitter1_merger3_bvalid
net:   tb.dut.splitter1_merger3_bresp [2] = xx     // splitter1_merger3_bresp
net:   tb.dut.splitter1_merger3_bready [1] = 1     // splitter1_merger3_bready
net:   tb.dut.splitter1_merger3_bid [4] = 0000     // splitter1_merger3_bid
net:   tb.dut.splitter1_merger3_awvalid [1] = 0     // splitter1_merger3_awvalid
net:   tb.dut.splitter1_merger3_awready [1] = 1     // splitter1_merger3_awready
net:   tb.dut.splitter1_merger3_awlen [8] = 00000000     // splitter1_merger3_awlen
net:   tb.dut.splitter1_merger3_awid [4] = 0000     // splitter1_merger3_awid
net:   tb.dut.splitter1_merger3_awextras [8] = 00000000     // splitter1_merger3_awextras
net:   tb.dut.splitter1_merger3_awburst [2] = 00     // splitter1_merger3_awburst
net:   tb.dut.splitter1_merger3_awaddr [32] = 00000000000000000000000000000000     // splitter1_merger3_awaddr
net:   tb.dut.splitter1_merger3_arvalid [1] = 0     // splitter1_merger3_arvalid
net:   tb.dut.splitter1_merger3_arready [1] = 1     // splitter1_merger3_arready
net:   tb.dut.splitter1_merger3_arlen [8] = 00000000     // splitter1_merger3_arlen
net:   tb.dut.splitter1_merger3_arid [4] = 0000     // splitter1_merger3_arid
net:   tb.dut.splitter1_merger3_arextras [8] = 00000000     // splitter1_merger3_arextras
net:   tb.dut.splitter1_merger3_arburst [2] = 00     // splitter1_merger3_arburst
net:   tb.dut.splitter1_merger3_araddr [32] = 00000000000000000000000000000000     // splitter1_merger3_araddr
net:   tb.dut.splitter1_merger2_wvalid [1] = 0     // splitter1_merger2_wvalid
net:   tb.dut.splitter1_merger2_wstrb [8] = 00000000     // splitter1_merger2_wstrb
net:   tb.dut.splitter1_merger2_wready [1] = 1     // splitter1_merger2_wready
net:   tb.dut.splitter1_merger2_wlast [1] = 0     // splitter1_merger2_wlast
net:   tb.dut.splitter1_merger2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger2_wdata
net:   tb.dut.splitter1_merger2_rvalid [1] = 0     // splitter1_merger2_rvalid
net:   tb.dut.splitter1_merger2_rresp [2] = 00     // splitter1_merger2_rresp
net:   tb.dut.splitter1_merger2_rready [1] = 1     // splitter1_merger2_rready
net:   tb.dut.splitter1_merger2_rlast [1] = 0     // splitter1_merger2_rlast
net:   tb.dut.splitter1_merger2_rid [4] = 0000     // splitter1_merger2_rid
net:   tb.dut.splitter1_merger2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger2_rdata
net:   tb.dut.splitter1_merger2_bvalid [1] = 0     // splitter1_merger2_bvalid
net:   tb.dut.splitter1_merger2_bresp [2] = xx     // splitter1_merger2_bresp
net:   tb.dut.splitter1_merger2_bready [1] = 1     // splitter1_merger2_bready
net:   tb.dut.splitter1_merger2_bid [4] = 0000     // splitter1_merger2_bid
net:   tb.dut.splitter1_merger2_awvalid [1] = 0     // splitter1_merger2_awvalid
net:   tb.dut.splitter1_merger2_awready [1] = 1     // splitter1_merger2_awready
net:   tb.dut.splitter1_merger2_awlen [8] = 00000000     // splitter1_merger2_awlen
net:   tb.dut.splitter1_merger2_awid [4] = 0000     // splitter1_merger2_awid
net:   tb.dut.splitter1_merger2_awextras [8] = 00000000     // splitter1_merger2_awextras
net:   tb.dut.splitter1_merger2_awburst [2] = 00     // splitter1_merger2_awburst
net:   tb.dut.splitter1_merger2_awaddr [32] = 00000000000000000000000000000000     // splitter1_merger2_awaddr
net:   tb.dut.splitter1_merger2_arvalid [1] = 0     // splitter1_merger2_arvalid
net:   tb.dut.splitter1_merger2_arready [1] = 1     // splitter1_merger2_arready
net:   tb.dut.splitter1_merger2_arlen [8] = 00000000     // splitter1_merger2_arlen
net:   tb.dut.splitter1_merger2_arid [4] = 0000     // splitter1_merger2_arid
net:   tb.dut.splitter1_merger2_arextras [8] = 00000000     // splitter1_merger2_arextras
net:   tb.dut.splitter1_merger2_arburst [2] = 00     // splitter1_merger2_arburst
net:   tb.dut.splitter1_merger2_araddr [32] = 00000000000000000000000000000000     // splitter1_merger2_araddr
net:   tb.dut.splitter1_merger1_wvalid [1] = 0     // splitter1_merger1_wvalid
net:   tb.dut.splitter1_merger1_wstrb [8] = 00000000     // splitter1_merger1_wstrb
net:   tb.dut.splitter1_merger1_wready [1] = 1     // splitter1_merger1_wready
net:   tb.dut.splitter1_merger1_wlast [1] = 0     // splitter1_merger1_wlast
net:   tb.dut.splitter1_merger1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger1_wdata
net:   tb.dut.splitter1_merger1_rvalid [1] = 0     // splitter1_merger1_rvalid
net:   tb.dut.splitter1_merger1_rresp [2] = 00     // splitter1_merger1_rresp
net:   tb.dut.splitter1_merger1_rready [1] = 1     // splitter1_merger1_rready
net:   tb.dut.splitter1_merger1_rlast [1] = 0     // splitter1_merger1_rlast
net:   tb.dut.splitter1_merger1_rid [4] = 0000     // splitter1_merger1_rid
net:   tb.dut.splitter1_merger1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger1_rdata
net:   tb.dut.splitter1_merger1_bvalid [1] = 0     // splitter1_merger1_bvalid
net:   tb.dut.splitter1_merger1_bresp [2] = xx     // splitter1_merger1_bresp
net:   tb.dut.splitter1_merger1_bready [1] = 1     // splitter1_merger1_bready
net:   tb.dut.splitter1_merger1_bid [4] = 0000     // splitter1_merger1_bid
net:   tb.dut.splitter1_merger1_awvalid [1] = 0     // splitter1_merger1_awvalid
net:   tb.dut.splitter1_merger1_awready [1] = 1     // splitter1_merger1_awready
net:   tb.dut.splitter1_merger1_awlen [8] = 00000000     // splitter1_merger1_awlen
net:   tb.dut.splitter1_merger1_awid [4] = 0000     // splitter1_merger1_awid
net:   tb.dut.splitter1_merger1_awextras [8] = 00000000     // splitter1_merger1_awextras
net:   tb.dut.splitter1_merger1_awburst [2] = 00     // splitter1_merger1_awburst
net:   tb.dut.splitter1_merger1_awaddr [32] = 00000000000000000000000000000000     // splitter1_merger1_awaddr
net:   tb.dut.splitter1_merger1_arvalid [1] = 0     // splitter1_merger1_arvalid
net:   tb.dut.splitter1_merger1_arready [1] = 1     // splitter1_merger1_arready
net:   tb.dut.splitter1_merger1_arlen [8] = 00000000     // splitter1_merger1_arlen
net:   tb.dut.splitter1_merger1_arid [4] = 0000     // splitter1_merger1_arid
net:   tb.dut.splitter1_merger1_arextras [8] = 00000000     // splitter1_merger1_arextras
net:   tb.dut.splitter1_merger1_arburst [2] = 00     // splitter1_merger1_arburst
net:   tb.dut.splitter1_merger1_araddr [32] = 00000000000000000000000000000000     // splitter1_merger1_araddr
net:   tb.dut.splitter1_merger0_wvalid [1] = 0     // splitter1_merger0_wvalid
net:   tb.dut.splitter1_merger0_wstrb [8] = 00000000     // splitter1_merger0_wstrb
net:   tb.dut.splitter1_merger0_wready [1] = 1     // splitter1_merger0_wready
net:   tb.dut.splitter1_merger0_wlast [1] = 0     // splitter1_merger0_wlast
net:   tb.dut.splitter1_merger0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger0_wdata
net:   tb.dut.splitter1_merger0_rvalid [1] = 0     // splitter1_merger0_rvalid
net:   tb.dut.splitter1_merger0_rresp [2] = 00     // splitter1_merger0_rresp
net:   tb.dut.splitter1_merger0_rready [1] = 1     // splitter1_merger0_rready
net:   tb.dut.splitter1_merger0_rlast [1] = 0     // splitter1_merger0_rlast
net:   tb.dut.splitter1_merger0_rid [4] = 0000     // splitter1_merger0_rid
net:   tb.dut.splitter1_merger0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter1_merger0_rdata
net:   tb.dut.splitter1_merger0_bvalid [1] = 0     // splitter1_merger0_bvalid
net:   tb.dut.splitter1_merger0_bresp [2] = xx     // splitter1_merger0_bresp
net:   tb.dut.splitter1_merger0_bready [1] = 1     // splitter1_merger0_bready
net:   tb.dut.splitter1_merger0_bid [4] = 0000     // splitter1_merger0_bid
net:   tb.dut.splitter1_merger0_awvalid [1] = 0     // splitter1_merger0_awvalid
net:   tb.dut.splitter1_merger0_awready [1] = 1     // splitter1_merger0_awready
net:   tb.dut.splitter1_merger0_awlen [8] = 00000000     // splitter1_merger0_awlen
net:   tb.dut.splitter1_merger0_awid [4] = 0000     // splitter1_merger0_awid
net:   tb.dut.splitter1_merger0_awextras [8] = 00000000     // splitter1_merger0_awextras
net:   tb.dut.splitter1_merger0_awburst [2] = 00     // splitter1_merger0_awburst
net:   tb.dut.splitter1_merger0_awaddr [32] = 00000000000000000000000000000000     // splitter1_merger0_awaddr
net:   tb.dut.splitter1_merger0_arvalid [1] = 0     // splitter1_merger0_arvalid
net:   tb.dut.splitter1_merger0_arready [1] = 1     // splitter1_merger0_arready
net:   tb.dut.splitter1_merger0_arlen [8] = 00000000     // splitter1_merger0_arlen
net:   tb.dut.splitter1_merger0_arid [4] = 0000     // splitter1_merger0_arid
net:   tb.dut.splitter1_merger0_arextras [8] = 00000000     // splitter1_merger0_arextras
net:   tb.dut.splitter1_merger0_arburst [2] = 00     // splitter1_merger0_arburst
net:   tb.dut.splitter1_merger0_araddr [32] = 00000000000000000000000000000000     // splitter1_merger0_araddr
net:   tb.dut.splitter0_merger3_wvalid [1] = 0     // splitter0_merger3_wvalid
net:   tb.dut.splitter0_merger3_wstrb [8] = 00000000     // splitter0_merger3_wstrb
net:   tb.dut.splitter0_merger3_wready [1] = 1     // splitter0_merger3_wready
net:   tb.dut.splitter0_merger3_wlast [1] = 0     // splitter0_merger3_wlast
net:   tb.dut.splitter0_merger3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger3_wdata
net:   tb.dut.splitter0_merger3_rvalid [1] = 0     // splitter0_merger3_rvalid
net:   tb.dut.splitter0_merger3_rresp [2] = 00     // splitter0_merger3_rresp
net:   tb.dut.splitter0_merger3_rready [1] = 1     // splitter0_merger3_rready
net:   tb.dut.splitter0_merger3_rlast [1] = 0     // splitter0_merger3_rlast
net:   tb.dut.splitter0_merger3_rid [4] = 0000     // splitter0_merger3_rid
net:   tb.dut.splitter0_merger3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger3_rdata
net:   tb.dut.splitter0_merger3_bvalid [1] = 0     // splitter0_merger3_bvalid
net:   tb.dut.splitter0_merger3_bresp [2] = xx     // splitter0_merger3_bresp
net:   tb.dut.splitter0_merger3_bready [1] = 1     // splitter0_merger3_bready
net:   tb.dut.splitter0_merger3_bid [4] = 0000     // splitter0_merger3_bid
net:   tb.dut.splitter0_merger3_awvalid [1] = 0     // splitter0_merger3_awvalid
net:   tb.dut.splitter0_merger3_awready [1] = 1     // splitter0_merger3_awready
net:   tb.dut.splitter0_merger3_awlen [8] = 00000000     // splitter0_merger3_awlen
net:   tb.dut.splitter0_merger3_awid [4] = 0000     // splitter0_merger3_awid
net:   tb.dut.splitter0_merger3_awextras [8] = 00000000     // splitter0_merger3_awextras
net:   tb.dut.splitter0_merger3_awburst [2] = 00     // splitter0_merger3_awburst
net:   tb.dut.splitter0_merger3_awaddr [32] = 00000000000000000000000000000000     // splitter0_merger3_awaddr
net:   tb.dut.splitter0_merger3_arvalid [1] = 0     // splitter0_merger3_arvalid
net:   tb.dut.splitter0_merger3_arready [1] = 1     // splitter0_merger3_arready
net:   tb.dut.splitter0_merger3_arlen [8] = 00000000     // splitter0_merger3_arlen
net:   tb.dut.splitter0_merger3_arid [4] = 0000     // splitter0_merger3_arid
net:   tb.dut.splitter0_merger3_arextras [8] = 00000000     // splitter0_merger3_arextras
net:   tb.dut.splitter0_merger3_arburst [2] = 00     // splitter0_merger3_arburst
net:   tb.dut.splitter0_merger3_araddr [32] = 00000000000000000000000000000000     // splitter0_merger3_araddr
net:   tb.dut.splitter0_merger2_wvalid [1] = 0     // splitter0_merger2_wvalid
net:   tb.dut.splitter0_merger2_wstrb [8] = 00000000     // splitter0_merger2_wstrb
net:   tb.dut.splitter0_merger2_wready [1] = 1     // splitter0_merger2_wready
net:   tb.dut.splitter0_merger2_wlast [1] = 0     // splitter0_merger2_wlast
net:   tb.dut.splitter0_merger2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger2_wdata
net:   tb.dut.splitter0_merger2_rvalid [1] = 0     // splitter0_merger2_rvalid
net:   tb.dut.splitter0_merger2_rresp [2] = 00     // splitter0_merger2_rresp
net:   tb.dut.splitter0_merger2_rready [1] = 1     // splitter0_merger2_rready
net:   tb.dut.splitter0_merger2_rlast [1] = 0     // splitter0_merger2_rlast
net:   tb.dut.splitter0_merger2_rid [4] = 0000     // splitter0_merger2_rid
net:   tb.dut.splitter0_merger2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger2_rdata
net:   tb.dut.splitter0_merger2_bvalid [1] = 0     // splitter0_merger2_bvalid
net:   tb.dut.splitter0_merger2_bresp [2] = xx     // splitter0_merger2_bresp
net:   tb.dut.splitter0_merger2_bready [1] = 1     // splitter0_merger2_bready
net:   tb.dut.splitter0_merger2_bid [4] = 0000     // splitter0_merger2_bid
net:   tb.dut.splitter0_merger2_awvalid [1] = 0     // splitter0_merger2_awvalid
net:   tb.dut.splitter0_merger2_awready [1] = 1     // splitter0_merger2_awready
net:   tb.dut.splitter0_merger2_awlen [8] = 00000000     // splitter0_merger2_awlen
net:   tb.dut.splitter0_merger2_awid [4] = 0000     // splitter0_merger2_awid
net:   tb.dut.splitter0_merger2_awextras [8] = 00000000     // splitter0_merger2_awextras
net:   tb.dut.splitter0_merger2_awburst [2] = 00     // splitter0_merger2_awburst
net:   tb.dut.splitter0_merger2_awaddr [32] = 00000000000000000000000000000000     // splitter0_merger2_awaddr
net:   tb.dut.splitter0_merger2_arvalid [1] = 0     // splitter0_merger2_arvalid
net:   tb.dut.splitter0_merger2_arready [1] = 1     // splitter0_merger2_arready
net:   tb.dut.splitter0_merger2_arlen [8] = 00000000     // splitter0_merger2_arlen
net:   tb.dut.splitter0_merger2_arid [4] = 0000     // splitter0_merger2_arid
net:   tb.dut.splitter0_merger2_arextras [8] = 00000000     // splitter0_merger2_arextras
net:   tb.dut.splitter0_merger2_arburst [2] = 00     // splitter0_merger2_arburst
net:   tb.dut.splitter0_merger2_araddr [32] = 00000000000000000000000000000000     // splitter0_merger2_araddr
net:   tb.dut.splitter0_merger1_wvalid [1] = 0     // splitter0_merger1_wvalid
net:   tb.dut.splitter0_merger1_wstrb [8] = 00000000     // splitter0_merger1_wstrb
net:   tb.dut.splitter0_merger1_wready [1] = 1     // splitter0_merger1_wready
net:   tb.dut.splitter0_merger1_wlast [1] = 0     // splitter0_merger1_wlast
net:   tb.dut.splitter0_merger1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger1_wdata
net:   tb.dut.splitter0_merger1_rvalid [1] = 0     // splitter0_merger1_rvalid
net:   tb.dut.splitter0_merger1_rresp [2] = 00     // splitter0_merger1_rresp
net:   tb.dut.splitter0_merger1_rready [1] = 1     // splitter0_merger1_rready
net:   tb.dut.splitter0_merger1_rlast [1] = 0     // splitter0_merger1_rlast
net:   tb.dut.splitter0_merger1_rid [4] = 0000     // splitter0_merger1_rid
net:   tb.dut.splitter0_merger1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger1_rdata
net:   tb.dut.splitter0_merger1_bvalid [1] = 0     // splitter0_merger1_bvalid
net:   tb.dut.splitter0_merger1_bresp [2] = xx     // splitter0_merger1_bresp
net:   tb.dut.splitter0_merger1_bready [1] = 1     // splitter0_merger1_bready
net:   tb.dut.splitter0_merger1_bid [4] = 0000     // splitter0_merger1_bid
net:   tb.dut.splitter0_merger1_awvalid [1] = 0     // splitter0_merger1_awvalid
net:   tb.dut.splitter0_merger1_awready [1] = 1     // splitter0_merger1_awready
net:   tb.dut.splitter0_merger1_awlen [8] = 00000000     // splitter0_merger1_awlen
net:   tb.dut.splitter0_merger1_awid [4] = 0000     // splitter0_merger1_awid
net:   tb.dut.splitter0_merger1_awextras [8] = 00000000     // splitter0_merger1_awextras
net:   tb.dut.splitter0_merger1_awburst [2] = 00     // splitter0_merger1_awburst
net:   tb.dut.splitter0_merger1_awaddr [32] = 00000000000000000000000000000000     // splitter0_merger1_awaddr
net:   tb.dut.splitter0_merger1_arvalid [1] = 0     // splitter0_merger1_arvalid
net:   tb.dut.splitter0_merger1_arready [1] = 1     // splitter0_merger1_arready
net:   tb.dut.splitter0_merger1_arlen [8] = 00000000     // splitter0_merger1_arlen
net:   tb.dut.splitter0_merger1_arid [4] = 0000     // splitter0_merger1_arid
net:   tb.dut.splitter0_merger1_arextras [8] = 00000000     // splitter0_merger1_arextras
net:   tb.dut.splitter0_merger1_arburst [2] = 00     // splitter0_merger1_arburst
net:   tb.dut.splitter0_merger1_araddr [32] = 00000000000000000000000000000000     // splitter0_merger1_araddr
net:   tb.dut.splitter0_merger0_wvalid [1] = 0     // splitter0_merger0_wvalid
net:   tb.dut.splitter0_merger0_wstrb [8] = 00000000     // splitter0_merger0_wstrb
net:   tb.dut.splitter0_merger0_wready [1] = 1     // splitter0_merger0_wready
net:   tb.dut.splitter0_merger0_wlast [1] = 0     // splitter0_merger0_wlast
net:   tb.dut.splitter0_merger0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger0_wdata
net:   tb.dut.splitter0_merger0_rvalid [1] = 0     // splitter0_merger0_rvalid
net:   tb.dut.splitter0_merger0_rresp [2] = 00     // splitter0_merger0_rresp
net:   tb.dut.splitter0_merger0_rready [1] = 1     // splitter0_merger0_rready
net:   tb.dut.splitter0_merger0_rlast [1] = 0     // splitter0_merger0_rlast
net:   tb.dut.splitter0_merger0_rid [4] = 0000     // splitter0_merger0_rid
net:   tb.dut.splitter0_merger0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // splitter0_merger0_rdata
net:   tb.dut.splitter0_merger0_bvalid [1] = 0     // splitter0_merger0_bvalid
net:   tb.dut.splitter0_merger0_bresp [2] = xx     // splitter0_merger0_bresp
net:   tb.dut.splitter0_merger0_bready [1] = 1     // splitter0_merger0_bready
net:   tb.dut.splitter0_merger0_bid [4] = 0000     // splitter0_merger0_bid
net:   tb.dut.splitter0_merger0_awvalid [1] = 0     // splitter0_merger0_awvalid
net:   tb.dut.splitter0_merger0_awready [1] = 1     // splitter0_merger0_awready
net:   tb.dut.splitter0_merger0_awlen [8] = 00000000     // splitter0_merger0_awlen
net:   tb.dut.splitter0_merger0_awid [4] = 0000     // splitter0_merger0_awid
net:   tb.dut.splitter0_merger0_awextras [8] = 00000000     // splitter0_merger0_awextras
net:   tb.dut.splitter0_merger0_awburst [2] = 00     // splitter0_merger0_awburst
net:   tb.dut.splitter0_merger0_awaddr [32] = 00000000000000000000000000000000     // splitter0_merger0_awaddr
net:   tb.dut.splitter0_merger0_arvalid [1] = 0     // splitter0_merger0_arvalid
net:   tb.dut.splitter0_merger0_arready [1] = 1     // splitter0_merger0_arready
net:   tb.dut.splitter0_merger0_arlen [8] = 00000000     // splitter0_merger0_arlen
net:   tb.dut.splitter0_merger0_arid [4] = 0000     // splitter0_merger0_arid
net:   tb.dut.splitter0_merger0_arextras [8] = 00000000     // splitter0_merger0_arextras
net:   tb.dut.splitter0_merger0_arburst [2] = 00     // splitter0_merger0_arburst
net:   tb.dut.splitter0_merger0_araddr [32] = 00000000000000000000000000000000     // splitter0_merger0_araddr
net:   tb.dut.slv3_wvalid [1] = 0     // slv3_wvalid
net:   tb.dut.slv3_wstrb [8] = 00000000     // slv3_wstrb
net:   tb.dut.slv3_wlast [1] = 0     // slv3_wlast
net:   tb.dut.slv3_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv3_wdata
net:   tb.dut.slv3_rready [1] = 1     // slv3_rready
net:   tb.dut.slv3_bready [1] = 1     // slv3_bready
net:   tb.dut.slv3_awvalid [1] = 0     // slv3_awvalid
net:   tb.dut.slv3_awlen [8] = 00000000     // slv3_awlen
net:   tb.dut.slv3_awid [4] = 0000     // slv3_awid
net:   tb.dut.slv3_awextras [8] = 00000000     // slv3_awextras
net:   tb.dut.slv3_awburst [2] = 00     // slv3_awburst
net:   tb.dut.slv3_awaddr [32] = 00000000000000000000000000000000     // slv3_awaddr
net:   tb.dut.slv3_arvalid [1] = 0     // slv3_arvalid
net:   tb.dut.slv3_arlen [8] = 00000000     // slv3_arlen
net:   tb.dut.slv3_arid [4] = 0000     // slv3_arid
net:   tb.dut.slv3_arextras [8] = 00000000     // slv3_arextras
net:   tb.dut.slv3_arburst [2] = 00     // slv3_arburst
net:   tb.dut.slv3_araddr [32] = 00000000000000000000000000000000     // slv3_araddr
net:   tb.dut.slv2_wvalid [1] = 0     // slv2_wvalid
net:   tb.dut.slv2_wstrb [8] = 00000000     // slv2_wstrb
net:   tb.dut.slv2_wlast [1] = 0     // slv2_wlast
net:   tb.dut.slv2_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv2_wdata
net:   tb.dut.slv2_rready [1] = 1     // slv2_rready
net:   tb.dut.slv2_bready [1] = 1     // slv2_bready
net:   tb.dut.slv2_awvalid [1] = 0     // slv2_awvalid
net:   tb.dut.slv2_awlen [8] = 00000000     // slv2_awlen
net:   tb.dut.slv2_awid [4] = 0000     // slv2_awid
net:   tb.dut.slv2_awextras [8] = 00000000     // slv2_awextras
net:   tb.dut.slv2_awburst [2] = 00     // slv2_awburst
net:   tb.dut.slv2_awaddr [32] = 00000000000000000000000000000000     // slv2_awaddr
net:   tb.dut.slv2_arvalid [1] = 0     // slv2_arvalid
net:   tb.dut.slv2_arlen [8] = 00000000     // slv2_arlen
net:   tb.dut.slv2_arid [4] = 0000     // slv2_arid
net:   tb.dut.slv2_arextras [8] = 00000000     // slv2_arextras
net:   tb.dut.slv2_arburst [2] = 00     // slv2_arburst
net:   tb.dut.slv2_araddr [32] = 00000000000000000000000000000000     // slv2_araddr
net:   tb.dut.slv1_wvalid [1] = 0     // slv1_wvalid
net:   tb.dut.slv1_wstrb [8] = 00000000     // slv1_wstrb
net:   tb.dut.slv1_wlast [1] = 0     // slv1_wlast
net:   tb.dut.slv1_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv1_wdata
net:   tb.dut.slv1_rready [1] = 1     // slv1_rready
net:   tb.dut.slv1_bready [1] = 1     // slv1_bready
net:   tb.dut.slv1_awvalid [1] = 0     // slv1_awvalid
net:   tb.dut.slv1_awlen [8] = 00000000     // slv1_awlen
net:   tb.dut.slv1_awid [4] = 0000     // slv1_awid
net:   tb.dut.slv1_awextras [8] = 00000000     // slv1_awextras
net:   tb.dut.slv1_awburst [2] = 00     // slv1_awburst
net:   tb.dut.slv1_awaddr [32] = 00000000000000000000000000000000     // slv1_awaddr
net:   tb.dut.slv1_arvalid [1] = 0     // slv1_arvalid
net:   tb.dut.slv1_arlen [8] = 00000000     // slv1_arlen
net:   tb.dut.slv1_arid [4] = 0000     // slv1_arid
net:   tb.dut.slv1_arextras [8] = 00000000     // slv1_arextras
net:   tb.dut.slv1_arburst [2] = 00     // slv1_arburst
net:   tb.dut.slv1_araddr [32] = 00000000000000000000000000000000     // slv1_araddr
net:   tb.dut.slv0_wvalid [1] = 0     // slv0_wvalid
net:   tb.dut.slv0_wstrb [8] = 00000000     // slv0_wstrb
net:   tb.dut.slv0_wlast [1] = 0     // slv0_wlast
net:   tb.dut.slv0_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // slv0_wdata
net:   tb.dut.slv0_rready [1] = 1     // slv0_rready
net:   tb.dut.slv0_bready [1] = 1     // slv0_bready
net:   tb.dut.slv0_awvalid [1] = 0     // slv0_awvalid
net:   tb.dut.slv0_awlen [8] = 00000000     // slv0_awlen
net:   tb.dut.slv0_awid [4] = 0000     // slv0_awid
net:   tb.dut.slv0_awextras [8] = 00000000     // slv0_awextras
net:   tb.dut.slv0_awburst [2] = 00     // slv0_awburst
net:   tb.dut.slv0_awaddr [32] = 00000000000000000000000000000000     // slv0_awaddr
net:   tb.dut.slv0_arvalid [1] = 0     // slv0_arvalid
net:   tb.dut.slv0_arlen [8] = 00000000     // slv0_arlen
net:   tb.dut.slv0_arid [4] = 0000     // slv0_arid
net:   tb.dut.slv0_arextras [8] = 00000000     // slv0_arextras
net:   tb.dut.slv0_arburst [2] = 00     // slv0_arburst
net:   tb.dut.slv0_araddr [32] = 00000000000000000000000000000000     // slv0_araddr
net:   tb.dut.mst3_rvalid [1] = 0     // mst3_rvalid
net:   tb.dut.mst3_rresp [2] = 00     // mst3_rresp
net:   tb.dut.mst3_rlast [1] = 0     // mst3_rlast
net:   tb.dut.mst3_rid [4] = 0000     // mst3_rid
net:   tb.dut.mst3_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst3_rdata
net:   tb.dut.mst3_bvalid [1] = 0     // mst3_bvalid
net:   tb.dut.mst3_bresp [2] = 00     // mst3_bresp
net:   tb.dut.mst3_bid [4] = 0000     // mst3_bid
net:   tb.dut.mst3_awready [1] = 1     // mst3_awready
net:   tb.dut.mst3_arready [1] = 1     // mst3_arready
net:   tb.dut.mst2_rvalid [1] = 0     // mst2_rvalid
net:   tb.dut.mst2_rresp [2] = 00     // mst2_rresp
net:   tb.dut.mst2_rlast [1] = 0     // mst2_rlast
net:   tb.dut.mst2_rid [4] = 0000     // mst2_rid
net:   tb.dut.mst2_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst2_rdata
net:   tb.dut.mst2_bvalid [1] = 0     // mst2_bvalid
net:   tb.dut.mst2_bresp [2] = 00     // mst2_bresp
net:   tb.dut.mst2_bid [4] = 0000     // mst2_bid
net:   tb.dut.mst2_awready [1] = 1     // mst2_awready
net:   tb.dut.mst2_arready [1] = 1     // mst2_arready
net:   tb.dut.mst1_rvalid [1] = 0     // mst1_rvalid
net:   tb.dut.mst1_rresp [2] = 00     // mst1_rresp
net:   tb.dut.mst1_rlast [1] = 0     // mst1_rlast
net:   tb.dut.mst1_rid [4] = 0000     // mst1_rid
net:   tb.dut.mst1_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst1_rdata
net:   tb.dut.mst1_bvalid [1] = 0     // mst1_bvalid
net:   tb.dut.mst1_bresp [2] = 00     // mst1_bresp
net:   tb.dut.mst1_bid [4] = 0000     // mst1_bid
net:   tb.dut.mst1_awready [1] = 1     // mst1_awready
net:   tb.dut.mst1_arready [1] = 1     // mst1_arready
net:   tb.dut.mst0_rvalid [1] = 0     // mst0_rvalid
net:   tb.dut.mst0_rresp [2] = 00     // mst0_rresp
net:   tb.dut.mst0_rlast [1] = 0     // mst0_rlast
net:   tb.dut.mst0_rid [4] = 0000     // mst0_rid
net:   tb.dut.mst0_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // mst0_rdata
net:   tb.dut.mst0_bvalid [1] = 0     // mst0_bvalid
net:   tb.dut.mst0_bresp [2] = 00     // mst0_bresp
net:   tb.dut.mst0_bid [4] = 0000     // mst0_bid
net:   tb.dut.mst0_awready [1] = 1     // mst0_awready
net:   tb.dut.mst0_arready [1] = 1     // mst0_arready
reg:   testnametestname
son:   tb.dut.merger0
son:   tb.dut.merger1
son:   tb.dut.merger2
son:   tb.dut.merger3
son:   tb.dut.splitter0
son:   tb.dut.splitter1
son:   tb.dut.splitter2
son:   tb.dut.splitter3
module: axi_4_merger tb.dut.merger0
net:   tb.dut.merger0.arready [1] = 0     // arready
net:   tb.dut.merger0.awready [1] = 0     // awready
net:   tb.dut.merger0.bid [4] = xxxx     // bid
net:   tb.dut.merger0.bresp [2] = xx     // bresp
net:   tb.dut.merger0.bvalid [1] = 0     // bvalid
net:   tb.dut.merger0.clk [1] = 1     // clk
net:   tb.dut.merger0.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger0.rid [4] = xxxx     // rid
net:   tb.dut.merger0.rlast [1] = x     // rlast
net:   tb.dut.merger0.rresp [2] = xx     // rresp
net:   tb.dut.merger0.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.rvalid [1] = 0     // rvalid
net:   tb.dut.merger0.wready [1] = x     // wready
net:   tb.dut.merger0.wvalid [1] = 0     // wvalid
net:   tb.dut.merger0.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger0.wlast [1] = 0     // wlast
net:   tb.dut.merger0.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger0.rready [1] = 1     // rready
net:   tb.dut.merger0.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger0.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger0.d_wready [1] = 1     // d_wready
net:   tb.dut.merger0.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger0.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger0.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger0.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger0.d_rready [1] = 1     // d_rready
net:   tb.dut.merger0.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger0.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger0.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger0.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger0.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger0.d_bready [1] = 1     // d_bready
net:   tb.dut.merger0.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger0.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger0.d_awready [1] = 1     // d_awready
net:   tb.dut.merger0.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger0.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger0.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger0.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger0.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger0.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger0.d_arready [1] = 1     // d_arready
net:   tb.dut.merger0.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger0.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger0.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger0.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger0.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger0.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger0.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger0.c_wready [1] = 1     // c_wready
net:   tb.dut.merger0.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger0.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger0.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger0.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger0.c_rready [1] = 1     // c_rready
net:   tb.dut.merger0.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger0.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger0.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger0.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger0.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger0.c_bready [1] = 1     // c_bready
net:   tb.dut.merger0.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger0.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger0.c_awready [1] = 1     // c_awready
net:   tb.dut.merger0.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger0.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger0.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger0.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger0.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger0.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger0.c_arready [1] = 1     // c_arready
net:   tb.dut.merger0.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger0.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger0.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger0.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger0.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger0.bready [1] = 1     // bready
net:   tb.dut.merger0.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger0.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger0.b_wready [1] = 1     // b_wready
net:   tb.dut.merger0.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger0.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger0.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger0.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger0.b_rready [1] = 1     // b_rready
net:   tb.dut.merger0.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger0.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger0.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger0.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger0.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger0.b_bready [1] = 1     // b_bready
net:   tb.dut.merger0.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger0.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger0.b_awready [1] = 1     // b_awready
net:   tb.dut.merger0.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger0.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger0.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger0.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger0.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger0.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger0.b_arready [1] = 1     // b_arready
net:   tb.dut.merger0.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger0.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger0.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger0.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger0.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger0.awvalid [1] = 0     // awvalid
net:   tb.dut.merger0.awlen [8] = 00000000     // awlen
net:   tb.dut.merger0.awid [4] = 0000     // awid
net:   tb.dut.merger0.awextras [8] = 00000000     // awextras
net:   tb.dut.merger0.awburst [2] = 00     // awburst
net:   tb.dut.merger0.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger0.arvalid [1] = 0     // arvalid
net:   tb.dut.merger0.arlen [8] = 00000000     // arlen
net:   tb.dut.merger0.arid [4] = 0000     // arid
net:   tb.dut.merger0.arextras [8] = 00000000     // arextras
net:   tb.dut.merger0.arburst [2] = 00     // arburst
net:   tb.dut.merger0.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger0.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger0.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger0.a_wready [1] = 1     // a_wready
net:   tb.dut.merger0.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger0.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger0.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger0.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger0.a_rready [1] = 1     // a_rready
net:   tb.dut.merger0.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger0.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger0.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger0.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger0.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger0.a_bready [1] = 1     // a_bready
net:   tb.dut.merger0.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger0.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger0.a_awready [1] = 1     // a_awready
net:   tb.dut.merger0.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger0.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger0.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger0.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger0.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger0.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger0.a_arready [1] = 1     // a_arready
net:   tb.dut.merger0.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger0.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger0.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger0.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger0.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merger0.axi_rd_4_merger
son:   tb.dut.merger0.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merger0.axi_rd_4_merger
net:   tb.dut.merger0.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merger0.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger0.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merger0.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merger0.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merger0.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger0.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merger0.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger0.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merger0.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger0.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merger0.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merger0.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merger0.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merger0.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger0.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merger0.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merger0.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merger0.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merger0.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merger0.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merger0.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merger0.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merger0.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merger0.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merger0.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger0.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merger0.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger0.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger0.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merger0.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger0.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger0.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger0.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger0.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger0.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merger0.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger0.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merger0.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger0.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger0.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merger0.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger0.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger0.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger0.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger0.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger0.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merger0.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger0.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merger0.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger0.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger0.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merger0.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger0.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger0.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger0.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger0.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger0.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merger0.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merger0.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merger0.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merger0.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merger0.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merger0.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger0.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger0.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merger0.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger0.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger0.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merger0.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger0.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger0.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger0.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger0.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger0.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merger0.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merger0.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merger0.axi_wr_4_merger
net:   tb.dut.merger0.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger0.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger0.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger0.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merger0.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merger0.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merger0.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger0.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger0.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger0.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merger0.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merger0.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merger0.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merger0.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger0.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger0.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger0.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger0.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger0.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger0.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merger0.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merger0.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merger0.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merger0.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merger0.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merger0.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merger0.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merger0.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merger0.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merger0.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merger0.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merger0.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merger0.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merger0.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merger0.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merger0.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merger0.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merger0.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merger0.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merger0.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merger0.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger0.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merger0.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger0.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merger0.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merger0.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merger0.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merger0.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merger0.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merger0.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merger0.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merger0.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger0.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger0.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merger0.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merger0.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merger0.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger0.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merger0.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merger0.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merger0.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger0.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merger0.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger0.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger0.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger0.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger0.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merger0.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger0.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger0.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merger0.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merger0.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merger0.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger0.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merger0.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merger0.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merger0.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger0.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merger0.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger0.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger0.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger0.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger0.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merger0.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merger0.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger0.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger0.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merger0.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merger0.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merger0.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger0.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merger0.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merger0.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merger0.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merger0.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merger0.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger0.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merger0.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger0.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger0.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger0.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger0.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merger0.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merger0.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merger0.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merger0.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merger0.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merger0.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger0.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger0.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger0.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merger0.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merger0.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merger0.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger0.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merger0.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merger0.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merger0.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger0.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merger0.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger0.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger0.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger0.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger0.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merger0.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merger0.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merger0.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger0.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger0.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger0.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger0.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merger1
net:   tb.dut.merger1.arready [1] = 0     // arready
net:   tb.dut.merger1.awready [1] = 0     // awready
net:   tb.dut.merger1.bid [4] = xxxx     // bid
net:   tb.dut.merger1.bresp [2] = xx     // bresp
net:   tb.dut.merger1.bvalid [1] = 0     // bvalid
net:   tb.dut.merger1.clk [1] = 1     // clk
net:   tb.dut.merger1.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger1.rid [4] = xxxx     // rid
net:   tb.dut.merger1.rlast [1] = x     // rlast
net:   tb.dut.merger1.rresp [2] = xx     // rresp
net:   tb.dut.merger1.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.rvalid [1] = 0     // rvalid
net:   tb.dut.merger1.wready [1] = x     // wready
net:   tb.dut.merger1.wvalid [1] = 0     // wvalid
net:   tb.dut.merger1.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger1.wlast [1] = 0     // wlast
net:   tb.dut.merger1.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger1.rready [1] = 1     // rready
net:   tb.dut.merger1.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger1.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger1.d_wready [1] = 1     // d_wready
net:   tb.dut.merger1.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger1.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger1.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger1.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger1.d_rready [1] = 1     // d_rready
net:   tb.dut.merger1.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger1.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger1.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger1.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger1.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger1.d_bready [1] = 1     // d_bready
net:   tb.dut.merger1.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger1.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger1.d_awready [1] = 1     // d_awready
net:   tb.dut.merger1.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger1.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger1.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger1.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger1.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger1.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger1.d_arready [1] = 1     // d_arready
net:   tb.dut.merger1.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger1.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger1.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger1.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger1.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger1.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger1.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger1.c_wready [1] = 1     // c_wready
net:   tb.dut.merger1.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger1.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger1.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger1.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger1.c_rready [1] = 1     // c_rready
net:   tb.dut.merger1.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger1.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger1.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger1.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger1.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger1.c_bready [1] = 1     // c_bready
net:   tb.dut.merger1.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger1.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger1.c_awready [1] = 1     // c_awready
net:   tb.dut.merger1.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger1.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger1.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger1.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger1.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger1.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger1.c_arready [1] = 1     // c_arready
net:   tb.dut.merger1.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger1.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger1.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger1.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger1.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger1.bready [1] = 1     // bready
net:   tb.dut.merger1.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger1.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger1.b_wready [1] = 1     // b_wready
net:   tb.dut.merger1.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger1.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger1.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger1.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger1.b_rready [1] = 1     // b_rready
net:   tb.dut.merger1.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger1.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger1.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger1.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger1.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger1.b_bready [1] = 1     // b_bready
net:   tb.dut.merger1.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger1.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger1.b_awready [1] = 1     // b_awready
net:   tb.dut.merger1.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger1.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger1.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger1.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger1.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger1.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger1.b_arready [1] = 1     // b_arready
net:   tb.dut.merger1.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger1.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger1.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger1.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger1.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger1.awvalid [1] = 0     // awvalid
net:   tb.dut.merger1.awlen [8] = 00000000     // awlen
net:   tb.dut.merger1.awid [4] = 0000     // awid
net:   tb.dut.merger1.awextras [8] = 00000000     // awextras
net:   tb.dut.merger1.awburst [2] = 00     // awburst
net:   tb.dut.merger1.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger1.arvalid [1] = 0     // arvalid
net:   tb.dut.merger1.arlen [8] = 00000000     // arlen
net:   tb.dut.merger1.arid [4] = 0000     // arid
net:   tb.dut.merger1.arextras [8] = 00000000     // arextras
net:   tb.dut.merger1.arburst [2] = 00     // arburst
net:   tb.dut.merger1.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger1.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger1.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger1.a_wready [1] = 1     // a_wready
net:   tb.dut.merger1.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger1.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger1.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger1.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger1.a_rready [1] = 1     // a_rready
net:   tb.dut.merger1.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger1.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger1.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger1.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger1.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger1.a_bready [1] = 1     // a_bready
net:   tb.dut.merger1.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger1.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger1.a_awready [1] = 1     // a_awready
net:   tb.dut.merger1.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger1.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger1.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger1.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger1.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger1.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger1.a_arready [1] = 1     // a_arready
net:   tb.dut.merger1.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger1.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger1.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger1.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger1.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merger1.axi_rd_4_merger
son:   tb.dut.merger1.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merger1.axi_rd_4_merger
net:   tb.dut.merger1.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merger1.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger1.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merger1.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merger1.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merger1.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger1.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merger1.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger1.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merger1.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger1.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merger1.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merger1.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merger1.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merger1.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger1.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merger1.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merger1.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merger1.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merger1.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merger1.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merger1.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merger1.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merger1.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merger1.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merger1.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger1.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merger1.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger1.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger1.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merger1.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger1.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger1.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger1.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger1.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger1.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merger1.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger1.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merger1.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger1.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger1.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merger1.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger1.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger1.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger1.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger1.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger1.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merger1.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger1.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merger1.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger1.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger1.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merger1.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger1.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger1.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger1.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger1.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger1.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merger1.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merger1.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merger1.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merger1.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merger1.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merger1.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger1.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger1.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merger1.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger1.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger1.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merger1.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger1.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger1.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger1.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger1.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger1.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merger1.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merger1.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merger1.axi_wr_4_merger
net:   tb.dut.merger1.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger1.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger1.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger1.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merger1.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merger1.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merger1.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger1.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger1.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger1.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merger1.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merger1.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merger1.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merger1.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger1.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger1.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger1.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger1.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger1.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger1.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merger1.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merger1.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merger1.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merger1.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merger1.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merger1.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merger1.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merger1.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merger1.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merger1.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merger1.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merger1.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merger1.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merger1.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merger1.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merger1.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merger1.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merger1.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merger1.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merger1.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merger1.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger1.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merger1.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger1.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merger1.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merger1.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merger1.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merger1.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merger1.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merger1.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merger1.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merger1.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger1.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger1.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merger1.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merger1.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merger1.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger1.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merger1.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merger1.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merger1.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger1.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merger1.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger1.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger1.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger1.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger1.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merger1.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger1.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger1.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merger1.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merger1.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merger1.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger1.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merger1.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merger1.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merger1.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger1.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merger1.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger1.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger1.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger1.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger1.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merger1.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merger1.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger1.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger1.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merger1.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merger1.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merger1.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger1.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merger1.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merger1.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merger1.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merger1.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merger1.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger1.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merger1.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger1.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger1.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger1.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger1.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merger1.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merger1.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merger1.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merger1.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merger1.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merger1.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger1.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger1.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger1.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merger1.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merger1.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merger1.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger1.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merger1.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merger1.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merger1.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger1.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merger1.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger1.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger1.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger1.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger1.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merger1.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merger1.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merger1.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger1.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger1.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger1.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger1.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merger2
net:   tb.dut.merger2.arready [1] = 0     // arready
net:   tb.dut.merger2.awready [1] = 0     // awready
net:   tb.dut.merger2.bid [4] = xxxx     // bid
net:   tb.dut.merger2.bresp [2] = xx     // bresp
net:   tb.dut.merger2.bvalid [1] = 0     // bvalid
net:   tb.dut.merger2.clk [1] = 1     // clk
net:   tb.dut.merger2.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger2.rid [4] = xxxx     // rid
net:   tb.dut.merger2.rlast [1] = x     // rlast
net:   tb.dut.merger2.rresp [2] = xx     // rresp
net:   tb.dut.merger2.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.rvalid [1] = 0     // rvalid
net:   tb.dut.merger2.wready [1] = x     // wready
net:   tb.dut.merger2.wvalid [1] = 0     // wvalid
net:   tb.dut.merger2.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger2.wlast [1] = 0     // wlast
net:   tb.dut.merger2.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger2.rready [1] = 1     // rready
net:   tb.dut.merger2.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger2.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger2.d_wready [1] = 1     // d_wready
net:   tb.dut.merger2.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger2.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger2.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger2.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger2.d_rready [1] = 1     // d_rready
net:   tb.dut.merger2.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger2.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger2.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger2.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger2.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger2.d_bready [1] = 1     // d_bready
net:   tb.dut.merger2.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger2.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger2.d_awready [1] = 1     // d_awready
net:   tb.dut.merger2.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger2.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger2.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger2.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger2.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger2.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger2.d_arready [1] = 1     // d_arready
net:   tb.dut.merger2.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger2.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger2.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger2.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger2.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger2.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger2.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger2.c_wready [1] = 1     // c_wready
net:   tb.dut.merger2.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger2.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger2.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger2.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger2.c_rready [1] = 1     // c_rready
net:   tb.dut.merger2.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger2.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger2.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger2.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger2.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger2.c_bready [1] = 1     // c_bready
net:   tb.dut.merger2.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger2.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger2.c_awready [1] = 1     // c_awready
net:   tb.dut.merger2.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger2.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger2.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger2.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger2.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger2.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger2.c_arready [1] = 1     // c_arready
net:   tb.dut.merger2.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger2.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger2.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger2.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger2.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger2.bready [1] = 1     // bready
net:   tb.dut.merger2.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger2.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger2.b_wready [1] = 1     // b_wready
net:   tb.dut.merger2.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger2.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger2.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger2.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger2.b_rready [1] = 1     // b_rready
net:   tb.dut.merger2.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger2.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger2.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger2.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger2.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger2.b_bready [1] = 1     // b_bready
net:   tb.dut.merger2.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger2.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger2.b_awready [1] = 1     // b_awready
net:   tb.dut.merger2.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger2.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger2.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger2.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger2.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger2.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger2.b_arready [1] = 1     // b_arready
net:   tb.dut.merger2.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger2.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger2.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger2.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger2.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger2.awvalid [1] = 0     // awvalid
net:   tb.dut.merger2.awlen [8] = 00000000     // awlen
net:   tb.dut.merger2.awid [4] = 0000     // awid
net:   tb.dut.merger2.awextras [8] = 00000000     // awextras
net:   tb.dut.merger2.awburst [2] = 00     // awburst
net:   tb.dut.merger2.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger2.arvalid [1] = 0     // arvalid
net:   tb.dut.merger2.arlen [8] = 00000000     // arlen
net:   tb.dut.merger2.arid [4] = 0000     // arid
net:   tb.dut.merger2.arextras [8] = 00000000     // arextras
net:   tb.dut.merger2.arburst [2] = 00     // arburst
net:   tb.dut.merger2.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger2.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger2.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger2.a_wready [1] = 1     // a_wready
net:   tb.dut.merger2.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger2.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger2.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger2.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger2.a_rready [1] = 1     // a_rready
net:   tb.dut.merger2.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger2.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger2.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger2.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger2.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger2.a_bready [1] = 1     // a_bready
net:   tb.dut.merger2.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger2.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger2.a_awready [1] = 1     // a_awready
net:   tb.dut.merger2.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger2.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger2.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger2.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger2.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger2.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger2.a_arready [1] = 1     // a_arready
net:   tb.dut.merger2.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger2.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger2.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger2.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger2.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merger2.axi_rd_4_merger
son:   tb.dut.merger2.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merger2.axi_rd_4_merger
net:   tb.dut.merger2.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merger2.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger2.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merger2.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merger2.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merger2.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger2.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merger2.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger2.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merger2.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger2.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merger2.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merger2.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merger2.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merger2.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger2.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merger2.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merger2.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merger2.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merger2.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merger2.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merger2.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merger2.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merger2.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merger2.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merger2.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger2.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merger2.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger2.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger2.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merger2.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger2.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger2.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger2.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger2.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger2.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merger2.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger2.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merger2.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger2.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger2.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merger2.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger2.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger2.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger2.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger2.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger2.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merger2.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger2.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merger2.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger2.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger2.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merger2.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger2.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger2.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger2.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger2.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger2.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merger2.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merger2.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merger2.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merger2.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merger2.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merger2.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger2.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger2.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merger2.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger2.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger2.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merger2.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger2.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger2.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger2.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger2.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger2.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merger2.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merger2.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merger2.axi_wr_4_merger
net:   tb.dut.merger2.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger2.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger2.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger2.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merger2.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merger2.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merger2.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger2.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger2.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger2.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merger2.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merger2.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merger2.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merger2.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger2.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger2.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger2.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger2.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger2.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger2.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merger2.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merger2.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merger2.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merger2.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merger2.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merger2.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merger2.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merger2.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merger2.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merger2.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merger2.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merger2.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merger2.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merger2.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merger2.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merger2.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merger2.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merger2.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merger2.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merger2.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merger2.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger2.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merger2.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger2.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merger2.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merger2.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merger2.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merger2.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merger2.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merger2.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merger2.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merger2.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger2.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger2.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merger2.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merger2.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merger2.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger2.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merger2.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merger2.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merger2.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger2.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merger2.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger2.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger2.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger2.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger2.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merger2.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger2.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger2.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merger2.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merger2.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merger2.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger2.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merger2.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merger2.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merger2.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger2.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merger2.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger2.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger2.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger2.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger2.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merger2.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merger2.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger2.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger2.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merger2.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merger2.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merger2.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger2.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merger2.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merger2.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merger2.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merger2.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merger2.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger2.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merger2.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger2.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger2.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger2.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger2.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merger2.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merger2.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merger2.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merger2.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merger2.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merger2.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger2.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger2.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger2.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merger2.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merger2.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merger2.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger2.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merger2.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merger2.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merger2.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger2.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merger2.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger2.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger2.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger2.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger2.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merger2.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merger2.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merger2.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger2.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger2.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger2.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger2.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_merger tb.dut.merger3
net:   tb.dut.merger3.arready [1] = 0     // arready
net:   tb.dut.merger3.awready [1] = 0     // awready
net:   tb.dut.merger3.bid [4] = xxxx     // bid
net:   tb.dut.merger3.bresp [2] = xx     // bresp
net:   tb.dut.merger3.bvalid [1] = 0     // bvalid
net:   tb.dut.merger3.clk [1] = 1     // clk
net:   tb.dut.merger3.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger3.rid [4] = xxxx     // rid
net:   tb.dut.merger3.rlast [1] = x     // rlast
net:   tb.dut.merger3.rresp [2] = xx     // rresp
net:   tb.dut.merger3.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.rvalid [1] = 0     // rvalid
net:   tb.dut.merger3.wready [1] = x     // wready
net:   tb.dut.merger3.wvalid [1] = 0     // wvalid
net:   tb.dut.merger3.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger3.wlast [1] = 0     // wlast
net:   tb.dut.merger3.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger3.rready [1] = 1     // rready
net:   tb.dut.merger3.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger3.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger3.d_wready [1] = 1     // d_wready
net:   tb.dut.merger3.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger3.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger3.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger3.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger3.d_rready [1] = 1     // d_rready
net:   tb.dut.merger3.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger3.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger3.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger3.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger3.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger3.d_bready [1] = 1     // d_bready
net:   tb.dut.merger3.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger3.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger3.d_awready [1] = 1     // d_awready
net:   tb.dut.merger3.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger3.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger3.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger3.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger3.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger3.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger3.d_arready [1] = 1     // d_arready
net:   tb.dut.merger3.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger3.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger3.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger3.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger3.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger3.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger3.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger3.c_wready [1] = 1     // c_wready
net:   tb.dut.merger3.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger3.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger3.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger3.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger3.c_rready [1] = 1     // c_rready
net:   tb.dut.merger3.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger3.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger3.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger3.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger3.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger3.c_bready [1] = 1     // c_bready
net:   tb.dut.merger3.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger3.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger3.c_awready [1] = 1     // c_awready
net:   tb.dut.merger3.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger3.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger3.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger3.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger3.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger3.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger3.c_arready [1] = 1     // c_arready
net:   tb.dut.merger3.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger3.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger3.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger3.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger3.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger3.bready [1] = 1     // bready
net:   tb.dut.merger3.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger3.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger3.b_wready [1] = 1     // b_wready
net:   tb.dut.merger3.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger3.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger3.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger3.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger3.b_rready [1] = 1     // b_rready
net:   tb.dut.merger3.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger3.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger3.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger3.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger3.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger3.b_bready [1] = 1     // b_bready
net:   tb.dut.merger3.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger3.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger3.b_awready [1] = 1     // b_awready
net:   tb.dut.merger3.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger3.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger3.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger3.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger3.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger3.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger3.b_arready [1] = 1     // b_arready
net:   tb.dut.merger3.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger3.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger3.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger3.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger3.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger3.awvalid [1] = 0     // awvalid
net:   tb.dut.merger3.awlen [8] = 00000000     // awlen
net:   tb.dut.merger3.awid [4] = 0000     // awid
net:   tb.dut.merger3.awextras [8] = 00000000     // awextras
net:   tb.dut.merger3.awburst [2] = 00     // awburst
net:   tb.dut.merger3.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger3.arvalid [1] = 0     // arvalid
net:   tb.dut.merger3.arlen [8] = 00000000     // arlen
net:   tb.dut.merger3.arid [4] = 0000     // arid
net:   tb.dut.merger3.arextras [8] = 00000000     // arextras
net:   tb.dut.merger3.arburst [2] = 00     // arburst
net:   tb.dut.merger3.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger3.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger3.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger3.a_wready [1] = 1     // a_wready
net:   tb.dut.merger3.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger3.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger3.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger3.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger3.a_rready [1] = 1     // a_rready
net:   tb.dut.merger3.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger3.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger3.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger3.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger3.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger3.a_bready [1] = 1     // a_bready
net:   tb.dut.merger3.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger3.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger3.a_awready [1] = 1     // a_awready
net:   tb.dut.merger3.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger3.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger3.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger3.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger3.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger3.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger3.a_arready [1] = 1     // a_arready
net:   tb.dut.merger3.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger3.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger3.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger3.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger3.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.merger3.axi_rd_4_merger
son:   tb.dut.merger3.axi_wr_4_merger
module: axi_rd_4_merger tb.dut.merger3.axi_rd_4_merger
net:   tb.dut.merger3.axi_rd_4_merger.a_arready [1] = 1     // a_arready
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_readout [1] = 0     // a_ids_readout
net:   tb.dut.merger3.axi_rd_4_merger.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.merger3.axi_rd_4_merger.arready [1] = 0     // arready
net:   tb.dut.merger3.axi_rd_4_merger.arvalid [1] = 0     // arvalid
net:   tb.dut.merger3.axi_rd_4_merger.b_arready [1] = 1     // b_arready
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_readout [1] = 0     // b_ids_readout
net:   tb.dut.merger3.axi_rd_4_merger.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.merger3.axi_rd_4_merger.c_arready [1] = 1     // c_arready
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_readout [1] = 0     // c_ids_readout
net:   tb.dut.merger3.axi_rd_4_merger.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.merger3.axi_rd_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.d_arready [1] = 1     // d_arready
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_readout [1] = 0     // d_ids_readout
net:   tb.dut.merger3.axi_rd_4_merger.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.merger3.axi_rd_4_merger.id5 [4] = 0101     // id5
net:   tb.dut.merger3.axi_rd_4_merger.id6 [4] = 0110     // id6
net:   tb.dut.merger3.axi_rd_4_merger.id7 [4] = 0111     // id7
net:   tb.dut.merger3.axi_rd_4_merger.id8 [4] = 1000     // id8
net:   tb.dut.merger3.axi_rd_4_merger.rdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // rdata
net:   tb.dut.merger3.axi_rd_4_merger.rid [4] = xxxx     // rid
net:   tb.dut.merger3.axi_rd_4_merger.rlast [1] = x     // rlast
net:   tb.dut.merger3.axi_rd_4_merger.rresp [2] = xx     // rresp
net:   tb.dut.merger3.axi_rd_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.rvalid [1] = 0     // rvalid
net:   tb.dut.merger3.axi_rd_4_merger.take_b [1] = 0     // take_b
net:   tb.dut.merger3.axi_rd_4_merger.take_c [1] = 0     // take_c
net:   tb.dut.merger3.axi_rd_4_merger.take_d [1] = 0     // take_d
net:   tb.dut.merger3.axi_rd_4_merger.take_a [1] = 0     // take_a
net:   tb.dut.merger3.axi_rd_4_merger.rready [1] = 1     // rready
net:   tb.dut.merger3.axi_rd_4_merger.panic_d_ids_fifo [1] = 0     // panic_d_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.panic_c_ids_fifo [1] = 0     // panic_c_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.panic_b_ids_fifo [1] = 0     // panic_b_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.panic_a_ids_fifo [1] = 0     // panic_a_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.orig_arid [4] = 0000     // orig_arid
net:   tb.dut.merger3.axi_rd_4_merger.new_d_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_d_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.new_c_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_c_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.new_b_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_b_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.new_a_ar_entry [56] = 00000000000000000000000000000000000000000000000000000000     // new_a_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.d_rresp [2] = 00     // d_rresp
net:   tb.dut.merger3.axi_rd_4_merger.d_rready [1] = 1     // d_rready
net:   tb.dut.merger3.axi_rd_4_merger.d_rlast [1] = 0     // d_rlast
net:   tb.dut.merger3.axi_rd_4_merger.d_rid [4] = 0000     // d_rid
net:   tb.dut.merger3.axi_rd_4_merger.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_full [1] = 0     // d_ids_full
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_empty [1] = 1     // d_ids_empty
net:   tb.dut.merger3.axi_rd_4_merger.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.merger3.axi_rd_4_merger.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.merger3.axi_rd_4_merger.d_arid [4] = 0000     // d_arid
net:   tb.dut.merger3.axi_rd_4_merger.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.merger3.axi_rd_4_merger.d_arburst [2] = 00     // d_arburst
net:   tb.dut.merger3.axi_rd_4_merger.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_full [1] = 0     // d_ar_full
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_empty [1] = 1     // d_ar_empty
net:   tb.dut.merger3.axi_rd_4_merger.d_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.c_rresp [2] = 00     // c_rresp
net:   tb.dut.merger3.axi_rd_4_merger.c_rready [1] = 1     // c_rready
net:   tb.dut.merger3.axi_rd_4_merger.c_rlast [1] = 0     // c_rlast
net:   tb.dut.merger3.axi_rd_4_merger.c_rid [4] = 0000     // c_rid
net:   tb.dut.merger3.axi_rd_4_merger.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_full [1] = 0     // c_ids_full
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_empty [1] = 1     // c_ids_empty
net:   tb.dut.merger3.axi_rd_4_merger.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.merger3.axi_rd_4_merger.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.merger3.axi_rd_4_merger.c_arid [4] = 0000     // c_arid
net:   tb.dut.merger3.axi_rd_4_merger.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.merger3.axi_rd_4_merger.c_arburst [2] = 00     // c_arburst
net:   tb.dut.merger3.axi_rd_4_merger.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_full [1] = 0     // c_ar_full
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_empty [1] = 1     // c_ar_empty
net:   tb.dut.merger3.axi_rd_4_merger.c_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.b_rresp [2] = 00     // b_rresp
net:   tb.dut.merger3.axi_rd_4_merger.b_rready [1] = 1     // b_rready
net:   tb.dut.merger3.axi_rd_4_merger.b_rlast [1] = 0     // b_rlast
net:   tb.dut.merger3.axi_rd_4_merger.b_rid [4] = 0000     // b_rid
net:   tb.dut.merger3.axi_rd_4_merger.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_full [1] = 0     // b_ids_full
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_empty [1] = 1     // b_ids_empty
net:   tb.dut.merger3.axi_rd_4_merger.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.merger3.axi_rd_4_merger.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.merger3.axi_rd_4_merger.b_arid [4] = 0000     // b_arid
net:   tb.dut.merger3.axi_rd_4_merger.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.merger3.axi_rd_4_merger.b_arburst [2] = 00     // b_arburst
net:   tb.dut.merger3.axi_rd_4_merger.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_full [1] = 0     // b_ar_full
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_empty [1] = 1     // b_ar_empty
net:   tb.dut.merger3.axi_rd_4_merger.b_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_ar_entry
net:   tb.dut.merger3.axi_rd_4_merger.arlen [8] = 00000000     // arlen
net:   tb.dut.merger3.axi_rd_4_merger.arid [4] = 0000     // arid
net:   tb.dut.merger3.axi_rd_4_merger.arextras [8] = 00000000     // arextras
net:   tb.dut.merger3.axi_rd_4_merger.arburst [2] = 00     // arburst
net:   tb.dut.merger3.axi_rd_4_merger.araddr [32] = 00000000000000000000000000000000     // araddr
net:   tb.dut.merger3.axi_rd_4_merger.a_rresp [2] = 00     // a_rresp
net:   tb.dut.merger3.axi_rd_4_merger.a_rready [1] = 1     // a_rready
net:   tb.dut.merger3.axi_rd_4_merger.a_rlast [1] = 0     // a_rlast
net:   tb.dut.merger3.axi_rd_4_merger.a_rid [4] = 0000     // a_rid
net:   tb.dut.merger3.axi_rd_4_merger.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_full [1] = 0     // a_ids_full
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_empty [1] = 1     // a_ids_empty
net:   tb.dut.merger3.axi_rd_4_merger.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.merger3.axi_rd_4_merger.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.merger3.axi_rd_4_merger.a_arid [4] = 0000     // a_arid
net:   tb.dut.merger3.axi_rd_4_merger.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.merger3.axi_rd_4_merger.a_arburst [2] = 00     // a_arburst
net:   tb.dut.merger3.axi_rd_4_merger.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_full [1] = 0     // a_ar_full
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_empty [1] = 1     // a_ar_empty
net:   tb.dut.merger3.axi_rd_4_merger.a_active_ar_entry [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_ar_entry
reg:   a_rcount [5] = 00000 // a_rcount
reg:   b_rcount [5] = 00000 // b_rcount
reg:   c_rcount [5] = 00000 // c_rcount
reg:   d_rcount [5] = 00000 // d_rcount
son:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo
son:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo
son:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo
son:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo
son:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo
son:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo
son:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo
son:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo
module: syncfifo tb.dut.merger3.axi_rd_4_merger.a_ar_fifo
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_rd_4_merger.a_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_rd_4_merger.a_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_rd_4_merger.a_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_rd_4_merger.b_ar_fifo
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_rd_4_merger.b_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_rd_4_merger.b_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_rd_4_merger.b_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_rd_4_merger.c_ar_fifo
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_rd_4_merger.c_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_rd_4_merger.c_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_rd_4_merger.c_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_rd_4_merger.d_ar_fifo
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.din [56] = 00000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.dout [56] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_rd_4_merger.d_ar_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_rd_4_merger.d_ids_fifo
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_rd_4_merger.d_ids_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_merger tb.dut.merger3.axi_wr_4_merger
net:   tb.dut.merger3.axi_wr_4_merger.a_bid [4] = 0000     // a_bid
net:   tb.dut.merger3.axi_wr_4_merger.a_bresp [2] = xx     // a_bresp
net:   tb.dut.merger3.axi_wr_4_merger.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.merger3.axi_wr_4_merger.all_idle [1] = 1     // all_idle
net:   tb.dut.merger3.axi_wr_4_merger.awready [1] = 0     // awready
net:   tb.dut.merger3.axi_wr_4_merger.awvalid [1] = 0     // awvalid
net:   tb.dut.merger3.axi_wr_4_merger.b_bid [4] = 0000     // b_bid
net:   tb.dut.merger3.axi_wr_4_merger.b_bresp [2] = xx     // b_bresp
net:   tb.dut.merger3.axi_wr_4_merger.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.merger3.axi_wr_4_merger.bid [4] = xxxx     // bid
net:   tb.dut.merger3.axi_wr_4_merger.bresp [2] = xx     // bresp
net:   tb.dut.merger3.axi_wr_4_merger.burst_end [1] = 0     // burst_end
net:   tb.dut.merger3.axi_wr_4_merger.bvalid [1] = 0     // bvalid
net:   tb.dut.merger3.axi_wr_4_merger.c_bid [4] = 0000     // c_bid
net:   tb.dut.merger3.axi_wr_4_merger.c_bresp [2] = xx     // c_bresp
net:   tb.dut.merger3.axi_wr_4_merger.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.merger3.axi_wr_4_merger.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.d_bid [4] = 0000     // d_bid
net:   tb.dut.merger3.axi_wr_4_merger.d_bresp [2] = xx     // d_bresp
net:   tb.dut.merger3.axi_wr_4_merger.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.merger3.axi_wr_4_merger.eligible_a [1] = 0     // eligible_a
net:   tb.dut.merger3.axi_wr_4_merger.eligible_b [1] = 0     // eligible_b
net:   tb.dut.merger3.axi_wr_4_merger.eligible_c [1] = 0     // eligible_c
net:   tb.dut.merger3.axi_wr_4_merger.eligible_d [1] = 0     // eligible_d
net:   tb.dut.merger3.axi_wr_4_merger.panic_acount [1] = 0     // panic_acount
net:   tb.dut.merger3.axi_wr_4_merger.panic_bcount [1] = 0     // panic_bcount
net:   tb.dut.merger3.axi_wr_4_merger.panic_ccount [1] = 0     // panic_ccount
net:   tb.dut.merger3.axi_wr_4_merger.panic_dcount [1] = 0     // panic_dcount
net:   tb.dut.merger3.axi_wr_4_merger.readout_a_aw_fifo [1] = 0     // readout_a_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_a_win_fifo [1] = 0     // readout_a_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_b_aw_fifo [1] = 0     // readout_b_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_b_win_fifo [1] = 0     // readout_b_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_c_aw_fifo [1] = 0     // readout_c_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_c_win_fifo [1] = 0     // readout_c_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_d_aw_fifo [1] = 0     // readout_d_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.readout_d_win_fifo [1] = 0     // readout_d_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.start_a [1] = 0     // start_a
net:   tb.dut.merger3.axi_wr_4_merger.start_b [1] = 0     // start_b
net:   tb.dut.merger3.axi_wr_4_merger.start_c [1] = 0     // start_c
net:   tb.dut.merger3.axi_wr_4_merger.start_d [1] = 0     // start_d
net:   tb.dut.merger3.axi_wr_4_merger.wready [1] = x     // wready
net:   tb.dut.merger3.axi_wr_4_merger.wvalid [1] = 0     // wvalid
net:   tb.dut.merger3.axi_wr_4_merger.y_bready [1] = 0     // y_bready
net:   tb.dut.merger3.axi_wr_4_merger.y_bid [4] = 0000     // y_bid
net:   tb.dut.merger3.axi_wr_4_merger.x_d_bid [4] = 0000     // x_d_bid
net:   tb.dut.merger3.axi_wr_4_merger.x_c_bid [4] = 0000     // x_c_bid
net:   tb.dut.merger3.axi_wr_4_merger.x_bid [4] = 0000     // x_bid
net:   tb.dut.merger3.axi_wr_4_merger.x_b_bid [4] = 0000     // x_b_bid
net:   tb.dut.merger3.axi_wr_4_merger.x_a_bid [4] = 0000     // x_a_bid
net:   tb.dut.merger3.axi_wr_4_merger.wstrb [8] = 00000000     // wstrb
net:   tb.dut.merger3.axi_wr_4_merger.wlast [1] = 0     // wlast
net:   tb.dut.merger3.axi_wr_4_merger.wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // wdata
net:   tb.dut.merger3.axi_wr_4_merger.panic_readout [1] = 0     // panic_readout
net:   tb.dut.merger3.axi_wr_4_merger.panic_d_b_fifo [1] = 0     // panic_d_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_d_aw_fifo [1] = 0     // panic_d_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_c_b_fifo [1] = 0     // panic_c_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_c_aw_fifo [1] = 0     // panic_c_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_b_out_fifo [1] = 0     // panic_b_out_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_b_b_fifo [1] = 0     // panic_b_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_b_aw_fifo [1] = 0     // panic_b_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_a_b_fifo [1] = 0     // panic_a_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.panic_a_aw_fifo [1] = 0     // panic_a_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.orig_wid [4] = 0000     // orig_wid
net:   tb.dut.merger3.axi_wr_4_merger.new_d_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_d_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.new_c_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_c_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.new_b_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_b_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.new_a_aw_entry [54] = 000000000000000000000000000000000000000000000000000000     // new_a_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.longer_d [1] = x     // longer_d
net:   tb.dut.merger3.axi_wr_4_merger.longer_c [1] = x     // longer_c
net:   tb.dut.merger3.axi_wr_4_merger.longer_b [1] = x     // longer_b
net:   tb.dut.merger3.axi_wr_4_merger.longer_a [1] = x     // longer_a
net:   tb.dut.merger3.axi_wr_4_merger.inbresp [2] = xx     // inbresp
net:   tb.dut.merger3.axi_wr_4_merger.inbid [4] = xxxx     // inbid
net:   tb.dut.merger3.axi_wr_4_merger.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.merger3.axi_wr_4_merger.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.merger3.axi_wr_4_merger.d_wready [1] = 1     // d_wready
net:   tb.dut.merger3.axi_wr_4_merger.d_wlast [1] = 0     // d_wlast
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo_full [1] = 0     // d_win_fifo_full
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo_empty [1] = 1     // d_win_fifo_empty
net:   tb.dut.merger3.axi_wr_4_merger.d_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_wentry
net:   tb.dut.merger3.axi_wr_4_merger.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.merger3.axi_wr_4_merger.d_bready [1] = 1     // d_bready
net:   tb.dut.merger3.axi_wr_4_merger.d_b_full [1] = 0     // d_b_full
net:   tb.dut.merger3.axi_wr_4_merger.d_b_empty [1] = 1     // d_b_empty
net:   tb.dut.merger3.axi_wr_4_merger.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.merger3.axi_wr_4_merger.d_awready [1] = 1     // d_awready
net:   tb.dut.merger3.axi_wr_4_merger.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.merger3.axi_wr_4_merger.d_awid [4] = 0000     // d_awid
net:   tb.dut.merger3.axi_wr_4_merger.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.merger3.axi_wr_4_merger.d_awburst [2] = 00     // d_awburst
net:   tb.dut.merger3.axi_wr_4_merger.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_full [1] = 0     // d_aw_full
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_empty [1] = 1     // d_aw_empty
net:   tb.dut.merger3.axi_wr_4_merger.d_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // d_active_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.merger3.axi_wr_4_merger.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.merger3.axi_wr_4_merger.c_wready [1] = 1     // c_wready
net:   tb.dut.merger3.axi_wr_4_merger.c_wlast [1] = 0     // c_wlast
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo_full [1] = 0     // c_win_fifo_full
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo_empty [1] = 1     // c_win_fifo_empty
net:   tb.dut.merger3.axi_wr_4_merger.c_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_wentry
net:   tb.dut.merger3.axi_wr_4_merger.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.merger3.axi_wr_4_merger.c_bready [1] = 1     // c_bready
net:   tb.dut.merger3.axi_wr_4_merger.c_b_full [1] = 0     // c_b_full
net:   tb.dut.merger3.axi_wr_4_merger.c_b_empty [1] = 1     // c_b_empty
net:   tb.dut.merger3.axi_wr_4_merger.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.merger3.axi_wr_4_merger.c_awready [1] = 1     // c_awready
net:   tb.dut.merger3.axi_wr_4_merger.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.merger3.axi_wr_4_merger.c_awid [4] = 0000     // c_awid
net:   tb.dut.merger3.axi_wr_4_merger.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.merger3.axi_wr_4_merger.c_awburst [2] = 00     // c_awburst
net:   tb.dut.merger3.axi_wr_4_merger.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_full [1] = 0     // c_aw_full
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_empty [1] = 1     // c_aw_empty
net:   tb.dut.merger3.axi_wr_4_merger.c_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // c_active_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.bready [1] = 1     // bready
net:   tb.dut.merger3.axi_wr_4_merger.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.merger3.axi_wr_4_merger.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.merger3.axi_wr_4_merger.b_wready [1] = 1     // b_wready
net:   tb.dut.merger3.axi_wr_4_merger.b_wlast [1] = 0     // b_wlast
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo_full [1] = 0     // b_win_fifo_full
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo_empty [1] = 1     // b_win_fifo_empty
net:   tb.dut.merger3.axi_wr_4_merger.b_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_wentry
net:   tb.dut.merger3.axi_wr_4_merger.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.merger3.axi_wr_4_merger.b_out_full [1] = 0     // b_out_full
net:   tb.dut.merger3.axi_wr_4_merger.b_out_empty [1] = 1     // b_out_empty
net:   tb.dut.merger3.axi_wr_4_merger.b_bready [1] = 1     // b_bready
net:   tb.dut.merger3.axi_wr_4_merger.b_b_full [1] = 0     // b_b_full
net:   tb.dut.merger3.axi_wr_4_merger.b_b_empty [1] = 1     // b_b_empty
net:   tb.dut.merger3.axi_wr_4_merger.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.merger3.axi_wr_4_merger.b_awready [1] = 1     // b_awready
net:   tb.dut.merger3.axi_wr_4_merger.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.merger3.axi_wr_4_merger.b_awid [4] = 0000     // b_awid
net:   tb.dut.merger3.axi_wr_4_merger.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.merger3.axi_wr_4_merger.b_awburst [2] = 00     // b_awburst
net:   tb.dut.merger3.axi_wr_4_merger.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_full [1] = 0     // b_aw_full
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_empty [1] = 1     // b_aw_empty
net:   tb.dut.merger3.axi_wr_4_merger.b_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // b_active_aw_entry
net:   tb.dut.merger3.axi_wr_4_merger.awlen [8] = 00000000     // awlen
net:   tb.dut.merger3.axi_wr_4_merger.awid [4] = 0000     // awid
net:   tb.dut.merger3.axi_wr_4_merger.awextras [8] = 00000000     // awextras
net:   tb.dut.merger3.axi_wr_4_merger.awburst [2] = 00     // awburst
net:   tb.dut.merger3.axi_wr_4_merger.awaddr [32] = 00000000000000000000000000000000     // awaddr
net:   tb.dut.merger3.axi_wr_4_merger.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.merger3.axi_wr_4_merger.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.merger3.axi_wr_4_merger.a_wready [1] = 1     // a_wready
net:   tb.dut.merger3.axi_wr_4_merger.a_wlast [1] = 0     // a_wlast
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo_full [1] = 0     // a_win_fifo_full
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo_empty [1] = 1     // a_win_fifo_empty
net:   tb.dut.merger3.axi_wr_4_merger.a_wentry [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_wentry
net:   tb.dut.merger3.axi_wr_4_merger.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.merger3.axi_wr_4_merger.a_bready [1] = 1     // a_bready
net:   tb.dut.merger3.axi_wr_4_merger.a_b_full [1] = 0     // a_b_full
net:   tb.dut.merger3.axi_wr_4_merger.a_b_empty [1] = 1     // a_b_empty
net:   tb.dut.merger3.axi_wr_4_merger.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.merger3.axi_wr_4_merger.a_awready [1] = 1     // a_awready
net:   tb.dut.merger3.axi_wr_4_merger.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.merger3.axi_wr_4_merger.a_awid [4] = 0000     // a_awid
net:   tb.dut.merger3.axi_wr_4_merger.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.merger3.axi_wr_4_merger.a_awburst [2] = 00     // a_awburst
net:   tb.dut.merger3.axi_wr_4_merger.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_full [1] = 0     // a_aw_full
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_empty [1] = 1     // a_aw_empty
net:   tb.dut.merger3.axi_wr_4_merger.a_active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // a_active_aw_entry
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
reg:   outstanding_ws [5] = 10000 // outstanding_ws
reg:   working_a [1] = 0 // working_a
reg:   working_b [1] = 0 // working_b
reg:   working_c [1] = 0 // working_c
reg:   working_d [1] = 0 // working_d
son:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo
son:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo
son:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo
son:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo
son:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo
son:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo
son:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo
son:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo
son:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo
son:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo
son:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo
son:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo
son:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo
module: syncfifo tb.dut.merger3.axi_wr_4_merger.a_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.a_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_wr_4_merger.a_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_wr_4_merger.a_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.a_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.a_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.b_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.b_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_wr_4_merger.b_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_wr_4_merger.b_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_wr_4_merger.b_out_fifo
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.din [10] = 0000xxxxxx     // din
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.next_rptr [1] = 0     // next_rptr
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.next_count [2] = 00     // next_count
net:   tb.dut.merger3.axi_wr_4_merger.b_out_fifo.full [1] = 0     // full
reg:   count [2] = 00 // count
reg:   dout [10] = 0000xxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.b_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.b_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.c_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.c_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_wr_4_merger.c_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_wr_4_merger.c_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.c_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.c_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.d_aw_fifo
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.din [54] = 000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.d_aw_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.merger3.axi_wr_4_merger.d_b_fifo
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.din [4] = 0000     // din
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.merger3.axi_wr_4_merger.d_b_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [4] = 0000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo tb.dut.merger3.axi_wr_4_merger.d_win_fifo
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.clk [1] = 1     // clk
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.din [73] = 0000000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // dout
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.overflow [1] = 0     // overflow
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.readout [1] = 0     // readout
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.softreset [1] = 0     // softreset
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.vldin [1] = 0     // vldin
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.full [1] = 0     // full
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.empty [1] = 1     // empty
net:   tb.dut.merger3.axi_wr_4_merger.d_win_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: axi_4_splitter tb.dut.splitter0
net:   tb.dut.splitter0.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter0.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter0.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter0.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter0.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter0.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter0.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter0.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter0.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter0.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter0.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter0.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter0.arburst [2] = xx     // arburst
net:   tb.dut.splitter0.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter0.arid [4] = xxxx     // arid
net:   tb.dut.splitter0.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter0.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter0.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter0.awburst [2] = xx     // awburst
net:   tb.dut.splitter0.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter0.awid [4] = xxxx     // awid
net:   tb.dut.splitter0.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter0.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter0.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter0.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter0.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter0.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter0.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter0.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter0.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter0.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter0.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter0.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter0.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter0.bready [1] = 0     // bready
net:   tb.dut.splitter0.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter0.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter0.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter0.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter0.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter0.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter0.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter0.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter0.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter0.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter0.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter0.clk [1] = 1     // clk
net:   tb.dut.splitter0.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter0.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter0.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter0.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter0.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter0.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter0.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter0.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter0.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter0.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter0.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter0.rready [1] = 0     // rready
net:   tb.dut.splitter0.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter0.wlast [1] = x     // wlast
net:   tb.dut.splitter0.wready [1] = 1     // wready
net:   tb.dut.splitter0.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter0.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter0.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter0.rresp [2] = 00     // rresp
net:   tb.dut.splitter0.rlast [1] = 0     // rlast
net:   tb.dut.splitter0.rid [4] = 0000     // rid
net:   tb.dut.splitter0.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter0.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter0.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter0.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter0.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter0.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter0.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter0.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter0.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter0.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter0.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter0.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter0.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter0.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter0.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter0.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter0.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter0.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter0.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter0.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter0.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter0.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter0.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter0.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter0.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter0.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter0.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter0.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter0.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter0.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter0.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter0.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter0.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter0.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter0.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter0.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter0.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter0.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter0.bresp [2] = 00     // bresp
net:   tb.dut.splitter0.bid [4] = 0000     // bid
net:   tb.dut.splitter0.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter0.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter0.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter0.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter0.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter0.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter0.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter0.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter0.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter0.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter0.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter0.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter0.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter0.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter0.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter0.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter0.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter0.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter0.awready [1] = 1     // awready
net:   tb.dut.splitter0.arready [1] = 1     // arready
net:   tb.dut.splitter0.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter0.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter0.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter0.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter0.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter0.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter0.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter0.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter0.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter0.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter0.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter0.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.splitter0.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter0.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter0.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter0.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter0.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter0.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter0.axi_rd_4_splitter
son:   tb.dut.splitter0.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.splitter0.axi_rd_4_splitter
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter0.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter0.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.splitter0.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter0.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter0.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter0.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter0.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter0.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter0.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.splitter0.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.splitter0.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.splitter0.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.splitter0.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.splitter0.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.splitter0.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.splitter0.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.splitter0.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter0.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.splitter0.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.splitter0.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.splitter0.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter0.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.splitter0.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.splitter0.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.splitter0.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.splitter0.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.splitter0.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // new_ar_entry
net:   tb.dut.splitter0.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter0.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter0.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter0.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter0.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter0.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter0.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.splitter0.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.splitter0.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.splitter0.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter0.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo
son:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.splitter0.axi_rd_4_splitter.ar_fifo
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // din
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter0.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter0.axi_rd_4_splitter.r_fifo
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter0.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.splitter0.axi_wr_4_splitter
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.splitter0.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter0.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter0.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.splitter0.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter0.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter0.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter0.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter0.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter0.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter0.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.splitter0.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.splitter0.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.splitter0.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.splitter0.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.splitter0.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.splitter0.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.splitter0.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.splitter0.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter0.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter0.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter0.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.splitter0.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.splitter0.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.splitter0.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.splitter0.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter0.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.splitter0.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.splitter0.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter0.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter0.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter0.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter0.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo
son:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.splitter0.axi_wr_4_splitter.aw_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter0.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter0.axi_wr_4_splitter.b_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter0.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter0.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.splitter0.axi_wr_4_splitter.order_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter0.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.splitter0.axi_wr_4_splitter.w_fifo
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter0.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.splitter1
net:   tb.dut.splitter1.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter1.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter1.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter1.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter1.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter1.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter1.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter1.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter1.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter1.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter1.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter1.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter1.arburst [2] = xx     // arburst
net:   tb.dut.splitter1.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter1.arid [4] = xxxx     // arid
net:   tb.dut.splitter1.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter1.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter1.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter1.awburst [2] = xx     // awburst
net:   tb.dut.splitter1.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter1.awid [4] = xxxx     // awid
net:   tb.dut.splitter1.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter1.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter1.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter1.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter1.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter1.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter1.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter1.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter1.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter1.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter1.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter1.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter1.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter1.bready [1] = 0     // bready
net:   tb.dut.splitter1.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter1.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter1.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter1.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter1.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter1.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter1.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter1.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter1.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter1.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter1.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter1.clk [1] = 1     // clk
net:   tb.dut.splitter1.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter1.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter1.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter1.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter1.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter1.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter1.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter1.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter1.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter1.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter1.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter1.rready [1] = 0     // rready
net:   tb.dut.splitter1.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter1.wlast [1] = x     // wlast
net:   tb.dut.splitter1.wready [1] = 1     // wready
net:   tb.dut.splitter1.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter1.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter1.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter1.rresp [2] = 00     // rresp
net:   tb.dut.splitter1.rlast [1] = 0     // rlast
net:   tb.dut.splitter1.rid [4] = 0000     // rid
net:   tb.dut.splitter1.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter1.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter1.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter1.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter1.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter1.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter1.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter1.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter1.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter1.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter1.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter1.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter1.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter1.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter1.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter1.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter1.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter1.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter1.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter1.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter1.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter1.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter1.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter1.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter1.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter1.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter1.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter1.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter1.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter1.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter1.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter1.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter1.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter1.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter1.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter1.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter1.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter1.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter1.bresp [2] = 00     // bresp
net:   tb.dut.splitter1.bid [4] = 0000     // bid
net:   tb.dut.splitter1.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter1.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter1.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter1.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter1.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter1.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter1.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter1.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter1.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter1.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter1.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter1.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter1.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter1.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter1.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter1.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter1.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter1.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter1.awready [1] = 1     // awready
net:   tb.dut.splitter1.arready [1] = 1     // arready
net:   tb.dut.splitter1.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter1.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter1.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter1.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter1.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter1.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter1.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter1.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter1.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter1.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter1.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter1.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.splitter1.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter1.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter1.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter1.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter1.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter1.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter1.axi_rd_4_splitter
son:   tb.dut.splitter1.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.splitter1.axi_rd_4_splitter
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter1.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter1.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.splitter1.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter1.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter1.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter1.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter1.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter1.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter1.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.splitter1.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.splitter1.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.splitter1.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.splitter1.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.splitter1.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.splitter1.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.splitter1.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.splitter1.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter1.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.splitter1.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.splitter1.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.splitter1.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter1.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.splitter1.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.splitter1.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.splitter1.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.splitter1.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.splitter1.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // new_ar_entry
net:   tb.dut.splitter1.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter1.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter1.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter1.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter1.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter1.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter1.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.splitter1.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.splitter1.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.splitter1.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter1.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo
son:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.splitter1.axi_rd_4_splitter.ar_fifo
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // din
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter1.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter1.axi_rd_4_splitter.r_fifo
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter1.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.splitter1.axi_wr_4_splitter
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.splitter1.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter1.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter1.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.splitter1.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter1.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter1.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter1.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter1.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter1.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter1.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.splitter1.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.splitter1.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.splitter1.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.splitter1.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.splitter1.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.splitter1.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.splitter1.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.splitter1.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter1.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter1.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter1.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.splitter1.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.splitter1.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.splitter1.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.splitter1.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter1.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.splitter1.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.splitter1.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter1.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter1.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter1.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter1.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo
son:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.splitter1.axi_wr_4_splitter.aw_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter1.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter1.axi_wr_4_splitter.b_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter1.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter1.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.splitter1.axi_wr_4_splitter.order_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter1.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.splitter1.axi_wr_4_splitter.w_fifo
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter1.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.splitter2
net:   tb.dut.splitter2.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter2.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter2.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter2.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter2.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter2.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter2.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter2.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter2.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter2.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter2.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter2.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter2.arburst [2] = xx     // arburst
net:   tb.dut.splitter2.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter2.arid [4] = xxxx     // arid
net:   tb.dut.splitter2.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter2.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter2.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter2.awburst [2] = xx     // awburst
net:   tb.dut.splitter2.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter2.awid [4] = xxxx     // awid
net:   tb.dut.splitter2.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter2.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter2.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter2.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter2.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter2.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter2.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter2.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter2.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter2.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter2.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter2.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter2.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter2.bready [1] = 0     // bready
net:   tb.dut.splitter2.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter2.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter2.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter2.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter2.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter2.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter2.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter2.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter2.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter2.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter2.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter2.clk [1] = 1     // clk
net:   tb.dut.splitter2.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter2.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter2.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter2.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter2.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter2.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter2.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter2.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter2.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter2.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter2.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter2.rready [1] = 0     // rready
net:   tb.dut.splitter2.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter2.wlast [1] = x     // wlast
net:   tb.dut.splitter2.wready [1] = 1     // wready
net:   tb.dut.splitter2.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter2.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter2.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter2.rresp [2] = 00     // rresp
net:   tb.dut.splitter2.rlast [1] = 0     // rlast
net:   tb.dut.splitter2.rid [4] = 0000     // rid
net:   tb.dut.splitter2.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter2.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter2.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter2.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter2.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter2.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter2.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter2.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter2.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter2.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter2.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter2.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter2.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter2.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter2.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter2.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter2.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter2.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter2.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter2.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter2.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter2.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter2.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter2.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter2.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter2.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter2.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter2.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter2.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter2.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter2.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter2.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter2.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter2.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter2.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter2.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter2.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter2.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter2.bresp [2] = 00     // bresp
net:   tb.dut.splitter2.bid [4] = 0000     // bid
net:   tb.dut.splitter2.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter2.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter2.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter2.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter2.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter2.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter2.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter2.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter2.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter2.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter2.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter2.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter2.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter2.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter2.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter2.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter2.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter2.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter2.awready [1] = 1     // awready
net:   tb.dut.splitter2.arready [1] = 1     // arready
net:   tb.dut.splitter2.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter2.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter2.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter2.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter2.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter2.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter2.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter2.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter2.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter2.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter2.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter2.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.splitter2.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter2.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter2.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter2.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter2.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter2.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter2.axi_rd_4_splitter
son:   tb.dut.splitter2.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.splitter2.axi_rd_4_splitter
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter2.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter2.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.splitter2.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter2.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter2.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter2.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter2.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter2.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter2.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.splitter2.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.splitter2.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.splitter2.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.splitter2.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.splitter2.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.splitter2.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.splitter2.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.splitter2.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter2.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.splitter2.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.splitter2.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.splitter2.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter2.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.splitter2.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.splitter2.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.splitter2.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.splitter2.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.splitter2.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // new_ar_entry
net:   tb.dut.splitter2.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter2.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter2.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter2.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter2.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter2.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter2.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.splitter2.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.splitter2.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.splitter2.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter2.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo
son:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.splitter2.axi_rd_4_splitter.ar_fifo
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // din
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter2.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter2.axi_rd_4_splitter.r_fifo
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter2.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.splitter2.axi_wr_4_splitter
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.splitter2.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter2.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter2.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.splitter2.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter2.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter2.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter2.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter2.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter2.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter2.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.splitter2.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.splitter2.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.splitter2.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.splitter2.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.splitter2.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.splitter2.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.splitter2.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.splitter2.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter2.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter2.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter2.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.splitter2.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.splitter2.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.splitter2.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.splitter2.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter2.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.splitter2.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.splitter2.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter2.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter2.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter2.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter2.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo
son:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.splitter2.axi_wr_4_splitter.aw_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter2.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter2.axi_wr_4_splitter.b_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter2.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter2.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.splitter2.axi_wr_4_splitter.order_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter2.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.splitter2.axi_wr_4_splitter.w_fifo
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter2.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_4_splitter tb.dut.splitter3
net:   tb.dut.splitter3.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter3.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter3.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter3.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter3.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter3.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter3.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter3.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter3.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter3.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter3.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter3.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter3.arburst [2] = xx     // arburst
net:   tb.dut.splitter3.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter3.arid [4] = xxxx     // arid
net:   tb.dut.splitter3.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter3.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter3.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter3.awburst [2] = xx     // awburst
net:   tb.dut.splitter3.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter3.awid [4] = xxxx     // awid
net:   tb.dut.splitter3.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter3.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter3.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter3.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter3.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter3.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter3.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter3.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter3.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter3.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter3.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter3.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter3.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter3.bready [1] = 0     // bready
net:   tb.dut.splitter3.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter3.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter3.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter3.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter3.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter3.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter3.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter3.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter3.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter3.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter3.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter3.clk [1] = 1     // clk
net:   tb.dut.splitter3.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter3.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter3.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter3.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter3.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter3.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter3.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter3.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter3.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter3.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter3.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter3.rready [1] = 0     // rready
net:   tb.dut.splitter3.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter3.wlast [1] = x     // wlast
net:   tb.dut.splitter3.wready [1] = 1     // wready
net:   tb.dut.splitter3.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter3.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter3.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter3.rresp [2] = 00     // rresp
net:   tb.dut.splitter3.rlast [1] = 0     // rlast
net:   tb.dut.splitter3.rid [4] = 0000     // rid
net:   tb.dut.splitter3.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter3.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter3.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter3.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter3.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter3.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter3.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter3.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter3.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter3.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter3.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter3.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter3.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter3.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter3.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter3.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter3.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter3.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter3.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter3.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter3.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter3.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter3.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter3.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter3.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter3.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter3.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter3.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter3.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter3.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter3.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter3.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter3.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter3.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter3.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter3.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter3.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter3.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter3.bresp [2] = 00     // bresp
net:   tb.dut.splitter3.bid [4] = 0000     // bid
net:   tb.dut.splitter3.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter3.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter3.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter3.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter3.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter3.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter3.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter3.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter3.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter3.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter3.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter3.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter3.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter3.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter3.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter3.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter3.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter3.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter3.awready [1] = 1     // awready
net:   tb.dut.splitter3.arready [1] = 1     // arready
net:   tb.dut.splitter3.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter3.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter3.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter3.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter3.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter3.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter3.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter3.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter3.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter3.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter3.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter3.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
net:   tb.dut.splitter3.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter3.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter3.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter3.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter3.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter3.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter3.axi_rd_4_splitter
son:   tb.dut.splitter3.axi_wr_4_splitter
module: axi_rd_4_splitter tb.dut.splitter3.axi_rd_4_splitter
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arburst [2] = 00     // a_arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arextras [8] = 00000000     // a_arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arid [4] = 0000     // a_arid
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arlen [8] = 00000000     // a_arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arready [1] = 1     // a_arready
net:   tb.dut.splitter3.axi_rd_4_splitter.a_arvalid [1] = 0     // a_arvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_rdata
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rid [4] = 0000     // a_rid
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rlast [1] = 0     // a_rlast
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rresp [2] = 00     // a_rresp
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rvalid [1] = 0     // a_rvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.araddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // araddr
net:   tb.dut.splitter3.axi_rd_4_splitter.arburst [2] = xx     // arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.arextras [8] = 00000000     // arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.arid [4] = xxxx     // arid
net:   tb.dut.splitter3.axi_rd_4_splitter.arlen [8] = xxxxxxxx     // arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.arvalid [1] = 0     // arvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arburst [2] = 00     // b_arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arextras [8] = 00000000     // b_arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arid [4] = 0000     // b_arid
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arlen [8] = 00000000     // b_arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arready [1] = 1     // b_arready
net:   tb.dut.splitter3.axi_rd_4_splitter.b_arvalid [1] = 0     // b_arvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_rdata
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rid [4] = 0000     // b_rid
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rlast [1] = 0     // b_rlast
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rready [1] = 1     // b_rready
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rresp [2] = 00     // b_rresp
net:   tb.dut.splitter3.axi_rd_4_splitter.b_rvalid [1] = 0     // b_rvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arburst [2] = 00     // c_arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arextras [8] = 00000000     // c_arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arid [4] = 0000     // c_arid
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arlen [8] = 00000000     // c_arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arready [1] = 1     // c_arready
net:   tb.dut.splitter3.axi_rd_4_splitter.c_arvalid [1] = 0     // c_arvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_rdata
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rid [4] = 0000     // c_rid
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rlast [1] = 0     // c_rlast
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rready [1] = 1     // c_rready
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rresp [2] = 00     // c_rresp
net:   tb.dut.splitter3.axi_rd_4_splitter.c_rvalid [1] = 0     // c_rvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arburst [2] = 00     // d_arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arextras [8] = 00000000     // d_arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arid [4] = 0000     // d_arid
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arlen [8] = 00000000     // d_arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arready [1] = 1     // d_arready
net:   tb.dut.splitter3.axi_rd_4_splitter.d_arvalid [1] = 0     // d_arvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_rdata
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rid [4] = 0000     // d_rid
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rlast [1] = 0     // d_rlast
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rready [1] = 1     // d_rready
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rresp [2] = 00     // d_rresp
net:   tb.dut.splitter3.axi_rd_4_splitter.d_rvalid [1] = 0     // d_rvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.r_vldin [1] = 0     // r_vldin
net:   tb.dut.splitter3.axi_rd_4_splitter.readout_ar_fifo [1] = 0     // readout_ar_fifo
net:   tb.dut.splitter3.axi_rd_4_splitter.rready [1] = 0     // rready
net:   tb.dut.splitter3.axi_rd_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_rd_4_splitter.work_arlen [8] = 00000000     // work_arlen
net:   tb.dut.splitter3.axi_rd_4_splitter.work_arid [4] = 0000     // work_arid
net:   tb.dut.splitter3.axi_rd_4_splitter.work_arextras [8] = 00000000     // work_arextras
net:   tb.dut.splitter3.axi_rd_4_splitter.work_arburst [2] = 00     // work_arburst
net:   tb.dut.splitter3.axi_rd_4_splitter.work_araddr [32] = 00000000000000000000000000000000     // work_araddr
net:   tb.dut.splitter3.axi_rd_4_splitter.rvalid [1] = 0     // rvalid
net:   tb.dut.splitter3.axi_rd_4_splitter.rresp [2] = 00     // rresp
net:   tb.dut.splitter3.axi_rd_4_splitter.rlast [1] = 0     // rlast
net:   tb.dut.splitter3.axi_rd_4_splitter.rid [4] = 0000     // rid
net:   tb.dut.splitter3.axi_rd_4_splitter.rdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // rdata
net:   tb.dut.splitter3.axi_rd_4_splitter.r_new_entry [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // r_new_entry
net:   tb.dut.splitter3.axi_rd_4_splitter.r_full [1] = 0     // r_full
net:   tb.dut.splitter3.axi_rd_4_splitter.r_empty [1] = 1     // r_empty
net:   tb.dut.splitter3.axi_rd_4_splitter.panic_r_fifo [1] = 0     // panic_r_fifo
net:   tb.dut.splitter3.axi_rd_4_splitter.panic_ar_fifo [1] = 0     // panic_ar_fifo
net:   tb.dut.splitter3.axi_rd_4_splitter.new_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // new_ar_entry
net:   tb.dut.splitter3.axi_rd_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter3.axi_rd_4_splitter.d_araddr [32] = 00000000000000000000000000000000     // d_araddr
net:   tb.dut.splitter3.axi_rd_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter3.axi_rd_4_splitter.c_araddr [32] = 00000000000000000000000000000000     // c_araddr
net:   tb.dut.splitter3.axi_rd_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter3.axi_rd_4_splitter.b_araddr [32] = 00000000000000000000000000000000     // b_araddr
net:   tb.dut.splitter3.axi_rd_4_splitter.arready [1] = 1     // arready
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_full [1] = 0     // ar_full
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_empty [1] = 1     // ar_empty
net:   tb.dut.splitter3.axi_rd_4_splitter.active_ar_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_ar_entry
net:   tb.dut.splitter3.axi_rd_4_splitter.a_start [1] = 1     // a_start
net:   tb.dut.splitter3.axi_rd_4_splitter.a_rready [1] = 1     // a_rready
net:   tb.dut.splitter3.axi_rd_4_splitter.a_araddr [32] = 00000000000000000000000000000000     // a_araddr
son:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo
son:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo
module: syncfifo_sampled tb.dut.splitter3.axi_rd_4_splitter.ar_fifo
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.din [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx00000000xx     // din
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter3.axi_rd_4_splitter.ar_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter3.axi_rd_4_splitter.r_fifo
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.din [71] = 00000000000000000000000000000000000000000000000000000000000000000000000     // din
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter3.axi_rd_4_splitter.r_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [71] = 00000000000000000000000000000000000000000000000000000000000000000000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: axi_wr_4_splitter tb.dut.splitter3.axi_wr_4_splitter
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awready [1] = 1     // a_awready
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awvalid [1] = 0     // a_awvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.a_bid [4] = 0000     // a_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.a_bresp [2] = xx     // a_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.a_bvalid [1] = 0     // a_bvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.a_start [1] = 0     // a_start
net:   tb.dut.splitter3.axi_wr_4_splitter.a_wready [1] = 1     // a_wready
net:   tb.dut.splitter3.axi_wr_4_splitter.a_wvalid [1] = 0     // a_wvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // awaddr
net:   tb.dut.splitter3.axi_wr_4_splitter.awburst [2] = xx     // awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.awextras [8] = 00000000     // awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.awid [4] = xxxx     // awid
net:   tb.dut.splitter3.axi_wr_4_splitter.awlen [8] = xxxxxxxx     // awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.awvalid [1] = 0     // awvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awready [1] = 1     // b_awready
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awvalid [1] = 0     // b_awvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.b_bid [4] = 0000     // b_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.b_bresp [2] = xx     // b_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.b_bvalid [1] = 0     // b_bvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.b_start [1] = 0     // b_start
net:   tb.dut.splitter3.axi_wr_4_splitter.b_vldin [1] = 0     // b_vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.b_wready [1] = 1     // b_wready
net:   tb.dut.splitter3.axi_wr_4_splitter.b_wvalid [1] = 0     // b_wvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.bready [1] = 0     // bready
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awready [1] = 1     // c_awready
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awvalid [1] = 0     // c_awvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.c_bid [4] = 0000     // c_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.c_bresp [2] = xx     // c_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.c_bvalid [1] = 0     // c_bvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.c_start [1] = 0     // c_start
net:   tb.dut.splitter3.axi_wr_4_splitter.c_wready [1] = 1     // c_wready
net:   tb.dut.splitter3.axi_wr_4_splitter.c_wvalid [1] = 0     // c_wvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awready [1] = 1     // d_awready
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awvalid [1] = 0     // d_awvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.d_bid [4] = 0000     // d_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.d_bresp [2] = xx     // d_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.d_bvalid [1] = 0     // d_bvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.d_start [1] = 0     // d_start
net:   tb.dut.splitter3.axi_wr_4_splitter.d_wready [1] = 1     // d_wready
net:   tb.dut.splitter3.axi_wr_4_splitter.d_wvalid [1] = 0     // d_wvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.finished_transaction [1] = 0     // finished_transaction
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_aw_fifo [1] = 0     // readout_aw_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_back_bid_a_fifo [1] = 0     // readout_back_bid_a_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_back_bid_b_fifo [1] = 0     // readout_back_bid_b_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_back_bid_c_fifo [1] = 0     // readout_back_bid_c_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_back_bid_d_fifo [1] = 0     // readout_back_bid_d_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.readout_w_fifo [1] = 0     // readout_w_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.wlast [1] = x     // wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.wready [1] = 1     // wready
net:   tb.dut.splitter3.axi_wr_4_splitter.wstrb [8] = xxxxxxxx     // wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.wvalid [1] = 0     // wvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.x_d_bresp [2] = xx     // x_d_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.x_d_bid [4] = xxxx     // x_d_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.x_c_bresp [2] = xx     // x_c_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.x_c_bid [4] = xxxx     // x_c_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.x_b_bresp [2] = xx     // x_b_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.x_b_bid [4] = xxxx     // x_b_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.x_a_bresp [2] = xx     // x_a_bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.x_a_bid [4] = xxxx     // x_a_bid
net:   tb.dut.splitter3.axi_wr_4_splitter.work_wstrb [8] = xxxxxxxx     // work_wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.work_wlast [1] = x     // work_wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.work_wdata [64] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.work_awlen [8] = xxxxxxxx     // work_awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.work_awid [4] = xxxx     // work_awid
net:   tb.dut.splitter3.axi_wr_4_splitter.work_awextras [8] = xxxxxxxx     // work_awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.work_awburst [2] = xx     // work_awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.work_awaddr [32] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // work_awaddr
net:   tb.dut.splitter3.axi_wr_4_splitter.whosnow [3] = 000     // whosnow
net:   tb.dut.splitter3.axi_wr_4_splitter.whosnext [3] = 000     // whosnext
net:   tb.dut.splitter3.axi_wr_4_splitter.w_full [1] = 0     // w_full
net:   tb.dut.splitter3.axi_wr_4_splitter.w_empty [1] = 1     // w_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.panic_w_fifo [1] = 0     // panic_w_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.panic_order_fifo [1] = 0     // panic_order_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.panic_b_fifo [1] = 0     // panic_b_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.panic_aw_fifo [1] = 0     // panic_aw_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo_full [1] = 0     // order_fifo_full
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo_empty [1] = 1     // order_fifo_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.new_aw_entry [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // new_aw_entry
net:   tb.dut.splitter3.axi_wr_4_splitter.d_wstrb [8] = 00000000     // d_wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.d_wlast [1] = 0     // d_wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.d_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // d_wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.d_bready [1] = 1     // d_bready
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awlen [8] = 00000000     // d_awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awid [4] = 0000     // d_awid
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awextras [8] = 00000000     // d_awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awburst [2] = 00     // d_awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.d_awaddr [32] = 00000000000000000000000000000000     // d_awaddr
net:   tb.dut.splitter3.axi_wr_4_splitter.c_wstrb [8] = 00000000     // c_wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.c_wlast [1] = 0     // c_wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.c_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // c_wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.c_bready [1] = 1     // c_bready
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awlen [8] = 00000000     // c_awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awid [4] = 0000     // c_awid
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awextras [8] = 00000000     // c_awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awburst [2] = 00     // c_awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.c_awaddr [32] = 00000000000000000000000000000000     // c_awaddr
net:   tb.dut.splitter3.axi_wr_4_splitter.bvalid [1] = 0     // bvalid
net:   tb.dut.splitter3.axi_wr_4_splitter.bresp [2] = 00     // bresp
net:   tb.dut.splitter3.axi_wr_4_splitter.bowner [2] = 00     // bowner
net:   tb.dut.splitter3.axi_wr_4_splitter.bid [4] = 0000     // bid
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo_full [1] = 0     // back_bid_d_fifo_full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo_empty [1] = 1     // back_bid_d_fifo_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo_full [1] = 0     // back_bid_c_fifo_full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo_empty [1] = 1     // back_bid_c_fifo_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo_full [1] = 0     // back_bid_b_fifo_full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo_empty [1] = 1     // back_bid_b_fifo_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo_full [1] = 0     // back_bid_a_fifo_full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo_empty [1] = 1     // back_bid_a_fifo_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.b_wstrb [8] = 00000000     // b_wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.b_wlast [1] = 0     // b_wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.b_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // b_wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.b_full [1] = 0     // b_full
net:   tb.dut.splitter3.axi_wr_4_splitter.b_entry [8] = 00000000     // b_entry
net:   tb.dut.splitter3.axi_wr_4_splitter.b_empty [1] = 1     // b_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.b_bready [1] = 1     // b_bready
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awlen [8] = 00000000     // b_awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awid [4] = 0000     // b_awid
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awextras [8] = 00000000     // b_awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awburst [2] = 00     // b_awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.b_awaddr [32] = 00000000000000000000000000000000     // b_awaddr
net:   tb.dut.splitter3.axi_wr_4_splitter.awready [1] = 1     // awready
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_full [1] = 0     // aw_full
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_empty [1] = 1     // aw_empty
net:   tb.dut.splitter3.axi_wr_4_splitter.active_aw_entry [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // active_aw_entry
net:   tb.dut.splitter3.axi_wr_4_splitter.a_wstrb [8] = 00000000     // a_wstrb
net:   tb.dut.splitter3.axi_wr_4_splitter.a_wlast [1] = 0     // a_wlast
net:   tb.dut.splitter3.axi_wr_4_splitter.a_wdata [64] = 0000000000000000000000000000000000000000000000000000000000000000     // a_wdata
net:   tb.dut.splitter3.axi_wr_4_splitter.a_bready [1] = 1     // a_bready
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awlen [8] = 00000000     // a_awlen
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awid [4] = 0000     // a_awid
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awextras [8] = 00000000     // a_awextras
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awburst [2] = 00     // a_awburst
net:   tb.dut.splitter3.axi_wr_4_splitter.a_awaddr [32] = 00000000000000000000000000000000     // a_awaddr
reg:   a_bcount [8] = 00000000 // a_bcount
reg:   b_bcount [8] = 00000000 // b_bcount
reg:   c_bcount [8] = 00000000 // c_bcount
reg:   d_bcount [8] = 00000000 // d_bcount
son:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo
son:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo
module: syncfifo_sampled tb.dut.splitter3.axi_wr_4_splitter.aw_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.din [54] = xxxxxxxxxxxx00000000xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter3.axi_wr_4_splitter.aw_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [54] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo_sampled tb.dut.splitter3.axi_wr_4_splitter.b_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.din [8] = 00000000     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.next_rptr [2] = 00     // next_rptr
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.next_count [3] = 000     // next_count
net:   tb.dut.splitter3.axi_wr_4_splitter.b_fifo.full [1] = 0     // full
reg:   count [3] = 000 // count
reg:   dout [8] = 00000000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [2] = 00 // rptr
reg:   wptr [2] = 00 // wptr
module: syncfifo tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.full [1] = 0     // full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_a_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.full [1] = 0     // full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_b_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.full [1] = 0     // full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_c_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.din [6] = 0000xx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.dout [6] = xxxxxx     // dout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.panic_in [1] = 0     // panic_in
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.panic_out [1] = 0     // panic_out
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.full [1] = 0     // full
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.empty [1] = 1     // empty
net:   tb.dut.splitter3.axi_wr_4_splitter.back_bid_d_fifo.count [16] = 0000000000000000     // count
reg:   int_count [2] = 00 // int_count
reg:   rptr [1] = 0 // rptr
reg:   wptr [1] = 0 // wptr
module: syncfifo_sampled tb.dut.splitter3.axi_wr_4_splitter.order_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.din [3] = 000     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter3.axi_wr_4_splitter.order_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [3] = 000 // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
module: syncfifo_sampled tb.dut.splitter3.axi_wr_4_splitter.w_fifo
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.clk [1] = 1     // clk
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.din [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx     // din
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.overflow [1] = 0     // overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.panic_overflow [1] = 0     // panic_overflow
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.panic_underflow [1] = 0     // panic_underflow
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.readout [1] = 0     // readout
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.rst_n [1] = 1     // rst_n
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.softreset [1] = 0     // softreset
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.vldin [1] = 0     // vldin
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.next_rptr [3] = 000     // next_rptr
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.next_count [4] = 0000     // next_count
net:   tb.dut.splitter3.axi_wr_4_splitter.w_fifo.full [1] = 0     // full
reg:   count [4] = 0000 // count
reg:   dout [73] = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx // dout
reg:   empty [1] = 1 // empty
reg:   rptr [3] = 000 // rptr
reg:   wptr [3] = 000 // wptr
